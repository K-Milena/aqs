
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800cbc8  0800cbc8  0000dbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d29c  0800d29c  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d29c  0800d29c  0000e29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2a4  0800d2a4  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a4  0800d2a4  0000e2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2a8  0800d2a8  0000e2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800d2ac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001f4  0800d4a0  0000f1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800d4a0  0000f5f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017599  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a0  00000000  00000000  000267bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00029a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114c  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8e4  00000000  00000000  0002c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bafc  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a10b5  00000000  00000000  0006258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075ec  00000000  00000000  00103684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbb0 	.word	0x0800cbb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800cbb0 	.word	0x0800cbb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f002 f8bd 	bl	80030b0 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000025c 	.word	0x2000025c

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	214e      	movs	r1, #78	@ 0x4e
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f002 f88d 	bl	80030b0 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000025c 	.word	0x2000025c

08000fa4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fa8:	2032      	movs	r0, #50	@ 0x32
 8000faa:	f000 ffb3 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fae:	2030      	movs	r0, #48	@ 0x30
 8000fb0:	f7ff ff98 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f000 ffad 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fba:	2030      	movs	r0, #48	@ 0x30
 8000fbc:	f7ff ff92 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f000 ffa7 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc6:	2030      	movs	r0, #48	@ 0x30
 8000fc8:	f7ff ff8c 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 ffa1 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f7ff ff86 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f000 ff9b 	bl	8001f14 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f7ff ff80 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 ff95 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff7a 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 ff8f 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff74 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 ff89 	bl	8001f14 <HAL_Delay>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 ff86 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001008:	2006      	movs	r0, #6
 800100a:	f7ff ff6b 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 ff80 	bl	8001f14 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001014:	200c      	movs	r0, #12
 8001016:	f7ff ff65 	bl	8000ee4 <lcd_send_cmd>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001026:	e006      	b.n	8001036 <lcd_send_string+0x18>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff87 	bl	8000f44 <lcd_send_data>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f4      	bne.n	8001028 <lcd_send_string+0xa>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Read_MQ135>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t Read_MQ135() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001052:	480b      	ldr	r0, [pc, #44]	@ (8001080 <Read_MQ135+0x38>)
 8001054:	f000 ffc6 	bl	8001fe4 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001058:	210a      	movs	r1, #10
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Read_MQ135+0x38>)
 800105c:	f001 f8a9 	bl	80021b2 <HAL_ADC_PollForConversion>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Read_MQ135+0x38>)
 8001068:	f001 f92e 	bl	80022c8 <HAL_ADC_GetValue>
 800106c:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <Read_MQ135+0x38>)
 8001070:	f001 f86c 	bl	800214c <HAL_ADC_Stop>
    return adc_value;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000214 	.word	0x20000214

08001084 <update_measurement>:

void update_measurement(MQ135_Data *data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    data->voltage = (Read_MQ135() * 2.97f) / 4095.0f;	// obliczenie napięcia 2.97 V VrefADC - voltomierz
 800108c:	f7ff ffdc 	bl	8001048 <Read_MQ135>
 8001090:	ee07 0a90 	vmov	s15, r0
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800117c <update_measurement+0xf8>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001180 <update_measurement+0xfc>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a00 	vstr	s15, [r3]
    data->Rs = ((5.0f - data->voltage) / data->voltage) * 10.0f;  // R_load = 10 kΩ - zmierzone omomierzem, 5V - Vcc
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edc3 7a01 	vstr	s15, [r3, #4]
    data->ppm = 116.602f * powf((data->Rs / R0), -2.769f);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001184 <update_measurement+0x100>
 80010de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e2:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001188 <update_measurement+0x104>
 80010e6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ea:	f008 fa98 	bl	800961e <powf>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800118c <update_measurement+0x108>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edc3 7a02 	vstr	s15, [r3, #8]

    // ograniczenie GCI do 20000
    if (data->ppm > 20000) data->ppm = 20000;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a02 	vldr	s15, [r3, #8]
 8001106:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001190 <update_measurement+0x10c>
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd02      	ble.n	800111a <update_measurement+0x96>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <update_measurement+0x110>)
 8001118:	609a      	str	r2, [r3, #8]

    // klasyfikacja jakosci powietrza
    if (data->ppm < 700) data->air_quality_level = 0;       // :D Great
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001198 <update_measurement+0x114>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d503      	bpl.n	8001136 <update_measurement+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	731a      	strb	r2, [r3, #12]
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
    else data->air_quality_level = 3;                       // :(	Bad
}
 8001134:	e01e      	b.n	8001174 <update_measurement+0xf0>
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a02 	vldr	s15, [r3, #8]
 800113c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800119c <update_measurement+0x118>
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d503      	bpl.n	8001152 <update_measurement+0xce>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	731a      	strb	r2, [r3, #12]
}
 8001150:	e010      	b.n	8001174 <update_measurement+0xf0>
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a02 	vldr	s15, [r3, #8]
 8001158:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011a0 <update_measurement+0x11c>
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d503      	bpl.n	800116e <update_measurement+0xea>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	731a      	strb	r2, [r3, #12]
}
 800116c:	e002      	b.n	8001174 <update_measurement+0xf0>
    else data->air_quality_level = 3;                       // :(	Bad
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	731a      	strb	r2, [r3, #12]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	403e147b 	.word	0x403e147b
 8001180:	457ff000 	.word	0x457ff000
 8001184:	4285051f 	.word	0x4285051f
 8001188:	c031374c 	.word	0xc031374c
 800118c:	42e93439 	.word	0x42e93439
 8001190:	469c4000 	.word	0x469c4000
 8001194:	469c4000 	.word	0x469c4000
 8001198:	442f0000 	.word	0x442f0000
 800119c:	44fa0000 	.word	0x44fa0000
 80011a0:	459c4000 	.word	0x459c4000

080011a4 <lcd_printf>:
            printf("Found device at 0x%02X\r\n", addr << 1);
        }
    }
}

void lcd_printf(const char *fmt, ...) {
 80011a4:	b40f      	push	{r0, r1, r2, r3}
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b092      	sub	sp, #72	@ 0x48
 80011aa:	af00      	add	r7, sp, #0
    char buffer[64]; // zwiększ jeśli masz długie ciągi znakow
    va_list args;
    va_start(args, fmt);
 80011ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011b2:	f107 0008 	add.w	r0, r7, #8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	f009 fc10 	bl	800a9e0 <vsniprintf>
    va_end(args);
    lcd_send_string(buffer);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff2a 	bl	800101e <lcd_send_string>
}
 80011ca:	bf00      	nop
 80011cc:	3748      	adds	r7, #72	@ 0x48
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fe26 	bl	8001e30 <HAL_Init>

  /* USER CODE BEGIN Init */
 initialise_monitor_handles();
 80011e4:	f008 f99e 	bl	8009524 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f988 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 faf4 	bl	80017d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011f0:	f000 f9ee 	bl	80015d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011f4:	f000 fa3e 	bl	8001674 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 fac4 	bl	8001784 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80011fc:	f000 fa9e 	bl	800173c <MX_TIM10_Init>
  MX_SPI1_Init();
 8001200:	f000 fa66 	bl	80016d0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001204:	f004 fe3a 	bl	8005e7c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
 // init timera do przerwań i przesyłu przez BT
	HAL_TIM_Base_Start_IT(&htim10);
 8001208:	48a4      	ldr	r0, [pc, #656]	@ (800149c <main+0x2c4>)
 800120a:	f003 fbe5 	bl	80049d8 <HAL_TIM_Base_Start_IT>
  // inicjalizacja ekranu
  lcd_init();
 800120e:	f7ff fec9 	bl	8000fa4 <lcd_init>
  printf("spisujeee\n");
 8001212:	48a3      	ldr	r0, [pc, #652]	@ (80014a0 <main+0x2c8>)
 8001214:	f009 fb48 	bl	800a8a8 <puts>
  // run_heating_sequence();

  char msg[] = "Hello from STM32!\r\n";
 8001218:	4ba2      	ldr	r3, [pc, #648]	@ (80014a4 <main+0x2cc>)
 800121a:	f507 6492 	add.w	r4, r7, #1168	@ 0x490
 800121e:	461d      	mov	r5, r3
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	6023      	str	r3, [r4, #0]

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f000 fe72 	bl	8001f14 <HAL_Delay>
   FATFS FatFs; 	//Fatfs handle
   FIL fil; 		//File handle
   FRESULT fres; //Result after operations

   //Open the file system
   fres = f_mount(&FatFs, "", 1); //1=mount now
 8001230:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001234:	2201      	movs	r2, #1
 8001236:	499c      	ldr	r1, [pc, #624]	@ (80014a8 <main+0x2d0>)
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f8a7 	bl	800838c <f_mount>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
   if (fres != FR_OK) {
 8001244:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <main+0x84>
 	printf("f_mount error (%i)\r\n", fres);
 800124c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001250:	4619      	mov	r1, r3
 8001252:	4896      	ldr	r0, [pc, #600]	@ (80014ac <main+0x2d4>)
 8001254:	f009 fac0 	bl	800a7d8 <iprintf>
 	while(1);
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <main+0x80>
   //Let's get some statistics from the SD card
   DWORD free_clusters, free_sectors, total_sectors;

   FATFS* getFreeFs;

   fres = f_getfree("", &free_clusters, &getFreeFs);
 800125c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	4890      	ldr	r0, [pc, #576]	@ (80014a8 <main+0x2d0>)
 8001268:	f007 fdec 	bl	8008e44 <f_getfree>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
   if (fres != FR_OK) {
 8001272:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <main+0xb2>
 	printf("f_getfree error (%i)\r\n", fres);
 800127a:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 800127e:	4619      	mov	r1, r3
 8001280:	488b      	ldr	r0, [pc, #556]	@ (80014b0 <main+0x2d8>)
 8001282:	f009 faa9 	bl	800a7d8 <iprintf>
 	while(1);
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <main+0xae>
   }

   //Formula comes from ChaN's documentation
   total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800128a:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800128e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	3b02      	subs	r3, #2
 8001298:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 800129c:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	8952      	ldrh	r2, [r2, #10]
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
   free_sectors = free_clusters * getFreeFs->csize;
 80012ac:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80012b0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	461a      	mov	r2, r3
 80012ba:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80012be:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0

   printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80012cc:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 80012d0:	0859      	lsrs	r1, r3, #1
 80012d2:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	461a      	mov	r2, r3
 80012da:	4876      	ldr	r0, [pc, #472]	@ (80014b4 <main+0x2dc>)
 80012dc:	f009 fa7c 	bl	800a7d8 <iprintf>

   //Now let's try to open file "test.txt"
   fres = f_open(&fil, "test.txt", FA_READ);
 80012e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012e4:	2201      	movs	r2, #1
 80012e6:	4974      	ldr	r1, [pc, #464]	@ (80014b8 <main+0x2e0>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 f895 	bl	8008418 <f_open>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
   if (fres != FR_OK) {
 80012f4:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <main+0x134>
 	printf("f_open error (%i)\r\n", fres);
 80012fc:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001300:	4619      	mov	r1, r3
 8001302:	486e      	ldr	r0, [pc, #440]	@ (80014bc <main+0x2e4>)
 8001304:	f009 fa68 	bl	800a7d8 <iprintf>
 	while(1);
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <main+0x130>
   }
   printf("I was able to open 'test.txt' for reading!\r\n");
 800130c:	486c      	ldr	r0, [pc, #432]	@ (80014c0 <main+0x2e8>)
 800130e:	f009 facb 	bl	800a8a8 <puts>
   //Read 30 bytes from "test.txt" on the SD card
   BYTE readBuf[30];

   //We can either use f_read OR f_gets to get data out of files
   //f_gets is a wrapper on f_read that does some string formatting for us
   TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8001312:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	211e      	movs	r1, #30
 800131c:	4618      	mov	r0, r3
 800131e:	f007 fe46 	bl	8008fae <f_gets>
 8001322:	f8c7 04ac 	str.w	r0, [r7, #1196]	@ 0x4ac
   if(rres != 0) {
 8001326:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <main+0x164>
 	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	4863      	ldr	r0, [pc, #396]	@ (80014c4 <main+0x2ec>)
 8001336:	f009 fa4f 	bl	800a7d8 <iprintf>
 800133a:	e005      	b.n	8001348 <main+0x170>
   } else {
 	printf("f_gets error (%i)\r\n", fres);
 800133c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001340:	4619      	mov	r1, r3
 8001342:	4861      	ldr	r0, [pc, #388]	@ (80014c8 <main+0x2f0>)
 8001344:	f009 fa48 	bl	800a7d8 <iprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 8001348:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800134c:	4618      	mov	r0, r3
 800134e:	f007 fd4f 	bl	8008df0 <f_close>

   //Now let's try and write a file "write.txt"
   fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001352:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001356:	221a      	movs	r2, #26
 8001358:	495c      	ldr	r1, [pc, #368]	@ (80014cc <main+0x2f4>)
 800135a:	4618      	mov	r0, r3
 800135c:	f007 f85c 	bl	8008418 <f_open>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
   if(fres == FR_OK) {
 8001366:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <main+0x19e>
 	printf("I was able to open 'write.txt' for writing\r\n");
 800136e:	4858      	ldr	r0, [pc, #352]	@ (80014d0 <main+0x2f8>)
 8001370:	f009 fa9a 	bl	800a8a8 <puts>
 8001374:	e005      	b.n	8001382 <main+0x1aa>
   } else {
 	printf("f_open error (%i)\r\n", fres);
 8001376:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 800137a:	4619      	mov	r1, r3
 800137c:	484f      	ldr	r0, [pc, #316]	@ (80014bc <main+0x2e4>)
 800137e:	f009 fa2b 	bl	800a7d8 <iprintf>
   }

   //Copy in a string
   strncpy((char*)readBuf, "a new file is made!", 19);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4a53      	ldr	r2, [pc, #332]	@ (80014d4 <main+0x2fc>)
 8001388:	461c      	mov	r4, r3
 800138a:	4615      	mov	r5, r2
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	8022      	strh	r2, [r4, #0]
 8001396:	3402      	adds	r4, #2
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	7023      	strb	r3, [r4, #0]
   UINT bytesWrote;
   fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	f107 0108 	add.w	r1, r7, #8
 80013a2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80013a6:	2213      	movs	r2, #19
 80013a8:	f007 fb2f 	bl	8008a0a <f_write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
   if(fres == FR_OK) {
 80013b2:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <main+0x1f6>
 	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80013ba:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80013be:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4844      	ldr	r0, [pc, #272]	@ (80014d8 <main+0x300>)
 80013c8:	f009 fa06 	bl	800a7d8 <iprintf>
 80013cc:	e005      	b.n	80013da <main+0x202>
   } else {
 	printf("f_write error (%i)\r\n", fres);
 80013ce:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 80013d2:	4619      	mov	r1, r3
 80013d4:	4841      	ldr	r0, [pc, #260]	@ (80014dc <main+0x304>)
 80013d6:	f009 f9ff 	bl	800a7d8 <iprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 80013da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 fd06 	bl	8008df0 <f_close>

   //We're done, so de-mount the drive
   f_mount(NULL, "", 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	4930      	ldr	r1, [pc, #192]	@ (80014a8 <main+0x2d0>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f006 ffcf 	bl	800838c <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013ee:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe ff44 	bl	8000280 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8001400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001404:	4836      	ldr	r0, [pc, #216]	@ (80014e0 <main+0x308>)
 8001406:	f003 fd51 	bl	8004eac <HAL_UART_Transmit>

	  update_measurement(&data);
 800140a:	4836      	ldr	r0, [pc, #216]	@ (80014e4 <main+0x30c>)
 800140c:	f7ff fe3a 	bl	8001084 <update_measurement>
	  lcd_send_cmd (0x80|0x00);
 8001410:	2080      	movs	r0, #128	@ 0x80
 8001412:	f7ff fd67 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("PPM: %.2f ", data.ppm);
 8001416:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <main+0x30c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f89c 	bl	8000558 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4830      	ldr	r0, [pc, #192]	@ (80014e8 <main+0x310>)
 8001426:	f7ff febd 	bl	80011a4 <lcd_printf>

	  lcd_send_cmd(0x80 | 0x40);  // linia 2, kol
 800142a:	20c0      	movs	r0, #192	@ 0xc0
 800142c:	f7ff fd5a 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("Air Quality: %d ", data.air_quality_level);
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <main+0x30c>)
 8001432:	7b1b      	ldrb	r3, [r3, #12]
 8001434:	4619      	mov	r1, r3
 8001436:	482d      	ldr	r0, [pc, #180]	@ (80014ec <main+0x314>)
 8001438:	f7ff feb4 	bl	80011a4 <lcd_printf>

	  DELAY_MS(1000);
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001442:	e025      	b.n	8001490 <main+0x2b8>
 8001444:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <main+0x318>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <main+0x31c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a29      	ldr	r2, [pc, #164]	@ (80014f8 <main+0x320>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800145c:	fb03 f202 	mul.w	r2, r3, r2
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <main+0x31c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4924      	ldr	r1, [pc, #144]	@ (80014f8 <main+0x320>)
 8001466:	fba1 1303 	umull	r1, r3, r1, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <main+0x318>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001482:	429a      	cmp	r2, r3
 8001484:	d8f6      	bhi.n	8001474 <main+0x29c>
 8001486:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800148a:	3301      	adds	r3, #1
 800148c:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001490:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001498:	d3d4      	bcc.n	8001444 <main+0x26c>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800149a:	e7a8      	b.n	80013ee <main+0x216>
 800149c:	20000308 	.word	0x20000308
 80014a0:	0800cc38 	.word	0x0800cc38
 80014a4:	0800cdf4 	.word	0x0800cdf4
 80014a8:	0800cc44 	.word	0x0800cc44
 80014ac:	0800cc48 	.word	0x0800cc48
 80014b0:	0800cc60 	.word	0x0800cc60
 80014b4:	0800cc78 	.word	0x0800cc78
 80014b8:	0800ccc0 	.word	0x0800ccc0
 80014bc:	0800cccc 	.word	0x0800cccc
 80014c0:	0800cce0 	.word	0x0800cce0
 80014c4:	0800cd0c 	.word	0x0800cd0c
 80014c8:	0800cd38 	.word	0x0800cd38
 80014cc:	0800cd4c 	.word	0x0800cd4c
 80014d0:	0800cd58 	.word	0x0800cd58
 80014d4:	0800cd84 	.word	0x0800cd84
 80014d8:	0800cd98 	.word	0x0800cd98
 80014dc:	0800cdbc 	.word	0x0800cdbc
 80014e0:	20000350 	.word	0x20000350
 80014e4:	20000398 	.word	0x20000398
 80014e8:	0800cdd4 	.word	0x0800cdd4
 80014ec:	0800cde0 	.word	0x0800cde0
 80014f0:	e000e010 	.word	0xe000e010
 80014f4:	20000000 	.word	0x20000000
 80014f8:	431bde83 	.word	0x431bde83

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	@ 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f009 fb0a 	bl	800ab24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <SystemClock_Config+0xcc>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <SystemClock_Config+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <SystemClock_Config+0xd0>)
 8001546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2310      	movs	r3, #16
 8001562:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800156c:	2308      	movs	r3, #8
 800156e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001570:	23c0      	movs	r3, #192	@ 0xc0
 8001572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001574:	2304      	movs	r3, #4
 8001576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f002 f8ef 	bl	8003764 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800158c:	f000 f9e0 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2103      	movs	r1, #3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fb50 	bl	8003c54 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ba:	f000 f9c9 	bl	8001950 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	@ 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_ADC1_Init+0x98>)
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <MX_ADC1_Init+0x9c>)
 80015e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <MX_ADC1_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <MX_ADC1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <MX_ADC1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <MX_ADC1_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <MX_ADC1_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001610:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <MX_ADC1_Init+0xa0>)
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_ADC1_Init+0x98>)
 800161c:	2201      	movs	r2, #1
 800161e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_ADC1_Init+0x98>)
 800162a:	2201      	movs	r2, #1
 800162c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001630:	f000 fc94 	bl	8001f5c <HAL_ADC_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800163a:	f000 f989 	bl	8001950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800163e:	2301      	movs	r3, #1
 8001640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_ADC1_Init+0x98>)
 8001650:	f000 fe48 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800165a:	f000 f979 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000214 	.word	0x20000214
 800166c:	40012000 	.word	0x40012000
 8001670:	0f000001 	.word	0x0f000001

08001674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800167a:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <MX_I2C1_Init+0x54>)
 800167c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001680:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_I2C1_Init+0x58>)
 8001682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_I2C1_Init+0x50>)
 8001692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_I2C1_Init+0x50>)
 80016b2:	f001 fbb9 	bl	8002e28 <HAL_I2C_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016bc:	f000 f948 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000025c 	.word	0x2000025c
 80016c8:	40005400 	.word	0x40005400
 80016cc:	000186a0 	.word	0x000186a0

080016d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016d6:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <MX_SPI1_Init+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_SPI1_Init+0x64>)
 80016fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_SPI1_Init+0x64>)
 8001704:	2238      	movs	r2, #56	@ 0x38
 8001706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <MX_SPI1_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_SPI1_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <MX_SPI1_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_SPI1_Init+0x64>)
 800171c:	220a      	movs	r2, #10
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_SPI1_Init+0x64>)
 8001722:	f002 fcb7 	bl	8004094 <HAL_SPI_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800172c:	f000 f910 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002b0 	.word	0x200002b0
 8001738:	40013000 	.word	0x40013000

0800173c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_TIM10_Init+0x40>)
 8001742:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <MX_TIM10_Init+0x44>)
 8001744:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <MX_TIM10_Init+0x40>)
 8001748:	f242 720f 	movw	r2, #9999	@ 0x270f
 800174c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_TIM10_Init+0x40>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_TIM10_Init+0x40>)
 8001756:	f241 3287 	movw	r2, #4999	@ 0x1387
 800175a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MX_TIM10_Init+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_TIM10_Init+0x40>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_TIM10_Init+0x40>)
 800176a:	f003 f8e5 	bl	8004938 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001774:	f000 f8ec 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000308 	.word	0x20000308
 8001780:	40014400 	.word	0x40014400

08001784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <MX_USART1_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017bc:	f003 fb26 	bl	8004e0c <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f8c3 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000350 	.word	0x20000350
 80017d4:	40011000 	.word	0x40011000

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <MX_GPIO_Init+0xec>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a33      	ldr	r2, [pc, #204]	@ (80018c4 <MX_GPIO_Init+0xec>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <MX_GPIO_Init+0xec>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <MX_GPIO_Init+0xec>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a2c      	ldr	r2, [pc, #176]	@ (80018c4 <MX_GPIO_Init+0xec>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <MX_GPIO_Init+0xec>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <MX_GPIO_Init+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a25      	ldr	r2, [pc, #148]	@ (80018c4 <MX_GPIO_Init+0xec>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b23      	ldr	r3, [pc, #140]	@ (80018c4 <MX_GPIO_Init+0xec>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001848:	481f      	ldr	r0, [pc, #124]	@ (80018c8 <MX_GPIO_Init+0xf0>)
 800184a:	f001 faa1 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	481e      	ldr	r0, [pc, #120]	@ (80018cc <MX_GPIO_Init+0xf4>)
 8001854:	f001 fa9c 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8001858:	2301      	movs	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001862:	2302      	movs	r3, #2
 8001864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4818      	ldr	r0, [pc, #96]	@ (80018d0 <MX_GPIO_Init+0xf8>)
 800186e:	f001 f90b 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001872:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	480f      	ldr	r0, [pc, #60]	@ (80018c8 <MX_GPIO_Init+0xf0>)
 800188c:	f001 f8fc 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001890:	2320      	movs	r3, #32
 8001892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	@ (80018cc <MX_GPIO_Init+0xf4>)
 80018a8:	f001 f8ee 	bl	8002a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2006      	movs	r0, #6
 80018b2:	f001 f820 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018b6:	2006      	movs	r0, #6
 80018b8:	f001 f839 	bl	800292e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B_BUTTON_Pin) // PA0 przerwanie
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <HAL_GPIO_EXTI_Callback+0x16>
    {
        heating_skipped = true;
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
    }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000210 	.word	0x20000210

080018fc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	@ 0x40
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 uint8_t msg_data[50];
 uint16_t size = 0; //rozmiar wiadomości
 8001904:	2300      	movs	r3, #0
 8001906:	87fb      	strh	r3, [r7, #62]	@ 0x3e

size = sprintf(msg_data,"Air Quality: %d.nr ", data.air_quality_level); // Stworzenie wiadomosci
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	490c      	ldr	r1, [pc, #48]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001914:	4618      	mov	r0, r3
 8001916:	f008 ffcf 	bl	800a8b8 <siprintf>
 800191a:	4603      	mov	r3, r0
 800191c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 HAL_UART_Transmit_IT(&huart1, msg_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 800191e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001928:	f003 fb4b 	bl	8004fc2 <HAL_UART_Transmit_IT>
 HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); // Zmiana stanu pinu na diodzie LED
 800192c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001932:	f001 fa46 	bl	8002dc2 <HAL_GPIO_TogglePin>
}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	@ 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000398 	.word	0x20000398
 8001944:	0800ce08 	.word	0x0800ce08
 8001948:	20000350 	.word	0x20000350
 800194c:	40020c00 	.word	0x40020c00

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800199a:	2007      	movs	r0, #7
 800199c:	f000 ffa0 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_ADC_MspInit+0x7c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d127      	bne.n	8001a1e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_ADC_MspInit+0x80>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 8001a06:	2302      	movs	r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_ADC_MspInit+0x84>)
 8001a1a:	f001 f835 	bl	8002a88 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	@ (8001ab8 <HAL_I2C_MspInit+0x84>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12b      	bne.n	8001aae <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a72:	23c0      	movs	r3, #192	@ 0xc0
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a76:	2312      	movs	r3, #18
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a82:	2304      	movs	r3, #4
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <HAL_I2C_MspInit+0x8c>)
 8001a8e:	f000 fffb 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_SPI_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b1e:	23e0      	movs	r3, #224	@ 0xe0
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_SPI_MspInit+0x8c>)
 8001b3a:	f000 ffa5 	bl	8002a88 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <HAL_TIM_Base_MspInit+0x48>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d115      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2019      	movs	r0, #25
 8001b88:	f000 feb5 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b8c:	2019      	movs	r0, #25
 8001b8e:	f000 fece 	bl	800292e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40014400 	.word	0x40014400
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_UART_MspInit+0x94>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d134      	bne.n	8001c30 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c10:	2307      	movs	r3, #7
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <HAL_UART_MspInit+0x9c>)
 8001c1c:	f000 ff34 	bl	8002a88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2025      	movs	r0, #37	@ 0x25
 8001c26:	f000 fe66 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	@ 0x25
 8001c2c:	f000 fe7f 	bl	800292e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000

08001c44 <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <SDTimer_Handler+0x40>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <SDTimer_Handler+0x1c>
    Timer1--;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <SDTimer_Handler+0x40>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <SDTimer_Handler+0x40>)
 8001c5e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <SDTimer_Handler+0x44>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <SDTimer_Handler+0x34>
    Timer2--;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <SDTimer_Handler+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SDTimer_Handler+0x44>)
 8001c76:	701a      	strb	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200003a9 	.word	0x200003a9
 8001c88:	200003aa 	.word	0x200003aa

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <SysTick_Handler+0x30>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <SysTick_Handler+0x30>)
 8001cf0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10) {
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <SysTick_Handler+0x30>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d904      	bls.n	8001d06 <SysTick_Handler+0x26>
	    FatFsCnt = 0;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Handler+0x30>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001d02:	f7ff ff9f 	bl	8001c44 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 f8e5 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003a8 	.word	0x200003a8

08001d14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f001 f86d 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d2a:	f002 feb7 	bl	8004a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000308 	.word	0x20000308

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f003 f977 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000350 	.word	0x20000350

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f008 ff24 	bl	800abc8 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20020000 	.word	0x20020000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	200003ac 	.word	0x200003ac
 8001db4:	200005f8 	.word	0x200005f8

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f008 fee3 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7ff f9e3 	bl	80011d8 <main>
  bx  lr    
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001e20:	0800d2ac 	.word	0x0800d2ac
  ldr r2, =_sbss
 8001e24:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001e28:	200005f4 	.word	0x200005f4

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e34:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_Init+0x40>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_Init+0x40>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_Init+0x40>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 fd41 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fd7a 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd59 	bl	800294a <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eb0:	f000 fd21 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	200003b0 	.word	0x200003b0

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200003b0 	.word	0x200003b0

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e033      	b.n	8001fda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fd16 	bl	80019ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fa2:	f023 0302 	bic.w	r3, r3, #2
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 faca 	bl	8002548 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Start+0x1a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e097      	b.n	800212e <HAL_ADC_Start+0x14a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d018      	beq.n	8002046 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002024:	4b45      	ldr	r3, [pc, #276]	@ (800213c <HAL_ADC_Start+0x158>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a45      	ldr	r2, [pc, #276]	@ (8002140 <HAL_ADC_Start+0x15c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9a      	lsrs	r2, r3, #18
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d15f      	bne.n	8002114 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800207e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f023 0206 	bic.w	r2, r3, #6
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_ADC_Start+0x160>)
 80020b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d129      	bne.n	800212c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	e020      	b.n	800212c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a16      	ldr	r2, [pc, #88]	@ (8002148 <HAL_ADC_Start+0x164>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11b      	bne.n	800212c <HAL_ADC_Start+0x148>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e00b      	b.n	800212c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000
 8002140:	431bde83 	.word	0x431bde83
 8002144:	40012300 	.word	0x40012300
 8002148:	40012000 	.word	0x40012000

0800214c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Stop+0x16>
 800215e:	2302      	movs	r3, #2
 8002160:	e021      	b.n	80021a6 <HAL_ADC_Stop+0x5a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ce:	d113      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021de:	d10b      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e063      	b.n	80022c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f8:	f7ff fe80 	bl	8001efc <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021fe:	e021      	b.n	8002244 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002206:	d01d      	beq.n	8002244 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_ADC_PollForConversion+0x6c>
 800220e:	f7ff fe75 	bl	8001efc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d212      	bcs.n	8002244 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d00b      	beq.n	8002244 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03d      	b.n	80022c0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d1d6      	bne.n	8002200 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0212 	mvn.w	r2, #18
 800225a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d123      	bne.n	80022be <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11f      	bne.n	80022be <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002296:	2b00      	cmp	r3, #0
 8002298:	d111      	bne.n	80022be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e113      	b.n	8002528 <HAL_ADC_ConfigChannel+0x244>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d925      	bls.n	800235c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	3b1e      	subs	r3, #30
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	4603      	mov	r3, r0
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4403      	add	r3, r0
 800234e:	3b1e      	subs	r3, #30
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e022      	b.n	80023a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	2207      	movs	r2, #7
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	4603      	mov	r3, r0
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4403      	add	r3, r0
 8002398:	409a      	lsls	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d824      	bhi.n	80023f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b05      	subs	r3, #5
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b05      	subs	r3, #5
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f2:	e04c      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d824      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	@ 0x23
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	400a      	ands	r2, r1
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b23      	subs	r3, #35	@ 0x23
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
 8002444:	e023      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b41      	subs	r3, #65	@ 0x41
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b41      	subs	r3, #65	@ 0x41
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800248e:	4b29      	ldr	r3, [pc, #164]	@ (8002534 <HAL_ADC_ConfigChannel+0x250>)
 8002490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <HAL_ADC_ConfigChannel+0x254>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10f      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1d8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d10b      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_ADC_ConfigChannel+0x254>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d12b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	@ (800253c <HAL_ADC_ConfigChannel+0x258>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x1f4>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d122      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a11      	ldr	r2, [pc, #68]	@ (800253c <HAL_ADC_ConfigChannel+0x258>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d111      	bne.n	800251e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_ADC_ConfigChannel+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <HAL_ADC_ConfigChannel+0x260>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	0c9a      	lsrs	r2, r3, #18
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002510:	e002      	b.n	8002518 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40012300 	.word	0x40012300
 8002538:	40012000 	.word	0x40012000
 800253c:	10000012 	.word	0x10000012
 8002540:	20000000 	.word	0x20000000
 8002544:	431bde83 	.word	0x431bde83

08002548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002550:	4b79      	ldr	r3, [pc, #484]	@ (8002738 <ADC_Init+0x1f0>)
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800257c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	4a58      	ldr	r2, [pc, #352]	@ (800273c <ADC_Init+0x1f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d022      	beq.n	8002626 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e00f      	b.n	8002646 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002644:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0202 	bic.w	r2, r2, #2
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
 8002660:	005a      	lsls	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002682:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	3b01      	subs	r3, #1
 80026a0:	035a      	lsls	r2, r3, #13
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	e007      	b.n	80026bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	051a      	lsls	r2, r3, #20
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026fe:	025a      	lsls	r2, r3, #9
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	029a      	lsls	r2, r3, #10
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012300 	.word	0x40012300
 800273c:	0f000001 	.word	0x0f000001

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	@ (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	@ (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	@ (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff29 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff3e 	bl	8002788 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff8e 	bl	8002834 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff31 	bl	80027a4 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fac4 	bl	8001efc <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d008      	beq.n	8002994 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2280      	movs	r2, #128	@ 0x80
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e052      	b.n	8002a3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0216 	bic.w	r2, r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <HAL_DMA_Abort+0x62>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0208 	bic.w	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	e013      	b.n	8002a0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e6:	f7ff fa89 	bl	8001efc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d90c      	bls.n	8002a0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e015      	b.n	8002a3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e4      	bne.n	80029e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	223f      	movs	r2, #63	@ 0x3f
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00c      	b.n	8002a7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	@ 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e159      	b.n	8002d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 8148 	bne.w	8002d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d017      	beq.n	8002b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a2 	beq.w	8002d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b57      	ldr	r3, [pc, #348]	@ (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a56      	ldr	r2, [pc, #344]	@ (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a52      	ldr	r2, [pc, #328]	@ (8002d74 <HAL_GPIO_Init+0x2ec>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	@ (8002d78 <HAL_GPIO_Init+0x2f0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x202>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <HAL_GPIO_Init+0x2f4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x1fe>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a47      	ldr	r2, [pc, #284]	@ (8002d80 <HAL_GPIO_Init+0x2f8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x1fa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a46      	ldr	r2, [pc, #280]	@ (8002d84 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x1f6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a45      	ldr	r2, [pc, #276]	@ (8002d88 <HAL_GPIO_Init+0x300>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x1f2>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	@ (8002d74 <HAL_GPIO_Init+0x2ec>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a2f      	ldr	r2, [pc, #188]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d8c <HAL_GPIO_Init+0x304>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f aea2 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	@ 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd4:	887a      	ldrh	r2, [r7, #2]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	041a      	lsls	r2, r3, #16
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	400b      	ands	r3, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	619a      	str	r2, [r3, #24]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fd5c 	bl	80018d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e12b      	b.n	8003092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fdf0 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	@ 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f001 f8da 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a81      	ldr	r2, [pc, #516]	@ (800309c <HAL_I2C_Init+0x274>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d807      	bhi.n	8002eac <HAL_I2C_Init+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a80      	ldr	r2, [pc, #512]	@ (80030a0 <HAL_I2C_Init+0x278>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e006      	b.n	8002eba <HAL_I2C_Init+0x92>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a7d      	ldr	r2, [pc, #500]	@ (80030a4 <HAL_I2C_Init+0x27c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0e7      	b.n	8003092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a78      	ldr	r2, [pc, #480]	@ (80030a8 <HAL_I2C_Init+0x280>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0c9b      	lsrs	r3, r3, #18
 8002ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800309c <HAL_I2C_Init+0x274>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d802      	bhi.n	8002efc <HAL_I2C_Init+0xd4>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	e009      	b.n	8002f10 <HAL_I2C_Init+0xe8>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	4a69      	ldr	r2, [pc, #420]	@ (80030ac <HAL_I2C_Init+0x284>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	3301      	adds	r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	495c      	ldr	r1, [pc, #368]	@ (800309c <HAL_I2C_Init+0x274>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d819      	bhi.n	8002f64 <HAL_I2C_Init+0x13c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e59      	subs	r1, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_I2C_Init+0x138>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e59      	subs	r1, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5e:	e051      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e04f      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d111      	bne.n	8002f90 <HAL_I2C_Init+0x168>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e012      	b.n	8002fb6 <HAL_I2C_Init+0x18e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	0099      	lsls	r1, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Init+0x196>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e022      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_I2C_Init+0x1bc>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e58      	subs	r0, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	440b      	add	r3, r1
 8002fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fe2:	e00f      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	6809      	ldr	r1, [r1, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6911      	ldr	r1, [r2, #16]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	000186a0 	.word	0x000186a0
 80030a0:	001e847f 	.word	0x001e847f
 80030a4:	003d08ff 	.word	0x003d08ff
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	10624dd3 	.word	0x10624dd3

080030b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
 80030c0:	4613      	mov	r3, r2
 80030c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7fe ff1a 	bl	8001efc <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80e0 	bne.w	8003298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2319      	movs	r3, #25
 80030de:	2201      	movs	r2, #1
 80030e0:	4970      	ldr	r1, [pc, #448]	@ (80032a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f964 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0d3      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x50>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0cc      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d007      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2221      	movs	r2, #33	@ 0x21
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2210      	movs	r2, #16
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a50      	ldr	r2, [pc, #320]	@ (80032a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003168:	8979      	ldrh	r1, [r7, #10]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f89c 	bl	80032ac <I2C_MasterRequestWrite>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e08d      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003194:	e066      	b.n	8003264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	6a39      	ldr	r1, [r7, #32]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa22 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d107      	bne.n	80031be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11b      	bne.n	8003238 <HAL_I2C_Master_Transmit+0x188>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fa19 	bl	8003674 <I2C_WaitOnBTFFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e01a      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d194      	bne.n	8003196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	00100002 	.word	0x00100002
 80032a8:	ffff0000 	.word	0xffff0000

080032ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	460b      	mov	r3, r1
 80032ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d006      	beq.n	80032d6 <I2C_MasterRequestWrite+0x2a>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d003      	beq.n	80032d6 <I2C_MasterRequestWrite+0x2a>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e00b      	b.n	8003300 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	d107      	bne.n	8003300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f84f 	bl	80033b0 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003326:	d103      	bne.n	8003330 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e035      	b.n	80033a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333c:	d108      	bne.n	8003350 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	e01b      	b.n	8003388 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003350:	897b      	ldrh	r3, [r7, #10]
 8003352:	11db      	asrs	r3, r3, #7
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0306 	and.w	r3, r3, #6
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f063 030f 	orn	r3, r3, #15
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <I2C_MasterRequestWrite+0xfc>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f898 	bl	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e010      	b.n	80033a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4907      	ldr	r1, [pc, #28]	@ (80033ac <I2C_MasterRequestWrite+0x100>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f888 	bl	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	00010008 	.word	0x00010008
 80033ac:	00010002 	.word	0x00010002

080033b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c0:	e048      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c8:	d044      	beq.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe fd97 	bl	8001efc <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d139      	bne.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10d      	bne.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	e00c      	b.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d116      	bne.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e023      	b.n	800349c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	0c1b      	lsrs	r3, r3, #16
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10d      	bne.n	800347a <I2C_WaitOnFlagUntilTimeout+0xca>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	43da      	mvns	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	e00c      	b.n	8003494 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	429a      	cmp	r2, r3
 8003498:	d093      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b2:	e071      	b.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c2:	d123      	bne.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e067      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003512:	d041      	beq.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe fcf2 	bl	8001efc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d136      	bne.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10c      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e00b      	b.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e021      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10c      	bne.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e00b      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f af6d 	bne.w	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f0:	e034      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f886 	bl	8003704 <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e034      	b.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003608:	d028      	beq.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fe fc77 	bl	8001efc <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11d      	bne.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d016      	beq.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b80      	cmp	r3, #128	@ 0x80
 8003668:	d1c3      	bne.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003680:	e034      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f83e 	bl	8003704 <I2C_IsAcknowledgeFailed>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e034      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003698:	d028      	beq.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fe fc2f 	bl	8001efc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11d      	bne.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d016      	beq.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d1c3      	bne.n	8003682 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371a:	d11b      	bne.n	8003754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e267      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d075      	beq.n	800386e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d00c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b85      	ldr	r3, [pc, #532]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003796:	2b08      	cmp	r3, #8
 8003798:	d112      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b82      	ldr	r3, [pc, #520]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b7e      	ldr	r3, [pc, #504]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05b      	beq.n	800386c <HAL_RCC_OscConfig+0x108>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d157      	bne.n	800386c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e242      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x74>
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6f      	ldr	r2, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6c      	ldr	r2, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037fc:	4b69      	ldr	r3, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a68      	ldr	r2, [pc, #416]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fb6e 	bl	8001efc <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe fb6a 	bl	8001efc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e207      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0xc0>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fb5a 	bl	8001efc <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fb56 	bl	8001efc <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1f3      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0xe8>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d063      	beq.n	8003942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe fb0f 	bl	8001efc <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe fb0b 	bl	8001efc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1a8      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe faee 	bl	8001efc <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe faea 	bl	8001efc <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e187      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe face 	bl	8001efc <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fe faca 	bl	8001efc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e167      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x200>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe fab7 	bl	8001efc <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00e      	b.n	80039b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe fab3 	bl	8001efc <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d907      	bls.n	80039b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e150      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470000 	.word	0x42470000
 80039ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ea      	bne.n	8003992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b81      	ldr	r3, [pc, #516]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b77      	ldr	r3, [pc, #476]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a73      	ldr	r2, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fa73 	bl	8001efc <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe fa6f 	bl	8001efc <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e10c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2ea>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x30c>
 8003a56:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	4b55      	ldr	r3, [pc, #340]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a54      	ldr	r2, [pc, #336]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe fa34 	bl	8001efc <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe fa30 	bl	8001efc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0cb      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe fa1e 	bl	8001efc <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe fa1a 	bl	8001efc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0b5      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a1 	beq.w	8003c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d05c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d141      	bne.n	8003b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f9ee 	bl	8001efc <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe f9ea 	bl	8001efc <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e087      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	491b      	ldr	r1, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe f9c3 	bl	8001efc <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe f9bf 	bl	8001efc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e05c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x416>
 8003b98:	e054      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe f9ac 	bl	8001efc <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe f9a8 	bl	8001efc <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e045      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e038      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x4ec>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cc      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d90c      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b8      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b50      	ldr	r3, [pc, #320]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	494d      	ldr	r1, [pc, #308]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d044      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d119      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e067      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4934      	ldr	r1, [pc, #208]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe f8da 	bl	8001efc <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe f8d6 	bl	8001efc <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d20c      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4916      	ldr	r1, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f83a 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023c00 	.word	0x40023c00
 8003e10:	40023800 	.word	0x40023800
 8003e14:	0800ce60 	.word	0x0800ce60
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	20000004 	.word	0x20000004

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b094      	sub	sp, #80	@ 0x50
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e38:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x40>
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	f200 80e1 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e52:	e0db      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e58:	e0db      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e5e:	e0d8      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4b6f      	ldr	r3, [pc, #444]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b6a      	ldr	r3, [pc, #424]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0159      	lsls	r1, r3, #5
 8003ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea4:	0150      	lsls	r0, r2, #5
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4621      	mov	r1, r4
 8003eac:	1a51      	subs	r1, r2, r1
 8003eae:	6139      	str	r1, [r7, #16]
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ece:	4651      	mov	r1, sl
 8003ed0:	018a      	lsls	r2, r1, #6
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed8:	4659      	mov	r1, fp
 8003eda:	eb63 0901 	sbc.w	r9, r3, r1
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef2:	4690      	mov	r8, r2
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	eb18 0303 	adds.w	r3, r8, r3
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	462b      	mov	r3, r5
 8003f00:	eb49 0303 	adc.w	r3, r9, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f12:	4629      	mov	r1, r5
 8003f14:	024b      	lsls	r3, r1, #9
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	024a      	lsls	r2, r1, #9
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2200      	movs	r2, #0
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f30:	f7fc fe42 	bl	8000bb8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	e058      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3e:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	2200      	movs	r2, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	4611      	mov	r1, r2
 8003f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6a:	0150      	lsls	r0, r2, #5
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4641      	mov	r1, r8
 8003f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f76:	4649      	mov	r1, r9
 8003f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f90:	ebb2 040a 	subs.w	r4, r2, sl
 8003f94:	eb63 050b 	sbc.w	r5, r3, fp
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	eb45 0303 	adc.w	r3, r5, r3
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	028b      	lsls	r3, r1, #10
 8003fca:	4621      	mov	r1, r4
 8003fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	028a      	lsls	r2, r1, #10
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	61fa      	str	r2, [r7, #28]
 8003fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe4:	f7fc fde8 	bl	8000bb8 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 800400e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004014:	4618      	mov	r0, r3
 8004016:	3750      	adds	r7, #80	@ 0x50
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	0800ce70 	.word	0x0800ce70

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	0800ce70 	.word	0x0800ce70

08004094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07b      	b.n	800419e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b6:	d009      	beq.n	80040cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
 80040be:	e005      	b.n	80040cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd fcec 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0104 	and.w	r1, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	f003 0210 	and.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b088      	sub	sp, #32
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b6:	f7fd fea1 	bl	8001efc <HAL_GetTick>
 80041ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e12a      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x36>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e122      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_SPI_Transmit+0x48>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e11b      	b.n	8004426 <HAL_SPI_Transmit+0x280>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423c:	d10f      	bne.n	800425e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800424c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d007      	beq.n	800427c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004284:	d152      	bne.n	800432c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0xee>
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d145      	bne.n	8004320 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b8:	e032      	b.n	8004320 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d112      	bne.n	80042ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042ec:	e018      	b.n	8004320 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ee:	f7fd fe05 	bl	8001efc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d803      	bhi.n	8004306 <HAL_SPI_Transmit+0x160>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004304:	d102      	bne.n	800430c <HAL_SPI_Transmit+0x166>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e082      	b.n	8004426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1c7      	bne.n	80042ba <HAL_SPI_Transmit+0x114>
 800432a:	e053      	b.n	80043d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_SPI_Transmit+0x194>
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d147      	bne.n	80043ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004360:	e033      	b.n	80043ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d113      	bne.n	8004398 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004396:	e018      	b.n	80043ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004398:	f7fd fdb0 	bl	8001efc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d803      	bhi.n	80043b0 <HAL_SPI_Transmit+0x20a>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Transmit+0x210>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e02d      	b.n	8004426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1c6      	bne.n	8004362 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fa59 	bl	8004890 <SPI_EndRxTxTransaction>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004424:	2300      	movs	r3, #0
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b08a      	sub	sp, #40	@ 0x28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800443c:	2301      	movs	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004440:	f7fd fd5c 	bl	8001efc <HAL_GetTick>
 8004444:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800444c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d00c      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x4a>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004464:	d106      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x46>
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d001      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	e17f      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_SPI_TransmitReceive+0x5c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_TransmitReceive+0x5c>
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e174      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_SPI_TransmitReceive+0x6e>
 8004498:	2302      	movs	r3, #2
 800449a:	e16d      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d003      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2205      	movs	r2, #5
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	887a      	ldrh	r2, [r7, #2]
 80044ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d007      	beq.n	800450c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d17e      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_TransmitReceive+0xf6>
 800451e:	8afb      	ldrh	r3, [r7, #22]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d16c      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	1c9a      	adds	r2, r3, #2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004548:	e059      	b.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x162>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_SPI_TransmitReceive+0x162>
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	2b01      	cmp	r3, #1
 8004566:	d113      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d119      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x1a4>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	b292      	uxth	r2, r2
 80045b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ce:	2301      	movs	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045d2:	f7fd fc93 	bl	8001efc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045de:	429a      	cmp	r2, r3
 80045e0:	d80d      	bhi.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e8:	d009      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0bc      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1a0      	bne.n	800454a <HAL_SPI_TransmitReceive+0x11c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d19b      	bne.n	800454a <HAL_SPI_TransmitReceive+0x11c>
 8004612:	e082      	b.n	800471a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x1f4>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d171      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004648:	e05d      	b.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11c      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x264>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x264>
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b01      	cmp	r3, #1
 8004666:	d114      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	7812      	ldrb	r2, [r2, #0]
 8004674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d119      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x2a6>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d014      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046d4:	f7fd fc12 	bl	8001efc <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d803      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x2be>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x2c4>
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e038      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d19c      	bne.n	800464a <HAL_SPI_TransmitReceive+0x21c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d197      	bne.n	800464a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f8b6 	bl	8004890 <SPI_EndRxTxTransaction>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e01d      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004776:	2300      	movs	r3, #0
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004790:	f7fd fbb4 	bl	8001efc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047a0:	f7fd fbac 	bl	8001efc <HAL_GetTick>
 80047a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	015b      	lsls	r3, r3, #5
 80047ac:	0d1b      	lsrs	r3, r3, #20
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b6:	e054      	b.n	8004862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047be:	d050      	beq.n	8004862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c0:	f7fd fb9c 	bl	8001efc <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d13d      	bne.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ee:	d111      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f8:	d004      	beq.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004802:	d107      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481c:	d10f      	bne.n	800483e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800483c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e017      	b.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3b01      	subs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d19b      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2201      	movs	r2, #1
 80048a4:	2102      	movs	r1, #2
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff6a 	bl	8004780 <SPI_WaitFlagStateUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e032      	b.n	8004928 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <SPI_EndRxTxTransaction+0xa0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004934 <SPI_EndRxTxTransaction+0xa4>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	0d5b      	lsrs	r3, r3, #21
 80048ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e0:	d112      	bne.n	8004908 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff47 	bl	8004780 <SPI_WaitFlagStateUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e00f      	b.n	8004928 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3b01      	subs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d0f2      	beq.n	8004908 <SPI_EndRxTxTransaction+0x78>
 8004922:	e000      	b.n	8004926 <SPI_EndRxTxTransaction+0x96>
        break;
 8004924:	bf00      	nop
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000000 	.word	0x20000000
 8004934:	165e9f81 	.word	0x165e9f81

08004938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e041      	b.n	80049ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd f8f8 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 f9a8 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d001      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e044      	b.n	8004a7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a88 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x6c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1a:	d013      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x6c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1a      	ldr	r2, [pc, #104]	@ (8004a8c <HAL_TIM_Base_Start_IT+0xb4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x6c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x6c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a17      	ldr	r2, [pc, #92]	@ (8004a94 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x6c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b06      	cmp	r3, #6
 8004a54:	d010      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	e007      	b.n	8004a78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0202 	mvn.w	r2, #2
 8004ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8d2 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8c4 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8d5 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0204 	mvn.w	r2, #4
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8ac 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f89e 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8af 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0208 	mvn.w	r2, #8
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f886 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f878 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f889 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01b      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0210 	mvn.w	r2, #16
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f860 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f852 	bl	8004c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f863 	bl	8004ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0201 	mvn.w	r2, #1
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc fe7a 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8e6 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f834 	bl	8004cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0220 	mvn.w	r2, #32
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8b8 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc8 <TIM_Base_SetConfig+0xfc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00f      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cea:	d00b      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a37      	ldr	r2, [pc, #220]	@ (8004dcc <TIM_Base_SetConfig+0x100>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <TIM_Base_SetConfig+0x104>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0x38>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	@ (8004dd4 <TIM_Base_SetConfig+0x108>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <TIM_Base_SetConfig+0xfc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a28      	ldr	r2, [pc, #160]	@ (8004dcc <TIM_Base_SetConfig+0x100>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a27      	ldr	r2, [pc, #156]	@ (8004dd0 <TIM_Base_SetConfig+0x104>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a26      	ldr	r2, [pc, #152]	@ (8004dd4 <TIM_Base_SetConfig+0x108>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a25      	ldr	r2, [pc, #148]	@ (8004dd8 <TIM_Base_SetConfig+0x10c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a24      	ldr	r2, [pc, #144]	@ (8004ddc <TIM_Base_SetConfig+0x110>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <TIM_Base_SetConfig+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc8 <TIM_Base_SetConfig+0xfc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc feb6 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fd9f 	bl	8005994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	@ 0x28
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d175      	bne.n	8004fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Transmit+0x2c>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e06e      	b.n	8004fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	@ 0x21
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fd f807 	bl	8001efc <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f20:	e02e      	b.n	8004f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	@ 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fb3b 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e03a      	b.n	8004fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e007      	b.n	8004f72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1cb      	bne.n	8004f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2140      	movs	r1, #64	@ 0x40
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fb07 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e006      	b.n	8004fba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d121      	bne.n	8005020 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Transmit_IT+0x26>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e01a      	b.n	8005022 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2221      	movs	r2, #33	@ 0x21
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800501a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ba      	sub	sp, #232	@ 0xe8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800506e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fbc2 	bl	8005818 <UART_Receive_IT>
      return;
 8005094:	e25b      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80de 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80d1 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800513e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 81f2 	beq.w	8005544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb4d 	bl	8005818 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_UART_IRQHandler+0x17a>
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d04f      	beq.n	800524a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa55 	bl	800565a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b40      	cmp	r3, #64	@ 0x40
 80051bc:	d141      	bne.n	8005242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1d9      	bne.n	80051be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	4a7e      	ldr	r2, [pc, #504]	@ (8005410 <HAL_UART_IRQHandler+0x3e0>)
 8005218:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fc0f 	bl	8002a42 <HAL_DMA_Abort_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00e      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f99e 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00a      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f99a 	bl	800557c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e006      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f996 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005256:	e175      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	bf00      	nop
    return;
 800525a:	e173      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 814f 	bne.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8148 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8141 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a2:	2b40      	cmp	r3, #64	@ 0x40
 80052a4:	f040 80b6 	bne.w	8005414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8145 	beq.w	8005548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f080 813e 	bcs.w	8005548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052de:	f000 8088 	beq.w	80053f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800530e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800531a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1d9      	bne.n	80052e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800533e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005352:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005356:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800535a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e1      	bne.n	800532e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800537a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800537c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3314      	adds	r3, #20
 800538a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800538e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800539c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e3      	bne.n	800536a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e3      	bne.n	80053b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fd fab8 	bl	8002962 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	b29b      	uxth	r3, r3
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8c1 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540e:	e09b      	b.n	8005548 <HAL_UART_IRQHandler+0x518>
 8005410:	08005721 	.word	0x08005721
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808e 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8089 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800545e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005496:	633a      	str	r2, [r7, #48]	@ 0x30
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f847 	bl	8005590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005502:	e023      	b.n	800554c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f913 	bl	8005748 <UART_Transmit_IT>
    return;
 8005522:	e014      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f953 	bl	80057e8 <UART_EndTransmit_IT>
    return;
 8005542:	e004      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    return;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 800554c:	bf00      	nop
  }
}
 800554e:	37e8      	adds	r7, #232	@ 0xe8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b8:	e03b      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055c0:	d037      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fc fc9b 	bl	8001efc <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e03a      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d023      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b80      	cmp	r3, #128	@ 0x80
 80055ee:	d020      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b40      	cmp	r3, #64	@ 0x40
 80055f4:	d01d      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b08      	cmp	r3, #8
 8005602:	d116      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f81d 	bl	800565a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2208      	movs	r2, #8
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e00f      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d0b4      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800565a:	b480      	push	{r7}
 800565c:	b095      	sub	sp, #84	@ 0x54
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005682:	643a      	str	r2, [r7, #64]	@ 0x40
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e5      	bne.n	8005662 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d119      	bne.n	8005706 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0310 	bic.w	r3, r3, #16
 80056e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056f2:	61ba      	str	r2, [r7, #24]
 80056f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005714:	bf00      	nop
 8005716:	3754      	adds	r7, #84	@ 0x54
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ff1e 	bl	800557c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b21      	cmp	r3, #33	@ 0x21
 800575a:	d13e      	bne.n	80057da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005764:	d114      	bne.n	8005790 <UART_Transmit_IT+0x48>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d110      	bne.n	8005790 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005782:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]
 800578e:	e008      	b.n	80057a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6211      	str	r1, [r2, #32]
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4619      	mov	r1, r3
 80057b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057da:	2302      	movs	r3, #2
  }
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fea3 	bl	8005554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	@ 0x30
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b22      	cmp	r3, #34	@ 0x22
 800582a:	f040 80ae 	bne.w	800598a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005836:	d117      	bne.n	8005868 <UART_Receive_IT+0x50>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	b29a      	uxth	r2, r3
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	629a      	str	r2, [r3, #40]	@ 0x28
 8005866:	e026      	b.n	80058b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	d007      	beq.n	800588c <UART_Receive_IT+0x74>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <UART_Receive_IT+0x82>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e008      	b.n	80058ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29b      	uxth	r3, r3
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4619      	mov	r1, r3
 80058c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d15d      	bne.n	8005986 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0220 	bic.w	r2, r2, #32
 80058d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d135      	bne.n	800597c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	613b      	str	r3, [r7, #16]
   return(result);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f023 0310 	bic.w	r3, r3, #16
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005936:	623a      	str	r2, [r7, #32]
 8005938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	69f9      	ldr	r1, [r7, #28]
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	61bb      	str	r3, [r7, #24]
   return(result);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e5      	bne.n	8005916 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d10a      	bne.n	800596e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fe0b 	bl	8005590 <HAL_UARTEx_RxEventCallback>
 800597a:	e002      	b.n	8005982 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fdf3 	bl	8005568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e002      	b.n	800598c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	@ 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005998:	b0c0      	sub	sp, #256	@ 0x100
 800599a:	af00      	add	r7, sp, #0
 800599c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	68d9      	ldr	r1, [r3, #12]
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	ea40 0301 	orr.w	r3, r0, r1
 80059bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059ec:	f021 010c 	bic.w	r1, r1, #12
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059fa:	430b      	orrs	r3, r1
 80059fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	6999      	ldr	r1, [r3, #24]
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	ea40 0301 	orr.w	r3, r0, r1
 8005a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b8f      	ldr	r3, [pc, #572]	@ (8005c60 <UART_SetConfig+0x2cc>)
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d005      	beq.n	8005a34 <UART_SetConfig+0xa0>
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c64 <UART_SetConfig+0x2d0>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d104      	bne.n	8005a3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fe fb1a 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 8005a38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a3c:	e003      	b.n	8005a46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a3e:	f7fe fb01 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005a42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a50:	f040 810c 	bne.w	8005c6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	1891      	adds	r1, r2, r2
 8005a6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a6e:	415b      	adcs	r3, r3
 8005a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a76:	4621      	mov	r1, r4
 8005a78:	eb12 0801 	adds.w	r8, r2, r1
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	eb43 0901 	adc.w	r9, r3, r1
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a96:	4690      	mov	r8, r2
 8005a98:	4699      	mov	r9, r3
 8005a9a:	4623      	mov	r3, r4
 8005a9c:	eb18 0303 	adds.w	r3, r8, r3
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	eb49 0303 	adc.w	r3, r9, r3
 8005aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	18db      	adds	r3, r3, r3
 8005ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac8:	4613      	mov	r3, r2
 8005aca:	eb42 0303 	adc.w	r3, r2, r3
 8005ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ad8:	f7fb f86e 	bl	8000bb8 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b61      	ldr	r3, [pc, #388]	@ (8005c68 <UART_SetConfig+0x2d4>)
 8005ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	011c      	lsls	r4, r3, #4
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005af4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	1891      	adds	r1, r2, r2
 8005b02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b04:	415b      	adcs	r3, r3
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b12:	4649      	mov	r1, r9
 8005b14:	eb43 0b01 	adc.w	fp, r3, r1
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2c:	4692      	mov	sl, r2
 8005b2e:	469b      	mov	fp, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	eb1a 0303 	adds.w	r3, sl, r3
 8005b36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	18db      	adds	r3, r3, r3
 8005b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5e:	4613      	mov	r3, r2
 8005b60:	eb42 0303 	adc.w	r3, r2, r3
 8005b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b6e:	f7fb f823 	bl	8000bb8 <__aeabi_uldivmod>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	4b3b      	ldr	r3, [pc, #236]	@ (8005c68 <UART_SetConfig+0x2d4>)
 8005b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	2264      	movs	r2, #100	@ 0x64
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	1acb      	subs	r3, r1, r3
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b8e:	4b36      	ldr	r3, [pc, #216]	@ (8005c68 <UART_SetConfig+0x2d4>)
 8005b90:	fba3 2302 	umull	r2, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b9c:	441c      	add	r4, r3
 8005b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	1851      	adds	r1, r2, r1
 8005bc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	414b      	adcs	r3, r1
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bd8:	4659      	mov	r1, fp
 8005bda:	00cb      	lsls	r3, r1, #3
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be2:	4651      	mov	r1, sl
 8005be4:	00ca      	lsls	r2, r1, #3
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	4642      	mov	r2, r8
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	eb42 0303 	adc.w	r3, r2, r3
 8005bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c14:	460b      	mov	r3, r1
 8005c16:	18db      	adds	r3, r3, r3
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c2a:	f7fa ffc5 	bl	8000bb8 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <UART_SetConfig+0x2d4>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2164      	movs	r1, #100	@ 0x64
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	3332      	adds	r3, #50	@ 0x32
 8005c46:	4a08      	ldr	r2, [pc, #32]	@ (8005c68 <UART_SetConfig+0x2d4>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f003 0207 	and.w	r2, r3, #7
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4422      	add	r2, r4
 8005c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c5c:	e106      	b.n	8005e6c <UART_SetConfig+0x4d8>
 8005c5e:	bf00      	nop
 8005c60:	40011000 	.word	0x40011000
 8005c64:	40011400 	.word	0x40011400
 8005c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c7e:	4642      	mov	r2, r8
 8005c80:	464b      	mov	r3, r9
 8005c82:	1891      	adds	r1, r2, r2
 8005c84:	6239      	str	r1, [r7, #32]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c8e:	4641      	mov	r1, r8
 8005c90:	1854      	adds	r4, r2, r1
 8005c92:	4649      	mov	r1, r9
 8005c94:	eb43 0501 	adc.w	r5, r3, r1
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	00eb      	lsls	r3, r5, #3
 8005ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca6:	00e2      	lsls	r2, r4, #3
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	4643      	mov	r3, r8
 8005cae:	18e3      	adds	r3, r4, r3
 8005cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	eb45 0303 	adc.w	r3, r5, r3
 8005cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cda:	4629      	mov	r1, r5
 8005cdc:	008b      	lsls	r3, r1, #2
 8005cde:	4621      	mov	r1, r4
 8005ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	008a      	lsls	r2, r1, #2
 8005ce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cec:	f7fa ff64 	bl	8000bb8 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4b60      	ldr	r3, [pc, #384]	@ (8005e78 <UART_SetConfig+0x4e4>)
 8005cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	011c      	lsls	r4, r3, #4
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	61b9      	str	r1, [r7, #24]
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d20:	4641      	mov	r1, r8
 8005d22:	1851      	adds	r1, r2, r1
 8005d24:	6139      	str	r1, [r7, #16]
 8005d26:	4649      	mov	r1, r9
 8005d28:	414b      	adcs	r3, r1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d38:	4659      	mov	r1, fp
 8005d3a:	00cb      	lsls	r3, r1, #3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d42:	4651      	mov	r1, sl
 8005d44:	00ca      	lsls	r2, r1, #3
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d54:	464b      	mov	r3, r9
 8005d56:	460a      	mov	r2, r1
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d78:	4649      	mov	r1, r9
 8005d7a:	008b      	lsls	r3, r1, #2
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d82:	4641      	mov	r1, r8
 8005d84:	008a      	lsls	r2, r1, #2
 8005d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d8a:	f7fa ff15 	bl	8000bb8 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	4b38      	ldr	r3, [pc, #224]	@ (8005e78 <UART_SetConfig+0x4e4>)
 8005d96:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2264      	movs	r2, #100	@ 0x64
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	1acb      	subs	r3, r1, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	3332      	adds	r3, #50	@ 0x32
 8005da8:	4a33      	ldr	r2, [pc, #204]	@ (8005e78 <UART_SetConfig+0x4e4>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db4:	441c      	add	r4, r3
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	1851      	adds	r1, r2, r1
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	4649      	mov	r1, r9
 8005ddc:	414b      	adcs	r3, r1
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dec:	4659      	mov	r1, fp
 8005dee:	00cb      	lsls	r3, r1, #3
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df6:	4651      	mov	r1, sl
 8005df8:	00ca      	lsls	r2, r1, #3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4642      	mov	r2, r8
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e06:	464b      	mov	r3, r9
 8005e08:	460a      	mov	r2, r1
 8005e0a:	eb42 0303 	adc.w	r3, r2, r3
 8005e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e28:	4649      	mov	r1, r9
 8005e2a:	008b      	lsls	r3, r1, #2
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e32:	4641      	mov	r1, r8
 8005e34:	008a      	lsls	r2, r1, #2
 8005e36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e3a:	f7fa febd 	bl	8000bb8 <__aeabi_uldivmod>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <UART_SetConfig+0x4e4>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	2164      	movs	r1, #100	@ 0x64
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	3332      	adds	r3, #50	@ 0x32
 8005e56:	4a08      	ldr	r2, [pc, #32]	@ (8005e78 <UART_SetConfig+0x4e4>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4422      	add	r2, r4
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e72:	46bd      	mov	sp, r7
 8005e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e78:	51eb851f 	.word	0x51eb851f

08005e7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e80:	4904      	ldr	r1, [pc, #16]	@ (8005e94 <MX_FATFS_Init+0x18>)
 8005e82:	4805      	ldr	r0, [pc, #20]	@ (8005e98 <MX_FATFS_Init+0x1c>)
 8005e84:	f003 f91e 	bl	80090c4 <FATFS_LinkDriver>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4b03      	ldr	r3, [pc, #12]	@ (8005e9c <MX_FATFS_Init+0x20>)
 8005e8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200003b8 	.word	0x200003b8
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	200003b4 	.word	0x200003b4

08005ea0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005ea4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f9d3 	bl	8006268 <USER_SPI_initialize>
 8005ec2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fab1 	bl	8006440 <USER_SPI_status>
 8005ede:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005ef8:	7bf8      	ldrb	r0, [r7, #15]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	f000 fab4 	bl	800646c <USER_SPI_read>
 8005f04:	4603      	mov	r3, r0
    return RES_OK;
  /* USER CODE END READ */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005f1e:	7bf8      	ldrb	r0, [r7, #15]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	f000 fb07 	bl	8006538 <USER_SPI_write>
 8005f2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	603a      	str	r2, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
 8005f40:	460b      	mov	r3, r1
 8005f42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005f44:	79b9      	ldrb	r1, [r7, #6]
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fb70 	bl	8006630 <USER_SPI_ioctl>
 8005f50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005f64:	f7fb ffca 	bl	8001efc <HAL_GetTick>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	4a04      	ldr	r2, [pc, #16]	@ (8005f7c <SPI_Timer_On+0x20>)
 8005f6c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	@ (8005f80 <SPI_Timer_On+0x24>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200003c0 	.word	0x200003c0
 8005f80:	200003c4 	.word	0x200003c4

08005f84 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005f88:	f7fb ffb8 	bl	8001efc <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <SPI_Timer_Status+0x24>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <SPI_Timer_Status+0x28>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	bf34      	ite	cc
 8005f9c:	2301      	movcc	r3, #1
 8005f9e:	2300      	movcs	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200003c0 	.word	0x200003c0
 8005fac:	200003c4 	.word	0x200003c4

08005fb0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005fba:	f107 020f 	add.w	r2, r7, #15
 8005fbe:	1df9      	adds	r1, r7, #7
 8005fc0:	2332      	movs	r3, #50	@ 0x32
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4804      	ldr	r0, [pc, #16]	@ (8005fd8 <xchg_spi+0x28>)
 8005fc8:	f7fe fa31 	bl	800442e <HAL_SPI_TransmitReceive>
    return rxDat;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002b0 	.word	0x200002b0

08005fdc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e00a      	b.n	8006002 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	18d4      	adds	r4, r2, r3
 8005ff2:	20ff      	movs	r0, #255	@ 0xff
 8005ff4:	f7ff ffdc 	bl	8005fb0 <xchg_spi>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d3f0      	bcc.n	8005fec <rcvr_spi_multi+0x10>
	}
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bd90      	pop	{r4, r7, pc}

08006014 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	b29a      	uxth	r2, r3
 8006022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4803      	ldr	r0, [pc, #12]	@ (8006038 <xmit_spi_multi+0x24>)
 800602a:	f7fe f8bc 	bl	80041a6 <HAL_SPI_Transmit>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200002b0 	.word	0x200002b0

0800603c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006044:	f7fb ff5a 	bl	8001efc <HAL_GetTick>
 8006048:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800604e:	20ff      	movs	r0, #255	@ 0xff
 8006050:	f7ff ffae 	bl	8005fb0 <xchg_spi>
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2bff      	cmp	r3, #255	@ 0xff
 800605c:	d007      	beq.n	800606e <wait_ready+0x32>
 800605e:	f7fb ff4d 	bl	8001efc <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	429a      	cmp	r2, r3
 800606c:	d8ef      	bhi.n	800604e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2bff      	cmp	r3, #255	@ 0xff
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006088:	2201      	movs	r2, #1
 800608a:	2120      	movs	r1, #32
 800608c:	4803      	ldr	r0, [pc, #12]	@ (800609c <despiselect+0x18>)
 800608e:	f7fc fe7f 	bl	8002d90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006092:	20ff      	movs	r0, #255	@ 0xff
 8006094:	f7ff ff8c 	bl	8005fb0 <xchg_spi>

}
 8006098:	bf00      	nop
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40020400 	.word	0x40020400

080060a0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80060a4:	2200      	movs	r2, #0
 80060a6:	2120      	movs	r1, #32
 80060a8:	4809      	ldr	r0, [pc, #36]	@ (80060d0 <spiselect+0x30>)
 80060aa:	f7fc fe71 	bl	8002d90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80060ae:	20ff      	movs	r0, #255	@ 0xff
 80060b0:	f7ff ff7e 	bl	8005fb0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80060b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80060b8:	f7ff ffc0 	bl	800603c <wait_ready>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <spiselect+0x26>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e002      	b.n	80060cc <spiselect+0x2c>

	despiselect();
 80060c6:	f7ff ffdd 	bl	8006084 <despiselect>
	return 0;	/* Timeout */
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40020400 	.word	0x40020400

080060d4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80060de:	20c8      	movs	r0, #200	@ 0xc8
 80060e0:	f7ff ff3c 	bl	8005f5c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80060e4:	20ff      	movs	r0, #255	@ 0xff
 80060e6:	f7ff ff63 	bl	8005fb0 <xchg_spi>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2bff      	cmp	r3, #255	@ 0xff
 80060f2:	d104      	bne.n	80060fe <rcvr_datablock+0x2a>
 80060f4:	f7ff ff46 	bl	8005f84 <SPI_Timer_Status>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f2      	bne.n	80060e4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2bfe      	cmp	r3, #254	@ 0xfe
 8006102:	d001      	beq.n	8006108 <rcvr_datablock+0x34>
 8006104:	2300      	movs	r3, #0
 8006106:	e00a      	b.n	800611e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff ff66 	bl	8005fdc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006110:	20ff      	movs	r0, #255	@ 0xff
 8006112:	f7ff ff4d 	bl	8005fb0 <xchg_spi>
 8006116:	20ff      	movs	r0, #255	@ 0xff
 8006118:	f7ff ff4a 	bl	8005fb0 <xchg_spi>

	return 1;						/* Function succeeded */
 800611c:	2301      	movs	r3, #1
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006132:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006136:	f7ff ff81 	bl	800603c <wait_ready>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <xmit_datablock+0x1e>
 8006140:	2300      	movs	r3, #0
 8006142:	e01e      	b.n	8006182 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff ff32 	bl	8005fb0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2bfd      	cmp	r3, #253	@ 0xfd
 8006150:	d016      	beq.n	8006180 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff5c 	bl	8006014 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800615c:	20ff      	movs	r0, #255	@ 0xff
 800615e:	f7ff ff27 	bl	8005fb0 <xchg_spi>
 8006162:	20ff      	movs	r0, #255	@ 0xff
 8006164:	f7ff ff24 	bl	8005fb0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006168:	20ff      	movs	r0, #255	@ 0xff
 800616a:	f7ff ff21 	bl	8005fb0 <xchg_spi>
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2b05      	cmp	r3, #5
 800617a:	d001      	beq.n	8006180 <xmit_datablock+0x5a>
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <xmit_datablock+0x5c>
	}
	return 1;
 8006180:	2301      	movs	r3, #1
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	4603      	mov	r3, r0
 8006192:	6039      	str	r1, [r7, #0]
 8006194:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619a:	2b00      	cmp	r3, #0
 800619c:	da0e      	bge.n	80061bc <send_cmd+0x32>
		cmd &= 0x7F;
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80061a6:	2100      	movs	r1, #0
 80061a8:	2037      	movs	r0, #55	@ 0x37
 80061aa:	f7ff ffee 	bl	800618a <send_cmd>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d901      	bls.n	80061bc <send_cmd+0x32>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	e051      	b.n	8006260 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d008      	beq.n	80061d4 <send_cmd+0x4a>
		despiselect();
 80061c2:	f7ff ff5f 	bl	8006084 <despiselect>
		if (!spiselect()) return 0xFF;
 80061c6:	f7ff ff6b 	bl	80060a0 <spiselect>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <send_cmd+0x4a>
 80061d0:	23ff      	movs	r3, #255	@ 0xff
 80061d2:	e045      	b.n	8006260 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fee7 	bl	8005fb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	0e1b      	lsrs	r3, r3, #24
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fee1 	bl	8005fb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fedb 	bl	8005fb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fed5 	bl	8005fb0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fed0 	bl	8005fb0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <send_cmd+0x94>
 800621a:	2395      	movs	r3, #149	@ 0x95
 800621c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d101      	bne.n	8006228 <send_cmd+0x9e>
 8006224:	2387      	movs	r3, #135	@ 0x87
 8006226:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fec0 	bl	8005fb0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b0c      	cmp	r3, #12
 8006234:	d102      	bne.n	800623c <send_cmd+0xb2>
 8006236:	20ff      	movs	r0, #255	@ 0xff
 8006238:	f7ff feba 	bl	8005fb0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800623c:	230a      	movs	r3, #10
 800623e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006240:	20ff      	movs	r0, #255	@ 0xff
 8006242:	f7ff feb5 	bl	8005fb0 <xchg_spi>
 8006246:	4603      	mov	r3, r0
 8006248:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800624a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800624e:	2b00      	cmp	r3, #0
 8006250:	da05      	bge.n	800625e <send_cmd+0xd4>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	3b01      	subs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <send_cmd+0xb6>

	return res;							/* Return received response */
 800625e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <USER_SPI_initialize+0x14>
 8006278:	2301      	movs	r3, #1
 800627a:	e0d6      	b.n	800642a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800627c:	4b6d      	ldr	r3, [pc, #436]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <USER_SPI_initialize+0x2a>
 800628a:	4b6a      	ldr	r3, [pc, #424]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e0cb      	b.n	800642a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006292:	4b69      	ldr	r3, [pc, #420]	@ (8006438 <USER_SPI_initialize+0x1d0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800629c:	4b66      	ldr	r3, [pc, #408]	@ (8006438 <USER_SPI_initialize+0x1d0>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80062a4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80062a6:	230a      	movs	r3, #10
 80062a8:	73fb      	strb	r3, [r7, #15]
 80062aa:	e005      	b.n	80062b8 <USER_SPI_initialize+0x50>
 80062ac:	20ff      	movs	r0, #255	@ 0xff
 80062ae:	f7ff fe7f 	bl	8005fb0 <xchg_spi>
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f6      	bne.n	80062ac <USER_SPI_initialize+0x44>

	ty = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80062c2:	2100      	movs	r1, #0
 80062c4:	2000      	movs	r0, #0
 80062c6:	f7ff ff60 	bl	800618a <send_cmd>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f040 808b 	bne.w	80063e8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80062d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80062d6:	f7ff fe41 	bl	8005f5c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80062da:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80062de:	2008      	movs	r0, #8
 80062e0:	f7ff ff53 	bl	800618a <send_cmd>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d151      	bne.n	800638e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
 80062ee:	e00d      	b.n	800630c <USER_SPI_initialize+0xa4>
 80062f0:	7bfc      	ldrb	r4, [r7, #15]
 80062f2:	20ff      	movs	r0, #255	@ 0xff
 80062f4:	f7ff fe5c 	bl	8005fb0 <xchg_spi>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	f104 0310 	add.w	r3, r4, #16
 8006300:	443b      	add	r3, r7
 8006302:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	3301      	adds	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d9ee      	bls.n	80062f0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006312:	7abb      	ldrb	r3, [r7, #10]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d167      	bne.n	80063e8 <USER_SPI_initialize+0x180>
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	2baa      	cmp	r3, #170	@ 0xaa
 800631c:	d164      	bne.n	80063e8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800631e:	bf00      	nop
 8006320:	f7ff fe30 	bl	8005f84 <SPI_Timer_Status>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <USER_SPI_initialize+0xd2>
 800632a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800632e:	20a9      	movs	r0, #169	@ 0xa9
 8006330:	f7ff ff2b 	bl	800618a <send_cmd>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f2      	bne.n	8006320 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800633a:	f7ff fe23 	bl	8005f84 <SPI_Timer_Status>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d051      	beq.n	80063e8 <USER_SPI_initialize+0x180>
 8006344:	2100      	movs	r1, #0
 8006346:	203a      	movs	r0, #58	@ 0x3a
 8006348:	f7ff ff1f 	bl	800618a <send_cmd>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d14a      	bne.n	80063e8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
 8006356:	e00d      	b.n	8006374 <USER_SPI_initialize+0x10c>
 8006358:	7bfc      	ldrb	r4, [r7, #15]
 800635a:	20ff      	movs	r0, #255	@ 0xff
 800635c:	f7ff fe28 	bl	8005fb0 <xchg_spi>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	f104 0310 	add.w	r3, r4, #16
 8006368:	443b      	add	r3, r7
 800636a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	3301      	adds	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d9ee      	bls.n	8006358 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800637a:	7a3b      	ldrb	r3, [r7, #8]
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USER_SPI_initialize+0x120>
 8006384:	230c      	movs	r3, #12
 8006386:	e000      	b.n	800638a <USER_SPI_initialize+0x122>
 8006388:	2304      	movs	r3, #4
 800638a:	737b      	strb	r3, [r7, #13]
 800638c:	e02c      	b.n	80063e8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800638e:	2100      	movs	r1, #0
 8006390:	20a9      	movs	r0, #169	@ 0xa9
 8006392:	f7ff fefa 	bl	800618a <send_cmd>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d804      	bhi.n	80063a6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800639c:	2302      	movs	r3, #2
 800639e:	737b      	strb	r3, [r7, #13]
 80063a0:	23a9      	movs	r3, #169	@ 0xa9
 80063a2:	73bb      	strb	r3, [r7, #14]
 80063a4:	e003      	b.n	80063ae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80063a6:	2301      	movs	r3, #1
 80063a8:	737b      	strb	r3, [r7, #13]
 80063aa:	2301      	movs	r3, #1
 80063ac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80063ae:	bf00      	nop
 80063b0:	f7ff fde8 	bl	8005f84 <SPI_Timer_Status>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <USER_SPI_initialize+0x162>
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fee3 	bl	800618a <send_cmd>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f2      	bne.n	80063b0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80063ca:	f7ff fddb 	bl	8005f84 <SPI_Timer_Status>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <USER_SPI_initialize+0x17c>
 80063d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063d8:	2010      	movs	r0, #16
 80063da:	f7ff fed6 	bl	800618a <send_cmd>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USER_SPI_initialize+0x180>
				ty = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80063e8:	4a14      	ldr	r2, [pc, #80]	@ (800643c <USER_SPI_initialize+0x1d4>)
 80063ea:	7b7b      	ldrb	r3, [r7, #13]
 80063ec:	7013      	strb	r3, [r2, #0]
	despiselect();
 80063ee:	f7ff fe49 	bl	8006084 <despiselect>

	if (ty) {			/* OK */
 80063f2:	7b7b      	ldrb	r3, [r7, #13]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d012      	beq.n	800641e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80063f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <USER_SPI_initialize+0x1d0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <USER_SPI_initialize+0x1d0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0210 	orr.w	r2, r2, #16
 800640a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800640c:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	e002      	b.n	8006424 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800641e:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 8006420:	2201      	movs	r2, #1
 8006422:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006424:	4b03      	ldr	r3, [pc, #12]	@ (8006434 <USER_SPI_initialize+0x1cc>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b2db      	uxtb	r3, r3
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	bf00      	nop
 8006434:	20000020 	.word	0x20000020
 8006438:	200002b0 	.word	0x200002b0
 800643c:	200003bc 	.word	0x200003bc

08006440 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USER_SPI_status+0x14>
 8006450:	2301      	movs	r3, #1
 8006452:	e002      	b.n	800645a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <USER_SPI_status+0x28>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b2db      	uxtb	r3, r3
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000020 	.word	0x20000020

0800646c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <USER_SPI_read+0x1c>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USER_SPI_read+0x20>
 8006488:	2304      	movs	r3, #4
 800648a:	e04d      	b.n	8006528 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800648c:	4b28      	ldr	r3, [pc, #160]	@ (8006530 <USER_SPI_read+0xc4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <USER_SPI_read+0x32>
 800649a:	2303      	movs	r3, #3
 800649c:	e044      	b.n	8006528 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800649e:	4b25      	ldr	r3, [pc, #148]	@ (8006534 <USER_SPI_read+0xc8>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <USER_SPI_read+0x44>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	025b      	lsls	r3, r3, #9
 80064ae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d111      	bne.n	80064da <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	2011      	movs	r0, #17
 80064ba:	f7ff fe66 	bl	800618a <send_cmd>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d129      	bne.n	8006518 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80064c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064c8:	68b8      	ldr	r0, [r7, #8]
 80064ca:	f7ff fe03 	bl	80060d4 <rcvr_datablock>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d021      	beq.n	8006518 <USER_SPI_read+0xac>
			count = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	e01e      	b.n	8006518 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	2012      	movs	r0, #18
 80064de:	f7ff fe54 	bl	800618a <send_cmd>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d117      	bne.n	8006518 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80064e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f7ff fdf1 	bl	80060d4 <rcvr_datablock>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <USER_SPI_read+0xa2>
				buff += 512;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80064fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	3b01      	subs	r3, #1
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ed      	bne.n	80064e8 <USER_SPI_read+0x7c>
 800650c:	e000      	b.n	8006510 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800650e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006510:	2100      	movs	r1, #0
 8006512:	200c      	movs	r0, #12
 8006514:	f7ff fe39 	bl	800618a <send_cmd>
		}
	}
	despiselect();
 8006518:	f7ff fdb4 	bl	8006084 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000020 	.word	0x20000020
 8006534:	200003bc 	.word	0x200003bc

08006538 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <USER_SPI_write+0x1c>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USER_SPI_write+0x20>
 8006554:	2304      	movs	r3, #4
 8006556:	e063      	b.n	8006620 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006558:	4b33      	ldr	r3, [pc, #204]	@ (8006628 <USER_SPI_write+0xf0>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USER_SPI_write+0x32>
 8006566:	2303      	movs	r3, #3
 8006568:	e05a      	b.n	8006620 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <USER_SPI_write+0xf0>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <USER_SPI_write+0x44>
 8006578:	2302      	movs	r3, #2
 800657a:	e051      	b.n	8006620 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800657c:	4b2b      	ldr	r3, [pc, #172]	@ (800662c <USER_SPI_write+0xf4>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <USER_SPI_write+0x56>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	025b      	lsls	r3, r3, #9
 800658c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d110      	bne.n	80065b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	2018      	movs	r0, #24
 8006598:	f7ff fdf7 	bl	800618a <send_cmd>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d136      	bne.n	8006610 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80065a2:	21fe      	movs	r1, #254	@ 0xfe
 80065a4:	68b8      	ldr	r0, [r7, #8]
 80065a6:	f7ff fdbe 	bl	8006126 <xmit_datablock>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02f      	beq.n	8006610 <USER_SPI_write+0xd8>
			count = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	e02c      	b.n	8006610 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80065b6:	4b1d      	ldr	r3, [pc, #116]	@ (800662c <USER_SPI_write+0xf4>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0306 	and.w	r3, r3, #6
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <USER_SPI_write+0x92>
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	2097      	movs	r0, #151	@ 0x97
 80065c6:	f7ff fde0 	bl	800618a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	2019      	movs	r0, #25
 80065ce:	f7ff fddc 	bl	800618a <send_cmd>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11b      	bne.n	8006610 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80065d8:	21fc      	movs	r1, #252	@ 0xfc
 80065da:	68b8      	ldr	r0, [r7, #8]
 80065dc:	f7ff fda3 	bl	8006126 <xmit_datablock>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <USER_SPI_write+0xc4>
				buff += 512;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80065ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ee      	bne.n	80065d8 <USER_SPI_write+0xa0>
 80065fa:	e000      	b.n	80065fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80065fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80065fe:	21fd      	movs	r1, #253	@ 0xfd
 8006600:	2000      	movs	r0, #0
 8006602:	f7ff fd90 	bl	8006126 <xmit_datablock>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <USER_SPI_write+0xd8>
 800660c:	2301      	movs	r3, #1
 800660e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006610:	f7ff fd38 	bl	8006084 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000020 	.word	0x20000020
 800662c:	200003bc 	.word	0x200003bc

08006630 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	603a      	str	r2, [r7, #0]
 800663a:	71fb      	strb	r3, [r7, #7]
 800663c:	460b      	mov	r3, r1
 800663e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <USER_SPI_ioctl+0x1a>
 8006646:	2304      	movs	r3, #4
 8006648:	e15a      	b.n	8006900 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800664a:	4baf      	ldr	r3, [pc, #700]	@ (8006908 <USER_SPI_ioctl+0x2d8>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <USER_SPI_ioctl+0x2c>
 8006658:	2303      	movs	r3, #3
 800665a:	e151      	b.n	8006900 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006662:	79bb      	ldrb	r3, [r7, #6]
 8006664:	2b04      	cmp	r3, #4
 8006666:	f200 8136 	bhi.w	80068d6 <USER_SPI_ioctl+0x2a6>
 800666a:	a201      	add	r2, pc, #4	@ (adr r2, 8006670 <USER_SPI_ioctl+0x40>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006685 	.word	0x08006685
 8006674:	08006699 	.word	0x08006699
 8006678:	080068d7 	.word	0x080068d7
 800667c:	08006745 	.word	0x08006745
 8006680:	0800683b 	.word	0x0800683b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006684:	f7ff fd0c 	bl	80060a0 <spiselect>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8127 	beq.w	80068de <USER_SPI_ioctl+0x2ae>
 8006690:	2300      	movs	r3, #0
 8006692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006696:	e122      	b.n	80068de <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006698:	2100      	movs	r1, #0
 800669a:	2009      	movs	r0, #9
 800669c:	f7ff fd75 	bl	800618a <send_cmd>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 811d 	bne.w	80068e2 <USER_SPI_ioctl+0x2b2>
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	2110      	movs	r1, #16
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fd10 	bl	80060d4 <rcvr_datablock>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8113 	beq.w	80068e2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80066bc:	7b3b      	ldrb	r3, [r7, #12]
 80066be:	099b      	lsrs	r3, r3, #6
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d111      	bne.n	80066ea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80066c6:	7d7b      	ldrb	r3, [r7, #21]
 80066c8:	461a      	mov	r2, r3
 80066ca:	7d3b      	ldrb	r3, [r7, #20]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4413      	add	r3, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80066da:	4413      	add	r3, r2
 80066dc:	3301      	adds	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	029a      	lsls	r2, r3, #10
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e028      	b.n	800673c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80066ea:	7c7b      	ldrb	r3, [r7, #17]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	7dbb      	ldrb	r3, [r7, #22]
 80066f4:	09db      	lsrs	r3, r3, #7
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	7d7b      	ldrb	r3, [r7, #21]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0306 	and.w	r3, r3, #6
 8006706:	b2db      	uxtb	r3, r3
 8006708:	4413      	add	r3, r2
 800670a:	b2db      	uxtb	r3, r3
 800670c:	3302      	adds	r3, #2
 800670e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006712:	7d3b      	ldrb	r3, [r7, #20]
 8006714:	099b      	lsrs	r3, r3, #6
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	7cfb      	ldrb	r3, [r7, #19]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	7cbb      	ldrb	r3, [r7, #18]
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006728:	4413      	add	r3, r2
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800672e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006732:	3b09      	subs	r3, #9
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	409a      	lsls	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006742:	e0ce      	b.n	80068e2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006744:	4b71      	ldr	r3, [pc, #452]	@ (800690c <USER_SPI_ioctl+0x2dc>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d031      	beq.n	80067b4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006750:	2100      	movs	r1, #0
 8006752:	208d      	movs	r0, #141	@ 0x8d
 8006754:	f7ff fd19 	bl	800618a <send_cmd>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 80c3 	bne.w	80068e6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006760:	20ff      	movs	r0, #255	@ 0xff
 8006762:	f7ff fc25 	bl	8005fb0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006766:	f107 030c 	add.w	r3, r7, #12
 800676a:	2110      	movs	r1, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fcb1 	bl	80060d4 <rcvr_datablock>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80b6 	beq.w	80068e6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800677a:	2330      	movs	r3, #48	@ 0x30
 800677c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006780:	e007      	b.n	8006792 <USER_SPI_ioctl+0x162>
 8006782:	20ff      	movs	r0, #255	@ 0xff
 8006784:	f7ff fc14 	bl	8005fb0 <xchg_spi>
 8006788:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800678c:	3b01      	subs	r3, #1
 800678e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006792:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f3      	bne.n	8006782 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800679a:	7dbb      	ldrb	r3, [r7, #22]
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	2310      	movs	r3, #16
 80067a4:	fa03 f202 	lsl.w	r2, r3, r2
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80067b2:	e098      	b.n	80068e6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80067b4:	2100      	movs	r1, #0
 80067b6:	2009      	movs	r0, #9
 80067b8:	f7ff fce7 	bl	800618a <send_cmd>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 8091 	bne.w	80068e6 <USER_SPI_ioctl+0x2b6>
 80067c4:	f107 030c 	add.w	r3, r7, #12
 80067c8:	2110      	movs	r1, #16
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fc82 	bl	80060d4 <rcvr_datablock>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8087 	beq.w	80068e6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80067d8:	4b4c      	ldr	r3, [pc, #304]	@ (800690c <USER_SPI_ioctl+0x2dc>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d012      	beq.n	800680a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80067e4:	7dbb      	ldrb	r3, [r7, #22]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80067ec:	7dfa      	ldrb	r2, [r7, #23]
 80067ee:	09d2      	lsrs	r2, r2, #7
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	4413      	add	r3, r2
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	7e7b      	ldrb	r3, [r7, #25]
 80067f8:	099b      	lsrs	r3, r3, #6
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	461a      	mov	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e013      	b.n	8006832 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800680a:	7dbb      	ldrb	r3, [r7, #22]
 800680c:	109b      	asrs	r3, r3, #2
 800680e:	b29b      	uxth	r3, r3
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	3301      	adds	r3, #1
 8006816:	7dfa      	ldrb	r2, [r7, #23]
 8006818:	00d2      	lsls	r2, r2, #3
 800681a:	f002 0218 	and.w	r2, r2, #24
 800681e:	7df9      	ldrb	r1, [r7, #23]
 8006820:	0949      	lsrs	r1, r1, #5
 8006822:	b2c9      	uxtb	r1, r1
 8006824:	440a      	add	r2, r1
 8006826:	3201      	adds	r2, #1
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	461a      	mov	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006838:	e055      	b.n	80068e6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800683a:	4b34      	ldr	r3, [pc, #208]	@ (800690c <USER_SPI_ioctl+0x2dc>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0306 	and.w	r3, r3, #6
 8006842:	2b00      	cmp	r3, #0
 8006844:	d051      	beq.n	80068ea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006846:	f107 020c 	add.w	r2, r7, #12
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	210b      	movs	r1, #11
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff feee 	bl	8006630 <USER_SPI_ioctl>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d149      	bne.n	80068ee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800685a:	7b3b      	ldrb	r3, [r7, #12]
 800685c:	099b      	lsrs	r3, r3, #6
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <USER_SPI_ioctl+0x23e>
 8006864:	7dbb      	ldrb	r3, [r7, #22]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d041      	beq.n	80068f2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800687e:	4b23      	ldr	r3, [pc, #140]	@ (800690c <USER_SPI_ioctl+0x2dc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	025b      	lsls	r3, r3, #9
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	025b      	lsls	r3, r3, #9
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006898:	2020      	movs	r0, #32
 800689a:	f7ff fc76 	bl	800618a <send_cmd>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d128      	bne.n	80068f6 <USER_SPI_ioctl+0x2c6>
 80068a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068a6:	2021      	movs	r0, #33	@ 0x21
 80068a8:	f7ff fc6f 	bl	800618a <send_cmd>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d121      	bne.n	80068f6 <USER_SPI_ioctl+0x2c6>
 80068b2:	2100      	movs	r1, #0
 80068b4:	2026      	movs	r0, #38	@ 0x26
 80068b6:	f7ff fc68 	bl	800618a <send_cmd>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11a      	bne.n	80068f6 <USER_SPI_ioctl+0x2c6>
 80068c0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80068c4:	f7ff fbba 	bl	800603c <wait_ready>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d013      	beq.n	80068f6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80068d4:	e00f      	b.n	80068f6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80068d6:	2304      	movs	r3, #4
 80068d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80068dc:	e00c      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		break;
 80068de:	bf00      	nop
 80068e0:	e00a      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		break;
 80068e2:	bf00      	nop
 80068e4:	e008      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		break;
 80068e6:	bf00      	nop
 80068e8:	e006      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80068ea:	bf00      	nop
 80068ec:	e004      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <USER_SPI_ioctl+0x2c8>
		break;
 80068f6:	bf00      	nop
	}

	despiselect();
 80068f8:	f7ff fbc4 	bl	8006084 <despiselect>

	return res;
 80068fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006900:	4618      	mov	r0, r3
 8006902:	3730      	adds	r7, #48	@ 0x30
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000020 	.word	0x20000020
 800690c:	200003bc 	.word	0x200003bc

08006910 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <disk_status+0x30>)
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	79fa      	ldrb	r2, [r7, #7]
 8006928:	4905      	ldr	r1, [pc, #20]	@ (8006940 <disk_status+0x30>)
 800692a:	440a      	add	r2, r1
 800692c:	7a12      	ldrb	r2, [r2, #8]
 800692e:	4610      	mov	r0, r2
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200003f0 	.word	0x200003f0

08006944 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	4a0e      	ldr	r2, [pc, #56]	@ (8006990 <disk_initialize+0x4c>)
 8006956:	5cd3      	ldrb	r3, [r2, r3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d114      	bne.n	8006986 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	4a0c      	ldr	r2, [pc, #48]	@ (8006990 <disk_initialize+0x4c>)
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	79fa      	ldrb	r2, [r7, #7]
 800696a:	4909      	ldr	r1, [pc, #36]	@ (8006990 <disk_initialize+0x4c>)
 800696c:	440a      	add	r2, r1
 800696e:	7a12      	ldrb	r2, [r2, #8]
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	4a03      	ldr	r2, [pc, #12]	@ (8006990 <disk_initialize+0x4c>)
 8006982:	2101      	movs	r1, #1
 8006984:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200003f0 	.word	0x200003f0

08006994 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4a0a      	ldr	r2, [pc, #40]	@ (80069d0 <disk_read+0x3c>)
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	689c      	ldr	r4, [r3, #8]
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	4a07      	ldr	r2, [pc, #28]	@ (80069d0 <disk_read+0x3c>)
 80069b4:	4413      	add	r3, r2
 80069b6:	7a18      	ldrb	r0, [r3, #8]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	47a0      	blx	r4
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd90      	pop	{r4, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	200003f0 	.word	0x200003f0

080069d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006a10 <disk_write+0x3c>)
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68dc      	ldr	r4, [r3, #12]
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	4a07      	ldr	r2, [pc, #28]	@ (8006a10 <disk_write+0x3c>)
 80069f4:	4413      	add	r3, r2
 80069f6:	7a18      	ldrb	r0, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	47a0      	blx	r4
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd90      	pop	{r4, r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200003f0 	.word	0x200003f0

08006a14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	603a      	str	r2, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
 8006a20:	460b      	mov	r3, r1
 8006a22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <disk_ioctl+0x38>)
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	79fa      	ldrb	r2, [r7, #7]
 8006a32:	4906      	ldr	r1, [pc, #24]	@ (8006a4c <disk_ioctl+0x38>)
 8006a34:	440a      	add	r2, r1
 8006a36:	7a10      	ldrb	r0, [r2, #8]
 8006a38:	79b9      	ldrb	r1, [r7, #6]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	4798      	blx	r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
  return res;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200003f0 	.word	0x200003f0

08006a50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	b21a      	sxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b21b      	sxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006a74:	89fb      	ldrh	r3, [r7, #14]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3303      	adds	r3, #3
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	3202      	adds	r2, #2
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	3201      	adds	r2, #1
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	7812      	ldrb	r2, [r2, #0]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
	return rv;
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	887b      	ldrh	r3, [r7, #2]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	887a      	ldrh	r2, [r7, #2]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	1c53      	adds	r3, r2, #1
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	1c59      	adds	r1, r3, #1
 8006b7a:	6179      	str	r1, [r7, #20]
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f1      	bne.n	8006b70 <mem_cpy+0x1a>
	}
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	617a      	str	r2, [r7, #20]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f3      	bne.n	8006ba8 <mem_set+0x10>
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006bce:	b480      	push	{r7}
 8006bd0:	b089      	sub	sp, #36	@ 0x24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	61fa      	str	r2, [r7, #28]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	61ba      	str	r2, [r7, #24]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	1acb      	subs	r3, r1, r3
 8006bfa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <mem_cmp+0x40>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0eb      	beq.n	8006be6 <mem_cmp+0x18>

	return r;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3724      	adds	r7, #36	@ 0x24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c26:	e002      	b.n	8006c2e <chk_chr+0x12>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <chk_chr+0x26>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d1f2      	bne.n	8006c28 <chk_chr+0xc>
	return *str;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	781b      	ldrb	r3, [r3, #0]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e029      	b.n	8006cbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006c68:	4a27      	ldr	r2, [pc, #156]	@ (8006d08 <chk_lock+0xb4>)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	4413      	add	r3, r2
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01d      	beq.n	8006cb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c76:	4a24      	ldr	r2, [pc, #144]	@ (8006d08 <chk_lock+0xb4>)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	4413      	add	r3, r2
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d116      	bne.n	8006cb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c88:	4a1f      	ldr	r2, [pc, #124]	@ (8006d08 <chk_lock+0xb4>)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	4413      	add	r3, r2
 8006c90:	3304      	adds	r3, #4
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d10c      	bne.n	8006cb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006d08 <chk_lock+0xb4>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d102      	bne.n	8006cb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006cb0:	e007      	b.n	8006cc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d9d2      	bls.n	8006c68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d109      	bne.n	8006cdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <chk_lock+0x80>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d101      	bne.n	8006cd8 <chk_lock+0x84>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e010      	b.n	8006cfa <chk_lock+0xa6>
 8006cd8:	2312      	movs	r3, #18
 8006cda:	e00e      	b.n	8006cfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <chk_lock+0xa0>
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <chk_lock+0xb4>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	4413      	add	r3, r2
 8006cea:	330c      	adds	r3, #12
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d101      	bne.n	8006cf8 <chk_lock+0xa4>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	e000      	b.n	8006cfa <chk_lock+0xa6>
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	200003d0 	.word	0x200003d0

08006d0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	e002      	b.n	8006d1e <enq_lock+0x12>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	607b      	str	r3, [r7, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d806      	bhi.n	8006d32 <enq_lock+0x26>
 8006d24:	4a09      	ldr	r2, [pc, #36]	@ (8006d4c <enq_lock+0x40>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	4413      	add	r3, r2
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f2      	bne.n	8006d18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	200003d0 	.word	0x200003d0

08006d50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	e01f      	b.n	8006da0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006d60:	4a41      	ldr	r2, [pc, #260]	@ (8006e68 <inc_lock+0x118>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d113      	bne.n	8006d9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006d72:	4a3d      	ldr	r2, [pc, #244]	@ (8006e68 <inc_lock+0x118>)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d109      	bne.n	8006d9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d86:	4a38      	ldr	r2, [pc, #224]	@ (8006e68 <inc_lock+0x118>)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3308      	adds	r3, #8
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d006      	beq.n	8006da8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d9dc      	bls.n	8006d60 <inc_lock+0x10>
 8006da6:	e000      	b.n	8006daa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006da8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d132      	bne.n	8006e16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e002      	b.n	8006dbc <inc_lock+0x6c>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d806      	bhi.n	8006dd0 <inc_lock+0x80>
 8006dc2:	4a29      	ldr	r2, [pc, #164]	@ (8006e68 <inc_lock+0x118>)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4413      	add	r3, r2
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f2      	bne.n	8006db6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d101      	bne.n	8006dda <inc_lock+0x8a>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e040      	b.n	8006e5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4922      	ldr	r1, [pc, #136]	@ (8006e68 <inc_lock+0x118>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	440b      	add	r3, r1
 8006de6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	491e      	ldr	r1, [pc, #120]	@ (8006e68 <inc_lock+0x118>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	440b      	add	r3, r1
 8006df4:	3304      	adds	r3, #4
 8006df6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	491a      	ldr	r1, [pc, #104]	@ (8006e68 <inc_lock+0x118>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	440b      	add	r3, r1
 8006e04:	3308      	adds	r3, #8
 8006e06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006e08:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <inc_lock+0x118>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4413      	add	r3, r2
 8006e10:	330c      	adds	r3, #12
 8006e12:	2200      	movs	r2, #0
 8006e14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <inc_lock+0xe0>
 8006e1c:	4a12      	ldr	r2, [pc, #72]	@ (8006e68 <inc_lock+0x118>)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	4413      	add	r3, r2
 8006e24:	330c      	adds	r3, #12
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <inc_lock+0xe0>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e015      	b.n	8006e5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <inc_lock+0xf8>
 8006e36:	4a0c      	ldr	r2, [pc, #48]	@ (8006e68 <inc_lock+0x118>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	330c      	adds	r3, #12
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	e001      	b.n	8006e4c <inc_lock+0xfc>
 8006e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e4c:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <inc_lock+0x118>)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	440b      	add	r3, r1
 8006e54:	330c      	adds	r3, #12
 8006e56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	200003d0 	.word	0x200003d0

08006e6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d825      	bhi.n	8006ecc <dec_lock+0x60>
		n = Files[i].ctr;
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <dec_lock+0x74>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	4413      	add	r3, r2
 8006e88:	330c      	adds	r3, #12
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e94:	d101      	bne.n	8006e9a <dec_lock+0x2e>
 8006e96:	2300      	movs	r3, #0
 8006e98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e9a:	89fb      	ldrh	r3, [r7, #14]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <dec_lock+0x3a>
 8006ea0:	89fb      	ldrh	r3, [r7, #14]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee0 <dec_lock+0x74>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	4413      	add	r3, r2
 8006eae:	330c      	adds	r3, #12
 8006eb0:	89fa      	ldrh	r2, [r7, #14]
 8006eb2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006eb4:	89fb      	ldrh	r3, [r7, #14]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <dec_lock+0x5a>
 8006eba:	4a09      	ldr	r2, [pc, #36]	@ (8006ee0 <dec_lock+0x74>)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	737b      	strb	r3, [r7, #13]
 8006eca:	e001      	b.n	8006ed0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ecc:	2302      	movs	r3, #2
 8006ece:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ed0:	7b7b      	ldrb	r3, [r7, #13]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	200003d0 	.word	0x200003d0

08006ee4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e010      	b.n	8006f14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <clear_lock+0x44>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	4413      	add	r3, r2
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d105      	bne.n	8006f0e <clear_lock+0x2a>
 8006f02:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <clear_lock+0x44>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	4413      	add	r3, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d9eb      	bls.n	8006ef2 <clear_lock+0xe>
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	200003d0 	.word	0x200003d0

08006f2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	78db      	ldrb	r3, [r3, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d034      	beq.n	8006faa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7858      	ldrb	r0, [r3, #1]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f50:	2301      	movs	r3, #1
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f7ff fd3e 	bl	80069d4 <disk_write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e022      	b.n	8006faa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d217      	bcs.n	8006faa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	789b      	ldrb	r3, [r3, #2]
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e010      	b.n	8006fa4 <sync_window+0x78>
					wsect += fs->fsize;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7858      	ldrb	r0, [r3, #1]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f96:	2301      	movs	r3, #1
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	f7ff fd1b 	bl	80069d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d8eb      	bhi.n	8006f82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d01b      	beq.n	8007004 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ffad 	bl	8006f2c <sync_window>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d113      	bne.n	8007004 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7858      	ldrb	r0, [r3, #1]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	f7ff fcd3 	bl	8006994 <disk_read>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ff8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ff87 	bl	8006f2c <sync_window>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d158      	bne.n	80070da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d148      	bne.n	80070c2 <sync_fs+0xb2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	791b      	ldrb	r3, [r3, #4]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d144      	bne.n	80070c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3330      	adds	r3, #48	@ 0x30
 800703c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fda8 	bl	8006b98 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3330      	adds	r3, #48	@ 0x30
 800704c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007050:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fd37 	bl	8006ac8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3330      	adds	r3, #48	@ 0x30
 800705e:	4921      	ldr	r1, [pc, #132]	@ (80070e4 <sync_fs+0xd4>)
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fd4c 	bl	8006afe <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3330      	adds	r3, #48	@ 0x30
 800706a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800706e:	491e      	ldr	r1, [pc, #120]	@ (80070e8 <sync_fs+0xd8>)
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fd44 	bl	8006afe <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3330      	adds	r3, #48	@ 0x30
 800707a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7ff fd3a 	bl	8006afe <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3330      	adds	r3, #48	@ 0x30
 800708e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7ff fd30 	bl	8006afe <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7858      	ldrb	r0, [r3, #1]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b6:	2301      	movs	r3, #1
 80070b8:	f7ff fc8c 	bl	80069d4 <disk_write>
			fs->fsi_flag = 0;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fca2 	bl	8006a14 <disk_ioctl>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <sync_fs+0xca>
 80070d6:	2301      	movs	r3, #1
 80070d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	41615252 	.word	0x41615252
 80070e8:	61417272 	.word	0x61417272

080070ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	3b02      	subs	r3, #2
 80070fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	3b02      	subs	r3, #2
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d301      	bcc.n	800710c <clust2sect+0x20>
 8007108:	2300      	movs	r3, #0
 800710a:	e008      	b.n	800711e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	895b      	ldrh	r3, [r3, #10]
 8007110:	461a      	mov	r2, r3
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	fb03 f202 	mul.w	r2, r3, r2
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	4413      	add	r3, r2
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b086      	sub	sp, #24
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d904      	bls.n	800714a <get_fat+0x20>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d302      	bcc.n	8007150 <get_fat+0x26>
		val = 1;	/* Internal error */
 800714a:	2301      	movs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e08e      	b.n	800726e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007154:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d061      	beq.n	8007222 <get_fat+0xf8>
 800715e:	2b03      	cmp	r3, #3
 8007160:	dc7b      	bgt.n	800725a <get_fat+0x130>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <get_fat+0x42>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d041      	beq.n	80071ee <get_fat+0xc4>
 800716a:	e076      	b.n	800725a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	0a5b      	lsrs	r3, r3, #9
 8007182:	4413      	add	r3, r2
 8007184:	4619      	mov	r1, r3
 8007186:	6938      	ldr	r0, [r7, #16]
 8007188:	f7ff ff14 	bl	8006fb4 <move_window>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d166      	bne.n	8007260 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	60fa      	str	r2, [r7, #12]
 8007198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	0a5b      	lsrs	r3, r3, #9
 80071ae:	4413      	add	r3, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f7ff fefe 	bl	8006fb4 <move_window>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d152      	bne.n	8007264 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <get_fat+0xba>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	e002      	b.n	80071ea <get_fat+0xc0>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ea:	617b      	str	r3, [r7, #20]
			break;
 80071ec:	e03f      	b.n	800726e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	0a1b      	lsrs	r3, r3, #8
 80071f6:	4413      	add	r3, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f7ff feda 	bl	8006fb4 <move_window>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d130      	bne.n	8007268 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007214:	4413      	add	r3, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fc1a 	bl	8006a50 <ld_word>
 800721c:	4603      	mov	r3, r0
 800721e:	617b      	str	r3, [r7, #20]
			break;
 8007220:	e025      	b.n	800726e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	09db      	lsrs	r3, r3, #7
 800722a:	4413      	add	r3, r2
 800722c:	4619      	mov	r1, r3
 800722e:	6938      	ldr	r0, [r7, #16]
 8007230:	f7ff fec0 	bl	8006fb4 <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d118      	bne.n	800726c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007248:	4413      	add	r3, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fc19 	bl	8006a82 <ld_dword>
 8007250:	4603      	mov	r3, r0
 8007252:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007256:	617b      	str	r3, [r7, #20]
			break;
 8007258:	e009      	b.n	800726e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800725a:	2301      	movs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e006      	b.n	800726e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007260:	bf00      	nop
 8007262:	e004      	b.n	800726e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800726c:	bf00      	nop
		}
	}

	return val;
 800726e:	697b      	ldr	r3, [r7, #20]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b089      	sub	sp, #36	@ 0x24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007284:	2302      	movs	r3, #2
 8007286:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b01      	cmp	r3, #1
 800728c:	f240 80d9 	bls.w	8007442 <put_fat+0x1ca>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	f080 80d3 	bcs.w	8007442 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	f000 8096 	beq.w	80073d2 <put_fat+0x15a>
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	f300 80cb 	bgt.w	8007442 <put_fat+0x1ca>
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d002      	beq.n	80072b6 <put_fat+0x3e>
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d06e      	beq.n	8007392 <put_fat+0x11a>
 80072b4:	e0c5      	b.n	8007442 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	61bb      	str	r3, [r7, #24]
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	4413      	add	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1a      	ldr	r2, [r3, #32]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	0a5b      	lsrs	r3, r3, #9
 80072cc:	4413      	add	r3, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fe6f 	bl	8006fb4 <move_window>
 80072d6:	4603      	mov	r3, r0
 80072d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072da:	7ffb      	ldrb	r3, [r7, #31]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f040 80a9 	bne.w	8007434 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	61b9      	str	r1, [r7, #24]
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	4413      	add	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <put_fat+0xa4>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b25b      	sxtb	r3, r3
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	b25a      	sxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	b25b      	sxtb	r3, r3
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	b25b      	sxtb	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b25b      	sxtb	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	e001      	b.n	8007320 <put_fat+0xa8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	0a5b      	lsrs	r3, r3, #9
 8007332:	4413      	add	r3, r2
 8007334:	4619      	mov	r1, r3
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff fe3c 	bl	8006fb4 <move_window>
 800733c:	4603      	mov	r3, r0
 800733e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007340:	7ffb      	ldrb	r3, [r7, #31]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d178      	bne.n	8007438 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	4413      	add	r3, r2
 8007354:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <put_fat+0xf0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	091b      	lsrs	r3, r3, #4
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e00e      	b.n	8007386 <put_fat+0x10e>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b25b      	sxtb	r3, r3
 800736e:	f023 030f 	bic.w	r3, r3, #15
 8007372:	b25a      	sxtb	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	b25b      	sxtb	r3, r3
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	b25b      	sxtb	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b25b      	sxtb	r3, r3
 8007384:	b2db      	uxtb	r3, r3
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	70da      	strb	r2, [r3, #3]
			break;
 8007390:	e057      	b.n	8007442 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	4413      	add	r3, r2
 800739c:	4619      	mov	r1, r3
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fe08 	bl	8006fb4 <move_window>
 80073a4:	4603      	mov	r3, r0
 80073a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d146      	bne.n	800743c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80073bc:	4413      	add	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	b292      	uxth	r2, r2
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fb7f 	bl	8006ac8 <st_word>
			fs->wflag = 1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	70da      	strb	r2, [r3, #3]
			break;
 80073d0:	e037      	b.n	8007442 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1a      	ldr	r2, [r3, #32]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	09db      	lsrs	r3, r3, #7
 80073da:	4413      	add	r3, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff fde8 	bl	8006fb4 <move_window>
 80073e4:	4603      	mov	r3, r0
 80073e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073e8:	7ffb      	ldrb	r3, [r7, #31]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d128      	bne.n	8007440 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007402:	4413      	add	r3, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fb3c 	bl	8006a82 <ld_dword>
 800740a:	4603      	mov	r3, r0
 800740c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007410:	4323      	orrs	r3, r4
 8007412:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007422:	4413      	add	r3, r2
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fb69 	bl	8006afe <st_dword>
			fs->wflag = 1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	70da      	strb	r2, [r3, #3]
			break;
 8007432:	e006      	b.n	8007442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007434:	bf00      	nop
 8007436:	e004      	b.n	8007442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007440:	bf00      	nop
		}
	}
	return res;
 8007442:	7ffb      	ldrb	r3, [r7, #31]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3724      	adds	r7, #36	@ 0x24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd90      	pop	{r4, r7, pc}

0800744c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d904      	bls.n	8007472 <remove_chain+0x26>
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	d301      	bcc.n	8007476 <remove_chain+0x2a>
 8007472:	2302      	movs	r3, #2
 8007474:	e04b      	b.n	800750e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800747c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	69b8      	ldr	r0, [r7, #24]
 8007484:	f7ff fef8 	bl	8007278 <put_fat>
 8007488:	4603      	mov	r3, r0
 800748a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800748c:	7ffb      	ldrb	r3, [r7, #31]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <remove_chain+0x4a>
 8007492:	7ffb      	ldrb	r3, [r7, #31]
 8007494:	e03b      	b.n	800750e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff fe46 	bl	800712a <get_fat>
 800749e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d031      	beq.n	800750a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <remove_chain+0x64>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e02e      	b.n	800750e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074b6:	d101      	bne.n	80074bc <remove_chain+0x70>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e028      	b.n	800750e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80074bc:	2200      	movs	r2, #0
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	69b8      	ldr	r0, [r7, #24]
 80074c2:	f7ff fed9 	bl	8007278 <put_fat>
 80074c6:	4603      	mov	r3, r0
 80074c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80074ca:	7ffb      	ldrb	r3, [r7, #31]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <remove_chain+0x88>
 80074d0:	7ffb      	ldrb	r3, [r7, #31]
 80074d2:	e01c      	b.n	800750e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	3b02      	subs	r3, #2
 80074de:	429a      	cmp	r2, r3
 80074e0:	d20b      	bcs.n	80074fa <remove_chain+0xae>
			fs->free_clst++;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3c6      	bcc.n	8007496 <remove_chain+0x4a>
 8007508:	e000      	b.n	800750c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800750a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <create_chain+0x2c>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	429a      	cmp	r2, r3
 8007540:	d31b      	bcc.n	800757a <create_chain+0x64>
 8007542:	2301      	movs	r3, #1
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e018      	b.n	800757a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fded 	bl	800712a <get_fat>
 8007550:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d801      	bhi.n	800755c <create_chain+0x46>
 8007558:	2301      	movs	r3, #1
 800755a:	e070      	b.n	800763e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007562:	d101      	bne.n	8007568 <create_chain+0x52>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	e06a      	b.n	800763e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d201      	bcs.n	8007576 <create_chain+0x60>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	e063      	b.n	800763e <create_chain+0x128>
		scl = clst;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3301      	adds	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	429a      	cmp	r2, r3
 800758c:	d307      	bcc.n	800759e <create_chain+0x88>
				ncl = 2;
 800758e:	2302      	movs	r3, #2
 8007590:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	429a      	cmp	r2, r3
 8007598:	d901      	bls.n	800759e <create_chain+0x88>
 800759a:	2300      	movs	r3, #0
 800759c:	e04f      	b.n	800763e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fdc2 	bl	800712a <get_fat>
 80075a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00e      	beq.n	80075cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d003      	beq.n	80075bc <create_chain+0xa6>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075ba:	d101      	bne.n	80075c0 <create_chain+0xaa>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	e03e      	b.n	800763e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d1da      	bne.n	800757e <create_chain+0x68>
 80075c8:	2300      	movs	r3, #0
 80075ca:	e038      	b.n	800763e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80075cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075d2:	69f9      	ldr	r1, [r7, #28]
 80075d4:	6938      	ldr	r0, [r7, #16]
 80075d6:	f7ff fe4f 	bl	8007278 <put_fat>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d109      	bne.n	80075f8 <create_chain+0xe2>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6938      	ldr	r0, [r7, #16]
 80075f0:	f7ff fe42 	bl	8007278 <put_fat>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d116      	bne.n	800762c <create_chain+0x116>
		fs->last_clst = ncl;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	3b02      	subs	r3, #2
 800760e:	429a      	cmp	r2, r3
 8007610:	d804      	bhi.n	800761c <create_chain+0x106>
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	1e5a      	subs	r2, r3, #1
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	711a      	strb	r2, [r3, #4]
 800762a:	e007      	b.n	800763c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d102      	bne.n	8007638 <create_chain+0x122>
 8007632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007636:	e000      	b.n	800763a <create_chain+0x124>
 8007638:	2301      	movs	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007646:	b480      	push	{r7}
 8007648:	b087      	sub	sp, #28
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	3304      	adds	r3, #4
 800765c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	0a5b      	lsrs	r3, r3, #9
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	8952      	ldrh	r2, [r2, #10]
 8007666:	fbb3 f3f2 	udiv	r3, r3, r2
 800766a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	613a      	str	r2, [r7, #16]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <clmt_clust+0x3a>
 800767c:	2300      	movs	r3, #0
 800767e:	e010      	b.n	80076a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	d307      	bcc.n	8007698 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	3304      	adds	r3, #4
 8007694:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007696:	e7e9      	b.n	800766c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007698:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4413      	add	r3, r2
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c4:	d204      	bcs.n	80076d0 <dir_sdi+0x22>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f003 031f 	and.w	r3, r3, #31
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80076d0:	2302      	movs	r3, #2
 80076d2:	e063      	b.n	800779c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <dir_sdi+0x46>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10c      	bne.n	8007714 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	8912      	ldrh	r2, [r2, #8]
 8007702:	4293      	cmp	r3, r2
 8007704:	d301      	bcc.n	800770a <dir_sdi+0x5c>
 8007706:	2302      	movs	r3, #2
 8007708:	e048      	b.n	800779c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	61da      	str	r2, [r3, #28]
 8007712:	e029      	b.n	8007768 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	895b      	ldrh	r3, [r3, #10]
 8007718:	025b      	lsls	r3, r3, #9
 800771a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800771c:	e019      	b.n	8007752 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6979      	ldr	r1, [r7, #20]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fd01 	bl	800712a <get_fat>
 8007728:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007730:	d101      	bne.n	8007736 <dir_sdi+0x88>
 8007732:	2301      	movs	r3, #1
 8007734:	e032      	b.n	800779c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d904      	bls.n	8007746 <dir_sdi+0x98>
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	429a      	cmp	r2, r3
 8007744:	d301      	bcc.n	800774a <dir_sdi+0x9c>
 8007746:	2302      	movs	r3, #2
 8007748:	e028      	b.n	800779c <dir_sdi+0xee>
			ofs -= csz;
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	429a      	cmp	r2, r3
 8007758:	d2e1      	bcs.n	800771e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800775a:	6979      	ldr	r1, [r7, #20]
 800775c:	6938      	ldr	r0, [r7, #16]
 800775e:	f7ff fcc5 	bl	80070ec <clust2sect>
 8007762:	4602      	mov	r2, r0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <dir_sdi+0xcc>
 8007776:	2302      	movs	r3, #2
 8007778:	e010      	b.n	800779c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	441a      	add	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007794:	441a      	add	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	3320      	adds	r3, #32
 80077ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <dir_next+0x28>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077ca:	d301      	bcc.n	80077d0 <dir_next+0x2c>
 80077cc:	2304      	movs	r3, #4
 80077ce:	e0aa      	b.n	8007926 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 8098 	bne.w	800790c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	8912      	ldrh	r2, [r2, #8]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f0c0 8088 	bcc.w	800790c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	2304      	movs	r3, #4
 8007804:	e08f      	b.n	8007926 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	0a5b      	lsrs	r3, r3, #9
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	8952      	ldrh	r2, [r2, #10]
 800780e:	3a01      	subs	r2, #1
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d17a      	bne.n	800790c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7ff fc83 	bl	800712a <get_fat>
 8007824:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d801      	bhi.n	8007830 <dir_next+0x8c>
 800782c:	2302      	movs	r3, #2
 800782e:	e07a      	b.n	8007926 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007836:	d101      	bne.n	800783c <dir_next+0x98>
 8007838:	2301      	movs	r3, #1
 800783a:	e074      	b.n	8007926 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	429a      	cmp	r2, r3
 8007844:	d358      	bcc.n	80078f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
 8007852:	2304      	movs	r3, #4
 8007854:	e067      	b.n	8007926 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	4619      	mov	r1, r3
 800785e:	4610      	mov	r0, r2
 8007860:	f7ff fe59 	bl	8007516 <create_chain>
 8007864:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <dir_next+0xcc>
 800786c:	2307      	movs	r3, #7
 800786e:	e05a      	b.n	8007926 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d101      	bne.n	800787a <dir_next+0xd6>
 8007876:	2302      	movs	r3, #2
 8007878:	e055      	b.n	8007926 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007880:	d101      	bne.n	8007886 <dir_next+0xe2>
 8007882:	2301      	movs	r3, #1
 8007884:	e04f      	b.n	8007926 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fb50 	bl	8006f2c <sync_window>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <dir_next+0xf2>
 8007892:	2301      	movs	r3, #1
 8007894:	e047      	b.n	8007926 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3330      	adds	r3, #48	@ 0x30
 800789a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff f979 	bl	8006b98 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff fc1d 	bl	80070ec <clust2sect>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078b8:	e012      	b.n	80078e0 <dir_next+0x13c>
						fs->wflag = 1;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fb33 	bl	8006f2c <sync_window>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <dir_next+0x12c>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e02a      	b.n	8007926 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3301      	adds	r3, #1
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	895b      	ldrh	r3, [r3, #10]
 80078e4:	461a      	mov	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d3e6      	bcc.n	80078ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad2      	subs	r2, r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80078fe:	6979      	ldr	r1, [r7, #20]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff fbf3 	bl	80070ec <clust2sect>
 8007906:	4602      	mov	r2, r0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	441a      	add	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff feb4 	bl	80076ae <dir_sdi>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d12b      	bne.n	80079a8 <dir_alloc+0x7a>
		n = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4619      	mov	r1, r3
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fb2a 	bl	8006fb4 <move_window>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d11d      	bne.n	80079a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2be5      	cmp	r3, #229	@ 0xe5
 8007972:	d004      	beq.n	800797e <dir_alloc+0x50>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3301      	adds	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d102      	bne.n	8007992 <dir_alloc+0x64>
 800798c:	e00c      	b.n	80079a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800798e:	2300      	movs	r3, #0
 8007990:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff ff05 	bl	80077a4 <dir_next>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0d7      	beq.n	8007954 <dir_alloc+0x26>
 80079a4:	e000      	b.n	80079a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80079a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d101      	bne.n	80079b2 <dir_alloc+0x84>
 80079ae:	2307      	movs	r3, #7
 80079b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	331a      	adds	r3, #26
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff f840 	bl	8006a50 <ld_word>
 80079d0:	4603      	mov	r3, r0
 80079d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d109      	bne.n	80079f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	3314      	adds	r3, #20
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff f835 	bl	8006a50 <ld_word>
 80079e6:	4603      	mov	r3, r0
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80079f0:	68fb      	ldr	r3, [r7, #12]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	331a      	adds	r3, #26
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	b292      	uxth	r2, r2
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff f859 	bl	8006ac8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d109      	bne.n	8007a32 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f103 0214 	add.w	r2, r3, #20
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7ff f84b 	bl	8006ac8 <st_word>
	}
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fe2f 	bl	80076ae <dir_sdi>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <dir_find+0x24>
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	e03e      	b.n	8007adc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6938      	ldr	r0, [r7, #16]
 8007a66:	f7ff faa5 	bl	8006fb4 <move_window>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d12f      	bne.n	8007ad4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d102      	bne.n	8007a88 <dir_find+0x4e>
 8007a82:	2304      	movs	r3, #4
 8007a84:	75fb      	strb	r3, [r7, #23]
 8007a86:	e028      	b.n	8007ada <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	330b      	adds	r3, #11
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	330b      	adds	r3, #11
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <dir_find+0x86>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a18      	ldr	r0, [r3, #32]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3324      	adds	r3, #36	@ 0x24
 8007ab2:	220b      	movs	r2, #11
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7ff f88a 	bl	8006bce <mem_cmp>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff fe6e 	bl	80077a4 <dir_next>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0c5      	beq.n	8007a5e <dir_find+0x24>
 8007ad2:	e002      	b.n	8007ada <dir_find+0xa0>
		if (res != FR_OK) break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ad8:	bf00      	nop

	return res;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007af2:	2101      	movs	r1, #1
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff1a 	bl	800792e <dir_alloc>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11c      	bne.n	8007b3e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68b8      	ldr	r0, [r7, #8]
 8007b0c:	f7ff fa52 	bl	8006fb4 <move_window>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d111      	bne.n	8007b3e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f838 	bl	8006b98 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a18      	ldr	r0, [r3, #32]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3324      	adds	r3, #36	@ 0x24
 8007b30:	220b      	movs	r2, #11
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7ff f80f 	bl	8006b56 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3324      	adds	r3, #36	@ 0x24
 8007b5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007b5e:	220b      	movs	r2, #11
 8007b60:	2120      	movs	r1, #32
 8007b62:	68b8      	ldr	r0, [r7, #8]
 8007b64:	f7ff f818 	bl	8006b98 <mem_set>
	si = i = 0; ni = 8;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	2308      	movs	r3, #8
 8007b72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	61fa      	str	r2, [r7, #28]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007b82:	7efb      	ldrb	r3, [r7, #27]
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d94e      	bls.n	8007c26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007b88:	7efb      	ldrb	r3, [r7, #27]
 8007b8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b8c:	d006      	beq.n	8007b9c <create_name+0x54>
 8007b8e:	7efb      	ldrb	r3, [r7, #27]
 8007b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b92:	d110      	bne.n	8007bb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b94:	e002      	b.n	8007b9c <create_name+0x54>
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b2f      	cmp	r3, #47	@ 0x2f
 8007ba6:	d0f6      	beq.n	8007b96 <create_name+0x4e>
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8007bb2:	d0f0      	beq.n	8007b96 <create_name+0x4e>
			break;
 8007bb4:	e038      	b.n	8007c28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007bb6:	7efb      	ldrb	r3, [r7, #27]
 8007bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bba:	d003      	beq.n	8007bc4 <create_name+0x7c>
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d30c      	bcc.n	8007bde <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b0b      	cmp	r3, #11
 8007bc8:	d002      	beq.n	8007bd0 <create_name+0x88>
 8007bca:	7efb      	ldrb	r3, [r7, #27]
 8007bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bce:	d001      	beq.n	8007bd4 <create_name+0x8c>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	e044      	b.n	8007c5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	230b      	movs	r3, #11
 8007bda:	617b      	str	r3, [r7, #20]
			continue;
 8007bdc:	e022      	b.n	8007c24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007bde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da04      	bge.n	8007bf0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007be6:	7efb      	ldrb	r3, [r7, #27]
 8007be8:	3b80      	subs	r3, #128	@ 0x80
 8007bea:	4a1f      	ldr	r2, [pc, #124]	@ (8007c68 <create_name+0x120>)
 8007bec:	5cd3      	ldrb	r3, [r2, r3]
 8007bee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007bf0:	7efb      	ldrb	r3, [r7, #27]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	481d      	ldr	r0, [pc, #116]	@ (8007c6c <create_name+0x124>)
 8007bf6:	f7ff f811 	bl	8006c1c <chk_chr>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <create_name+0xbc>
 8007c00:	2306      	movs	r3, #6
 8007c02:	e02c      	b.n	8007c5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007c04:	7efb      	ldrb	r3, [r7, #27]
 8007c06:	2b60      	cmp	r3, #96	@ 0x60
 8007c08:	d905      	bls.n	8007c16 <create_name+0xce>
 8007c0a:	7efb      	ldrb	r3, [r7, #27]
 8007c0c:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c0e:	d802      	bhi.n	8007c16 <create_name+0xce>
 8007c10:	7efb      	ldrb	r3, [r7, #27]
 8007c12:	3b20      	subs	r3, #32
 8007c14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	613a      	str	r2, [r7, #16]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	4413      	add	r3, r2
 8007c20:	7efa      	ldrb	r2, [r7, #27]
 8007c22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007c24:	e7a6      	b.n	8007b74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <create_name+0xf4>
 8007c38:	2306      	movs	r3, #6
 8007c3a:	e010      	b.n	8007c5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2be5      	cmp	r3, #229	@ 0xe5
 8007c42:	d102      	bne.n	8007c4a <create_name+0x102>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2205      	movs	r2, #5
 8007c48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c4a:	7efb      	ldrb	r3, [r7, #27]
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d801      	bhi.n	8007c54 <create_name+0x10c>
 8007c50:	2204      	movs	r2, #4
 8007c52:	e000      	b.n	8007c56 <create_name+0x10e>
 8007c54:	2200      	movs	r2, #0
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	330b      	adds	r3, #11
 8007c5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007c5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	0800ce78 	.word	0x0800ce78
 8007c6c:	0800ce1c 	.word	0x0800ce1c

08007c70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c84:	e002      	b.n	8007c8c <follow_path+0x1c>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c92:	d0f8      	beq.n	8007c86 <follow_path+0x16>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c9a:	d0f4      	beq.n	8007c86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b1f      	cmp	r3, #31
 8007ca8:	d80a      	bhi.n	8007cc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2280      	movs	r2, #128	@ 0x80
 8007cae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff fcfa 	bl	80076ae <dir_sdi>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75fb      	strb	r3, [r7, #23]
 8007cbe:	e043      	b.n	8007d48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ff3f 	bl	8007b48 <create_name>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d134      	bne.n	8007d3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff feb0 	bl	8007a3a <dir_find>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ce4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d127      	bne.n	8007d42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d122      	bne.n	8007d42 <follow_path+0xd2>
 8007cfc:	2305      	movs	r3, #5
 8007cfe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d00:	e01f      	b.n	8007d42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d11c      	bne.n	8007d46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	799b      	ldrb	r3, [r3, #6]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d18:	2305      	movs	r3, #5
 8007d1a:	75fb      	strb	r3, [r7, #23]
 8007d1c:	e014      	b.n	8007d48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2c:	4413      	add	r3, r2
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fe43 	bl	80079bc <ld_clust>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d3c:	e7c0      	b.n	8007cc0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d3e:	bf00      	nop
 8007d40:	e002      	b.n	8007d48 <follow_path+0xd8>
				break;
 8007d42:	bf00      	nop
 8007d44:	e000      	b.n	8007d48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d46:	bf00      	nop
			}
		}
	}

	return res;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b087      	sub	sp, #28
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d031      	beq.n	8007dcc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	e002      	b.n	8007d76 <get_ldnumber+0x24>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3301      	adds	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d903      	bls.n	8007d86 <get_ldnumber+0x34>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d84:	d1f4      	bne.n	8007d70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d8c:	d11c      	bne.n	8007dc8 <get_ldnumber+0x76>
			tp = *path;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	60fa      	str	r2, [r7, #12]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	3b30      	subs	r3, #48	@ 0x30
 8007d9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b09      	cmp	r3, #9
 8007da4:	d80e      	bhi.n	8007dc4 <get_ldnumber+0x72>
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d10a      	bne.n	8007dc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <get_ldnumber+0x72>
					vol = (int)i;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	e002      	b.n	8007dce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dcc:	693b      	ldr	r3, [r7, #16]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	70da      	strb	r2, [r3, #3]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007df2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff f8dc 	bl	8006fb4 <move_window>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <check_fs+0x2a>
 8007e02:	2304      	movs	r3, #4
 8007e04:	e038      	b.n	8007e78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3330      	adds	r3, #48	@ 0x30
 8007e0a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fe1e 	bl	8006a50 <ld_word>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <check_fs+0x48>
 8007e20:	2303      	movs	r3, #3
 8007e22:	e029      	b.n	8007e78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e2a:	2be9      	cmp	r3, #233	@ 0xe9
 8007e2c:	d009      	beq.n	8007e42 <check_fs+0x66>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e34:	2beb      	cmp	r3, #235	@ 0xeb
 8007e36:	d11e      	bne.n	8007e76 <check_fs+0x9a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007e3e:	2b90      	cmp	r3, #144	@ 0x90
 8007e40:	d119      	bne.n	8007e76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3330      	adds	r3, #48	@ 0x30
 8007e46:	3336      	adds	r3, #54	@ 0x36
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fe1a 	bl	8006a82 <ld_dword>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e54:	4a0a      	ldr	r2, [pc, #40]	@ (8007e80 <check_fs+0xa4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d101      	bne.n	8007e5e <check_fs+0x82>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e00c      	b.n	8007e78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3330      	adds	r3, #48	@ 0x30
 8007e62:	3352      	adds	r3, #82	@ 0x52
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fe0c 	bl	8006a82 <ld_dword>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4a05      	ldr	r2, [pc, #20]	@ (8007e84 <check_fs+0xa8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <check_fs+0x9a>
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e76:	2302      	movs	r3, #2
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	00544146 	.word	0x00544146
 8007e84:	33544146 	.word	0x33544146

08007e88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b096      	sub	sp, #88	@ 0x58
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff ff58 	bl	8007d52 <get_ldnumber>
 8007ea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da01      	bge.n	8007eae <find_volume+0x26>
 8007eaa:	230b      	movs	r3, #11
 8007eac:	e22d      	b.n	800830a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007eae:	4aa1      	ldr	r2, [pc, #644]	@ (8008134 <find_volume+0x2ac>)
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <find_volume+0x3a>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	e223      	b.n	800830a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ec6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fd17 	bl	8006910 <disk_status>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10c      	bne.n	8007f0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d007      	beq.n	8007f0a <find_volume+0x82>
 8007efa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f06:	230a      	movs	r3, #10
 8007f08:	e1ff      	b.n	800830a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e1fd      	b.n	800830a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fd0f 	bl	8006944 <disk_initialize>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e1e6      	b.n	800830a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <find_volume+0xca>
 8007f42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f4e:	230a      	movs	r3, #10
 8007f50:	e1db      	b.n	800830a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f5a:	f7ff ff3f 	bl	8007ddc <check_fs>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d149      	bne.n	8008000 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f70:	e01e      	b.n	8007fb0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007f80:	4413      	add	r3, r2
 8007f82:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	3304      	adds	r3, #4
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d006      	beq.n	8007f9c <find_volume+0x114>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	3308      	adds	r3, #8
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fd75 	bl	8006a82 <ld_dword>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	e000      	b.n	8007f9e <find_volume+0x116>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	3358      	adds	r3, #88	@ 0x58
 8007fa4:	443b      	add	r3, r7
 8007fa6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fac:	3301      	adds	r3, #1
 8007fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d9dd      	bls.n	8007f72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <find_volume+0x13e>
 8007fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	3358      	adds	r3, #88	@ 0x58
 8007fcc:	443b      	add	r3, r7
 8007fce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fd2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <find_volume+0x15e>
 8007fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fde:	f7ff fefd 	bl	8007ddc <check_fs>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	e000      	b.n	8007fe8 <find_volume+0x160>
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007fec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d905      	bls.n	8008000 <find_volume+0x178>
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d9e2      	bls.n	8007fc6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008000:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008004:	2b04      	cmp	r3, #4
 8008006:	d101      	bne.n	800800c <find_volume+0x184>
 8008008:	2301      	movs	r3, #1
 800800a:	e17e      	b.n	800830a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800800c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008010:	2b01      	cmp	r3, #1
 8008012:	d901      	bls.n	8008018 <find_volume+0x190>
 8008014:	230d      	movs	r3, #13
 8008016:	e178      	b.n	800830a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	3330      	adds	r3, #48	@ 0x30
 800801c:	330b      	adds	r3, #11
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fd16 	bl	8006a50 <ld_word>
 8008024:	4603      	mov	r3, r0
 8008026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800802a:	d001      	beq.n	8008030 <find_volume+0x1a8>
 800802c:	230d      	movs	r3, #13
 800802e:	e16c      	b.n	800830a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008032:	3330      	adds	r3, #48	@ 0x30
 8008034:	3316      	adds	r3, #22
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fd0a 	bl	8006a50 <ld_word>
 800803c:	4603      	mov	r3, r0
 800803e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <find_volume+0x1cc>
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	3330      	adds	r3, #48	@ 0x30
 800804a:	3324      	adds	r3, #36	@ 0x24
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fd18 	bl	8006a82 <ld_dword>
 8008052:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008058:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800805a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d005      	beq.n	8008078 <find_volume+0x1f0>
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	789b      	ldrb	r3, [r3, #2]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d001      	beq.n	8008078 <find_volume+0x1f0>
 8008074:	230d      	movs	r3, #13
 8008076:	e148      	b.n	800830a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	461a      	mov	r2, r3
 800807e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808c:	461a      	mov	r2, r3
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008094:	895b      	ldrh	r3, [r3, #10]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <find_volume+0x224>
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	895b      	ldrh	r3, [r3, #10]
 800809e:	461a      	mov	r2, r3
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	895b      	ldrh	r3, [r3, #10]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <find_volume+0x228>
 80080ac:	230d      	movs	r3, #13
 80080ae:	e12c      	b.n	800830a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	3330      	adds	r3, #48	@ 0x30
 80080b4:	3311      	adds	r3, #17
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fcca 	bl	8006a50 <ld_word>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	891b      	ldrh	r3, [r3, #8]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <find_volume+0x24e>
 80080d2:	230d      	movs	r3, #13
 80080d4:	e119      	b.n	800830a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	3330      	adds	r3, #48	@ 0x30
 80080da:	3313      	adds	r3, #19
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe fcb7 	bl	8006a50 <ld_word>
 80080e2:	4603      	mov	r3, r0
 80080e4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80080e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <find_volume+0x272>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	3330      	adds	r3, #48	@ 0x30
 80080f0:	3320      	adds	r3, #32
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fcc5 	bl	8006a82 <ld_dword>
 80080f8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fc:	3330      	adds	r3, #48	@ 0x30
 80080fe:	330e      	adds	r3, #14
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fca5 	bl	8006a50 <ld_word>
 8008106:	4603      	mov	r3, r0
 8008108:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800810a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <find_volume+0x28c>
 8008110:	230d      	movs	r3, #13
 8008112:	e0fa      	b.n	800830a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008114:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008118:	4413      	add	r3, r2
 800811a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800811c:	8912      	ldrh	r2, [r2, #8]
 800811e:	0912      	lsrs	r2, r2, #4
 8008120:	b292      	uxth	r2, r2
 8008122:	4413      	add	r3, r2
 8008124:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	429a      	cmp	r2, r3
 800812c:	d204      	bcs.n	8008138 <find_volume+0x2b0>
 800812e:	230d      	movs	r3, #13
 8008130:	e0eb      	b.n	800830a <find_volume+0x482>
 8008132:	bf00      	nop
 8008134:	200003c8 	.word	0x200003c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008140:	8952      	ldrh	r2, [r2, #10]
 8008142:	fbb3 f3f2 	udiv	r3, r3, r2
 8008146:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <find_volume+0x2ca>
 800814e:	230d      	movs	r3, #13
 8008150:	e0db      	b.n	800830a <find_volume+0x482>
		fmt = FS_FAT32;
 8008152:	2303      	movs	r3, #3
 8008154:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800815e:	4293      	cmp	r3, r2
 8008160:	d802      	bhi.n	8008168 <find_volume+0x2e0>
 8008162:	2302      	movs	r3, #2
 8008164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800816e:	4293      	cmp	r3, r2
 8008170:	d802      	bhi.n	8008178 <find_volume+0x2f0>
 8008172:	2301      	movs	r3, #1
 8008174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	1c9a      	adds	r2, r3, #2
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008184:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008186:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818a:	441a      	add	r2, r3
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008190:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	441a      	add	r2, r3
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800819a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d11e      	bne.n	80081e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	3330      	adds	r3, #48	@ 0x30
 80081a6:	332a      	adds	r3, #42	@ 0x2a
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fc51 	bl	8006a50 <ld_word>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <find_volume+0x330>
 80081b4:	230d      	movs	r3, #13
 80081b6:	e0a8      	b.n	800830a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	891b      	ldrh	r3, [r3, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <find_volume+0x33c>
 80081c0:	230d      	movs	r3, #13
 80081c2:	e0a2      	b.n	800830a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	3330      	adds	r3, #48	@ 0x30
 80081c8:	332c      	adds	r3, #44	@ 0x2c
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fc59 	bl	8006a82 <ld_dword>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081de:	e01f      	b.n	8008220 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	891b      	ldrh	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <find_volume+0x364>
 80081e8:	230d      	movs	r3, #13
 80081ea:	e08e      	b.n	800830a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	6a1a      	ldr	r2, [r3, #32]
 80081f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f2:	441a      	add	r2, r3
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d103      	bne.n	8008208 <find_volume+0x380>
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	e00a      	b.n	800821e <find_volume+0x396>
 8008208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820a:	695a      	ldr	r2, [r3, #20]
 800820c:	4613      	mov	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	085a      	lsrs	r2, r3, #1
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800821e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008226:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800822a:	0a5b      	lsrs	r3, r3, #9
 800822c:	429a      	cmp	r2, r3
 800822e:	d201      	bcs.n	8008234 <find_volume+0x3ac>
 8008230:	230d      	movs	r3, #13
 8008232:	e06a      	b.n	800830a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800823a:	611a      	str	r2, [r3, #16]
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	2280      	movs	r2, #128	@ 0x80
 8008248:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800824a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800824e:	2b03      	cmp	r3, #3
 8008250:	d149      	bne.n	80082e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	3330      	adds	r3, #48	@ 0x30
 8008256:	3330      	adds	r3, #48	@ 0x30
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fbf9 	bl	8006a50 <ld_word>
 800825e:	4603      	mov	r3, r0
 8008260:	2b01      	cmp	r3, #1
 8008262:	d140      	bne.n	80082e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008266:	3301      	adds	r3, #1
 8008268:	4619      	mov	r1, r3
 800826a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800826c:	f7fe fea2 	bl	8006fb4 <move_window>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d137      	bne.n	80082e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	2200      	movs	r2, #0
 800827a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	3330      	adds	r3, #48	@ 0x30
 8008280:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fbe3 	bl	8006a50 <ld_word>
 800828a:	4603      	mov	r3, r0
 800828c:	461a      	mov	r2, r3
 800828e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008292:	429a      	cmp	r2, r3
 8008294:	d127      	bne.n	80082e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	3330      	adds	r3, #48	@ 0x30
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fbf1 	bl	8006a82 <ld_dword>
 80082a0:	4603      	mov	r3, r0
 80082a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008314 <find_volume+0x48c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d11e      	bne.n	80082e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	3330      	adds	r3, #48	@ 0x30
 80082ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe fbe6 	bl	8006a82 <ld_dword>
 80082b6:	4603      	mov	r3, r0
 80082b8:	4a17      	ldr	r2, [pc, #92]	@ (8008318 <find_volume+0x490>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	3330      	adds	r3, #48	@ 0x30
 80082c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fbdb 	bl	8006a82 <ld_dword>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	3330      	adds	r3, #48	@ 0x30
 80082d6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fbd1 	bl	8006a82 <ld_dword>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80082ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082ee:	4b0b      	ldr	r3, [pc, #44]	@ (800831c <find_volume+0x494>)
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	4b09      	ldr	r3, [pc, #36]	@ (800831c <find_volume+0x494>)
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	4b08      	ldr	r3, [pc, #32]	@ (800831c <find_volume+0x494>)
 80082fc:	881a      	ldrh	r2, [r3, #0]
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008302:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008304:	f7fe fdee 	bl	8006ee4 <clear_lock>
#endif
	return FR_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3758      	adds	r7, #88	@ 0x58
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	41615252 	.word	0x41615252
 8008318:	61417272 	.word	0x61417272
 800831c:	200003cc 	.word	0x200003cc

08008320 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800832a:	2309      	movs	r3, #9
 800832c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01c      	beq.n	800836e <validate+0x4e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d018      	beq.n	800836e <validate+0x4e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d013      	beq.n	800836e <validate+0x4e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	889a      	ldrh	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	88db      	ldrh	r3, [r3, #6]
 8008350:	429a      	cmp	r2, r3
 8008352:	d10c      	bne.n	800836e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fad8 	bl	8006910 <disk_status>
 8008360:	4603      	mov	r3, r0
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <validate+0x4e>
			res = FR_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <validate+0x5a>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	e000      	b.n	800837c <validate+0x5c>
 800837a:	2300      	movs	r3, #0
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	6013      	str	r3, [r2, #0]
	return res;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800839e:	f107 0310 	add.w	r3, r7, #16
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff fcd5 	bl	8007d52 <get_ldnumber>
 80083a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	da01      	bge.n	80083b4 <f_mount+0x28>
 80083b0:	230b      	movs	r3, #11
 80083b2:	e02b      	b.n	800840c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083b4:	4a17      	ldr	r2, [pc, #92]	@ (8008414 <f_mount+0x88>)
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083c4:	69b8      	ldr	r0, [r7, #24]
 80083c6:	f7fe fd8d 	bl	8006ee4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	490d      	ldr	r1, [pc, #52]	@ (8008414 <f_mount+0x88>)
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <f_mount+0x66>
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d001      	beq.n	80083f6 <f_mount+0x6a>
 80083f2:	2300      	movs	r3, #0
 80083f4:	e00a      	b.n	800840c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80083f6:	f107 010c 	add.w	r1, r7, #12
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	2200      	movs	r2, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fd41 	bl	8007e88 <find_volume>
 8008406:	4603      	mov	r3, r0
 8008408:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200003c8 	.word	0x200003c8

08008418 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b098      	sub	sp, #96	@ 0x60
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <f_open+0x18>
 800842c:	2309      	movs	r3, #9
 800842e:	e1a9      	b.n	8008784 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008436:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008438:	79fa      	ldrb	r2, [r7, #7]
 800843a:	f107 0110 	add.w	r1, r7, #16
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fd20 	bl	8007e88 <find_volume>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800844e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 818d 	bne.w	8008772 <f_open+0x35a>
		dj.obj.fs = fs;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	f107 0314 	add.w	r3, r7, #20
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fc03 	bl	8007c70 <follow_path>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008474:	2b00      	cmp	r3, #0
 8008476:	d118      	bne.n	80084aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008478:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800847c:	b25b      	sxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	da03      	bge.n	800848a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008482:	2306      	movs	r3, #6
 8008484:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008488:	e00f      	b.n	80084aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	2b01      	cmp	r3, #1
 800848e:	bf8c      	ite	hi
 8008490:	2301      	movhi	r3, #1
 8008492:	2300      	movls	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	f107 0314 	add.w	r3, r7, #20
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fbd8 	bl	8006c54 <chk_lock>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	f003 031c 	and.w	r3, r3, #28
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d07f      	beq.n	80085b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80084b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d017      	beq.n	80084ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d10e      	bne.n	80084e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084c4:	f7fe fc22 	bl	8006d0c <enq_lock>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d006      	beq.n	80084dc <f_open+0xc4>
 80084ce:	f107 0314 	add.w	r3, r7, #20
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff fb06 	bl	8007ae4 <dir_register>
 80084d8:	4603      	mov	r3, r0
 80084da:	e000      	b.n	80084de <f_open+0xc6>
 80084dc:	2312      	movs	r3, #18
 80084de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	f043 0308 	orr.w	r3, r3, #8
 80084e8:	71fb      	strb	r3, [r7, #7]
 80084ea:	e010      	b.n	800850e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084ec:	7ebb      	ldrb	r3, [r7, #26]
 80084ee:	f003 0311 	and.w	r3, r3, #17
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <f_open+0xe6>
					res = FR_DENIED;
 80084f6:	2307      	movs	r3, #7
 80084f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80084fc:	e007      	b.n	800850e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <f_open+0xf6>
 8008508:	2308      	movs	r3, #8
 800850a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800850e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008512:	2b00      	cmp	r3, #0
 8008514:	d168      	bne.n	80085e8 <f_open+0x1d0>
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d063      	beq.n	80085e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008520:	f7fd fcbe 	bl	8005ea0 <get_fattime>
 8008524:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	330e      	adds	r3, #14
 800852a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fae6 	bl	8006afe <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008534:	3316      	adds	r3, #22
 8008536:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fae0 	bl	8006afe <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	330b      	adds	r3, #11
 8008542:	2220      	movs	r2, #32
 8008544:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fa35 	bl	80079bc <ld_clust>
 8008552:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008558:	2200      	movs	r2, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fa4d 	bl	80079fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008562:	331c      	adds	r3, #28
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fac9 	bl	8006afe <st_dword>
					fs->wflag = 1;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2201      	movs	r2, #1
 8008570:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d037      	beq.n	80085e8 <f_open+0x1d0>
						dw = fs->winsect;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800857e:	f107 0314 	add.w	r3, r7, #20
 8008582:	2200      	movs	r2, #0
 8008584:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe ff60 	bl	800744c <remove_chain>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008592:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008596:	2b00      	cmp	r3, #0
 8008598:	d126      	bne.n	80085e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fd08 	bl	8006fb4 <move_window>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085ae:	3a01      	subs	r2, #1
 80085b0:	60da      	str	r2, [r3, #12]
 80085b2:	e019      	b.n	80085e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d115      	bne.n	80085e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085bc:	7ebb      	ldrb	r3, [r7, #26]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <f_open+0x1b6>
					res = FR_NO_FILE;
 80085c6:	2304      	movs	r3, #4
 80085c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80085cc:	e00c      	b.n	80085e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <f_open+0x1d0>
 80085d8:	7ebb      	ldrb	r3, [r7, #26]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <f_open+0x1d0>
						res = FR_DENIED;
 80085e2:	2307      	movs	r3, #7
 80085e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80085e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d126      	bne.n	800863e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008600:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800860a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	2b01      	cmp	r3, #1
 8008614:	bf8c      	ite	hi
 8008616:	2301      	movhi	r3, #1
 8008618:	2300      	movls	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	f107 0314 	add.w	r3, r7, #20
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fb93 	bl	8006d50 <inc_lock>
 800862a:	4602      	mov	r2, r0
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <f_open+0x226>
 8008638:	2302      	movs	r3, #2
 800863a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800863e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008642:	2b00      	cmp	r3, #0
 8008644:	f040 8095 	bne.w	8008772 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f9b4 	bl	80079bc <ld_clust>
 8008654:	4602      	mov	r2, r0
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	331c      	adds	r3, #28
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fa0f 	bl	8006a82 <ld_dword>
 8008664:	4602      	mov	r2, r0
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	88da      	ldrh	r2, [r3, #6]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	79fa      	ldrb	r2, [r7, #7]
 8008682:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3330      	adds	r3, #48	@ 0x30
 800869a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe fa79 	bl	8006b98 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d060      	beq.n	8008772 <f_open+0x35a>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d05c      	beq.n	8008772 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	895b      	ldrh	r3, [r3, #10]
 80086c4:	025b      	lsls	r3, r3, #9
 80086c6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80086d4:	e016      	b.n	8008704 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fd25 	bl	800712a <get_fat>
 80086e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80086e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d802      	bhi.n	80086ee <f_open+0x2d6>
 80086e8:	2302      	movs	r3, #2
 80086ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80086ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086f4:	d102      	bne.n	80086fc <f_open+0x2e4>
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	657b      	str	r3, [r7, #84]	@ 0x54
 8008704:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008708:	2b00      	cmp	r3, #0
 800870a:	d103      	bne.n	8008714 <f_open+0x2fc>
 800870c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800870e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008710:	429a      	cmp	r2, r3
 8008712:	d8e0      	bhi.n	80086d6 <f_open+0x2be>
				}
				fp->clust = clst;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008718:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800871a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800871e:	2b00      	cmp	r3, #0
 8008720:	d127      	bne.n	8008772 <f_open+0x35a>
 8008722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008728:	2b00      	cmp	r3, #0
 800872a:	d022      	beq.n	8008772 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe fcdb 	bl	80070ec <clust2sect>
 8008736:	6478      	str	r0, [r7, #68]	@ 0x44
 8008738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <f_open+0x32e>
						res = FR_INT_ERR;
 800873e:	2302      	movs	r3, #2
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008744:	e015      	b.n	8008772 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008748:	0a5a      	lsrs	r2, r3, #9
 800874a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874c:	441a      	add	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	7858      	ldrb	r0, [r3, #1]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	2301      	movs	r3, #1
 8008762:	f7fe f917 	bl	8006994 <disk_read>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <f_open+0x35a>
 800876c:	2301      	movs	r3, #1
 800876e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008772:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <f_open+0x368>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008784:	4618      	mov	r0, r3
 8008786:	3760      	adds	r7, #96	@ 0x60
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	@ 0x38
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f107 0214 	add.w	r2, r7, #20
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fdb7 	bl	8008320 <validate>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d107      	bne.n	80087d0 <f_read+0x44>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	7d5b      	ldrb	r3, [r3, #21]
 80087c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80087c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <f_read+0x4a>
 80087d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087d4:	e115      	b.n	8008a02 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	7d1b      	ldrb	r3, [r3, #20]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <f_read+0x5a>
 80087e2:	2307      	movs	r3, #7
 80087e4:	e10d      	b.n	8008a02 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f240 80fe 	bls.w	80089f8 <f_read+0x26c>
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008800:	e0fa      	b.n	80089f8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 80c6 	bne.w	800899c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	0a5b      	lsrs	r3, r3, #9
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	8952      	ldrh	r2, [r2, #10]
 800881a:	3a01      	subs	r2, #1
 800881c:	4013      	ands	r3, r2
 800881e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d12f      	bne.n	8008886 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d103      	bne.n	8008836 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	633b      	str	r3, [r7, #48]	@ 0x30
 8008834:	e013      	b.n	800885e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d007      	beq.n	800884e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7fe fefe 	bl	8007646 <clmt_clust>
 800884a:	6338      	str	r0, [r7, #48]	@ 0x30
 800884c:	e007      	b.n	800885e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7fe fc67 	bl	800712a <get_fat>
 800885c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b01      	cmp	r3, #1
 8008862:	d804      	bhi.n	800886e <f_read+0xe2>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2202      	movs	r2, #2
 8008868:	755a      	strb	r2, [r3, #21]
 800886a:	2302      	movs	r3, #2
 800886c:	e0c9      	b.n	8008a02 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008874:	d104      	bne.n	8008880 <f_read+0xf4>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	755a      	strb	r2, [r3, #21]
 800887c:	2301      	movs	r3, #1
 800887e:	e0c0      	b.n	8008a02 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008884:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f7fe fc2c 	bl	80070ec <clust2sect>
 8008894:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d104      	bne.n	80088a6 <f_read+0x11a>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2202      	movs	r2, #2
 80088a0:	755a      	strb	r2, [r3, #21]
 80088a2:	2302      	movs	r3, #2
 80088a4:	e0ad      	b.n	8008a02 <f_read+0x276>
			sect += csect;
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	0a5b      	lsrs	r3, r3, #9
 80088b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d039      	beq.n	800892e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	4413      	add	r3, r2
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	8952      	ldrh	r2, [r2, #10]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d905      	bls.n	80088d4 <f_read+0x148>
					cc = fs->csize - csect;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	895b      	ldrh	r3, [r3, #10]
 80088cc:	461a      	mov	r2, r3
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	7858      	ldrb	r0, [r3, #1]
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088de:	f7fe f859 	bl	8006994 <disk_read>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <f_read+0x166>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	755a      	strb	r2, [r3, #21]
 80088ee:	2301      	movs	r3, #1
 80088f0:	e087      	b.n	8008a02 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	b25b      	sxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da14      	bge.n	8008926 <f_read+0x19a>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008906:	429a      	cmp	r2, r3
 8008908:	d90d      	bls.n	8008926 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a1a      	ldr	r2, [r3, #32]
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	025b      	lsls	r3, r3, #9
 8008914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008916:	18d0      	adds	r0, r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3330      	adds	r3, #48	@ 0x30
 800891c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008920:	4619      	mov	r1, r3
 8008922:	f7fe f918 	bl	8006b56 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	025b      	lsls	r3, r3, #9
 800892a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800892c:	e050      	b.n	80089d0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	429a      	cmp	r2, r3
 8008936:	d02e      	beq.n	8008996 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	7d1b      	ldrb	r3, [r3, #20]
 800893c:	b25b      	sxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	da18      	bge.n	8008974 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	7858      	ldrb	r0, [r3, #1]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a1a      	ldr	r2, [r3, #32]
 8008950:	2301      	movs	r3, #1
 8008952:	f7fe f83f 	bl	80069d4 <disk_write>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <f_read+0x1da>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	755a      	strb	r2, [r3, #21]
 8008962:	2301      	movs	r3, #1
 8008964:	e04d      	b.n	8008a02 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	7d1b      	ldrb	r3, [r3, #20]
 800896a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800896e:	b2da      	uxtb	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	7858      	ldrb	r0, [r3, #1]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800897e:	2301      	movs	r3, #1
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	f7fe f807 	bl	8006994 <disk_read>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <f_read+0x20a>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	755a      	strb	r2, [r3, #21]
 8008992:	2301      	movs	r3, #1
 8008994:	e035      	b.n	8008a02 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80089a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80089aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d901      	bls.n	80089b6 <f_read+0x22a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c4:	4413      	add	r3, r2
 80089c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c8:	4619      	mov	r1, r3
 80089ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089cc:	f7fe f8c3 	bl	8006b56 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80089d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	4413      	add	r3, r2
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	441a      	add	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	619a      	str	r2, [r3, #24]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	441a      	add	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f47f af01 	bne.w	8008802 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3738      	adds	r7, #56	@ 0x38
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08c      	sub	sp, #48	@ 0x30
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f107 0210 	add.w	r2, r7, #16
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fc78 	bl	8008320 <validate>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d107      	bne.n	8008a4e <f_write+0x44>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	7d5b      	ldrb	r3, [r3, #21]
 8008a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <f_write+0x4a>
 8008a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a52:	e14b      	b.n	8008cec <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	7d1b      	ldrb	r3, [r3, #20]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <f_write+0x5a>
 8008a60:	2307      	movs	r3, #7
 8008a62:	e143      	b.n	8008cec <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	699a      	ldr	r2, [r3, #24]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	f080 812d 	bcs.w	8008cd0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a7e:	e127      	b.n	8008cd0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 80e3 	bne.w	8008c54 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	0a5b      	lsrs	r3, r3, #9
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	8952      	ldrh	r2, [r2, #10]
 8008a98:	3a01      	subs	r2, #1
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d143      	bne.n	8008b2c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10c      	bne.n	8008ac6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11a      	bne.n	8008aee <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fd2a 	bl	8007516 <create_chain>
 8008ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ac4:	e013      	b.n	8008aee <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7fe fdb6 	bl	8007646 <clmt_clust>
 8008ada:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008adc:	e007      	b.n	8008aee <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe fd15 	bl	8007516 <create_chain>
 8008aec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80f2 	beq.w	8008cda <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d104      	bne.n	8008b06 <f_write+0xfc>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2202      	movs	r2, #2
 8008b00:	755a      	strb	r2, [r3, #21]
 8008b02:	2302      	movs	r3, #2
 8008b04:	e0f2      	b.n	8008cec <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b0c:	d104      	bne.n	8008b18 <f_write+0x10e>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	755a      	strb	r2, [r3, #21]
 8008b14:	2301      	movs	r3, #1
 8008b16:	e0e9      	b.n	8008cec <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b1c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d102      	bne.n	8008b2c <f_write+0x122>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	7d1b      	ldrb	r3, [r3, #20]
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	da18      	bge.n	8008b68 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	7858      	ldrb	r0, [r3, #1]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	2301      	movs	r3, #1
 8008b46:	f7fd ff45 	bl	80069d4 <disk_write>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <f_write+0x150>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	755a      	strb	r2, [r3, #21]
 8008b56:	2301      	movs	r3, #1
 8008b58:	e0c8      	b.n	8008cec <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	7d1b      	ldrb	r3, [r3, #20]
 8008b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fe fabb 	bl	80070ec <clust2sect>
 8008b76:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <f_write+0x17e>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2202      	movs	r2, #2
 8008b82:	755a      	strb	r2, [r3, #21]
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0b1      	b.n	8008cec <f_write+0x2e2>
			sect += csect;
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	0a5b      	lsrs	r3, r3, #9
 8008b94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d03c      	beq.n	8008c16 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	8952      	ldrh	r2, [r2, #10]
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d905      	bls.n	8008bb6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	895b      	ldrh	r3, [r3, #10]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	7858      	ldrb	r0, [r3, #1]
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	69f9      	ldr	r1, [r7, #28]
 8008bc0:	f7fd ff08 	bl	80069d4 <disk_write>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <f_write+0x1ca>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	755a      	strb	r2, [r3, #21]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e08b      	b.n	8008cec <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a1a      	ldr	r2, [r3, #32]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d915      	bls.n	8008c0e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1a      	ldr	r2, [r3, #32]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	025b      	lsls	r3, r3, #9
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f7fd ffab 	bl	8006b56 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	025b      	lsls	r3, r3, #9
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008c14:	e03f      	b.n	8008c96 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d016      	beq.n	8008c4e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d210      	bcs.n	8008c4e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	7858      	ldrb	r0, [r3, #1]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c36:	2301      	movs	r3, #1
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	f7fd feab 	bl	8006994 <disk_read>
 8008c3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	755a      	strb	r2, [r3, #21]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04e      	b.n	8008cec <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008c60:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d901      	bls.n	8008c6e <f_write+0x264>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7c:	4413      	add	r3, r2
 8008c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd ff67 	bl	8006b56 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	7d1b      	ldrb	r3, [r3, #20]
 8008c8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	4413      	add	r3, r2
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699a      	ldr	r2, [r3, #24]
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	619a      	str	r2, [r3, #24]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	bf38      	it	cc
 8008cb6:	461a      	movcc	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	441a      	add	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f47f aed4 	bne.w	8008a80 <f_write+0x76>
 8008cd8:	e000      	b.n	8008cdc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	7d1b      	ldrb	r3, [r3, #20]
 8008ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3730      	adds	r7, #48	@ 0x30
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f107 0208 	add.w	r2, r7, #8
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fb0b 	bl	8008320 <validate>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d168      	bne.n	8008de6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7d1b      	ldrb	r3, [r3, #20]
 8008d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d062      	beq.n	8008de6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7d1b      	ldrb	r3, [r3, #20]
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da15      	bge.n	8008d56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	7858      	ldrb	r0, [r3, #1]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f7fd fe4b 	bl	80069d4 <disk_write>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <f_sync+0x54>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e04f      	b.n	8008de8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7d1b      	ldrb	r3, [r3, #20]
 8008d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d56:	f7fd f8a3 	bl	8005ea0 <get_fattime>
 8008d5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f7fe f925 	bl	8006fb4 <move_window>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d138      	bne.n	8008de6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	330b      	adds	r3, #11
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	330b      	adds	r3, #11
 8008d84:	f042 0220 	orr.w	r2, r2, #32
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	461a      	mov	r2, r3
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f7fe fe2f 	bl	80079fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f103 021c 	add.w	r2, r3, #28
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7fd fea8 	bl	8006afe <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3316      	adds	r3, #22
 8008db2:	6939      	ldr	r1, [r7, #16]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fd fea2 	bl	8006afe <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3312      	adds	r3, #18
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fd fe81 	bl	8006ac8 <st_word>
					fs->wflag = 1;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe f91e 	bl	8007010 <sync_fs>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7d1b      	ldrb	r3, [r3, #20]
 8008ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff7b 	bl	8008cf4 <f_sync>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d118      	bne.n	8008e3a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f107 0208 	add.w	r2, r7, #8
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fa85 	bl	8008320 <validate>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10c      	bne.n	8008e3a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe f821 	bl	8006e6c <dec_lock>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b092      	sub	sp, #72	@ 0x48
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008e50:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff f814 	bl	8007e88 <find_volume>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008e66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 8099 	bne.w	8008fa2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	691a      	ldr	r2, [r3, #16]
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	3b02      	subs	r3, #2
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d804      	bhi.n	8008e8e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e089      	b.n	8008fa2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d128      	bne.n	8008eec <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008ea2:	f107 0314 	add.w	r3, r7, #20
 8008ea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe f93e 	bl	800712a <get_fat>
 8008eae:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eb6:	d103      	bne.n	8008ec0 <f_getfree+0x7c>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ebe:	e063      	b.n	8008f88 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d103      	bne.n	8008ece <f_getfree+0x8a>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ecc:	e05c      	b.n	8008f88 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <f_getfree+0x96>
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008edc:	3301      	adds	r3, #1
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d3db      	bcc.n	8008ea2 <f_getfree+0x5e>
 8008eea:	e04d      	b.n	8008f88 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efc:	2300      	movs	r3, #0
 8008efe:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d113      	bne.n	8008f2e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f7fe f850 	bl	8006fb4 <move_window>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008f1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d131      	bne.n	8008f86 <f_getfree+0x142>
							p = fs->win;
 8008f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f24:	3330      	adds	r3, #48	@ 0x30
 8008f26:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008f28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d10f      	bne.n	8008f56 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008f36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f38:	f7fd fd8a 	bl	8006a50 <ld_word>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <f_getfree+0x104>
 8008f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f44:	3301      	adds	r3, #1
 8008f46:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	3b02      	subs	r3, #2
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f54:	e010      	b.n	8008f78 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008f56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f58:	f7fd fd93 	bl	8006a82 <ld_dword>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <f_getfree+0x128>
 8008f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f68:	3301      	adds	r3, #1
 8008f6a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	3304      	adds	r3, #4
 8008f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f74:	3b04      	subs	r3, #4
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1bd      	bne.n	8008f00 <f_getfree+0xbc>
 8008f84:	e000      	b.n	8008f88 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008f86:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f8c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f92:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f96:	791a      	ldrb	r2, [r3, #4]
 8008f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008fa2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3748      	adds	r7, #72	@ 0x48
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b088      	sub	sp, #32
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008fc2:	e01c      	b.n	8008ffe <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008fc4:	f107 0310 	add.w	r3, r7, #16
 8008fc8:	f107 0114 	add.w	r1, r7, #20
 8008fcc:	2201      	movs	r2, #1
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fbdc 	bl	800878c <f_read>
		if (rc != 1) break;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d117      	bne.n	800900a <f_gets+0x5c>
		c = s[0];
 8008fda:	7d3b      	ldrb	r3, [r7, #20]
 8008fdc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	2b0d      	cmp	r3, #13
 8008fe2:	d00b      	beq.n	8008ffc <f_gets+0x4e>
		*p++ = c;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	61ba      	str	r2, [r7, #24]
 8008fea:	7dfa      	ldrb	r2, [r7, #23]
 8008fec:	701a      	strb	r2, [r3, #0]
		n++;
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	2b0a      	cmp	r3, #10
 8008ff8:	d009      	beq.n	800900e <f_gets+0x60>
 8008ffa:	e000      	b.n	8008ffe <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ffc:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	3b01      	subs	r3, #1
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	429a      	cmp	r2, r3
 8009006:	dbdd      	blt.n	8008fc4 <f_gets+0x16>
 8009008:	e002      	b.n	8009010 <f_gets+0x62>
		if (rc != 1) break;
 800900a:	bf00      	nop
 800900c:	e000      	b.n	8009010 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800900e:	bf00      	nop
	}
	*p = 0;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <f_gets+0x72>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e000      	b.n	8009022 <f_gets+0x74>
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009042:	4b1f      	ldr	r3, [pc, #124]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 8009044:	7a5b      	ldrb	r3, [r3, #9]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d131      	bne.n	80090b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800904c:	4b1c      	ldr	r3, [pc, #112]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 800904e:	7a5b      	ldrb	r3, [r3, #9]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	4b1a      	ldr	r3, [pc, #104]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 8009056:	2100      	movs	r1, #0
 8009058:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800905a:	4b19      	ldr	r3, [pc, #100]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 800905c:	7a5b      	ldrb	r3, [r3, #9]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	4a17      	ldr	r2, [pc, #92]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800906a:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 800906c:	7a5b      	ldrb	r3, [r3, #9]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	4b13      	ldr	r3, [pc, #76]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 8009074:	4413      	add	r3, r2
 8009076:	79fa      	ldrb	r2, [r7, #7]
 8009078:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800907a:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 800907c:	7a5b      	ldrb	r3, [r3, #9]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	b2d1      	uxtb	r1, r2
 8009084:	4a0e      	ldr	r2, [pc, #56]	@ (80090c0 <FATFS_LinkDriverEx+0x94>)
 8009086:	7251      	strb	r1, [r2, #9]
 8009088:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800908a:	7dbb      	ldrb	r3, [r7, #22]
 800908c:	3330      	adds	r3, #48	@ 0x30
 800908e:	b2da      	uxtb	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3301      	adds	r3, #1
 8009098:	223a      	movs	r2, #58	@ 0x3a
 800909a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	3302      	adds	r3, #2
 80090a0:	222f      	movs	r2, #47	@ 0x2f
 80090a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	3303      	adds	r3, #3
 80090a8:	2200      	movs	r2, #0
 80090aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	200003f0 	.word	0x200003f0

080090c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff ffaa 	bl	800902c <FATFS_LinkDriverEx>
 80090d8:	4603      	mov	r3, r0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <findslot>:
 80090e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009110 <findslot+0x2c>)
 80090e6:	b510      	push	{r4, lr}
 80090e8:	4604      	mov	r4, r0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	b118      	cbz	r0, 80090f6 <findslot+0x12>
 80090ee:	6a03      	ldr	r3, [r0, #32]
 80090f0:	b90b      	cbnz	r3, 80090f6 <findslot+0x12>
 80090f2:	f001 fb3b 	bl	800a76c <__sinit>
 80090f6:	2c13      	cmp	r4, #19
 80090f8:	d807      	bhi.n	800910a <findslot+0x26>
 80090fa:	4806      	ldr	r0, [pc, #24]	@ (8009114 <findslot+0x30>)
 80090fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8009100:	3201      	adds	r2, #1
 8009102:	d002      	beq.n	800910a <findslot+0x26>
 8009104:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8009108:	bd10      	pop	{r4, pc}
 800910a:	2000      	movs	r0, #0
 800910c:	e7fc      	b.n	8009108 <findslot+0x24>
 800910e:	bf00      	nop
 8009110:	20000038 	.word	0x20000038
 8009114:	20000408 	.word	0x20000408

08009118 <error>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	f001 fd54 	bl	800abc8 <__errno>
 8009120:	2613      	movs	r6, #19
 8009122:	4605      	mov	r5, r0
 8009124:	2700      	movs	r7, #0
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	beab      	bkpt	0x00ab
 800912c:	4606      	mov	r6, r0
 800912e:	602e      	str	r6, [r5, #0]
 8009130:	4620      	mov	r0, r4
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009134 <checkerror>:
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d101      	bne.n	800913c <checkerror+0x8>
 8009138:	f7ff bfee 	b.w	8009118 <error>
 800913c:	4770      	bx	lr

0800913e <_swiread>:
 800913e:	b530      	push	{r4, r5, lr}
 8009140:	b085      	sub	sp, #20
 8009142:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009146:	9203      	str	r2, [sp, #12]
 8009148:	2406      	movs	r4, #6
 800914a:	ad01      	add	r5, sp, #4
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	beab      	bkpt	0x00ab
 8009152:	4604      	mov	r4, r0
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff ffed 	bl	8009134 <checkerror>
 800915a:	b005      	add	sp, #20
 800915c:	bd30      	pop	{r4, r5, pc}

0800915e <_read>:
 800915e:	b570      	push	{r4, r5, r6, lr}
 8009160:	460e      	mov	r6, r1
 8009162:	4614      	mov	r4, r2
 8009164:	f7ff ffbe 	bl	80090e4 <findslot>
 8009168:	4605      	mov	r5, r0
 800916a:	b930      	cbnz	r0, 800917a <_read+0x1c>
 800916c:	f001 fd2c 	bl	800abc8 <__errno>
 8009170:	2309      	movs	r3, #9
 8009172:	6003      	str	r3, [r0, #0]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009178:	bd70      	pop	{r4, r5, r6, pc}
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	4622      	mov	r2, r4
 800917e:	4631      	mov	r1, r6
 8009180:	f7ff ffdd 	bl	800913e <_swiread>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d0f5      	beq.n	8009174 <_read+0x16>
 8009188:	686b      	ldr	r3, [r5, #4]
 800918a:	1a20      	subs	r0, r4, r0
 800918c:	4403      	add	r3, r0
 800918e:	606b      	str	r3, [r5, #4]
 8009190:	e7f2      	b.n	8009178 <_read+0x1a>

08009192 <_swilseek>:
 8009192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009194:	460c      	mov	r4, r1
 8009196:	4616      	mov	r6, r2
 8009198:	f7ff ffa4 	bl	80090e4 <findslot>
 800919c:	4605      	mov	r5, r0
 800919e:	b940      	cbnz	r0, 80091b2 <_swilseek+0x20>
 80091a0:	f001 fd12 	bl	800abc8 <__errno>
 80091a4:	2309      	movs	r3, #9
 80091a6:	6003      	str	r3, [r0, #0]
 80091a8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80091ac:	4620      	mov	r0, r4
 80091ae:	b003      	add	sp, #12
 80091b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b2:	2e02      	cmp	r6, #2
 80091b4:	d903      	bls.n	80091be <_swilseek+0x2c>
 80091b6:	f001 fd07 	bl	800abc8 <__errno>
 80091ba:	2316      	movs	r3, #22
 80091bc:	e7f3      	b.n	80091a6 <_swilseek+0x14>
 80091be:	2e01      	cmp	r6, #1
 80091c0:	d112      	bne.n	80091e8 <_swilseek+0x56>
 80091c2:	6843      	ldr	r3, [r0, #4]
 80091c4:	18e4      	adds	r4, r4, r3
 80091c6:	d4f6      	bmi.n	80091b6 <_swilseek+0x24>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	260a      	movs	r6, #10
 80091cc:	e9cd 3400 	strd	r3, r4, [sp]
 80091d0:	466f      	mov	r7, sp
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	beab      	bkpt	0x00ab
 80091d8:	4606      	mov	r6, r0
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ffaa 	bl	8009134 <checkerror>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	dbe1      	blt.n	80091a8 <_swilseek+0x16>
 80091e4:	606c      	str	r4, [r5, #4]
 80091e6:	e7e1      	b.n	80091ac <_swilseek+0x1a>
 80091e8:	2e02      	cmp	r6, #2
 80091ea:	6803      	ldr	r3, [r0, #0]
 80091ec:	d1ec      	bne.n	80091c8 <_swilseek+0x36>
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	260c      	movs	r6, #12
 80091f2:	466f      	mov	r7, sp
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	beab      	bkpt	0x00ab
 80091fa:	4606      	mov	r6, r0
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff ff99 	bl	8009134 <checkerror>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d0d0      	beq.n	80091a8 <_swilseek+0x16>
 8009206:	4404      	add	r4, r0
 8009208:	e7de      	b.n	80091c8 <_swilseek+0x36>

0800920a <_lseek>:
 800920a:	f7ff bfc2 	b.w	8009192 <_swilseek>

0800920e <_swiwrite>:
 800920e:	b530      	push	{r4, r5, lr}
 8009210:	b085      	sub	sp, #20
 8009212:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009216:	9203      	str	r2, [sp, #12]
 8009218:	2405      	movs	r4, #5
 800921a:	ad01      	add	r5, sp, #4
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	beab      	bkpt	0x00ab
 8009222:	4604      	mov	r4, r0
 8009224:	4620      	mov	r0, r4
 8009226:	f7ff ff85 	bl	8009134 <checkerror>
 800922a:	b005      	add	sp, #20
 800922c:	bd30      	pop	{r4, r5, pc}

0800922e <_write>:
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	460e      	mov	r6, r1
 8009232:	4615      	mov	r5, r2
 8009234:	f7ff ff56 	bl	80090e4 <findslot>
 8009238:	4604      	mov	r4, r0
 800923a:	b930      	cbnz	r0, 800924a <_write+0x1c>
 800923c:	f001 fcc4 	bl	800abc8 <__errno>
 8009240:	2309      	movs	r3, #9
 8009242:	6003      	str	r3, [r0, #0]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	462a      	mov	r2, r5
 800924e:	4631      	mov	r1, r6
 8009250:	f7ff ffdd 	bl	800920e <_swiwrite>
 8009254:	1e03      	subs	r3, r0, #0
 8009256:	dbf5      	blt.n	8009244 <_write+0x16>
 8009258:	6862      	ldr	r2, [r4, #4]
 800925a:	1ae8      	subs	r0, r5, r3
 800925c:	4402      	add	r2, r0
 800925e:	42ab      	cmp	r3, r5
 8009260:	6062      	str	r2, [r4, #4]
 8009262:	d1f1      	bne.n	8009248 <_write+0x1a>
 8009264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009268:	2000      	movs	r0, #0
 800926a:	f7ff bf55 	b.w	8009118 <error>

0800926e <_swiclose>:
 800926e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009270:	2402      	movs	r4, #2
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	ad01      	add	r5, sp, #4
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	beab      	bkpt	0x00ab
 800927c:	4604      	mov	r4, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff ff58 	bl	8009134 <checkerror>
 8009284:	b003      	add	sp, #12
 8009286:	bd30      	pop	{r4, r5, pc}

08009288 <_close>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4605      	mov	r5, r0
 800928c:	f7ff ff2a 	bl	80090e4 <findslot>
 8009290:	4604      	mov	r4, r0
 8009292:	b930      	cbnz	r0, 80092a2 <_close+0x1a>
 8009294:	f001 fc98 	bl	800abc8 <__errno>
 8009298:	2309      	movs	r3, #9
 800929a:	6003      	str	r3, [r0, #0]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092a0:	bd38      	pop	{r3, r4, r5, pc}
 80092a2:	3d01      	subs	r5, #1
 80092a4:	2d01      	cmp	r5, #1
 80092a6:	d809      	bhi.n	80092bc <_close+0x34>
 80092a8:	4b09      	ldr	r3, [pc, #36]	@ (80092d0 <_close+0x48>)
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d104      	bne.n	80092bc <_close+0x34>
 80092b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092b6:	6003      	str	r3, [r0, #0]
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7f1      	b.n	80092a0 <_close+0x18>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	f7ff ffd6 	bl	800926e <_swiclose>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d1ec      	bne.n	80092a0 <_close+0x18>
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	e7e8      	b.n	80092a0 <_close+0x18>
 80092ce:	bf00      	nop
 80092d0:	20000408 	.word	0x20000408

080092d4 <_getpid>:
 80092d4:	2001      	movs	r0, #1
 80092d6:	4770      	bx	lr

080092d8 <_swistat>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	460c      	mov	r4, r1
 80092dc:	f7ff ff02 	bl	80090e4 <findslot>
 80092e0:	4605      	mov	r5, r0
 80092e2:	b930      	cbnz	r0, 80092f2 <_swistat+0x1a>
 80092e4:	f001 fc70 	bl	800abc8 <__errno>
 80092e8:	2309      	movs	r3, #9
 80092ea:	6003      	str	r3, [r0, #0]
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80092f8:	6063      	str	r3, [r4, #4]
 80092fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092fe:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009300:	260c      	movs	r6, #12
 8009302:	4630      	mov	r0, r6
 8009304:	4629      	mov	r1, r5
 8009306:	beab      	bkpt	0x00ab
 8009308:	4605      	mov	r5, r0
 800930a:	4628      	mov	r0, r5
 800930c:	f7ff ff12 	bl	8009134 <checkerror>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d0eb      	beq.n	80092ec <_swistat+0x14>
 8009314:	6120      	str	r0, [r4, #16]
 8009316:	2000      	movs	r0, #0
 8009318:	e7ea      	b.n	80092f0 <_swistat+0x18>

0800931a <_fstat>:
 800931a:	460b      	mov	r3, r1
 800931c:	b510      	push	{r4, lr}
 800931e:	2100      	movs	r1, #0
 8009320:	4604      	mov	r4, r0
 8009322:	2258      	movs	r2, #88	@ 0x58
 8009324:	4618      	mov	r0, r3
 8009326:	f001 fbfd 	bl	800ab24 <memset>
 800932a:	4601      	mov	r1, r0
 800932c:	4620      	mov	r0, r4
 800932e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009332:	f7ff bfd1 	b.w	80092d8 <_swistat>

08009336 <_stat>:
 8009336:	b538      	push	{r3, r4, r5, lr}
 8009338:	460d      	mov	r5, r1
 800933a:	4604      	mov	r4, r0
 800933c:	2258      	movs	r2, #88	@ 0x58
 800933e:	2100      	movs	r1, #0
 8009340:	4628      	mov	r0, r5
 8009342:	f001 fbef 	bl	800ab24 <memset>
 8009346:	4620      	mov	r0, r4
 8009348:	2100      	movs	r1, #0
 800934a:	f000 f811 	bl	8009370 <_swiopen>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	4604      	mov	r4, r0
 8009352:	d00b      	beq.n	800936c <_stat+0x36>
 8009354:	686b      	ldr	r3, [r5, #4]
 8009356:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800935a:	606b      	str	r3, [r5, #4]
 800935c:	4629      	mov	r1, r5
 800935e:	f7ff ffbb 	bl	80092d8 <_swistat>
 8009362:	4605      	mov	r5, r0
 8009364:	4620      	mov	r0, r4
 8009366:	f7ff ff8f 	bl	8009288 <_close>
 800936a:	462c      	mov	r4, r5
 800936c:	4620      	mov	r0, r4
 800936e:	bd38      	pop	{r3, r4, r5, pc}

08009370 <_swiopen>:
 8009370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8009420 <_swiopen+0xb0>
 8009378:	b096      	sub	sp, #88	@ 0x58
 800937a:	4607      	mov	r7, r0
 800937c:	460e      	mov	r6, r1
 800937e:	2400      	movs	r4, #0
 8009380:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8009384:	3301      	adds	r3, #1
 8009386:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800938a:	d032      	beq.n	80093f2 <_swiopen+0x82>
 800938c:	3401      	adds	r4, #1
 800938e:	2c14      	cmp	r4, #20
 8009390:	d1f6      	bne.n	8009380 <_swiopen+0x10>
 8009392:	f001 fc19 	bl	800abc8 <__errno>
 8009396:	2318      	movs	r3, #24
 8009398:	e03a      	b.n	8009410 <_swiopen+0xa0>
 800939a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800939e:	f240 6301 	movw	r3, #1537	@ 0x601
 80093a2:	07b2      	lsls	r2, r6, #30
 80093a4:	bf48      	it	mi
 80093a6:	f045 0502 	orrmi.w	r5, r5, #2
 80093aa:	421e      	tst	r6, r3
 80093ac:	bf18      	it	ne
 80093ae:	f045 0504 	orrne.w	r5, r5, #4
 80093b2:	0733      	lsls	r3, r6, #28
 80093b4:	bf48      	it	mi
 80093b6:	f025 0504 	bicmi.w	r5, r5, #4
 80093ba:	4638      	mov	r0, r7
 80093bc:	bf48      	it	mi
 80093be:	f045 0508 	orrmi.w	r5, r5, #8
 80093c2:	9700      	str	r7, [sp, #0]
 80093c4:	f7f6 ff5c 	bl	8000280 <strlen>
 80093c8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80093cc:	2501      	movs	r5, #1
 80093ce:	4628      	mov	r0, r5
 80093d0:	4651      	mov	r1, sl
 80093d2:	beab      	bkpt	0x00ab
 80093d4:	4605      	mov	r5, r0
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	db06      	blt.n	80093e8 <_swiopen+0x78>
 80093da:	44c8      	add	r8, r9
 80093dc:	2300      	movs	r3, #0
 80093de:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80093e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80093e6:	e016      	b.n	8009416 <_swiopen+0xa6>
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7ff fe95 	bl	8009118 <error>
 80093ee:	4604      	mov	r4, r0
 80093f0:	e011      	b.n	8009416 <_swiopen+0xa6>
 80093f2:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80093f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80093fa:	46ea      	mov	sl, sp
 80093fc:	d1cd      	bne.n	800939a <_swiopen+0x2a>
 80093fe:	4651      	mov	r1, sl
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff ff98 	bl	8009336 <_stat>
 8009406:	3001      	adds	r0, #1
 8009408:	d0c7      	beq.n	800939a <_swiopen+0x2a>
 800940a:	f001 fbdd 	bl	800abc8 <__errno>
 800940e:	2311      	movs	r3, #17
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009416:	4620      	mov	r0, r4
 8009418:	b016      	add	sp, #88	@ 0x58
 800941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941e:	bf00      	nop
 8009420:	20000408 	.word	0x20000408

08009424 <_get_semihosting_exts>:
 8009424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	4829      	ldr	r0, [pc, #164]	@ (80094d4 <_get_semihosting_exts+0xb0>)
 800942e:	2100      	movs	r1, #0
 8009430:	4615      	mov	r5, r2
 8009432:	f7ff ff9d 	bl	8009370 <_swiopen>
 8009436:	462a      	mov	r2, r5
 8009438:	4604      	mov	r4, r0
 800943a:	2100      	movs	r1, #0
 800943c:	4630      	mov	r0, r6
 800943e:	f001 fb71 	bl	800ab24 <memset>
 8009442:	1c63      	adds	r3, r4, #1
 8009444:	d014      	beq.n	8009470 <_get_semihosting_exts+0x4c>
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff fe4c 	bl	80090e4 <findslot>
 800944c:	f04f 080c 	mov.w	r8, #12
 8009450:	4681      	mov	r9, r0
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	beab      	bkpt	0x00ab
 8009458:	4680      	mov	r8, r0
 800945a:	4640      	mov	r0, r8
 800945c:	f7ff fe6a 	bl	8009134 <checkerror>
 8009460:	2803      	cmp	r0, #3
 8009462:	dd02      	ble.n	800946a <_get_semihosting_exts+0x46>
 8009464:	1ec3      	subs	r3, r0, #3
 8009466:	42ab      	cmp	r3, r5
 8009468:	dc07      	bgt.n	800947a <_get_semihosting_exts+0x56>
 800946a:	4620      	mov	r0, r4
 800946c:	f7ff ff0c 	bl	8009288 <_close>
 8009470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009474:	b003      	add	sp, #12
 8009476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947a:	2204      	movs	r2, #4
 800947c:	eb0d 0102 	add.w	r1, sp, r2
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff fe6c 	bl	800915e <_read>
 8009486:	2803      	cmp	r0, #3
 8009488:	ddef      	ble.n	800946a <_get_semihosting_exts+0x46>
 800948a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800948e:	2b53      	cmp	r3, #83	@ 0x53
 8009490:	d1eb      	bne.n	800946a <_get_semihosting_exts+0x46>
 8009492:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009496:	2b48      	cmp	r3, #72	@ 0x48
 8009498:	d1e7      	bne.n	800946a <_get_semihosting_exts+0x46>
 800949a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800949e:	2b46      	cmp	r3, #70	@ 0x46
 80094a0:	d1e3      	bne.n	800946a <_get_semihosting_exts+0x46>
 80094a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094a6:	2b42      	cmp	r3, #66	@ 0x42
 80094a8:	d1df      	bne.n	800946a <_get_semihosting_exts+0x46>
 80094aa:	2201      	movs	r2, #1
 80094ac:	4639      	mov	r1, r7
 80094ae:	4620      	mov	r0, r4
 80094b0:	f7ff fe6f 	bl	8009192 <_swilseek>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	dbd8      	blt.n	800946a <_get_semihosting_exts+0x46>
 80094b8:	462a      	mov	r2, r5
 80094ba:	4631      	mov	r1, r6
 80094bc:	4620      	mov	r0, r4
 80094be:	f7ff fe4e 	bl	800915e <_read>
 80094c2:	4605      	mov	r5, r0
 80094c4:	4620      	mov	r0, r4
 80094c6:	f7ff fedf 	bl	8009288 <_close>
 80094ca:	4628      	mov	r0, r5
 80094cc:	f7ff fe32 	bl	8009134 <checkerror>
 80094d0:	e7d0      	b.n	8009474 <_get_semihosting_exts+0x50>
 80094d2:	bf00      	nop
 80094d4:	0800cef8 	.word	0x0800cef8

080094d8 <initialise_semihosting_exts>:
 80094d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094da:	4d0a      	ldr	r5, [pc, #40]	@ (8009504 <initialise_semihosting_exts+0x2c>)
 80094dc:	4c0a      	ldr	r4, [pc, #40]	@ (8009508 <initialise_semihosting_exts+0x30>)
 80094de:	2100      	movs	r1, #0
 80094e0:	2201      	movs	r2, #1
 80094e2:	a801      	add	r0, sp, #4
 80094e4:	6029      	str	r1, [r5, #0]
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	f7ff ff9c 	bl	8009424 <_get_semihosting_exts>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	dd07      	ble.n	8009500 <initialise_semihosting_exts+0x28>
 80094f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80094f4:	f003 0201 	and.w	r2, r3, #1
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	602a      	str	r2, [r5, #0]
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	b003      	add	sp, #12
 8009502:	bd30      	pop	{r4, r5, pc}
 8009504:	20000028 	.word	0x20000028
 8009508:	20000024 	.word	0x20000024

0800950c <_has_ext_stdout_stderr>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4c04      	ldr	r4, [pc, #16]	@ (8009520 <_has_ext_stdout_stderr+0x14>)
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	da01      	bge.n	800951a <_has_ext_stdout_stderr+0xe>
 8009516:	f7ff ffdf 	bl	80094d8 <initialise_semihosting_exts>
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop
 8009520:	20000024 	.word	0x20000024

08009524 <initialise_monitor_handles>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	b085      	sub	sp, #20
 800952a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80095dc <initialise_monitor_handles+0xb8>
 800952e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009532:	2303      	movs	r3, #3
 8009534:	2400      	movs	r4, #0
 8009536:	9303      	str	r3, [sp, #12]
 8009538:	af01      	add	r7, sp, #4
 800953a:	9402      	str	r4, [sp, #8]
 800953c:	2501      	movs	r5, #1
 800953e:	4628      	mov	r0, r5
 8009540:	4639      	mov	r1, r7
 8009542:	beab      	bkpt	0x00ab
 8009544:	4605      	mov	r5, r0
 8009546:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80095e0 <initialise_monitor_handles+0xbc>
 800954a:	4623      	mov	r3, r4
 800954c:	4c20      	ldr	r4, [pc, #128]	@ (80095d0 <initialise_monitor_handles+0xac>)
 800954e:	f8c8 5000 	str.w	r5, [r8]
 8009552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009556:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800955a:	3301      	adds	r3, #1
 800955c:	2b14      	cmp	r3, #20
 800955e:	d1fa      	bne.n	8009556 <initialise_monitor_handles+0x32>
 8009560:	f7ff ffd4 	bl	800950c <_has_ext_stdout_stderr>
 8009564:	4d1b      	ldr	r5, [pc, #108]	@ (80095d4 <initialise_monitor_handles+0xb0>)
 8009566:	b1d0      	cbz	r0, 800959e <initialise_monitor_handles+0x7a>
 8009568:	f04f 0a03 	mov.w	sl, #3
 800956c:	2304      	movs	r3, #4
 800956e:	f8cd 9004 	str.w	r9, [sp, #4]
 8009572:	2601      	movs	r6, #1
 8009574:	f8cd a00c 	str.w	sl, [sp, #12]
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	beab      	bkpt	0x00ab
 8009580:	4683      	mov	fp, r0
 8009582:	4b15      	ldr	r3, [pc, #84]	@ (80095d8 <initialise_monitor_handles+0xb4>)
 8009584:	f8cd 9004 	str.w	r9, [sp, #4]
 8009588:	f8c3 b000 	str.w	fp, [r3]
 800958c:	2308      	movs	r3, #8
 800958e:	f8cd a00c 	str.w	sl, [sp, #12]
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	4630      	mov	r0, r6
 8009596:	4639      	mov	r1, r7
 8009598:	beab      	bkpt	0x00ab
 800959a:	4606      	mov	r6, r0
 800959c:	602e      	str	r6, [r5, #0]
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	3301      	adds	r3, #1
 80095a2:	bf02      	ittt	eq
 80095a4:	4b0c      	ldreq	r3, [pc, #48]	@ (80095d8 <initialise_monitor_handles+0xb4>)
 80095a6:	681b      	ldreq	r3, [r3, #0]
 80095a8:	602b      	streq	r3, [r5, #0]
 80095aa:	2600      	movs	r6, #0
 80095ac:	f8d8 3000 	ldr.w	r3, [r8]
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	6066      	str	r6, [r4, #4]
 80095b4:	f7ff ffaa 	bl	800950c <_has_ext_stdout_stderr>
 80095b8:	b130      	cbz	r0, 80095c8 <initialise_monitor_handles+0xa4>
 80095ba:	4b07      	ldr	r3, [pc, #28]	@ (80095d8 <initialise_monitor_handles+0xb4>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80095c2:	682b      	ldr	r3, [r5, #0]
 80095c4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80095c8:	b005      	add	sp, #20
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	bf00      	nop
 80095d0:	20000408 	.word	0x20000408
 80095d4:	200003fc 	.word	0x200003fc
 80095d8:	20000400 	.word	0x20000400
 80095dc:	0800cf0e 	.word	0x0800cf0e
 80095e0:	20000404 	.word	0x20000404

080095e4 <_isatty>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	f7ff fd7d 	bl	80090e4 <findslot>
 80095ea:	2409      	movs	r4, #9
 80095ec:	4605      	mov	r5, r0
 80095ee:	b920      	cbnz	r0, 80095fa <_isatty+0x16>
 80095f0:	f001 faea 	bl	800abc8 <__errno>
 80095f4:	6004      	str	r4, [r0, #0]
 80095f6:	2000      	movs	r0, #0
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	4620      	mov	r0, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	beab      	bkpt	0x00ab
 8009600:	4604      	mov	r4, r0
 8009602:	2c01      	cmp	r4, #1
 8009604:	4620      	mov	r0, r4
 8009606:	d0f7      	beq.n	80095f8 <_isatty+0x14>
 8009608:	f001 fade 	bl	800abc8 <__errno>
 800960c:	2513      	movs	r5, #19
 800960e:	4604      	mov	r4, r0
 8009610:	2600      	movs	r6, #0
 8009612:	4628      	mov	r0, r5
 8009614:	4631      	mov	r1, r6
 8009616:	beab      	bkpt	0x00ab
 8009618:	4605      	mov	r5, r0
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	e7eb      	b.n	80095f6 <_isatty+0x12>

0800961e <powf>:
 800961e:	b508      	push	{r3, lr}
 8009620:	ed2d 8b04 	vpush	{d8-d9}
 8009624:	eeb0 8a60 	vmov.f32	s16, s1
 8009628:	eeb0 9a40 	vmov.f32	s18, s0
 800962c:	f000 f858 	bl	80096e0 <__ieee754_powf>
 8009630:	eeb4 8a48 	vcmp.f32	s16, s16
 8009634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009638:	eef0 8a40 	vmov.f32	s17, s0
 800963c:	d63e      	bvs.n	80096bc <powf+0x9e>
 800963e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009646:	d112      	bne.n	800966e <powf+0x50>
 8009648:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800964c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009650:	d039      	beq.n	80096c6 <powf+0xa8>
 8009652:	eeb0 0a48 	vmov.f32	s0, s16
 8009656:	f000 f839 	bl	80096cc <finitef>
 800965a:	b378      	cbz	r0, 80096bc <powf+0x9e>
 800965c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009664:	d52a      	bpl.n	80096bc <powf+0x9e>
 8009666:	f001 faaf 	bl	800abc8 <__errno>
 800966a:	2322      	movs	r3, #34	@ 0x22
 800966c:	e014      	b.n	8009698 <powf+0x7a>
 800966e:	f000 f82d 	bl	80096cc <finitef>
 8009672:	b998      	cbnz	r0, 800969c <powf+0x7e>
 8009674:	eeb0 0a49 	vmov.f32	s0, s18
 8009678:	f000 f828 	bl	80096cc <finitef>
 800967c:	b170      	cbz	r0, 800969c <powf+0x7e>
 800967e:	eeb0 0a48 	vmov.f32	s0, s16
 8009682:	f000 f823 	bl	80096cc <finitef>
 8009686:	b148      	cbz	r0, 800969c <powf+0x7e>
 8009688:	eef4 8a68 	vcmp.f32	s17, s17
 800968c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009690:	d7e9      	bvc.n	8009666 <powf+0x48>
 8009692:	f001 fa99 	bl	800abc8 <__errno>
 8009696:	2321      	movs	r3, #33	@ 0x21
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	e00f      	b.n	80096bc <powf+0x9e>
 800969c:	eef5 8a40 	vcmp.f32	s17, #0.0
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	d10a      	bne.n	80096bc <powf+0x9e>
 80096a6:	eeb0 0a49 	vmov.f32	s0, s18
 80096aa:	f000 f80f 	bl	80096cc <finitef>
 80096ae:	b128      	cbz	r0, 80096bc <powf+0x9e>
 80096b0:	eeb0 0a48 	vmov.f32	s0, s16
 80096b4:	f000 f80a 	bl	80096cc <finitef>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d1d4      	bne.n	8009666 <powf+0x48>
 80096bc:	eeb0 0a68 	vmov.f32	s0, s17
 80096c0:	ecbd 8b04 	vpop	{d8-d9}
 80096c4:	bd08      	pop	{r3, pc}
 80096c6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80096ca:	e7f7      	b.n	80096bc <powf+0x9e>

080096cc <finitef>:
 80096cc:	ee10 3a10 	vmov	r3, s0
 80096d0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80096d4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80096d8:	bfac      	ite	ge
 80096da:	2000      	movge	r0, #0
 80096dc:	2001      	movlt	r0, #1
 80096de:	4770      	bx	lr

080096e0 <__ieee754_powf>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	ee10 4a90 	vmov	r4, s1
 80096e8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80096ec:	ed2d 8b02 	vpush	{d8}
 80096f0:	ee10 6a10 	vmov	r6, s0
 80096f4:	eeb0 8a40 	vmov.f32	s16, s0
 80096f8:	eef0 8a60 	vmov.f32	s17, s1
 80096fc:	d10c      	bne.n	8009718 <__ieee754_powf+0x38>
 80096fe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009702:	0076      	lsls	r6, r6, #1
 8009704:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009708:	f240 8274 	bls.w	8009bf4 <__ieee754_powf+0x514>
 800970c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009710:	ecbd 8b02 	vpop	{d8}
 8009714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009718:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800971c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009720:	d802      	bhi.n	8009728 <__ieee754_powf+0x48>
 8009722:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009726:	d908      	bls.n	800973a <__ieee754_powf+0x5a>
 8009728:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800972c:	d1ee      	bne.n	800970c <__ieee754_powf+0x2c>
 800972e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009732:	0064      	lsls	r4, r4, #1
 8009734:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009738:	e7e6      	b.n	8009708 <__ieee754_powf+0x28>
 800973a:	2e00      	cmp	r6, #0
 800973c:	da1f      	bge.n	800977e <__ieee754_powf+0x9e>
 800973e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009742:	f080 8260 	bcs.w	8009c06 <__ieee754_powf+0x526>
 8009746:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800974a:	d32f      	bcc.n	80097ac <__ieee754_powf+0xcc>
 800974c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009750:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009754:	fa49 f503 	asr.w	r5, r9, r3
 8009758:	fa05 f303 	lsl.w	r3, r5, r3
 800975c:	454b      	cmp	r3, r9
 800975e:	d123      	bne.n	80097a8 <__ieee754_powf+0xc8>
 8009760:	f005 0501 	and.w	r5, r5, #1
 8009764:	f1c5 0502 	rsb	r5, r5, #2
 8009768:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800976c:	d11f      	bne.n	80097ae <__ieee754_powf+0xce>
 800976e:	2c00      	cmp	r4, #0
 8009770:	f280 8246 	bge.w	8009c00 <__ieee754_powf+0x520>
 8009774:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009778:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800977c:	e7c8      	b.n	8009710 <__ieee754_powf+0x30>
 800977e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009782:	d111      	bne.n	80097a8 <__ieee754_powf+0xc8>
 8009784:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009788:	f000 8234 	beq.w	8009bf4 <__ieee754_powf+0x514>
 800978c:	d906      	bls.n	800979c <__ieee754_powf+0xbc>
 800978e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009aa4 <__ieee754_powf+0x3c4>
 8009792:	2c00      	cmp	r4, #0
 8009794:	bfa8      	it	ge
 8009796:	eeb0 0a68 	vmovge.f32	s0, s17
 800979a:	e7b9      	b.n	8009710 <__ieee754_powf+0x30>
 800979c:	2c00      	cmp	r4, #0
 800979e:	f280 822c 	bge.w	8009bfa <__ieee754_powf+0x51a>
 80097a2:	eeb1 0a68 	vneg.f32	s0, s17
 80097a6:	e7b3      	b.n	8009710 <__ieee754_powf+0x30>
 80097a8:	2500      	movs	r5, #0
 80097aa:	e7dd      	b.n	8009768 <__ieee754_powf+0x88>
 80097ac:	2500      	movs	r5, #0
 80097ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80097b2:	d102      	bne.n	80097ba <__ieee754_powf+0xda>
 80097b4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80097b8:	e7aa      	b.n	8009710 <__ieee754_powf+0x30>
 80097ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80097be:	f040 8227 	bne.w	8009c10 <__ieee754_powf+0x530>
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	f2c0 8224 	blt.w	8009c10 <__ieee754_powf+0x530>
 80097c8:	eeb0 0a48 	vmov.f32	s0, s16
 80097cc:	ecbd 8b02 	vpop	{d8}
 80097d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	f000 bae6 	b.w	8009da4 <__ieee754_sqrtf>
 80097d8:	2d01      	cmp	r5, #1
 80097da:	d199      	bne.n	8009710 <__ieee754_powf+0x30>
 80097dc:	eeb1 0a40 	vneg.f32	s0, s0
 80097e0:	e796      	b.n	8009710 <__ieee754_powf+0x30>
 80097e2:	0ff0      	lsrs	r0, r6, #31
 80097e4:	3801      	subs	r0, #1
 80097e6:	ea55 0300 	orrs.w	r3, r5, r0
 80097ea:	d104      	bne.n	80097f6 <__ieee754_powf+0x116>
 80097ec:	ee38 8a48 	vsub.f32	s16, s16, s16
 80097f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80097f4:	e78c      	b.n	8009710 <__ieee754_powf+0x30>
 80097f6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80097fa:	d96d      	bls.n	80098d8 <__ieee754_powf+0x1f8>
 80097fc:	4baa      	ldr	r3, [pc, #680]	@ (8009aa8 <__ieee754_powf+0x3c8>)
 80097fe:	4598      	cmp	r8, r3
 8009800:	d808      	bhi.n	8009814 <__ieee754_powf+0x134>
 8009802:	2c00      	cmp	r4, #0
 8009804:	da0b      	bge.n	800981e <__ieee754_powf+0x13e>
 8009806:	2000      	movs	r0, #0
 8009808:	ecbd 8b02 	vpop	{d8}
 800980c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009810:	f000 bac2 	b.w	8009d98 <__math_oflowf>
 8009814:	4ba5      	ldr	r3, [pc, #660]	@ (8009aac <__ieee754_powf+0x3cc>)
 8009816:	4598      	cmp	r8, r3
 8009818:	d908      	bls.n	800982c <__ieee754_powf+0x14c>
 800981a:	2c00      	cmp	r4, #0
 800981c:	dcf3      	bgt.n	8009806 <__ieee754_powf+0x126>
 800981e:	2000      	movs	r0, #0
 8009820:	ecbd 8b02 	vpop	{d8}
 8009824:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	f000 bab0 	b.w	8009d8c <__math_uflowf>
 800982c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009830:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009834:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009ab0 <__ieee754_powf+0x3d0>
 8009838:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800983c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009840:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009844:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009848:	ee20 7a00 	vmul.f32	s14, s0, s0
 800984c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009ab4 <__ieee754_powf+0x3d4>
 8009850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009854:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009ab8 <__ieee754_powf+0x3d8>
 8009858:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800985c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009abc <__ieee754_powf+0x3dc>
 8009860:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009864:	eeb0 7a67 	vmov.f32	s14, s15
 8009868:	eea0 7a26 	vfma.f32	s14, s0, s13
 800986c:	ee17 3a10 	vmov	r3, s14
 8009870:	f36f 030b 	bfc	r3, #0, #12
 8009874:	ee07 3a10 	vmov	s14, r3
 8009878:	eeb0 6a47 	vmov.f32	s12, s14
 800987c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009880:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009884:	3d01      	subs	r5, #1
 8009886:	4305      	orrs	r5, r0
 8009888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800988c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009890:	f36f 040b 	bfc	r4, #0, #12
 8009894:	bf18      	it	ne
 8009896:	eeb0 8a66 	vmovne.f32	s16, s13
 800989a:	ee06 4a90 	vmov	s13, r4
 800989e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80098a2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80098a6:	ee67 7a26 	vmul.f32	s15, s14, s13
 80098aa:	eee6 0a07 	vfma.f32	s1, s12, s14
 80098ae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80098b2:	ee17 1a10 	vmov	r1, s14
 80098b6:	2900      	cmp	r1, #0
 80098b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098bc:	f340 80dd 	ble.w	8009a7a <__ieee754_powf+0x39a>
 80098c0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80098c4:	f240 80ca 	bls.w	8009a5c <__ieee754_powf+0x37c>
 80098c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80098cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d0:	bf4c      	ite	mi
 80098d2:	2001      	movmi	r0, #1
 80098d4:	2000      	movpl	r0, #0
 80098d6:	e797      	b.n	8009808 <__ieee754_powf+0x128>
 80098d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80098dc:	bf01      	itttt	eq
 80098de:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009ac0 <__ieee754_powf+0x3e0>
 80098e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80098e6:	f06f 0317 	mvneq.w	r3, #23
 80098ea:	ee17 7a90 	vmoveq	r7, s15
 80098ee:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80098f2:	bf18      	it	ne
 80098f4:	2300      	movne	r3, #0
 80098f6:	3a7f      	subs	r2, #127	@ 0x7f
 80098f8:	441a      	add	r2, r3
 80098fa:	4b72      	ldr	r3, [pc, #456]	@ (8009ac4 <__ieee754_powf+0x3e4>)
 80098fc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009900:	429f      	cmp	r7, r3
 8009902:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8009906:	dd06      	ble.n	8009916 <__ieee754_powf+0x236>
 8009908:	4b6f      	ldr	r3, [pc, #444]	@ (8009ac8 <__ieee754_powf+0x3e8>)
 800990a:	429f      	cmp	r7, r3
 800990c:	f340 80a4 	ble.w	8009a58 <__ieee754_powf+0x378>
 8009910:	3201      	adds	r2, #1
 8009912:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009916:	2600      	movs	r6, #0
 8009918:	4b6c      	ldr	r3, [pc, #432]	@ (8009acc <__ieee754_powf+0x3ec>)
 800991a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800991e:	ee07 1a10 	vmov	s14, r1
 8009922:	edd3 5a00 	vldr	s11, [r3]
 8009926:	4b6a      	ldr	r3, [pc, #424]	@ (8009ad0 <__ieee754_powf+0x3f0>)
 8009928:	ee75 7a87 	vadd.f32	s15, s11, s14
 800992c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009930:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009934:	1049      	asrs	r1, r1, #1
 8009936:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800993a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800993e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009942:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009946:	ee07 1a90 	vmov	s15, r1
 800994a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800994e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009952:	ee15 7a10 	vmov	r7, s10
 8009956:	401f      	ands	r7, r3
 8009958:	ee06 7a90 	vmov	s13, r7
 800995c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009960:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009964:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009968:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800996c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009ad4 <__ieee754_powf+0x3f4>
 8009970:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009ad8 <__ieee754_powf+0x3f8>
 8009974:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009978:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009adc <__ieee754_powf+0x3fc>
 800997c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009980:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009ab0 <__ieee754_powf+0x3d0>
 8009984:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009988:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009ae0 <__ieee754_powf+0x400>
 800998c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009990:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009ae4 <__ieee754_powf+0x404>
 8009994:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009998:	eee7 5a27 	vfma.f32	s11, s14, s15
 800999c:	ee35 7a26 	vadd.f32	s14, s10, s13
 80099a0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80099a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80099a8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80099ac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80099b0:	eef0 5a67 	vmov.f32	s11, s15
 80099b4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80099b8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80099bc:	ee15 1a90 	vmov	r1, s11
 80099c0:	4019      	ands	r1, r3
 80099c2:	ee05 1a90 	vmov	s11, r1
 80099c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80099ca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80099ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80099d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80099da:	eeb0 6a67 	vmov.f32	s12, s15
 80099de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80099e2:	ee16 1a10 	vmov	r1, s12
 80099e6:	4019      	ands	r1, r3
 80099e8:	ee06 1a10 	vmov	s12, r1
 80099ec:	eeb0 7a46 	vmov.f32	s14, s12
 80099f0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80099f4:	493c      	ldr	r1, [pc, #240]	@ (8009ae8 <__ieee754_powf+0x408>)
 80099f6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80099fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099fe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009aec <__ieee754_powf+0x40c>
 8009a02:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009af0 <__ieee754_powf+0x410>
 8009a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a0a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009af4 <__ieee754_powf+0x414>
 8009a0e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a12:	ed91 7a00 	vldr	s14, [r1]
 8009a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a1a:	ee07 2a10 	vmov	s14, r2
 8009a1e:	4a36      	ldr	r2, [pc, #216]	@ (8009af8 <__ieee754_powf+0x418>)
 8009a20:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009a24:	eeb0 7a67 	vmov.f32	s14, s15
 8009a28:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009a2c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009a30:	ed92 5a00 	vldr	s10, [r2]
 8009a34:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009a38:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009a3c:	ee17 2a10 	vmov	r2, s14
 8009a40:	401a      	ands	r2, r3
 8009a42:	ee07 2a10 	vmov	s14, r2
 8009a46:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009a4a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009a4e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009a52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009a56:	e715      	b.n	8009884 <__ieee754_powf+0x1a4>
 8009a58:	2601      	movs	r6, #1
 8009a5a:	e75d      	b.n	8009918 <__ieee754_powf+0x238>
 8009a5c:	d152      	bne.n	8009b04 <__ieee754_powf+0x424>
 8009a5e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009afc <__ieee754_powf+0x41c>
 8009a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a66:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009a6a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a72:	f73f af29 	bgt.w	80098c8 <__ieee754_powf+0x1e8>
 8009a76:	2386      	movs	r3, #134	@ 0x86
 8009a78:	e048      	b.n	8009b0c <__ieee754_powf+0x42c>
 8009a7a:	4a21      	ldr	r2, [pc, #132]	@ (8009b00 <__ieee754_powf+0x420>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d907      	bls.n	8009a90 <__ieee754_powf+0x3b0>
 8009a80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a88:	bf4c      	ite	mi
 8009a8a:	2001      	movmi	r0, #1
 8009a8c:	2000      	movpl	r0, #0
 8009a8e:	e6c7      	b.n	8009820 <__ieee754_powf+0x140>
 8009a90:	d138      	bne.n	8009b04 <__ieee754_powf+0x424>
 8009a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a96:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9e:	dbea      	blt.n	8009a76 <__ieee754_powf+0x396>
 8009aa0:	e7ee      	b.n	8009a80 <__ieee754_powf+0x3a0>
 8009aa2:	bf00      	nop
 8009aa4:	00000000 	.word	0x00000000
 8009aa8:	3f7ffff3 	.word	0x3f7ffff3
 8009aac:	3f800007 	.word	0x3f800007
 8009ab0:	3eaaaaab 	.word	0x3eaaaaab
 8009ab4:	3fb8aa00 	.word	0x3fb8aa00
 8009ab8:	3fb8aa3b 	.word	0x3fb8aa3b
 8009abc:	36eca570 	.word	0x36eca570
 8009ac0:	4b800000 	.word	0x4b800000
 8009ac4:	001cc471 	.word	0x001cc471
 8009ac8:	005db3d6 	.word	0x005db3d6
 8009acc:	0800d094 	.word	0x0800d094
 8009ad0:	fffff000 	.word	0xfffff000
 8009ad4:	3e6c3255 	.word	0x3e6c3255
 8009ad8:	3e53f142 	.word	0x3e53f142
 8009adc:	3e8ba305 	.word	0x3e8ba305
 8009ae0:	3edb6db7 	.word	0x3edb6db7
 8009ae4:	3f19999a 	.word	0x3f19999a
 8009ae8:	0800d084 	.word	0x0800d084
 8009aec:	3f76384f 	.word	0x3f76384f
 8009af0:	3f763800 	.word	0x3f763800
 8009af4:	369dc3a0 	.word	0x369dc3a0
 8009af8:	0800d08c 	.word	0x0800d08c
 8009afc:	3338aa3c 	.word	0x3338aa3c
 8009b00:	43160000 	.word	0x43160000
 8009b04:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009b08:	d96f      	bls.n	8009bea <__ieee754_powf+0x50a>
 8009b0a:	15db      	asrs	r3, r3, #23
 8009b0c:	3b7e      	subs	r3, #126	@ 0x7e
 8009b0e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009b12:	4118      	asrs	r0, r3
 8009b14:	4408      	add	r0, r1
 8009b16:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8009c54 <__ieee754_powf+0x574>)
 8009b1c:	3b7f      	subs	r3, #127	@ 0x7f
 8009b1e:	411a      	asrs	r2, r3
 8009b20:	4002      	ands	r2, r0
 8009b22:	ee07 2a10 	vmov	s14, r2
 8009b26:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009b2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009b2e:	f1c3 0317 	rsb	r3, r3, #23
 8009b32:	4118      	asrs	r0, r3
 8009b34:	2900      	cmp	r1, #0
 8009b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b3a:	bfb8      	it	lt
 8009b3c:	4240      	neglt	r0, r0
 8009b3e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009b42:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009c58 <__ieee754_powf+0x578>
 8009b46:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009c5c <__ieee754_powf+0x57c>
 8009b4a:	ee16 3a90 	vmov	r3, s13
 8009b4e:	f36f 030b 	bfc	r3, #0, #12
 8009b52:	ee06 3a90 	vmov	s13, r3
 8009b56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009b5a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009b5e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009b62:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009c60 <__ieee754_powf+0x580>
 8009b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b6a:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009b6e:	eeb0 7a67 	vmov.f32	s14, s15
 8009b72:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009b76:	eef0 5a47 	vmov.f32	s11, s14
 8009b7a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009b7e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009b82:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009b86:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009c64 <__ieee754_powf+0x584>
 8009b8a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009c68 <__ieee754_powf+0x588>
 8009b8e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009b92:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009c6c <__ieee754_powf+0x58c>
 8009b96:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009b9a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009c70 <__ieee754_powf+0x590>
 8009b9e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009ba2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c74 <__ieee754_powf+0x594>
 8009ba6:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009baa:	eeb0 6a47 	vmov.f32	s12, s14
 8009bae:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009bb2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009bb6:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009bba:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009bbe:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009bc2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009bca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bce:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009bd2:	ee10 3a10 	vmov	r3, s0
 8009bd6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009bda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bde:	da06      	bge.n	8009bee <__ieee754_powf+0x50e>
 8009be0:	f000 f854 	bl	8009c8c <scalbnf>
 8009be4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009be8:	e592      	b.n	8009710 <__ieee754_powf+0x30>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e7a7      	b.n	8009b3e <__ieee754_powf+0x45e>
 8009bee:	ee00 3a10 	vmov	s0, r3
 8009bf2:	e7f7      	b.n	8009be4 <__ieee754_powf+0x504>
 8009bf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009bf8:	e58a      	b.n	8009710 <__ieee754_powf+0x30>
 8009bfa:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009c78 <__ieee754_powf+0x598>
 8009bfe:	e587      	b.n	8009710 <__ieee754_powf+0x30>
 8009c00:	eeb0 0a48 	vmov.f32	s0, s16
 8009c04:	e584      	b.n	8009710 <__ieee754_powf+0x30>
 8009c06:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c0a:	f43f adbb 	beq.w	8009784 <__ieee754_powf+0xa4>
 8009c0e:	2502      	movs	r5, #2
 8009c10:	eeb0 0a48 	vmov.f32	s0, s16
 8009c14:	f000 f832 	bl	8009c7c <fabsf>
 8009c18:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009c1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009c20:	4647      	mov	r7, r8
 8009c22:	d003      	beq.n	8009c2c <__ieee754_powf+0x54c>
 8009c24:	f1b8 0f00 	cmp.w	r8, #0
 8009c28:	f47f addb 	bne.w	80097e2 <__ieee754_powf+0x102>
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	bfbc      	itt	lt
 8009c30:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009c34:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	f6bf ad69 	bge.w	8009710 <__ieee754_powf+0x30>
 8009c3e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009c42:	ea58 0805 	orrs.w	r8, r8, r5
 8009c46:	f47f adc7 	bne.w	80097d8 <__ieee754_powf+0xf8>
 8009c4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009c4e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009c52:	e55d      	b.n	8009710 <__ieee754_powf+0x30>
 8009c54:	ff800000 	.word	0xff800000
 8009c58:	3f317218 	.word	0x3f317218
 8009c5c:	3f317200 	.word	0x3f317200
 8009c60:	35bfbe8c 	.word	0x35bfbe8c
 8009c64:	b5ddea0e 	.word	0xb5ddea0e
 8009c68:	3331bb4c 	.word	0x3331bb4c
 8009c6c:	388ab355 	.word	0x388ab355
 8009c70:	bb360b61 	.word	0xbb360b61
 8009c74:	3e2aaaab 	.word	0x3e2aaaab
 8009c78:	00000000 	.word	0x00000000

08009c7c <fabsf>:
 8009c7c:	ee10 3a10 	vmov	r3, s0
 8009c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c84:	ee00 3a10 	vmov	s0, r3
 8009c88:	4770      	bx	lr
	...

08009c8c <scalbnf>:
 8009c8c:	ee10 3a10 	vmov	r3, s0
 8009c90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c94:	d02b      	beq.n	8009cee <scalbnf+0x62>
 8009c96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c9a:	d302      	bcc.n	8009ca2 <scalbnf+0x16>
 8009c9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ca0:	4770      	bx	lr
 8009ca2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009ca6:	d123      	bne.n	8009cf0 <scalbnf+0x64>
 8009ca8:	4b24      	ldr	r3, [pc, #144]	@ (8009d3c <scalbnf+0xb0>)
 8009caa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009d40 <scalbnf+0xb4>
 8009cae:	4298      	cmp	r0, r3
 8009cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cb4:	db17      	blt.n	8009ce6 <scalbnf+0x5a>
 8009cb6:	ee10 3a10 	vmov	r3, s0
 8009cba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cbe:	3a19      	subs	r2, #25
 8009cc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009cc4:	4288      	cmp	r0, r1
 8009cc6:	dd15      	ble.n	8009cf4 <scalbnf+0x68>
 8009cc8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009d44 <scalbnf+0xb8>
 8009ccc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009d48 <scalbnf+0xbc>
 8009cd0:	ee10 3a10 	vmov	r3, s0
 8009cd4:	eeb0 7a67 	vmov.f32	s14, s15
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfb8      	it	lt
 8009cdc:	eef0 7a66 	vmovlt.f32	s15, s13
 8009ce0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009ce4:	4770      	bx	lr
 8009ce6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d4c <scalbnf+0xc0>
 8009cea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cee:	4770      	bx	lr
 8009cf0:	0dd2      	lsrs	r2, r2, #23
 8009cf2:	e7e5      	b.n	8009cc0 <scalbnf+0x34>
 8009cf4:	4410      	add	r0, r2
 8009cf6:	28fe      	cmp	r0, #254	@ 0xfe
 8009cf8:	dce6      	bgt.n	8009cc8 <scalbnf+0x3c>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	dd06      	ble.n	8009d0c <scalbnf+0x80>
 8009cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d06:	ee00 3a10 	vmov	s0, r3
 8009d0a:	4770      	bx	lr
 8009d0c:	f110 0f16 	cmn.w	r0, #22
 8009d10:	da09      	bge.n	8009d26 <scalbnf+0x9a>
 8009d12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009d4c <scalbnf+0xc0>
 8009d16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009d50 <scalbnf+0xc4>
 8009d1a:	ee10 3a10 	vmov	r3, s0
 8009d1e:	eeb0 7a67 	vmov.f32	s14, s15
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	e7d9      	b.n	8009cda <scalbnf+0x4e>
 8009d26:	3019      	adds	r0, #25
 8009d28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009d54 <scalbnf+0xc8>
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	e7d7      	b.n	8009cea <scalbnf+0x5e>
 8009d3a:	bf00      	nop
 8009d3c:	ffff3cb0 	.word	0xffff3cb0
 8009d40:	4c000000 	.word	0x4c000000
 8009d44:	7149f2ca 	.word	0x7149f2ca
 8009d48:	f149f2ca 	.word	0xf149f2ca
 8009d4c:	0da24260 	.word	0x0da24260
 8009d50:	8da24260 	.word	0x8da24260
 8009d54:	33000000 	.word	0x33000000

08009d58 <with_errnof>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	ed2d 8b02 	vpush	{d8}
 8009d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8009d62:	4604      	mov	r4, r0
 8009d64:	f000 ff30 	bl	800abc8 <__errno>
 8009d68:	eeb0 0a48 	vmov.f32	s0, s16
 8009d6c:	ecbd 8b02 	vpop	{d8}
 8009d70:	6004      	str	r4, [r0, #0]
 8009d72:	bd10      	pop	{r4, pc}

08009d74 <xflowf>:
 8009d74:	b130      	cbz	r0, 8009d84 <xflowf+0x10>
 8009d76:	eef1 7a40 	vneg.f32	s15, s0
 8009d7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d7e:	2022      	movs	r0, #34	@ 0x22
 8009d80:	f7ff bfea 	b.w	8009d58 <with_errnof>
 8009d84:	eef0 7a40 	vmov.f32	s15, s0
 8009d88:	e7f7      	b.n	8009d7a <xflowf+0x6>
	...

08009d8c <__math_uflowf>:
 8009d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009d94 <__math_uflowf+0x8>
 8009d90:	f7ff bff0 	b.w	8009d74 <xflowf>
 8009d94:	10000000 	.word	0x10000000

08009d98 <__math_oflowf>:
 8009d98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009da0 <__math_oflowf+0x8>
 8009d9c:	f7ff bfea 	b.w	8009d74 <xflowf>
 8009da0:	70000000 	.word	0x70000000

08009da4 <__ieee754_sqrtf>:
 8009da4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009da8:	4770      	bx	lr

08009daa <__cvt>:
 8009daa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dae:	ec57 6b10 	vmov	r6, r7, d0
 8009db2:	2f00      	cmp	r7, #0
 8009db4:	460c      	mov	r4, r1
 8009db6:	4619      	mov	r1, r3
 8009db8:	463b      	mov	r3, r7
 8009dba:	bfbb      	ittet	lt
 8009dbc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dc0:	461f      	movlt	r7, r3
 8009dc2:	2300      	movge	r3, #0
 8009dc4:	232d      	movlt	r3, #45	@ 0x2d
 8009dc6:	700b      	strb	r3, [r1, #0]
 8009dc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dca:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009dce:	4691      	mov	r9, r2
 8009dd0:	f023 0820 	bic.w	r8, r3, #32
 8009dd4:	bfbc      	itt	lt
 8009dd6:	4632      	movlt	r2, r6
 8009dd8:	4616      	movlt	r6, r2
 8009dda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009dde:	d005      	beq.n	8009dec <__cvt+0x42>
 8009de0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009de4:	d100      	bne.n	8009de8 <__cvt+0x3e>
 8009de6:	3401      	adds	r4, #1
 8009de8:	2102      	movs	r1, #2
 8009dea:	e000      	b.n	8009dee <__cvt+0x44>
 8009dec:	2103      	movs	r1, #3
 8009dee:	ab03      	add	r3, sp, #12
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	ab02      	add	r3, sp, #8
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	ec47 6b10 	vmov	d0, r6, r7
 8009dfa:	4653      	mov	r3, sl
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	f000 ff9b 	bl	800ad38 <_dtoa_r>
 8009e02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e06:	4605      	mov	r5, r0
 8009e08:	d119      	bne.n	8009e3e <__cvt+0x94>
 8009e0a:	f019 0f01 	tst.w	r9, #1
 8009e0e:	d00e      	beq.n	8009e2e <__cvt+0x84>
 8009e10:	eb00 0904 	add.w	r9, r0, r4
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e20:	b108      	cbz	r0, 8009e26 <__cvt+0x7c>
 8009e22:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e26:	2230      	movs	r2, #48	@ 0x30
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	454b      	cmp	r3, r9
 8009e2c:	d31e      	bcc.n	8009e6c <__cvt+0xc2>
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e32:	1b5b      	subs	r3, r3, r5
 8009e34:	4628      	mov	r0, r5
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	b004      	add	sp, #16
 8009e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e42:	eb00 0904 	add.w	r9, r0, r4
 8009e46:	d1e5      	bne.n	8009e14 <__cvt+0x6a>
 8009e48:	7803      	ldrb	r3, [r0, #0]
 8009e4a:	2b30      	cmp	r3, #48	@ 0x30
 8009e4c:	d10a      	bne.n	8009e64 <__cvt+0xba>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2300      	movs	r3, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e5a:	b918      	cbnz	r0, 8009e64 <__cvt+0xba>
 8009e5c:	f1c4 0401 	rsb	r4, r4, #1
 8009e60:	f8ca 4000 	str.w	r4, [sl]
 8009e64:	f8da 3000 	ldr.w	r3, [sl]
 8009e68:	4499      	add	r9, r3
 8009e6a:	e7d3      	b.n	8009e14 <__cvt+0x6a>
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	9103      	str	r1, [sp, #12]
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	e7d9      	b.n	8009e28 <__cvt+0x7e>

08009e74 <__exponent>:
 8009e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e76:	2900      	cmp	r1, #0
 8009e78:	bfba      	itte	lt
 8009e7a:	4249      	neglt	r1, r1
 8009e7c:	232d      	movlt	r3, #45	@ 0x2d
 8009e7e:	232b      	movge	r3, #43	@ 0x2b
 8009e80:	2909      	cmp	r1, #9
 8009e82:	7002      	strb	r2, [r0, #0]
 8009e84:	7043      	strb	r3, [r0, #1]
 8009e86:	dd29      	ble.n	8009edc <__exponent+0x68>
 8009e88:	f10d 0307 	add.w	r3, sp, #7
 8009e8c:	461d      	mov	r5, r3
 8009e8e:	270a      	movs	r7, #10
 8009e90:	461a      	mov	r2, r3
 8009e92:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e96:	fb07 1416 	mls	r4, r7, r6, r1
 8009e9a:	3430      	adds	r4, #48	@ 0x30
 8009e9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	2c63      	cmp	r4, #99	@ 0x63
 8009ea4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	dcf1      	bgt.n	8009e90 <__exponent+0x1c>
 8009eac:	3130      	adds	r1, #48	@ 0x30
 8009eae:	1e94      	subs	r4, r2, #2
 8009eb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009eb4:	1c41      	adds	r1, r0, #1
 8009eb6:	4623      	mov	r3, r4
 8009eb8:	42ab      	cmp	r3, r5
 8009eba:	d30a      	bcc.n	8009ed2 <__exponent+0x5e>
 8009ebc:	f10d 0309 	add.w	r3, sp, #9
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	42ac      	cmp	r4, r5
 8009ec4:	bf88      	it	hi
 8009ec6:	2300      	movhi	r3, #0
 8009ec8:	3302      	adds	r3, #2
 8009eca:	4403      	add	r3, r0
 8009ecc:	1a18      	subs	r0, r3, r0
 8009ece:	b003      	add	sp, #12
 8009ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ed6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009eda:	e7ed      	b.n	8009eb8 <__exponent+0x44>
 8009edc:	2330      	movs	r3, #48	@ 0x30
 8009ede:	3130      	adds	r1, #48	@ 0x30
 8009ee0:	7083      	strb	r3, [r0, #2]
 8009ee2:	70c1      	strb	r1, [r0, #3]
 8009ee4:	1d03      	adds	r3, r0, #4
 8009ee6:	e7f1      	b.n	8009ecc <__exponent+0x58>

08009ee8 <_printf_float>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	b08d      	sub	sp, #52	@ 0x34
 8009eee:	460c      	mov	r4, r1
 8009ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ef4:	4616      	mov	r6, r2
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	4605      	mov	r5, r0
 8009efa:	f000 fe1b 	bl	800ab34 <_localeconv_r>
 8009efe:	6803      	ldr	r3, [r0, #0]
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f6 f9bc 	bl	8000280 <strlen>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f10:	9005      	str	r0, [sp, #20]
 8009f12:	3307      	adds	r3, #7
 8009f14:	f023 0307 	bic.w	r3, r3, #7
 8009f18:	f103 0208 	add.w	r2, r3, #8
 8009f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f20:	f8d4 b000 	ldr.w	fp, [r4]
 8009f24:	f8c8 2000 	str.w	r2, [r8]
 8009f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f30:	9307      	str	r3, [sp, #28]
 8009f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f3e:	4b9c      	ldr	r3, [pc, #624]	@ (800a1b0 <_printf_float+0x2c8>)
 8009f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f44:	f7f6 fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8009f48:	bb70      	cbnz	r0, 8009fa8 <_printf_float+0xc0>
 8009f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f4e:	4b98      	ldr	r3, [pc, #608]	@ (800a1b0 <_printf_float+0x2c8>)
 8009f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f54:	f7f6 fdd4 	bl	8000b00 <__aeabi_dcmple>
 8009f58:	bb30      	cbnz	r0, 8009fa8 <_printf_float+0xc0>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 fdc3 	bl	8000aec <__aeabi_dcmplt>
 8009f66:	b110      	cbz	r0, 8009f6e <_printf_float+0x86>
 8009f68:	232d      	movs	r3, #45	@ 0x2d
 8009f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f6e:	4a91      	ldr	r2, [pc, #580]	@ (800a1b4 <_printf_float+0x2cc>)
 8009f70:	4b91      	ldr	r3, [pc, #580]	@ (800a1b8 <_printf_float+0x2d0>)
 8009f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f76:	bf8c      	ite	hi
 8009f78:	4690      	movhi	r8, r2
 8009f7a:	4698      	movls	r8, r3
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	6123      	str	r3, [r4, #16]
 8009f80:	f02b 0304 	bic.w	r3, fp, #4
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	9700      	str	r7, [sp, #0]
 8009f8c:	4633      	mov	r3, r6
 8009f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f90:	4621      	mov	r1, r4
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f9d2 	bl	800a33c <_printf_common>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f040 808d 	bne.w	800a0b8 <_printf_float+0x1d0>
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fa2:	b00d      	add	sp, #52	@ 0x34
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	4649      	mov	r1, r9
 8009fb0:	f7f6 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8009fb4:	b140      	cbz	r0, 8009fc8 <_printf_float+0xe0>
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bfbc      	itt	lt
 8009fbc:	232d      	movlt	r3, #45	@ 0x2d
 8009fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009fc2:	4a7e      	ldr	r2, [pc, #504]	@ (800a1bc <_printf_float+0x2d4>)
 8009fc4:	4b7e      	ldr	r3, [pc, #504]	@ (800a1c0 <_printf_float+0x2d8>)
 8009fc6:	e7d4      	b.n	8009f72 <_printf_float+0x8a>
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009fce:	9206      	str	r2, [sp, #24]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	d13b      	bne.n	800a04c <_printf_float+0x164>
 8009fd4:	2306      	movs	r3, #6
 8009fd6:	6063      	str	r3, [r4, #4]
 8009fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6022      	str	r2, [r4, #0]
 8009fe0:	9303      	str	r3, [sp, #12]
 8009fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	6861      	ldr	r1, [r4, #4]
 8009fee:	ec49 8b10 	vmov	d0, r8, r9
 8009ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f7ff fed7 	bl	8009daa <__cvt>
 8009ffc:	9b06      	ldr	r3, [sp, #24]
 8009ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a000:	2b47      	cmp	r3, #71	@ 0x47
 800a002:	4680      	mov	r8, r0
 800a004:	d129      	bne.n	800a05a <_printf_float+0x172>
 800a006:	1cc8      	adds	r0, r1, #3
 800a008:	db02      	blt.n	800a010 <_printf_float+0x128>
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	4299      	cmp	r1, r3
 800a00e:	dd41      	ble.n	800a094 <_printf_float+0x1ac>
 800a010:	f1aa 0a02 	sub.w	sl, sl, #2
 800a014:	fa5f fa8a 	uxtb.w	sl, sl
 800a018:	3901      	subs	r1, #1
 800a01a:	4652      	mov	r2, sl
 800a01c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a020:	9109      	str	r1, [sp, #36]	@ 0x24
 800a022:	f7ff ff27 	bl	8009e74 <__exponent>
 800a026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a028:	1813      	adds	r3, r2, r0
 800a02a:	2a01      	cmp	r2, #1
 800a02c:	4681      	mov	r9, r0
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	dc02      	bgt.n	800a038 <_printf_float+0x150>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	07d2      	lsls	r2, r2, #31
 800a036:	d501      	bpl.n	800a03c <_printf_float+0x154>
 800a038:	3301      	adds	r3, #1
 800a03a:	6123      	str	r3, [r4, #16]
 800a03c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0a2      	beq.n	8009f8a <_printf_float+0xa2>
 800a044:	232d      	movs	r3, #45	@ 0x2d
 800a046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a04a:	e79e      	b.n	8009f8a <_printf_float+0xa2>
 800a04c:	9a06      	ldr	r2, [sp, #24]
 800a04e:	2a47      	cmp	r2, #71	@ 0x47
 800a050:	d1c2      	bne.n	8009fd8 <_printf_float+0xf0>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1c0      	bne.n	8009fd8 <_printf_float+0xf0>
 800a056:	2301      	movs	r3, #1
 800a058:	e7bd      	b.n	8009fd6 <_printf_float+0xee>
 800a05a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a05e:	d9db      	bls.n	800a018 <_printf_float+0x130>
 800a060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a064:	d118      	bne.n	800a098 <_printf_float+0x1b0>
 800a066:	2900      	cmp	r1, #0
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	dd0b      	ble.n	800a084 <_printf_float+0x19c>
 800a06c:	6121      	str	r1, [r4, #16]
 800a06e:	b913      	cbnz	r3, 800a076 <_printf_float+0x18e>
 800a070:	6822      	ldr	r2, [r4, #0]
 800a072:	07d0      	lsls	r0, r2, #31
 800a074:	d502      	bpl.n	800a07c <_printf_float+0x194>
 800a076:	3301      	adds	r3, #1
 800a078:	440b      	add	r3, r1
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a07e:	f04f 0900 	mov.w	r9, #0
 800a082:	e7db      	b.n	800a03c <_printf_float+0x154>
 800a084:	b913      	cbnz	r3, 800a08c <_printf_float+0x1a4>
 800a086:	6822      	ldr	r2, [r4, #0]
 800a088:	07d2      	lsls	r2, r2, #31
 800a08a:	d501      	bpl.n	800a090 <_printf_float+0x1a8>
 800a08c:	3302      	adds	r3, #2
 800a08e:	e7f4      	b.n	800a07a <_printf_float+0x192>
 800a090:	2301      	movs	r3, #1
 800a092:	e7f2      	b.n	800a07a <_printf_float+0x192>
 800a094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a09a:	4299      	cmp	r1, r3
 800a09c:	db05      	blt.n	800a0aa <_printf_float+0x1c2>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	6121      	str	r1, [r4, #16]
 800a0a2:	07d8      	lsls	r0, r3, #31
 800a0a4:	d5ea      	bpl.n	800a07c <_printf_float+0x194>
 800a0a6:	1c4b      	adds	r3, r1, #1
 800a0a8:	e7e7      	b.n	800a07a <_printf_float+0x192>
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	bfd4      	ite	le
 800a0ae:	f1c1 0202 	rsble	r2, r1, #2
 800a0b2:	2201      	movgt	r2, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	e7e0      	b.n	800a07a <_printf_float+0x192>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	055a      	lsls	r2, r3, #21
 800a0bc:	d407      	bmi.n	800a0ce <_printf_float+0x1e6>
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b8      	blx	r7
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d12b      	bne.n	800a124 <_printf_float+0x23c>
 800a0cc:	e767      	b.n	8009f9e <_printf_float+0xb6>
 800a0ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0d2:	f240 80dd 	bls.w	800a290 <_printf_float+0x3a8>
 800a0d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f7f6 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d033      	beq.n	800a14e <_printf_float+0x266>
 800a0e6:	4a37      	ldr	r2, [pc, #220]	@ (800a1c4 <_printf_float+0x2dc>)
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f43f af54 	beq.w	8009f9e <_printf_float+0xb6>
 800a0f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a0fa:	4543      	cmp	r3, r8
 800a0fc:	db02      	blt.n	800a104 <_printf_float+0x21c>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	07d8      	lsls	r0, r3, #31
 800a102:	d50f      	bpl.n	800a124 <_printf_float+0x23c>
 800a104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a108:	4631      	mov	r1, r6
 800a10a:	4628      	mov	r0, r5
 800a10c:	47b8      	blx	r7
 800a10e:	3001      	adds	r0, #1
 800a110:	f43f af45 	beq.w	8009f9e <_printf_float+0xb6>
 800a114:	f04f 0900 	mov.w	r9, #0
 800a118:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a11c:	f104 0a1a 	add.w	sl, r4, #26
 800a120:	45c8      	cmp	r8, r9
 800a122:	dc09      	bgt.n	800a138 <_printf_float+0x250>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	079b      	lsls	r3, r3, #30
 800a128:	f100 8103 	bmi.w	800a332 <_printf_float+0x44a>
 800a12c:	68e0      	ldr	r0, [r4, #12]
 800a12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a130:	4298      	cmp	r0, r3
 800a132:	bfb8      	it	lt
 800a134:	4618      	movlt	r0, r3
 800a136:	e734      	b.n	8009fa2 <_printf_float+0xba>
 800a138:	2301      	movs	r3, #1
 800a13a:	4652      	mov	r2, sl
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	f43f af2b 	beq.w	8009f9e <_printf_float+0xb6>
 800a148:	f109 0901 	add.w	r9, r9, #1
 800a14c:	e7e8      	b.n	800a120 <_printf_float+0x238>
 800a14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a150:	2b00      	cmp	r3, #0
 800a152:	dc39      	bgt.n	800a1c8 <_printf_float+0x2e0>
 800a154:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c4 <_printf_float+0x2dc>)
 800a156:	2301      	movs	r3, #1
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af1d 	beq.w	8009f9e <_printf_float+0xb6>
 800a164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a168:	ea59 0303 	orrs.w	r3, r9, r3
 800a16c:	d102      	bne.n	800a174 <_printf_float+0x28c>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	07d9      	lsls	r1, r3, #31
 800a172:	d5d7      	bpl.n	800a124 <_printf_float+0x23c>
 800a174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af0d 	beq.w	8009f9e <_printf_float+0xb6>
 800a184:	f04f 0a00 	mov.w	sl, #0
 800a188:	f104 0b1a 	add.w	fp, r4, #26
 800a18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18e:	425b      	negs	r3, r3
 800a190:	4553      	cmp	r3, sl
 800a192:	dc01      	bgt.n	800a198 <_printf_float+0x2b0>
 800a194:	464b      	mov	r3, r9
 800a196:	e793      	b.n	800a0c0 <_printf_float+0x1d8>
 800a198:	2301      	movs	r3, #1
 800a19a:	465a      	mov	r2, fp
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b8      	blx	r7
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f aefb 	beq.w	8009f9e <_printf_float+0xb6>
 800a1a8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ac:	e7ee      	b.n	800a18c <_printf_float+0x2a4>
 800a1ae:	bf00      	nop
 800a1b0:	7fefffff 	.word	0x7fefffff
 800a1b4:	0800cf16 	.word	0x0800cf16
 800a1b8:	0800cf12 	.word	0x0800cf12
 800a1bc:	0800cf1e 	.word	0x0800cf1e
 800a1c0:	0800cf1a 	.word	0x0800cf1a
 800a1c4:	0800cf22 	.word	0x0800cf22
 800a1c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1ce:	4553      	cmp	r3, sl
 800a1d0:	bfa8      	it	ge
 800a1d2:	4653      	movge	r3, sl
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	4699      	mov	r9, r3
 800a1d8:	dc36      	bgt.n	800a248 <_printf_float+0x360>
 800a1da:	f04f 0b00 	mov.w	fp, #0
 800a1de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e2:	f104 021a 	add.w	r2, r4, #26
 800a1e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1e8:	9306      	str	r3, [sp, #24]
 800a1ea:	eba3 0309 	sub.w	r3, r3, r9
 800a1ee:	455b      	cmp	r3, fp
 800a1f0:	dc31      	bgt.n	800a256 <_printf_float+0x36e>
 800a1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f4:	459a      	cmp	sl, r3
 800a1f6:	dc3a      	bgt.n	800a26e <_printf_float+0x386>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	07da      	lsls	r2, r3, #31
 800a1fc:	d437      	bmi.n	800a26e <_printf_float+0x386>
 800a1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a200:	ebaa 0903 	sub.w	r9, sl, r3
 800a204:	9b06      	ldr	r3, [sp, #24]
 800a206:	ebaa 0303 	sub.w	r3, sl, r3
 800a20a:	4599      	cmp	r9, r3
 800a20c:	bfa8      	it	ge
 800a20e:	4699      	movge	r9, r3
 800a210:	f1b9 0f00 	cmp.w	r9, #0
 800a214:	dc33      	bgt.n	800a27e <_printf_float+0x396>
 800a216:	f04f 0800 	mov.w	r8, #0
 800a21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21e:	f104 0b1a 	add.w	fp, r4, #26
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	ebaa 0303 	sub.w	r3, sl, r3
 800a228:	eba3 0309 	sub.w	r3, r3, r9
 800a22c:	4543      	cmp	r3, r8
 800a22e:	f77f af79 	ble.w	800a124 <_printf_float+0x23c>
 800a232:	2301      	movs	r3, #1
 800a234:	465a      	mov	r2, fp
 800a236:	4631      	mov	r1, r6
 800a238:	4628      	mov	r0, r5
 800a23a:	47b8      	blx	r7
 800a23c:	3001      	adds	r0, #1
 800a23e:	f43f aeae 	beq.w	8009f9e <_printf_float+0xb6>
 800a242:	f108 0801 	add.w	r8, r8, #1
 800a246:	e7ec      	b.n	800a222 <_printf_float+0x33a>
 800a248:	4642      	mov	r2, r8
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b8      	blx	r7
 800a250:	3001      	adds	r0, #1
 800a252:	d1c2      	bne.n	800a1da <_printf_float+0x2f2>
 800a254:	e6a3      	b.n	8009f9e <_printf_float+0xb6>
 800a256:	2301      	movs	r3, #1
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	9206      	str	r2, [sp, #24]
 800a25e:	47b8      	blx	r7
 800a260:	3001      	adds	r0, #1
 800a262:	f43f ae9c 	beq.w	8009f9e <_printf_float+0xb6>
 800a266:	9a06      	ldr	r2, [sp, #24]
 800a268:	f10b 0b01 	add.w	fp, fp, #1
 800a26c:	e7bb      	b.n	800a1e6 <_printf_float+0x2fe>
 800a26e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	d1c0      	bne.n	800a1fe <_printf_float+0x316>
 800a27c:	e68f      	b.n	8009f9e <_printf_float+0xb6>
 800a27e:	9a06      	ldr	r2, [sp, #24]
 800a280:	464b      	mov	r3, r9
 800a282:	4442      	add	r2, r8
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	d1c3      	bne.n	800a216 <_printf_float+0x32e>
 800a28e:	e686      	b.n	8009f9e <_printf_float+0xb6>
 800a290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a294:	f1ba 0f01 	cmp.w	sl, #1
 800a298:	dc01      	bgt.n	800a29e <_printf_float+0x3b6>
 800a29a:	07db      	lsls	r3, r3, #31
 800a29c:	d536      	bpl.n	800a30c <_printf_float+0x424>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae78 	beq.w	8009f9e <_printf_float+0xb6>
 800a2ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f43f ae70 	beq.w	8009f9e <_printf_float+0xb6>
 800a2be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a2ca:	f7f6 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2ce:	b9c0      	cbnz	r0, 800a302 <_printf_float+0x41a>
 800a2d0:	4653      	mov	r3, sl
 800a2d2:	f108 0201 	add.w	r2, r8, #1
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d10c      	bne.n	800a2fa <_printf_float+0x412>
 800a2e0:	e65d      	b.n	8009f9e <_printf_float+0xb6>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	465a      	mov	r2, fp
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae56 	beq.w	8009f9e <_printf_float+0xb6>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	45d0      	cmp	r8, sl
 800a2f8:	dbf3      	blt.n	800a2e2 <_printf_float+0x3fa>
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a300:	e6df      	b.n	800a0c2 <_printf_float+0x1da>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	f104 0b1a 	add.w	fp, r4, #26
 800a30a:	e7f4      	b.n	800a2f6 <_printf_float+0x40e>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4642      	mov	r2, r8
 800a310:	e7e1      	b.n	800a2d6 <_printf_float+0x3ee>
 800a312:	2301      	movs	r3, #1
 800a314:	464a      	mov	r2, r9
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	f43f ae3e 	beq.w	8009f9e <_printf_float+0xb6>
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	68e3      	ldr	r3, [r4, #12]
 800a328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a32a:	1a5b      	subs	r3, r3, r1
 800a32c:	4543      	cmp	r3, r8
 800a32e:	dcf0      	bgt.n	800a312 <_printf_float+0x42a>
 800a330:	e6fc      	b.n	800a12c <_printf_float+0x244>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	f104 0919 	add.w	r9, r4, #25
 800a33a:	e7f4      	b.n	800a326 <_printf_float+0x43e>

0800a33c <_printf_common>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4616      	mov	r6, r2
 800a342:	4698      	mov	r8, r3
 800a344:	688a      	ldr	r2, [r1, #8]
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	bfb8      	it	lt
 800a350:	4613      	movlt	r3, r2
 800a352:	6033      	str	r3, [r6, #0]
 800a354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a358:	4607      	mov	r7, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	b10a      	cbz	r2, 800a362 <_printf_common+0x26>
 800a35e:	3301      	adds	r3, #1
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	0699      	lsls	r1, r3, #26
 800a366:	bf42      	ittt	mi
 800a368:	6833      	ldrmi	r3, [r6, #0]
 800a36a:	3302      	addmi	r3, #2
 800a36c:	6033      	strmi	r3, [r6, #0]
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	f015 0506 	ands.w	r5, r5, #6
 800a374:	d106      	bne.n	800a384 <_printf_common+0x48>
 800a376:	f104 0a19 	add.w	sl, r4, #25
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	6832      	ldr	r2, [r6, #0]
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc26      	bgt.n	800a3d2 <_printf_common+0x96>
 800a384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	3b00      	subs	r3, #0
 800a38c:	bf18      	it	ne
 800a38e:	2301      	movne	r3, #1
 800a390:	0692      	lsls	r2, r2, #26
 800a392:	d42b      	bmi.n	800a3ec <_printf_common+0xb0>
 800a394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a398:	4641      	mov	r1, r8
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c8      	blx	r9
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d01e      	beq.n	800a3e0 <_printf_common+0xa4>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	6922      	ldr	r2, [r4, #16]
 800a3a6:	f003 0306 	and.w	r3, r3, #6
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	bf02      	ittt	eq
 800a3ae:	68e5      	ldreq	r5, [r4, #12]
 800a3b0:	6833      	ldreq	r3, [r6, #0]
 800a3b2:	1aed      	subeq	r5, r5, r3
 800a3b4:	68a3      	ldr	r3, [r4, #8]
 800a3b6:	bf0c      	ite	eq
 800a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3bc:	2500      	movne	r5, #0
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bfc4      	itt	gt
 800a3c2:	1a9b      	subgt	r3, r3, r2
 800a3c4:	18ed      	addgt	r5, r5, r3
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	341a      	adds	r4, #26
 800a3ca:	42b5      	cmp	r5, r6
 800a3cc:	d11a      	bne.n	800a404 <_printf_common+0xc8>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e008      	b.n	800a3e4 <_printf_common+0xa8>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	4638      	mov	r0, r7
 800a3da:	47c8      	blx	r9
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d103      	bne.n	800a3e8 <_printf_common+0xac>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	e7c6      	b.n	800a37a <_printf_common+0x3e>
 800a3ec:	18e1      	adds	r1, r4, r3
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	2030      	movs	r0, #48	@ 0x30
 800a3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3f6:	4422      	add	r2, r4
 800a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a400:	3302      	adds	r3, #2
 800a402:	e7c7      	b.n	800a394 <_printf_common+0x58>
 800a404:	2301      	movs	r3, #1
 800a406:	4622      	mov	r2, r4
 800a408:	4641      	mov	r1, r8
 800a40a:	4638      	mov	r0, r7
 800a40c:	47c8      	blx	r9
 800a40e:	3001      	adds	r0, #1
 800a410:	d0e6      	beq.n	800a3e0 <_printf_common+0xa4>
 800a412:	3601      	adds	r6, #1
 800a414:	e7d9      	b.n	800a3ca <_printf_common+0x8e>
	...

0800a418 <_printf_i>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	7e0f      	ldrb	r7, [r1, #24]
 800a41e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a420:	2f78      	cmp	r7, #120	@ 0x78
 800a422:	4691      	mov	r9, r2
 800a424:	4680      	mov	r8, r0
 800a426:	460c      	mov	r4, r1
 800a428:	469a      	mov	sl, r3
 800a42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a42e:	d807      	bhi.n	800a440 <_printf_i+0x28>
 800a430:	2f62      	cmp	r7, #98	@ 0x62
 800a432:	d80a      	bhi.n	800a44a <_printf_i+0x32>
 800a434:	2f00      	cmp	r7, #0
 800a436:	f000 80d1 	beq.w	800a5dc <_printf_i+0x1c4>
 800a43a:	2f58      	cmp	r7, #88	@ 0x58
 800a43c:	f000 80b8 	beq.w	800a5b0 <_printf_i+0x198>
 800a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a448:	e03a      	b.n	800a4c0 <_printf_i+0xa8>
 800a44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a44e:	2b15      	cmp	r3, #21
 800a450:	d8f6      	bhi.n	800a440 <_printf_i+0x28>
 800a452:	a101      	add	r1, pc, #4	@ (adr r1, 800a458 <_printf_i+0x40>)
 800a454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a458:	0800a4b1 	.word	0x0800a4b1
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a441 	.word	0x0800a441
 800a464:	0800a441 	.word	0x0800a441
 800a468:	0800a441 	.word	0x0800a441
 800a46c:	0800a441 	.word	0x0800a441
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a441 	.word	0x0800a441
 800a478:	0800a441 	.word	0x0800a441
 800a47c:	0800a441 	.word	0x0800a441
 800a480:	0800a441 	.word	0x0800a441
 800a484:	0800a5c3 	.word	0x0800a5c3
 800a488:	0800a4ef 	.word	0x0800a4ef
 800a48c:	0800a57d 	.word	0x0800a57d
 800a490:	0800a441 	.word	0x0800a441
 800a494:	0800a441 	.word	0x0800a441
 800a498:	0800a5e5 	.word	0x0800a5e5
 800a49c:	0800a441 	.word	0x0800a441
 800a4a0:	0800a4ef 	.word	0x0800a4ef
 800a4a4:	0800a441 	.word	0x0800a441
 800a4a8:	0800a441 	.word	0x0800a441
 800a4ac:	0800a585 	.word	0x0800a585
 800a4b0:	6833      	ldr	r3, [r6, #0]
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6032      	str	r2, [r6, #0]
 800a4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e09c      	b.n	800a5fe <_printf_i+0x1e6>
 800a4c4:	6833      	ldr	r3, [r6, #0]
 800a4c6:	6820      	ldr	r0, [r4, #0]
 800a4c8:	1d19      	adds	r1, r3, #4
 800a4ca:	6031      	str	r1, [r6, #0]
 800a4cc:	0606      	lsls	r6, r0, #24
 800a4ce:	d501      	bpl.n	800a4d4 <_printf_i+0xbc>
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	e003      	b.n	800a4dc <_printf_i+0xc4>
 800a4d4:	0645      	lsls	r5, r0, #25
 800a4d6:	d5fb      	bpl.n	800a4d0 <_printf_i+0xb8>
 800a4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	da03      	bge.n	800a4e8 <_printf_i+0xd0>
 800a4e0:	232d      	movs	r3, #45	@ 0x2d
 800a4e2:	426d      	negs	r5, r5
 800a4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e8:	4858      	ldr	r0, [pc, #352]	@ (800a64c <_printf_i+0x234>)
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	e011      	b.n	800a512 <_printf_i+0xfa>
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	6833      	ldr	r3, [r6, #0]
 800a4f2:	0608      	lsls	r0, r1, #24
 800a4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4f8:	d402      	bmi.n	800a500 <_printf_i+0xe8>
 800a4fa:	0649      	lsls	r1, r1, #25
 800a4fc:	bf48      	it	mi
 800a4fe:	b2ad      	uxthmi	r5, r5
 800a500:	2f6f      	cmp	r7, #111	@ 0x6f
 800a502:	4852      	ldr	r0, [pc, #328]	@ (800a64c <_printf_i+0x234>)
 800a504:	6033      	str	r3, [r6, #0]
 800a506:	bf14      	ite	ne
 800a508:	230a      	movne	r3, #10
 800a50a:	2308      	moveq	r3, #8
 800a50c:	2100      	movs	r1, #0
 800a50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a512:	6866      	ldr	r6, [r4, #4]
 800a514:	60a6      	str	r6, [r4, #8]
 800a516:	2e00      	cmp	r6, #0
 800a518:	db05      	blt.n	800a526 <_printf_i+0x10e>
 800a51a:	6821      	ldr	r1, [r4, #0]
 800a51c:	432e      	orrs	r6, r5
 800a51e:	f021 0104 	bic.w	r1, r1, #4
 800a522:	6021      	str	r1, [r4, #0]
 800a524:	d04b      	beq.n	800a5be <_printf_i+0x1a6>
 800a526:	4616      	mov	r6, r2
 800a528:	fbb5 f1f3 	udiv	r1, r5, r3
 800a52c:	fb03 5711 	mls	r7, r3, r1, r5
 800a530:	5dc7      	ldrb	r7, [r0, r7]
 800a532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a536:	462f      	mov	r7, r5
 800a538:	42bb      	cmp	r3, r7
 800a53a:	460d      	mov	r5, r1
 800a53c:	d9f4      	bls.n	800a528 <_printf_i+0x110>
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d10b      	bne.n	800a55a <_printf_i+0x142>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	07df      	lsls	r7, r3, #31
 800a546:	d508      	bpl.n	800a55a <_printf_i+0x142>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	6861      	ldr	r1, [r4, #4]
 800a54c:	4299      	cmp	r1, r3
 800a54e:	bfde      	ittt	le
 800a550:	2330      	movle	r3, #48	@ 0x30
 800a552:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a556:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a55a:	1b92      	subs	r2, r2, r6
 800a55c:	6122      	str	r2, [r4, #16]
 800a55e:	f8cd a000 	str.w	sl, [sp]
 800a562:	464b      	mov	r3, r9
 800a564:	aa03      	add	r2, sp, #12
 800a566:	4621      	mov	r1, r4
 800a568:	4640      	mov	r0, r8
 800a56a:	f7ff fee7 	bl	800a33c <_printf_common>
 800a56e:	3001      	adds	r0, #1
 800a570:	d14a      	bne.n	800a608 <_printf_i+0x1f0>
 800a572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a576:	b004      	add	sp, #16
 800a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	f043 0320 	orr.w	r3, r3, #32
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	4832      	ldr	r0, [pc, #200]	@ (800a650 <_printf_i+0x238>)
 800a586:	2778      	movs	r7, #120	@ 0x78
 800a588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	6831      	ldr	r1, [r6, #0]
 800a590:	061f      	lsls	r7, r3, #24
 800a592:	f851 5b04 	ldr.w	r5, [r1], #4
 800a596:	d402      	bmi.n	800a59e <_printf_i+0x186>
 800a598:	065f      	lsls	r7, r3, #25
 800a59a:	bf48      	it	mi
 800a59c:	b2ad      	uxthmi	r5, r5
 800a59e:	6031      	str	r1, [r6, #0]
 800a5a0:	07d9      	lsls	r1, r3, #31
 800a5a2:	bf44      	itt	mi
 800a5a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a8:	6023      	strmi	r3, [r4, #0]
 800a5aa:	b11d      	cbz	r5, 800a5b4 <_printf_i+0x19c>
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	e7ad      	b.n	800a50c <_printf_i+0xf4>
 800a5b0:	4826      	ldr	r0, [pc, #152]	@ (800a64c <_printf_i+0x234>)
 800a5b2:	e7e9      	b.n	800a588 <_printf_i+0x170>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	f023 0320 	bic.w	r3, r3, #32
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	e7f6      	b.n	800a5ac <_printf_i+0x194>
 800a5be:	4616      	mov	r6, r2
 800a5c0:	e7bd      	b.n	800a53e <_printf_i+0x126>
 800a5c2:	6833      	ldr	r3, [r6, #0]
 800a5c4:	6825      	ldr	r5, [r4, #0]
 800a5c6:	6961      	ldr	r1, [r4, #20]
 800a5c8:	1d18      	adds	r0, r3, #4
 800a5ca:	6030      	str	r0, [r6, #0]
 800a5cc:	062e      	lsls	r6, r5, #24
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	d501      	bpl.n	800a5d6 <_printf_i+0x1be>
 800a5d2:	6019      	str	r1, [r3, #0]
 800a5d4:	e002      	b.n	800a5dc <_printf_i+0x1c4>
 800a5d6:	0668      	lsls	r0, r5, #25
 800a5d8:	d5fb      	bpl.n	800a5d2 <_printf_i+0x1ba>
 800a5da:	8019      	strh	r1, [r3, #0]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	e7bc      	b.n	800a55e <_printf_i+0x146>
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	6032      	str	r2, [r6, #0]
 800a5ea:	681e      	ldr	r6, [r3, #0]
 800a5ec:	6862      	ldr	r2, [r4, #4]
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7f5 fdf5 	bl	80001e0 <memchr>
 800a5f6:	b108      	cbz	r0, 800a5fc <_printf_i+0x1e4>
 800a5f8:	1b80      	subs	r0, r0, r6
 800a5fa:	6060      	str	r0, [r4, #4]
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	2300      	movs	r3, #0
 800a602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a606:	e7aa      	b.n	800a55e <_printf_i+0x146>
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	4632      	mov	r2, r6
 800a60c:	4649      	mov	r1, r9
 800a60e:	4640      	mov	r0, r8
 800a610:	47d0      	blx	sl
 800a612:	3001      	adds	r0, #1
 800a614:	d0ad      	beq.n	800a572 <_printf_i+0x15a>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	079b      	lsls	r3, r3, #30
 800a61a:	d413      	bmi.n	800a644 <_printf_i+0x22c>
 800a61c:	68e0      	ldr	r0, [r4, #12]
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	4298      	cmp	r0, r3
 800a622:	bfb8      	it	lt
 800a624:	4618      	movlt	r0, r3
 800a626:	e7a6      	b.n	800a576 <_printf_i+0x15e>
 800a628:	2301      	movs	r3, #1
 800a62a:	4632      	mov	r2, r6
 800a62c:	4649      	mov	r1, r9
 800a62e:	4640      	mov	r0, r8
 800a630:	47d0      	blx	sl
 800a632:	3001      	adds	r0, #1
 800a634:	d09d      	beq.n	800a572 <_printf_i+0x15a>
 800a636:	3501      	adds	r5, #1
 800a638:	68e3      	ldr	r3, [r4, #12]
 800a63a:	9903      	ldr	r1, [sp, #12]
 800a63c:	1a5b      	subs	r3, r3, r1
 800a63e:	42ab      	cmp	r3, r5
 800a640:	dcf2      	bgt.n	800a628 <_printf_i+0x210>
 800a642:	e7eb      	b.n	800a61c <_printf_i+0x204>
 800a644:	2500      	movs	r5, #0
 800a646:	f104 0619 	add.w	r6, r4, #25
 800a64a:	e7f5      	b.n	800a638 <_printf_i+0x220>
 800a64c:	0800cf24 	.word	0x0800cf24
 800a650:	0800cf35 	.word	0x0800cf35

0800a654 <std>:
 800a654:	2300      	movs	r3, #0
 800a656:	b510      	push	{r4, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	e9c0 3300 	strd	r3, r3, [r0]
 800a65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a662:	6083      	str	r3, [r0, #8]
 800a664:	8181      	strh	r1, [r0, #12]
 800a666:	6643      	str	r3, [r0, #100]	@ 0x64
 800a668:	81c2      	strh	r2, [r0, #14]
 800a66a:	6183      	str	r3, [r0, #24]
 800a66c:	4619      	mov	r1, r3
 800a66e:	2208      	movs	r2, #8
 800a670:	305c      	adds	r0, #92	@ 0x5c
 800a672:	f000 fa57 	bl	800ab24 <memset>
 800a676:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <std+0x58>)
 800a678:	6263      	str	r3, [r4, #36]	@ 0x24
 800a67a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b0 <std+0x5c>)
 800a67c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <std+0x60>)
 800a680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <std+0x64>)
 800a684:	6323      	str	r3, [r4, #48]	@ 0x30
 800a686:	4b0d      	ldr	r3, [pc, #52]	@ (800a6bc <std+0x68>)
 800a688:	6224      	str	r4, [r4, #32]
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d006      	beq.n	800a69c <std+0x48>
 800a68e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a692:	4294      	cmp	r4, r2
 800a694:	d002      	beq.n	800a69c <std+0x48>
 800a696:	33d0      	adds	r3, #208	@ 0xd0
 800a698:	429c      	cmp	r4, r3
 800a69a:	d105      	bne.n	800a6a8 <std+0x54>
 800a69c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a4:	f000 baba 	b.w	800ac1c <__retarget_lock_init_recursive>
 800a6a8:	bd10      	pop	{r4, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800a8fd 	.word	0x0800a8fd
 800a6b0:	0800a91f 	.word	0x0800a91f
 800a6b4:	0800a957 	.word	0x0800a957
 800a6b8:	0800a97b 	.word	0x0800a97b
 800a6bc:	200004a8 	.word	0x200004a8

0800a6c0 <stdio_exit_handler>:
 800a6c0:	4a02      	ldr	r2, [pc, #8]	@ (800a6cc <stdio_exit_handler+0xc>)
 800a6c2:	4903      	ldr	r1, [pc, #12]	@ (800a6d0 <stdio_exit_handler+0x10>)
 800a6c4:	4803      	ldr	r0, [pc, #12]	@ (800a6d4 <stdio_exit_handler+0x14>)
 800a6c6:	f000 b869 	b.w	800a79c <_fwalk_sglue>
 800a6ca:	bf00      	nop
 800a6cc:	2000002c 	.word	0x2000002c
 800a6d0:	0800c809 	.word	0x0800c809
 800a6d4:	2000003c 	.word	0x2000003c

0800a6d8 <cleanup_stdio>:
 800a6d8:	6841      	ldr	r1, [r0, #4]
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <cleanup_stdio+0x34>)
 800a6dc:	4299      	cmp	r1, r3
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	d001      	beq.n	800a6e8 <cleanup_stdio+0x10>
 800a6e4:	f002 f890 	bl	800c808 <_fflush_r>
 800a6e8:	68a1      	ldr	r1, [r4, #8]
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <cleanup_stdio+0x38>)
 800a6ec:	4299      	cmp	r1, r3
 800a6ee:	d002      	beq.n	800a6f6 <cleanup_stdio+0x1e>
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f002 f889 	bl	800c808 <_fflush_r>
 800a6f6:	68e1      	ldr	r1, [r4, #12]
 800a6f8:	4b06      	ldr	r3, [pc, #24]	@ (800a714 <cleanup_stdio+0x3c>)
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	d004      	beq.n	800a708 <cleanup_stdio+0x30>
 800a6fe:	4620      	mov	r0, r4
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	f002 b880 	b.w	800c808 <_fflush_r>
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	bf00      	nop
 800a70c:	200004a8 	.word	0x200004a8
 800a710:	20000510 	.word	0x20000510
 800a714:	20000578 	.word	0x20000578

0800a718 <global_stdio_init.part.0>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <global_stdio_init.part.0+0x30>)
 800a71c:	4c0b      	ldr	r4, [pc, #44]	@ (800a74c <global_stdio_init.part.0+0x34>)
 800a71e:	4a0c      	ldr	r2, [pc, #48]	@ (800a750 <global_stdio_init.part.0+0x38>)
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	4620      	mov	r0, r4
 800a724:	2200      	movs	r2, #0
 800a726:	2104      	movs	r1, #4
 800a728:	f7ff ff94 	bl	800a654 <std>
 800a72c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a730:	2201      	movs	r2, #1
 800a732:	2109      	movs	r1, #9
 800a734:	f7ff ff8e 	bl	800a654 <std>
 800a738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a73c:	2202      	movs	r2, #2
 800a73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a742:	2112      	movs	r1, #18
 800a744:	f7ff bf86 	b.w	800a654 <std>
 800a748:	200005e0 	.word	0x200005e0
 800a74c:	200004a8 	.word	0x200004a8
 800a750:	0800a6c1 	.word	0x0800a6c1

0800a754 <__sfp_lock_acquire>:
 800a754:	4801      	ldr	r0, [pc, #4]	@ (800a75c <__sfp_lock_acquire+0x8>)
 800a756:	f000 ba62 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	200005e9 	.word	0x200005e9

0800a760 <__sfp_lock_release>:
 800a760:	4801      	ldr	r0, [pc, #4]	@ (800a768 <__sfp_lock_release+0x8>)
 800a762:	f000 ba5d 	b.w	800ac20 <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	200005e9 	.word	0x200005e9

0800a76c <__sinit>:
 800a76c:	b510      	push	{r4, lr}
 800a76e:	4604      	mov	r4, r0
 800a770:	f7ff fff0 	bl	800a754 <__sfp_lock_acquire>
 800a774:	6a23      	ldr	r3, [r4, #32]
 800a776:	b11b      	cbz	r3, 800a780 <__sinit+0x14>
 800a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77c:	f7ff bff0 	b.w	800a760 <__sfp_lock_release>
 800a780:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <__sinit+0x28>)
 800a782:	6223      	str	r3, [r4, #32]
 800a784:	4b04      	ldr	r3, [pc, #16]	@ (800a798 <__sinit+0x2c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f5      	bne.n	800a778 <__sinit+0xc>
 800a78c:	f7ff ffc4 	bl	800a718 <global_stdio_init.part.0>
 800a790:	e7f2      	b.n	800a778 <__sinit+0xc>
 800a792:	bf00      	nop
 800a794:	0800a6d9 	.word	0x0800a6d9
 800a798:	200005e0 	.word	0x200005e0

0800a79c <_fwalk_sglue>:
 800a79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	4688      	mov	r8, r1
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b0:	d505      	bpl.n	800a7be <_fwalk_sglue+0x22>
 800a7b2:	6824      	ldr	r4, [r4, #0]
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	d1f7      	bne.n	800a7a8 <_fwalk_sglue+0xc>
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d907      	bls.n	800a7d4 <_fwalk_sglue+0x38>
 800a7c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	d003      	beq.n	800a7d4 <_fwalk_sglue+0x38>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c0      	blx	r8
 800a7d2:	4306      	orrs	r6, r0
 800a7d4:	3568      	adds	r5, #104	@ 0x68
 800a7d6:	e7e9      	b.n	800a7ac <_fwalk_sglue+0x10>

0800a7d8 <iprintf>:
 800a7d8:	b40f      	push	{r0, r1, r2, r3}
 800a7da:	b507      	push	{r0, r1, r2, lr}
 800a7dc:	4906      	ldr	r1, [pc, #24]	@ (800a7f8 <iprintf+0x20>)
 800a7de:	ab04      	add	r3, sp, #16
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e6:	6881      	ldr	r1, [r0, #8]
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	f001 fe71 	bl	800c4d0 <_vfiprintf_r>
 800a7ee:	b003      	add	sp, #12
 800a7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f4:	b004      	add	sp, #16
 800a7f6:	4770      	bx	lr
 800a7f8:	20000038 	.word	0x20000038

0800a7fc <_puts_r>:
 800a7fc:	6a03      	ldr	r3, [r0, #32]
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	6884      	ldr	r4, [r0, #8]
 800a802:	4605      	mov	r5, r0
 800a804:	460e      	mov	r6, r1
 800a806:	b90b      	cbnz	r3, 800a80c <_puts_r+0x10>
 800a808:	f7ff ffb0 	bl	800a76c <__sinit>
 800a80c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a80e:	07db      	lsls	r3, r3, #31
 800a810:	d405      	bmi.n	800a81e <_puts_r+0x22>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	0598      	lsls	r0, r3, #22
 800a816:	d402      	bmi.n	800a81e <_puts_r+0x22>
 800a818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a81a:	f000 fa00 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	0719      	lsls	r1, r3, #28
 800a822:	d502      	bpl.n	800a82a <_puts_r+0x2e>
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d135      	bne.n	800a896 <_puts_r+0x9a>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f923 	bl	800aa78 <__swsetup_r>
 800a832:	b380      	cbz	r0, 800a896 <_puts_r+0x9a>
 800a834:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a83a:	07da      	lsls	r2, r3, #31
 800a83c:	d405      	bmi.n	800a84a <_puts_r+0x4e>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	059b      	lsls	r3, r3, #22
 800a842:	d402      	bmi.n	800a84a <_puts_r+0x4e>
 800a844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a846:	f000 f9eb 	bl	800ac20 <__retarget_lock_release_recursive>
 800a84a:	4628      	mov	r0, r5
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da04      	bge.n	800a85c <_puts_r+0x60>
 800a852:	69a2      	ldr	r2, [r4, #24]
 800a854:	429a      	cmp	r2, r3
 800a856:	dc17      	bgt.n	800a888 <_puts_r+0x8c>
 800a858:	290a      	cmp	r1, #10
 800a85a:	d015      	beq.n	800a888 <_puts_r+0x8c>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	6022      	str	r2, [r4, #0]
 800a862:	7019      	strb	r1, [r3, #0]
 800a864:	68a3      	ldr	r3, [r4, #8]
 800a866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a86a:	3b01      	subs	r3, #1
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	2900      	cmp	r1, #0
 800a870:	d1ed      	bne.n	800a84e <_puts_r+0x52>
 800a872:	2b00      	cmp	r3, #0
 800a874:	da11      	bge.n	800a89a <_puts_r+0x9e>
 800a876:	4622      	mov	r2, r4
 800a878:	210a      	movs	r1, #10
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f8be 	bl	800a9fc <__swbuf_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d0d7      	beq.n	800a834 <_puts_r+0x38>
 800a884:	250a      	movs	r5, #10
 800a886:	e7d7      	b.n	800a838 <_puts_r+0x3c>
 800a888:	4622      	mov	r2, r4
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 f8b6 	bl	800a9fc <__swbuf_r>
 800a890:	3001      	adds	r0, #1
 800a892:	d1e7      	bne.n	800a864 <_puts_r+0x68>
 800a894:	e7ce      	b.n	800a834 <_puts_r+0x38>
 800a896:	3e01      	subs	r6, #1
 800a898:	e7e4      	b.n	800a864 <_puts_r+0x68>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	e7ee      	b.n	800a884 <_puts_r+0x88>
	...

0800a8a8 <puts>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	@ (800a8b4 <puts+0xc>)
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f7ff bfa5 	b.w	800a7fc <_puts_r>
 800a8b2:	bf00      	nop
 800a8b4:	20000038 	.word	0x20000038

0800a8b8 <siprintf>:
 800a8b8:	b40e      	push	{r1, r2, r3}
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	b09d      	sub	sp, #116	@ 0x74
 800a8be:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a8c0:	9002      	str	r0, [sp, #8]
 800a8c2:	9006      	str	r0, [sp, #24]
 800a8c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8c8:	480a      	ldr	r0, [pc, #40]	@ (800a8f4 <siprintf+0x3c>)
 800a8ca:	9107      	str	r1, [sp, #28]
 800a8cc:	9104      	str	r1, [sp, #16]
 800a8ce:	490a      	ldr	r1, [pc, #40]	@ (800a8f8 <siprintf+0x40>)
 800a8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d4:	9105      	str	r1, [sp, #20]
 800a8d6:	2400      	movs	r4, #0
 800a8d8:	a902      	add	r1, sp, #8
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a8e0:	f001 fcd0 	bl	800c284 <_svfiprintf_r>
 800a8e4:	9b02      	ldr	r3, [sp, #8]
 800a8e6:	701c      	strb	r4, [r3, #0]
 800a8e8:	b01d      	add	sp, #116	@ 0x74
 800a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ee:	b003      	add	sp, #12
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20000038 	.word	0x20000038
 800a8f8:	ffff0208 	.word	0xffff0208

0800a8fc <__sread>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	460c      	mov	r4, r1
 800a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a904:	f000 f93c 	bl	800ab80 <_read_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	bfab      	itete	ge
 800a90c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a90e:	89a3      	ldrhlt	r3, [r4, #12]
 800a910:	181b      	addge	r3, r3, r0
 800a912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a916:	bfac      	ite	ge
 800a918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a91a:	81a3      	strhlt	r3, [r4, #12]
 800a91c:	bd10      	pop	{r4, pc}

0800a91e <__swrite>:
 800a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	461f      	mov	r7, r3
 800a924:	898b      	ldrh	r3, [r1, #12]
 800a926:	05db      	lsls	r3, r3, #23
 800a928:	4605      	mov	r5, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	4616      	mov	r6, r2
 800a92e:	d505      	bpl.n	800a93c <__swrite+0x1e>
 800a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a934:	2302      	movs	r3, #2
 800a936:	2200      	movs	r2, #0
 800a938:	f000 f910 	bl	800ab5c <_lseek_r>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	4632      	mov	r2, r6
 800a94a:	463b      	mov	r3, r7
 800a94c:	4628      	mov	r0, r5
 800a94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	f000 b927 	b.w	800aba4 <_write_r>

0800a956 <__sseek>:
 800a956:	b510      	push	{r4, lr}
 800a958:	460c      	mov	r4, r1
 800a95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95e:	f000 f8fd 	bl	800ab5c <_lseek_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	bf15      	itete	ne
 800a968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a96a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a96e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a972:	81a3      	strheq	r3, [r4, #12]
 800a974:	bf18      	it	ne
 800a976:	81a3      	strhne	r3, [r4, #12]
 800a978:	bd10      	pop	{r4, pc}

0800a97a <__sclose>:
 800a97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97e:	f000 b8dd 	b.w	800ab3c <_close_r>

0800a982 <_vsniprintf_r>:
 800a982:	b530      	push	{r4, r5, lr}
 800a984:	4614      	mov	r4, r2
 800a986:	2c00      	cmp	r4, #0
 800a988:	b09b      	sub	sp, #108	@ 0x6c
 800a98a:	4605      	mov	r5, r0
 800a98c:	461a      	mov	r2, r3
 800a98e:	da05      	bge.n	800a99c <_vsniprintf_r+0x1a>
 800a990:	238b      	movs	r3, #139	@ 0x8b
 800a992:	6003      	str	r3, [r0, #0]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a998:	b01b      	add	sp, #108	@ 0x6c
 800a99a:	bd30      	pop	{r4, r5, pc}
 800a99c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9aa:	bf14      	ite	ne
 800a9ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a9b0:	4623      	moveq	r3, r4
 800a9b2:	9302      	str	r3, [sp, #8]
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9ba:	9100      	str	r1, [sp, #0]
 800a9bc:	9104      	str	r1, [sp, #16]
 800a9be:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a9c2:	4669      	mov	r1, sp
 800a9c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a9c6:	f001 fc5d 	bl	800c284 <_svfiprintf_r>
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	bfbc      	itt	lt
 800a9ce:	238b      	movlt	r3, #139	@ 0x8b
 800a9d0:	602b      	strlt	r3, [r5, #0]
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	d0e0      	beq.n	800a998 <_vsniprintf_r+0x16>
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e7dc      	b.n	800a998 <_vsniprintf_r+0x16>
	...

0800a9e0 <vsniprintf>:
 800a9e0:	b507      	push	{r0, r1, r2, lr}
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	4803      	ldr	r0, [pc, #12]	@ (800a9f8 <vsniprintf+0x18>)
 800a9ec:	6800      	ldr	r0, [r0, #0]
 800a9ee:	f7ff ffc8 	bl	800a982 <_vsniprintf_r>
 800a9f2:	b003      	add	sp, #12
 800a9f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9f8:	20000038 	.word	0x20000038

0800a9fc <__swbuf_r>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	460e      	mov	r6, r1
 800aa00:	4614      	mov	r4, r2
 800aa02:	4605      	mov	r5, r0
 800aa04:	b118      	cbz	r0, 800aa0e <__swbuf_r+0x12>
 800aa06:	6a03      	ldr	r3, [r0, #32]
 800aa08:	b90b      	cbnz	r3, 800aa0e <__swbuf_r+0x12>
 800aa0a:	f7ff feaf 	bl	800a76c <__sinit>
 800aa0e:	69a3      	ldr	r3, [r4, #24]
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	071a      	lsls	r2, r3, #28
 800aa16:	d501      	bpl.n	800aa1c <__swbuf_r+0x20>
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	b943      	cbnz	r3, 800aa2e <__swbuf_r+0x32>
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f000 f82a 	bl	800aa78 <__swsetup_r>
 800aa24:	b118      	cbz	r0, 800aa2e <__swbuf_r+0x32>
 800aa26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	6922      	ldr	r2, [r4, #16]
 800aa32:	1a98      	subs	r0, r3, r2
 800aa34:	6963      	ldr	r3, [r4, #20]
 800aa36:	b2f6      	uxtb	r6, r6
 800aa38:	4283      	cmp	r3, r0
 800aa3a:	4637      	mov	r7, r6
 800aa3c:	dc05      	bgt.n	800aa4a <__swbuf_r+0x4e>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	f001 fee1 	bl	800c808 <_fflush_r>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d1ed      	bne.n	800aa26 <__swbuf_r+0x2a>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	60a3      	str	r3, [r4, #8]
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	6022      	str	r2, [r4, #0]
 800aa56:	701e      	strb	r6, [r3, #0]
 800aa58:	6962      	ldr	r2, [r4, #20]
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d004      	beq.n	800aa6a <__swbuf_r+0x6e>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	07db      	lsls	r3, r3, #31
 800aa64:	d5e1      	bpl.n	800aa2a <__swbuf_r+0x2e>
 800aa66:	2e0a      	cmp	r6, #10
 800aa68:	d1df      	bne.n	800aa2a <__swbuf_r+0x2e>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f001 fecb 	bl	800c808 <_fflush_r>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0d9      	beq.n	800aa2a <__swbuf_r+0x2e>
 800aa76:	e7d6      	b.n	800aa26 <__swbuf_r+0x2a>

0800aa78 <__swsetup_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4b29      	ldr	r3, [pc, #164]	@ (800ab20 <__swsetup_r+0xa8>)
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	460c      	mov	r4, r1
 800aa82:	b118      	cbz	r0, 800aa8c <__swsetup_r+0x14>
 800aa84:	6a03      	ldr	r3, [r0, #32]
 800aa86:	b90b      	cbnz	r3, 800aa8c <__swsetup_r+0x14>
 800aa88:	f7ff fe70 	bl	800a76c <__sinit>
 800aa8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa90:	0719      	lsls	r1, r3, #28
 800aa92:	d422      	bmi.n	800aada <__swsetup_r+0x62>
 800aa94:	06da      	lsls	r2, r3, #27
 800aa96:	d407      	bmi.n	800aaa8 <__swsetup_r+0x30>
 800aa98:	2209      	movs	r2, #9
 800aa9a:	602a      	str	r2, [r5, #0]
 800aa9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaa6:	e033      	b.n	800ab10 <__swsetup_r+0x98>
 800aaa8:	0758      	lsls	r0, r3, #29
 800aaaa:	d512      	bpl.n	800aad2 <__swsetup_r+0x5a>
 800aaac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaae:	b141      	cbz	r1, 800aac2 <__swsetup_r+0x4a>
 800aab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d002      	beq.n	800aabe <__swsetup_r+0x46>
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 ff0d 	bl	800b8d8 <_free_r>
 800aabe:	2300      	movs	r3, #0
 800aac0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	2300      	movs	r3, #0
 800aacc:	6063      	str	r3, [r4, #4]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f043 0308 	orr.w	r3, r3, #8
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	b94b      	cbnz	r3, 800aaf2 <__swsetup_r+0x7a>
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aae8:	d003      	beq.n	800aaf2 <__swsetup_r+0x7a>
 800aaea:	4621      	mov	r1, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	f001 fed9 	bl	800c8a4 <__smakebuf_r>
 800aaf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf6:	f013 0201 	ands.w	r2, r3, #1
 800aafa:	d00a      	beq.n	800ab12 <__swsetup_r+0x9a>
 800aafc:	2200      	movs	r2, #0
 800aafe:	60a2      	str	r2, [r4, #8]
 800ab00:	6962      	ldr	r2, [r4, #20]
 800ab02:	4252      	negs	r2, r2
 800ab04:	61a2      	str	r2, [r4, #24]
 800ab06:	6922      	ldr	r2, [r4, #16]
 800ab08:	b942      	cbnz	r2, 800ab1c <__swsetup_r+0xa4>
 800ab0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab0e:	d1c5      	bne.n	800aa9c <__swsetup_r+0x24>
 800ab10:	bd38      	pop	{r3, r4, r5, pc}
 800ab12:	0799      	lsls	r1, r3, #30
 800ab14:	bf58      	it	pl
 800ab16:	6962      	ldrpl	r2, [r4, #20]
 800ab18:	60a2      	str	r2, [r4, #8]
 800ab1a:	e7f4      	b.n	800ab06 <__swsetup_r+0x8e>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7f7      	b.n	800ab10 <__swsetup_r+0x98>
 800ab20:	20000038 	.word	0x20000038

0800ab24 <memset>:
 800ab24:	4402      	add	r2, r0
 800ab26:	4603      	mov	r3, r0
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d100      	bne.n	800ab2e <memset+0xa>
 800ab2c:	4770      	bx	lr
 800ab2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab32:	e7f9      	b.n	800ab28 <memset+0x4>

0800ab34 <_localeconv_r>:
 800ab34:	4800      	ldr	r0, [pc, #0]	@ (800ab38 <_localeconv_r+0x4>)
 800ab36:	4770      	bx	lr
 800ab38:	20000178 	.word	0x20000178

0800ab3c <_close_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	@ (800ab58 <_close_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7fe fb9e 	bl	8009288 <_close>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_close_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_close_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	200005e4 	.word	0x200005e4

0800ab5c <_lseek_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	@ (800ab7c <_lseek_r+0x20>)
 800ab60:	4604      	mov	r4, r0
 800ab62:	4608      	mov	r0, r1
 800ab64:	4611      	mov	r1, r2
 800ab66:	2200      	movs	r2, #0
 800ab68:	602a      	str	r2, [r5, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f7fe fb4d 	bl	800920a <_lseek>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_lseek_r+0x1e>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_lseek_r+0x1e>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	200005e4 	.word	0x200005e4

0800ab80 <_read_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	@ (800aba0 <_read_r+0x20>)
 800ab84:	4604      	mov	r4, r0
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	602a      	str	r2, [r5, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7fe fae5 	bl	800915e <_read>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_read_r+0x1e>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_read_r+0x1e>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	200005e4 	.word	0x200005e4

0800aba4 <_write_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	@ (800abc4 <_write_r+0x20>)
 800aba8:	4604      	mov	r4, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7fe fb3b 	bl	800922e <_write>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_write_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_write_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	200005e4 	.word	0x200005e4

0800abc8 <__errno>:
 800abc8:	4b01      	ldr	r3, [pc, #4]	@ (800abd0 <__errno+0x8>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20000038 	.word	0x20000038

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	@ (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	@ (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	@ (800ac18 <__libc_init_array+0x44>)
 800abe8:	f001 ffe2 	bl	800cbb0 <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800d2a4 	.word	0x0800d2a4
 800ac10:	0800d2a4 	.word	0x0800d2a4
 800ac14:	0800d2a4 	.word	0x0800d2a4
 800ac18:	0800d2a8 	.word	0x0800d2a8

0800ac1c <__retarget_lock_init_recursive>:
 800ac1c:	4770      	bx	lr

0800ac1e <__retarget_lock_acquire_recursive>:
 800ac1e:	4770      	bx	lr

0800ac20 <__retarget_lock_release_recursive>:
 800ac20:	4770      	bx	lr

0800ac22 <quorem>:
 800ac22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac26:	6903      	ldr	r3, [r0, #16]
 800ac28:	690c      	ldr	r4, [r1, #16]
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	db7e      	blt.n	800ad2e <quorem+0x10c>
 800ac30:	3c01      	subs	r4, #1
 800ac32:	f101 0814 	add.w	r8, r1, #20
 800ac36:	00a3      	lsls	r3, r4, #2
 800ac38:	f100 0514 	add.w	r5, r0, #20
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac54:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac58:	d32e      	bcc.n	800acb8 <quorem+0x96>
 800ac5a:	f04f 0a00 	mov.w	sl, #0
 800ac5e:	46c4      	mov	ip, r8
 800ac60:	46ae      	mov	lr, r5
 800ac62:	46d3      	mov	fp, sl
 800ac64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac68:	b298      	uxth	r0, r3
 800ac6a:	fb06 a000 	mla	r0, r6, r0, sl
 800ac6e:	0c02      	lsrs	r2, r0, #16
 800ac70:	0c1b      	lsrs	r3, r3, #16
 800ac72:	fb06 2303 	mla	r3, r6, r3, r2
 800ac76:	f8de 2000 	ldr.w	r2, [lr]
 800ac7a:	b280      	uxth	r0, r0
 800ac7c:	b292      	uxth	r2, r2
 800ac7e:	1a12      	subs	r2, r2, r0
 800ac80:	445a      	add	r2, fp
 800ac82:	f8de 0000 	ldr.w	r0, [lr]
 800ac86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac94:	b292      	uxth	r2, r2
 800ac96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac9a:	45e1      	cmp	r9, ip
 800ac9c:	f84e 2b04 	str.w	r2, [lr], #4
 800aca0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aca4:	d2de      	bcs.n	800ac64 <quorem+0x42>
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	58eb      	ldr	r3, [r5, r3]
 800acaa:	b92b      	cbnz	r3, 800acb8 <quorem+0x96>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	3b04      	subs	r3, #4
 800acb0:	429d      	cmp	r5, r3
 800acb2:	461a      	mov	r2, r3
 800acb4:	d32f      	bcc.n	800ad16 <quorem+0xf4>
 800acb6:	613c      	str	r4, [r7, #16]
 800acb8:	4638      	mov	r0, r7
 800acba:	f001 f97f 	bl	800bfbc <__mcmp>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	db25      	blt.n	800ad0e <quorem+0xec>
 800acc2:	4629      	mov	r1, r5
 800acc4:	2000      	movs	r0, #0
 800acc6:	f858 2b04 	ldr.w	r2, [r8], #4
 800acca:	f8d1 c000 	ldr.w	ip, [r1]
 800acce:	fa1f fe82 	uxth.w	lr, r2
 800acd2:	fa1f f38c 	uxth.w	r3, ip
 800acd6:	eba3 030e 	sub.w	r3, r3, lr
 800acda:	4403      	add	r3, r0
 800acdc:	0c12      	lsrs	r2, r2, #16
 800acde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ace2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acec:	45c1      	cmp	r9, r8
 800acee:	f841 3b04 	str.w	r3, [r1], #4
 800acf2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acf6:	d2e6      	bcs.n	800acc6 <quorem+0xa4>
 800acf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad00:	b922      	cbnz	r2, 800ad0c <quorem+0xea>
 800ad02:	3b04      	subs	r3, #4
 800ad04:	429d      	cmp	r5, r3
 800ad06:	461a      	mov	r2, r3
 800ad08:	d30b      	bcc.n	800ad22 <quorem+0x100>
 800ad0a:	613c      	str	r4, [r7, #16]
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	4630      	mov	r0, r6
 800ad10:	b003      	add	sp, #12
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	3b04      	subs	r3, #4
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	d1cb      	bne.n	800acb6 <quorem+0x94>
 800ad1e:	3c01      	subs	r4, #1
 800ad20:	e7c6      	b.n	800acb0 <quorem+0x8e>
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	3b04      	subs	r3, #4
 800ad26:	2a00      	cmp	r2, #0
 800ad28:	d1ef      	bne.n	800ad0a <quorem+0xe8>
 800ad2a:	3c01      	subs	r4, #1
 800ad2c:	e7ea      	b.n	800ad04 <quorem+0xe2>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e7ee      	b.n	800ad10 <quorem+0xee>
 800ad32:	0000      	movs	r0, r0
 800ad34:	0000      	movs	r0, r0
	...

0800ad38 <_dtoa_r>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	69c7      	ldr	r7, [r0, #28]
 800ad3e:	b097      	sub	sp, #92	@ 0x5c
 800ad40:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ad44:	ec55 4b10 	vmov	r4, r5, d0
 800ad48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ad4a:	9107      	str	r1, [sp, #28]
 800ad4c:	4681      	mov	r9, r0
 800ad4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad52:	b97f      	cbnz	r7, 800ad74 <_dtoa_r+0x3c>
 800ad54:	2010      	movs	r0, #16
 800ad56:	f000 fe09 	bl	800b96c <malloc>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ad60:	b920      	cbnz	r0, 800ad6c <_dtoa_r+0x34>
 800ad62:	4ba9      	ldr	r3, [pc, #676]	@ (800b008 <_dtoa_r+0x2d0>)
 800ad64:	21ef      	movs	r1, #239	@ 0xef
 800ad66:	48a9      	ldr	r0, [pc, #676]	@ (800b00c <_dtoa_r+0x2d4>)
 800ad68:	f001 fe32 	bl	800c9d0 <__assert_func>
 800ad6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad70:	6007      	str	r7, [r0, #0]
 800ad72:	60c7      	str	r7, [r0, #12]
 800ad74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	b159      	cbz	r1, 800ad94 <_dtoa_r+0x5c>
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	604a      	str	r2, [r1, #4]
 800ad80:	2301      	movs	r3, #1
 800ad82:	4093      	lsls	r3, r2
 800ad84:	608b      	str	r3, [r1, #8]
 800ad86:	4648      	mov	r0, r9
 800ad88:	f000 fee6 	bl	800bb58 <_Bfree>
 800ad8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	1e2b      	subs	r3, r5, #0
 800ad96:	bfb9      	ittee	lt
 800ad98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad9c:	9305      	strlt	r3, [sp, #20]
 800ad9e:	2300      	movge	r3, #0
 800ada0:	6033      	strge	r3, [r6, #0]
 800ada2:	9f05      	ldr	r7, [sp, #20]
 800ada4:	4b9a      	ldr	r3, [pc, #616]	@ (800b010 <_dtoa_r+0x2d8>)
 800ada6:	bfbc      	itt	lt
 800ada8:	2201      	movlt	r2, #1
 800adaa:	6032      	strlt	r2, [r6, #0]
 800adac:	43bb      	bics	r3, r7
 800adae:	d112      	bne.n	800add6 <_dtoa_r+0x9e>
 800adb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800adb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adbc:	4323      	orrs	r3, r4
 800adbe:	f000 855a 	beq.w	800b876 <_dtoa_r+0xb3e>
 800adc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adc4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b024 <_dtoa_r+0x2ec>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 855c 	beq.w	800b886 <_dtoa_r+0xb4e>
 800adce:	f10a 0303 	add.w	r3, sl, #3
 800add2:	f000 bd56 	b.w	800b882 <_dtoa_r+0xb4a>
 800add6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800adda:	2200      	movs	r2, #0
 800addc:	ec51 0b17 	vmov	r0, r1, d7
 800ade0:	2300      	movs	r3, #0
 800ade2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ade6:	f7f5 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 800adea:	4680      	mov	r8, r0
 800adec:	b158      	cbz	r0, 800ae06 <_dtoa_r+0xce>
 800adee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800adf0:	2301      	movs	r3, #1
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adf6:	b113      	cbz	r3, 800adfe <_dtoa_r+0xc6>
 800adf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800adfa:	4b86      	ldr	r3, [pc, #536]	@ (800b014 <_dtoa_r+0x2dc>)
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b028 <_dtoa_r+0x2f0>
 800ae02:	f000 bd40 	b.w	800b886 <_dtoa_r+0xb4e>
 800ae06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ae0a:	aa14      	add	r2, sp, #80	@ 0x50
 800ae0c:	a915      	add	r1, sp, #84	@ 0x54
 800ae0e:	4648      	mov	r0, r9
 800ae10:	f001 f984 	bl	800c11c <__d2b>
 800ae14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae18:	9002      	str	r0, [sp, #8]
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	d078      	beq.n	800af10 <_dtoa_r+0x1d8>
 800ae1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ae24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae38:	4619      	mov	r1, r3
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	4b76      	ldr	r3, [pc, #472]	@ (800b018 <_dtoa_r+0x2e0>)
 800ae3e:	f7f5 fa2b 	bl	8000298 <__aeabi_dsub>
 800ae42:	a36b      	add	r3, pc, #428	@ (adr r3, 800aff0 <_dtoa_r+0x2b8>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 fbde 	bl	8000608 <__aeabi_dmul>
 800ae4c:	a36a      	add	r3, pc, #424	@ (adr r3, 800aff8 <_dtoa_r+0x2c0>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fa23 	bl	800029c <__adddf3>
 800ae56:	4604      	mov	r4, r0
 800ae58:	4630      	mov	r0, r6
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	f7f5 fb6a 	bl	8000534 <__aeabi_i2d>
 800ae60:	a367      	add	r3, pc, #412	@ (adr r3, 800b000 <_dtoa_r+0x2c8>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fbcf 	bl	8000608 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 fa13 	bl	800029c <__adddf3>
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	f7f5 fe75 	bl	8000b68 <__aeabi_d2iz>
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4607      	mov	r7, r0
 800ae82:	2300      	movs	r3, #0
 800ae84:	4620      	mov	r0, r4
 800ae86:	4629      	mov	r1, r5
 800ae88:	f7f5 fe30 	bl	8000aec <__aeabi_dcmplt>
 800ae8c:	b140      	cbz	r0, 800aea0 <_dtoa_r+0x168>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7f5 fb50 	bl	8000534 <__aeabi_i2d>
 800ae94:	4622      	mov	r2, r4
 800ae96:	462b      	mov	r3, r5
 800ae98:	f7f5 fe1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae9c:	b900      	cbnz	r0, 800aea0 <_dtoa_r+0x168>
 800ae9e:	3f01      	subs	r7, #1
 800aea0:	2f16      	cmp	r7, #22
 800aea2:	d852      	bhi.n	800af4a <_dtoa_r+0x212>
 800aea4:	4b5d      	ldr	r3, [pc, #372]	@ (800b01c <_dtoa_r+0x2e4>)
 800aea6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aeb2:	f7f5 fe1b 	bl	8000aec <__aeabi_dcmplt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d049      	beq.n	800af4e <_dtoa_r+0x216>
 800aeba:	3f01      	subs	r7, #1
 800aebc:	2300      	movs	r3, #0
 800aebe:	9310      	str	r3, [sp, #64]	@ 0x40
 800aec0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aec2:	1b9b      	subs	r3, r3, r6
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	bf45      	ittet	mi
 800aec8:	f1c3 0301 	rsbmi	r3, r3, #1
 800aecc:	9300      	strmi	r3, [sp, #0]
 800aece:	2300      	movpl	r3, #0
 800aed0:	2300      	movmi	r3, #0
 800aed2:	9206      	str	r2, [sp, #24]
 800aed4:	bf54      	ite	pl
 800aed6:	9300      	strpl	r3, [sp, #0]
 800aed8:	9306      	strmi	r3, [sp, #24]
 800aeda:	2f00      	cmp	r7, #0
 800aedc:	db39      	blt.n	800af52 <_dtoa_r+0x21a>
 800aede:	9b06      	ldr	r3, [sp, #24]
 800aee0:	970d      	str	r7, [sp, #52]	@ 0x34
 800aee2:	443b      	add	r3, r7
 800aee4:	9306      	str	r3, [sp, #24]
 800aee6:	2300      	movs	r3, #0
 800aee8:	9308      	str	r3, [sp, #32]
 800aeea:	9b07      	ldr	r3, [sp, #28]
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d863      	bhi.n	800afb8 <_dtoa_r+0x280>
 800aef0:	2b05      	cmp	r3, #5
 800aef2:	bfc4      	itt	gt
 800aef4:	3b04      	subgt	r3, #4
 800aef6:	9307      	strgt	r3, [sp, #28]
 800aef8:	9b07      	ldr	r3, [sp, #28]
 800aefa:	f1a3 0302 	sub.w	r3, r3, #2
 800aefe:	bfcc      	ite	gt
 800af00:	2400      	movgt	r4, #0
 800af02:	2401      	movle	r4, #1
 800af04:	2b03      	cmp	r3, #3
 800af06:	d863      	bhi.n	800afd0 <_dtoa_r+0x298>
 800af08:	e8df f003 	tbb	[pc, r3]
 800af0c:	2b375452 	.word	0x2b375452
 800af10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800af14:	441e      	add	r6, r3
 800af16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	bfc1      	itttt	gt
 800af1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af22:	409f      	lslgt	r7, r3
 800af24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af28:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af2c:	bfd6      	itet	le
 800af2e:	f1c3 0320 	rsble	r3, r3, #32
 800af32:	ea47 0003 	orrgt.w	r0, r7, r3
 800af36:	fa04 f003 	lslle.w	r0, r4, r3
 800af3a:	f7f5 faeb 	bl	8000514 <__aeabi_ui2d>
 800af3e:	2201      	movs	r2, #1
 800af40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af44:	3e01      	subs	r6, #1
 800af46:	9212      	str	r2, [sp, #72]	@ 0x48
 800af48:	e776      	b.n	800ae38 <_dtoa_r+0x100>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e7b7      	b.n	800aebe <_dtoa_r+0x186>
 800af4e:	9010      	str	r0, [sp, #64]	@ 0x40
 800af50:	e7b6      	b.n	800aec0 <_dtoa_r+0x188>
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	1bdb      	subs	r3, r3, r7
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	427b      	negs	r3, r7
 800af5a:	9308      	str	r3, [sp, #32]
 800af5c:	2300      	movs	r3, #0
 800af5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800af60:	e7c3      	b.n	800aeea <_dtoa_r+0x1b2>
 800af62:	2301      	movs	r3, #1
 800af64:	9309      	str	r3, [sp, #36]	@ 0x24
 800af66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af68:	eb07 0b03 	add.w	fp, r7, r3
 800af6c:	f10b 0301 	add.w	r3, fp, #1
 800af70:	2b01      	cmp	r3, #1
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	bfb8      	it	lt
 800af76:	2301      	movlt	r3, #1
 800af78:	e006      	b.n	800af88 <_dtoa_r+0x250>
 800af7a:	2301      	movs	r3, #1
 800af7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd28      	ble.n	800afd6 <_dtoa_r+0x29e>
 800af84:	469b      	mov	fp, r3
 800af86:	9303      	str	r3, [sp, #12]
 800af88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800af8c:	2100      	movs	r1, #0
 800af8e:	2204      	movs	r2, #4
 800af90:	f102 0514 	add.w	r5, r2, #20
 800af94:	429d      	cmp	r5, r3
 800af96:	d926      	bls.n	800afe6 <_dtoa_r+0x2ae>
 800af98:	6041      	str	r1, [r0, #4]
 800af9a:	4648      	mov	r0, r9
 800af9c:	f000 fd9c 	bl	800bad8 <_Balloc>
 800afa0:	4682      	mov	sl, r0
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d142      	bne.n	800b02c <_dtoa_r+0x2f4>
 800afa6:	4b1e      	ldr	r3, [pc, #120]	@ (800b020 <_dtoa_r+0x2e8>)
 800afa8:	4602      	mov	r2, r0
 800afaa:	f240 11af 	movw	r1, #431	@ 0x1af
 800afae:	e6da      	b.n	800ad66 <_dtoa_r+0x2e>
 800afb0:	2300      	movs	r3, #0
 800afb2:	e7e3      	b.n	800af7c <_dtoa_r+0x244>
 800afb4:	2300      	movs	r3, #0
 800afb6:	e7d5      	b.n	800af64 <_dtoa_r+0x22c>
 800afb8:	2401      	movs	r4, #1
 800afba:	2300      	movs	r3, #0
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	9409      	str	r4, [sp, #36]	@ 0x24
 800afc0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8cd b00c 	str.w	fp, [sp, #12]
 800afca:	2312      	movs	r3, #18
 800afcc:	920c      	str	r2, [sp, #48]	@ 0x30
 800afce:	e7db      	b.n	800af88 <_dtoa_r+0x250>
 800afd0:	2301      	movs	r3, #1
 800afd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800afd4:	e7f4      	b.n	800afc0 <_dtoa_r+0x288>
 800afd6:	f04f 0b01 	mov.w	fp, #1
 800afda:	f8cd b00c 	str.w	fp, [sp, #12]
 800afde:	465b      	mov	r3, fp
 800afe0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800afe4:	e7d0      	b.n	800af88 <_dtoa_r+0x250>
 800afe6:	3101      	adds	r1, #1
 800afe8:	0052      	lsls	r2, r2, #1
 800afea:	e7d1      	b.n	800af90 <_dtoa_r+0x258>
 800afec:	f3af 8000 	nop.w
 800aff0:	636f4361 	.word	0x636f4361
 800aff4:	3fd287a7 	.word	0x3fd287a7
 800aff8:	8b60c8b3 	.word	0x8b60c8b3
 800affc:	3fc68a28 	.word	0x3fc68a28
 800b000:	509f79fb 	.word	0x509f79fb
 800b004:	3fd34413 	.word	0x3fd34413
 800b008:	0800cf53 	.word	0x0800cf53
 800b00c:	0800cf6a 	.word	0x0800cf6a
 800b010:	7ff00000 	.word	0x7ff00000
 800b014:	0800cf23 	.word	0x0800cf23
 800b018:	3ff80000 	.word	0x3ff80000
 800b01c:	0800d0d0 	.word	0x0800d0d0
 800b020:	0800cfc2 	.word	0x0800cfc2
 800b024:	0800cf4f 	.word	0x0800cf4f
 800b028:	0800cf22 	.word	0x0800cf22
 800b02c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b030:	6018      	str	r0, [r3, #0]
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	2b0e      	cmp	r3, #14
 800b036:	f200 80a1 	bhi.w	800b17c <_dtoa_r+0x444>
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	f000 809e 	beq.w	800b17c <_dtoa_r+0x444>
 800b040:	2f00      	cmp	r7, #0
 800b042:	dd33      	ble.n	800b0ac <_dtoa_r+0x374>
 800b044:	4b9c      	ldr	r3, [pc, #624]	@ (800b2b8 <_dtoa_r+0x580>)
 800b046:	f007 020f 	and.w	r2, r7, #15
 800b04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04e:	ed93 7b00 	vldr	d7, [r3]
 800b052:	05f8      	lsls	r0, r7, #23
 800b054:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b05c:	d516      	bpl.n	800b08c <_dtoa_r+0x354>
 800b05e:	4b97      	ldr	r3, [pc, #604]	@ (800b2bc <_dtoa_r+0x584>)
 800b060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b068:	f7f5 fbf8 	bl	800085c <__aeabi_ddiv>
 800b06c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b070:	f004 040f 	and.w	r4, r4, #15
 800b074:	2603      	movs	r6, #3
 800b076:	4d91      	ldr	r5, [pc, #580]	@ (800b2bc <_dtoa_r+0x584>)
 800b078:	b954      	cbnz	r4, 800b090 <_dtoa_r+0x358>
 800b07a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b082:	f7f5 fbeb 	bl	800085c <__aeabi_ddiv>
 800b086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b08a:	e028      	b.n	800b0de <_dtoa_r+0x3a6>
 800b08c:	2602      	movs	r6, #2
 800b08e:	e7f2      	b.n	800b076 <_dtoa_r+0x33e>
 800b090:	07e1      	lsls	r1, r4, #31
 800b092:	d508      	bpl.n	800b0a6 <_dtoa_r+0x36e>
 800b094:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b09c:	f7f5 fab4 	bl	8000608 <__aeabi_dmul>
 800b0a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	1064      	asrs	r4, r4, #1
 800b0a8:	3508      	adds	r5, #8
 800b0aa:	e7e5      	b.n	800b078 <_dtoa_r+0x340>
 800b0ac:	f000 80af 	beq.w	800b20e <_dtoa_r+0x4d6>
 800b0b0:	427c      	negs	r4, r7
 800b0b2:	4b81      	ldr	r3, [pc, #516]	@ (800b2b8 <_dtoa_r+0x580>)
 800b0b4:	4d81      	ldr	r5, [pc, #516]	@ (800b2bc <_dtoa_r+0x584>)
 800b0b6:	f004 020f 	and.w	r2, r4, #15
 800b0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0c6:	f7f5 fa9f 	bl	8000608 <__aeabi_dmul>
 800b0ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0ce:	1124      	asrs	r4, r4, #4
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2602      	movs	r6, #2
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	f040 808f 	bne.w	800b1f8 <_dtoa_r+0x4c0>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1d3      	bne.n	800b086 <_dtoa_r+0x34e>
 800b0de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 8094 	beq.w	800b212 <_dtoa_r+0x4da>
 800b0ea:	4b75      	ldr	r3, [pc, #468]	@ (800b2c0 <_dtoa_r+0x588>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	f7f5 fcfb 	bl	8000aec <__aeabi_dcmplt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f000 808b 	beq.w	800b212 <_dtoa_r+0x4da>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8087 	beq.w	800b212 <_dtoa_r+0x4da>
 800b104:	f1bb 0f00 	cmp.w	fp, #0
 800b108:	dd34      	ble.n	800b174 <_dtoa_r+0x43c>
 800b10a:	4620      	mov	r0, r4
 800b10c:	4b6d      	ldr	r3, [pc, #436]	@ (800b2c4 <_dtoa_r+0x58c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 fa79 	bl	8000608 <__aeabi_dmul>
 800b116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b11a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b11e:	3601      	adds	r6, #1
 800b120:	465c      	mov	r4, fp
 800b122:	4630      	mov	r0, r6
 800b124:	f7f5 fa06 	bl	8000534 <__aeabi_i2d>
 800b128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b12c:	f7f5 fa6c 	bl	8000608 <__aeabi_dmul>
 800b130:	4b65      	ldr	r3, [pc, #404]	@ (800b2c8 <_dtoa_r+0x590>)
 800b132:	2200      	movs	r2, #0
 800b134:	f7f5 f8b2 	bl	800029c <__adddf3>
 800b138:	4605      	mov	r5, r0
 800b13a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d16a      	bne.n	800b218 <_dtoa_r+0x4e0>
 800b142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b146:	4b61      	ldr	r3, [pc, #388]	@ (800b2cc <_dtoa_r+0x594>)
 800b148:	2200      	movs	r2, #0
 800b14a:	f7f5 f8a5 	bl	8000298 <__aeabi_dsub>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b156:	462a      	mov	r2, r5
 800b158:	4633      	mov	r3, r6
 800b15a:	f7f5 fce5 	bl	8000b28 <__aeabi_dcmpgt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	f040 8298 	bne.w	800b694 <_dtoa_r+0x95c>
 800b164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b168:	462a      	mov	r2, r5
 800b16a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b16e:	f7f5 fcbd 	bl	8000aec <__aeabi_dcmplt>
 800b172:	bb38      	cbnz	r0, 800b1c4 <_dtoa_r+0x48c>
 800b174:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b178:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b17c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f2c0 8157 	blt.w	800b432 <_dtoa_r+0x6fa>
 800b184:	2f0e      	cmp	r7, #14
 800b186:	f300 8154 	bgt.w	800b432 <_dtoa_r+0x6fa>
 800b18a:	4b4b      	ldr	r3, [pc, #300]	@ (800b2b8 <_dtoa_r+0x580>)
 800b18c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b190:	ed93 7b00 	vldr	d7, [r3]
 800b194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b196:	2b00      	cmp	r3, #0
 800b198:	ed8d 7b00 	vstr	d7, [sp]
 800b19c:	f280 80e5 	bge.w	800b36a <_dtoa_r+0x632>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f300 80e1 	bgt.w	800b36a <_dtoa_r+0x632>
 800b1a8:	d10c      	bne.n	800b1c4 <_dtoa_r+0x48c>
 800b1aa:	4b48      	ldr	r3, [pc, #288]	@ (800b2cc <_dtoa_r+0x594>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	ec51 0b17 	vmov	r0, r1, d7
 800b1b2:	f7f5 fa29 	bl	8000608 <__aeabi_dmul>
 800b1b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ba:	f7f5 fcab 	bl	8000b14 <__aeabi_dcmpge>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f000 8266 	beq.w	800b690 <_dtoa_r+0x958>
 800b1c4:	2400      	movs	r4, #0
 800b1c6:	4625      	mov	r5, r4
 800b1c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1ca:	4656      	mov	r6, sl
 800b1cc:	ea6f 0803 	mvn.w	r8, r3
 800b1d0:	2700      	movs	r7, #0
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4648      	mov	r0, r9
 800b1d6:	f000 fcbf 	bl	800bb58 <_Bfree>
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	f000 80bd 	beq.w	800b35a <_dtoa_r+0x622>
 800b1e0:	b12f      	cbz	r7, 800b1ee <_dtoa_r+0x4b6>
 800b1e2:	42af      	cmp	r7, r5
 800b1e4:	d003      	beq.n	800b1ee <_dtoa_r+0x4b6>
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	4648      	mov	r0, r9
 800b1ea:	f000 fcb5 	bl	800bb58 <_Bfree>
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	4648      	mov	r0, r9
 800b1f2:	f000 fcb1 	bl	800bb58 <_Bfree>
 800b1f6:	e0b0      	b.n	800b35a <_dtoa_r+0x622>
 800b1f8:	07e2      	lsls	r2, r4, #31
 800b1fa:	d505      	bpl.n	800b208 <_dtoa_r+0x4d0>
 800b1fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b200:	f7f5 fa02 	bl	8000608 <__aeabi_dmul>
 800b204:	3601      	adds	r6, #1
 800b206:	2301      	movs	r3, #1
 800b208:	1064      	asrs	r4, r4, #1
 800b20a:	3508      	adds	r5, #8
 800b20c:	e762      	b.n	800b0d4 <_dtoa_r+0x39c>
 800b20e:	2602      	movs	r6, #2
 800b210:	e765      	b.n	800b0de <_dtoa_r+0x3a6>
 800b212:	9c03      	ldr	r4, [sp, #12]
 800b214:	46b8      	mov	r8, r7
 800b216:	e784      	b.n	800b122 <_dtoa_r+0x3ea>
 800b218:	4b27      	ldr	r3, [pc, #156]	@ (800b2b8 <_dtoa_r+0x580>)
 800b21a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b21c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b224:	4454      	add	r4, sl
 800b226:	2900      	cmp	r1, #0
 800b228:	d054      	beq.n	800b2d4 <_dtoa_r+0x59c>
 800b22a:	4929      	ldr	r1, [pc, #164]	@ (800b2d0 <_dtoa_r+0x598>)
 800b22c:	2000      	movs	r0, #0
 800b22e:	f7f5 fb15 	bl	800085c <__aeabi_ddiv>
 800b232:	4633      	mov	r3, r6
 800b234:	462a      	mov	r2, r5
 800b236:	f7f5 f82f 	bl	8000298 <__aeabi_dsub>
 800b23a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b23e:	4656      	mov	r6, sl
 800b240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b244:	f7f5 fc90 	bl	8000b68 <__aeabi_d2iz>
 800b248:	4605      	mov	r5, r0
 800b24a:	f7f5 f973 	bl	8000534 <__aeabi_i2d>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b256:	f7f5 f81f 	bl	8000298 <__aeabi_dsub>
 800b25a:	3530      	adds	r5, #48	@ 0x30
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b264:	f806 5b01 	strb.w	r5, [r6], #1
 800b268:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b26c:	f7f5 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800b270:	2800      	cmp	r0, #0
 800b272:	d172      	bne.n	800b35a <_dtoa_r+0x622>
 800b274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b278:	4911      	ldr	r1, [pc, #68]	@ (800b2c0 <_dtoa_r+0x588>)
 800b27a:	2000      	movs	r0, #0
 800b27c:	f7f5 f80c 	bl	8000298 <__aeabi_dsub>
 800b280:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b284:	f7f5 fc32 	bl	8000aec <__aeabi_dcmplt>
 800b288:	2800      	cmp	r0, #0
 800b28a:	f040 80b4 	bne.w	800b3f6 <_dtoa_r+0x6be>
 800b28e:	42a6      	cmp	r6, r4
 800b290:	f43f af70 	beq.w	800b174 <_dtoa_r+0x43c>
 800b294:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b298:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c4 <_dtoa_r+0x58c>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	f7f5 f9b4 	bl	8000608 <__aeabi_dmul>
 800b2a0:	4b08      	ldr	r3, [pc, #32]	@ (800b2c4 <_dtoa_r+0x58c>)
 800b2a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2ac:	f7f5 f9ac 	bl	8000608 <__aeabi_dmul>
 800b2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2b4:	e7c4      	b.n	800b240 <_dtoa_r+0x508>
 800b2b6:	bf00      	nop
 800b2b8:	0800d0d0 	.word	0x0800d0d0
 800b2bc:	0800d0a8 	.word	0x0800d0a8
 800b2c0:	3ff00000 	.word	0x3ff00000
 800b2c4:	40240000 	.word	0x40240000
 800b2c8:	401c0000 	.word	0x401c0000
 800b2cc:	40140000 	.word	0x40140000
 800b2d0:	3fe00000 	.word	0x3fe00000
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f7f5 f996 	bl	8000608 <__aeabi_dmul>
 800b2dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b2e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b2e2:	4656      	mov	r6, sl
 800b2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2e8:	f7f5 fc3e 	bl	8000b68 <__aeabi_d2iz>
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	f7f5 f921 	bl	8000534 <__aeabi_i2d>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2fa:	f7f4 ffcd 	bl	8000298 <__aeabi_dsub>
 800b2fe:	3530      	adds	r5, #48	@ 0x30
 800b300:	f806 5b01 	strb.w	r5, [r6], #1
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	42a6      	cmp	r6, r4
 800b30a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	d124      	bne.n	800b35e <_dtoa_r+0x626>
 800b314:	4baf      	ldr	r3, [pc, #700]	@ (800b5d4 <_dtoa_r+0x89c>)
 800b316:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b31a:	f7f4 ffbf 	bl	800029c <__adddf3>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b326:	f7f5 fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d163      	bne.n	800b3f6 <_dtoa_r+0x6be>
 800b32e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b332:	49a8      	ldr	r1, [pc, #672]	@ (800b5d4 <_dtoa_r+0x89c>)
 800b334:	2000      	movs	r0, #0
 800b336:	f7f4 ffaf 	bl	8000298 <__aeabi_dsub>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b342:	f7f5 fbd3 	bl	8000aec <__aeabi_dcmplt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f43f af14 	beq.w	800b174 <_dtoa_r+0x43c>
 800b34c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b34e:	1e73      	subs	r3, r6, #1
 800b350:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b352:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b356:	2b30      	cmp	r3, #48	@ 0x30
 800b358:	d0f8      	beq.n	800b34c <_dtoa_r+0x614>
 800b35a:	4647      	mov	r7, r8
 800b35c:	e03b      	b.n	800b3d6 <_dtoa_r+0x69e>
 800b35e:	4b9e      	ldr	r3, [pc, #632]	@ (800b5d8 <_dtoa_r+0x8a0>)
 800b360:	f7f5 f952 	bl	8000608 <__aeabi_dmul>
 800b364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b368:	e7bc      	b.n	800b2e4 <_dtoa_r+0x5ac>
 800b36a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b36e:	4656      	mov	r6, sl
 800b370:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b374:	4620      	mov	r0, r4
 800b376:	4629      	mov	r1, r5
 800b378:	f7f5 fa70 	bl	800085c <__aeabi_ddiv>
 800b37c:	f7f5 fbf4 	bl	8000b68 <__aeabi_d2iz>
 800b380:	4680      	mov	r8, r0
 800b382:	f7f5 f8d7 	bl	8000534 <__aeabi_i2d>
 800b386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b38a:	f7f5 f93d 	bl	8000608 <__aeabi_dmul>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4620      	mov	r0, r4
 800b394:	4629      	mov	r1, r5
 800b396:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b39a:	f7f4 ff7d 	bl	8000298 <__aeabi_dsub>
 800b39e:	f806 4b01 	strb.w	r4, [r6], #1
 800b3a2:	9d03      	ldr	r5, [sp, #12]
 800b3a4:	eba6 040a 	sub.w	r4, r6, sl
 800b3a8:	42a5      	cmp	r5, r4
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	d133      	bne.n	800b418 <_dtoa_r+0x6e0>
 800b3b0:	f7f4 ff74 	bl	800029c <__adddf3>
 800b3b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	f7f5 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 800b3c0:	b9c0      	cbnz	r0, 800b3f4 <_dtoa_r+0x6bc>
 800b3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f5 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ce:	b110      	cbz	r0, 800b3d6 <_dtoa_r+0x69e>
 800b3d0:	f018 0f01 	tst.w	r8, #1
 800b3d4:	d10e      	bne.n	800b3f4 <_dtoa_r+0x6bc>
 800b3d6:	9902      	ldr	r1, [sp, #8]
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f000 fbbd 	bl	800bb58 <_Bfree>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	7033      	strb	r3, [r6, #0]
 800b3e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3e4:	3701      	adds	r7, #1
 800b3e6:	601f      	str	r7, [r3, #0]
 800b3e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 824b 	beq.w	800b886 <_dtoa_r+0xb4e>
 800b3f0:	601e      	str	r6, [r3, #0]
 800b3f2:	e248      	b.n	800b886 <_dtoa_r+0xb4e>
 800b3f4:	46b8      	mov	r8, r7
 800b3f6:	4633      	mov	r3, r6
 800b3f8:	461e      	mov	r6, r3
 800b3fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3fe:	2a39      	cmp	r2, #57	@ 0x39
 800b400:	d106      	bne.n	800b410 <_dtoa_r+0x6d8>
 800b402:	459a      	cmp	sl, r3
 800b404:	d1f8      	bne.n	800b3f8 <_dtoa_r+0x6c0>
 800b406:	2230      	movs	r2, #48	@ 0x30
 800b408:	f108 0801 	add.w	r8, r8, #1
 800b40c:	f88a 2000 	strb.w	r2, [sl]
 800b410:	781a      	ldrb	r2, [r3, #0]
 800b412:	3201      	adds	r2, #1
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	e7a0      	b.n	800b35a <_dtoa_r+0x622>
 800b418:	4b6f      	ldr	r3, [pc, #444]	@ (800b5d8 <_dtoa_r+0x8a0>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f5 f8f4 	bl	8000608 <__aeabi_dmul>
 800b420:	2200      	movs	r2, #0
 800b422:	2300      	movs	r3, #0
 800b424:	4604      	mov	r4, r0
 800b426:	460d      	mov	r5, r1
 800b428:	f7f5 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d09f      	beq.n	800b370 <_dtoa_r+0x638>
 800b430:	e7d1      	b.n	800b3d6 <_dtoa_r+0x69e>
 800b432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b434:	2a00      	cmp	r2, #0
 800b436:	f000 80ea 	beq.w	800b60e <_dtoa_r+0x8d6>
 800b43a:	9a07      	ldr	r2, [sp, #28]
 800b43c:	2a01      	cmp	r2, #1
 800b43e:	f300 80cd 	bgt.w	800b5dc <_dtoa_r+0x8a4>
 800b442:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b444:	2a00      	cmp	r2, #0
 800b446:	f000 80c1 	beq.w	800b5cc <_dtoa_r+0x894>
 800b44a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b44e:	9c08      	ldr	r4, [sp, #32]
 800b450:	9e00      	ldr	r6, [sp, #0]
 800b452:	9a00      	ldr	r2, [sp, #0]
 800b454:	441a      	add	r2, r3
 800b456:	9200      	str	r2, [sp, #0]
 800b458:	9a06      	ldr	r2, [sp, #24]
 800b45a:	2101      	movs	r1, #1
 800b45c:	441a      	add	r2, r3
 800b45e:	4648      	mov	r0, r9
 800b460:	9206      	str	r2, [sp, #24]
 800b462:	f000 fc2d 	bl	800bcc0 <__i2b>
 800b466:	4605      	mov	r5, r0
 800b468:	b166      	cbz	r6, 800b484 <_dtoa_r+0x74c>
 800b46a:	9b06      	ldr	r3, [sp, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd09      	ble.n	800b484 <_dtoa_r+0x74c>
 800b470:	42b3      	cmp	r3, r6
 800b472:	9a00      	ldr	r2, [sp, #0]
 800b474:	bfa8      	it	ge
 800b476:	4633      	movge	r3, r6
 800b478:	1ad2      	subs	r2, r2, r3
 800b47a:	9200      	str	r2, [sp, #0]
 800b47c:	9a06      	ldr	r2, [sp, #24]
 800b47e:	1af6      	subs	r6, r6, r3
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	9306      	str	r3, [sp, #24]
 800b484:	9b08      	ldr	r3, [sp, #32]
 800b486:	b30b      	cbz	r3, 800b4cc <_dtoa_r+0x794>
 800b488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 80c6 	beq.w	800b61c <_dtoa_r+0x8e4>
 800b490:	2c00      	cmp	r4, #0
 800b492:	f000 80c0 	beq.w	800b616 <_dtoa_r+0x8de>
 800b496:	4629      	mov	r1, r5
 800b498:	4622      	mov	r2, r4
 800b49a:	4648      	mov	r0, r9
 800b49c:	f000 fcc8 	bl	800be30 <__pow5mult>
 800b4a0:	9a02      	ldr	r2, [sp, #8]
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	f000 fc20 	bl	800bcec <__multiply>
 800b4ac:	9902      	ldr	r1, [sp, #8]
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4648      	mov	r0, r9
 800b4b2:	f000 fb51 	bl	800bb58 <_Bfree>
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	1b1b      	subs	r3, r3, r4
 800b4ba:	9308      	str	r3, [sp, #32]
 800b4bc:	f000 80b1 	beq.w	800b622 <_dtoa_r+0x8ea>
 800b4c0:	9a08      	ldr	r2, [sp, #32]
 800b4c2:	4641      	mov	r1, r8
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f000 fcb3 	bl	800be30 <__pow5mult>
 800b4ca:	9002      	str	r0, [sp, #8]
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4648      	mov	r0, r9
 800b4d0:	f000 fbf6 	bl	800bcc0 <__i2b>
 800b4d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 81d8 	beq.w	800b88e <_dtoa_r+0xb56>
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4601      	mov	r1, r0
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f000 fca4 	bl	800be30 <__pow5mult>
 800b4e8:	9b07      	ldr	r3, [sp, #28]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	f300 809f 	bgt.w	800b630 <_dtoa_r+0x8f8>
 800b4f2:	9b04      	ldr	r3, [sp, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f040 8097 	bne.w	800b628 <_dtoa_r+0x8f0>
 800b4fa:	9b05      	ldr	r3, [sp, #20]
 800b4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 8093 	bne.w	800b62c <_dtoa_r+0x8f4>
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b50c:	0d1b      	lsrs	r3, r3, #20
 800b50e:	051b      	lsls	r3, r3, #20
 800b510:	b133      	cbz	r3, 800b520 <_dtoa_r+0x7e8>
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	3301      	adds	r3, #1
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	3301      	adds	r3, #1
 800b51c:	9306      	str	r3, [sp, #24]
 800b51e:	2301      	movs	r3, #1
 800b520:	9308      	str	r3, [sp, #32]
 800b522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 81b8 	beq.w	800b89a <_dtoa_r+0xb62>
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b530:	6918      	ldr	r0, [r3, #16]
 800b532:	f000 fb79 	bl	800bc28 <__hi0bits>
 800b536:	f1c0 0020 	rsb	r0, r0, #32
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	4418      	add	r0, r3
 800b53e:	f010 001f 	ands.w	r0, r0, #31
 800b542:	f000 8082 	beq.w	800b64a <_dtoa_r+0x912>
 800b546:	f1c0 0320 	rsb	r3, r0, #32
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	dd73      	ble.n	800b636 <_dtoa_r+0x8fe>
 800b54e:	9b00      	ldr	r3, [sp, #0]
 800b550:	f1c0 001c 	rsb	r0, r0, #28
 800b554:	4403      	add	r3, r0
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	9b06      	ldr	r3, [sp, #24]
 800b55a:	4403      	add	r3, r0
 800b55c:	4406      	add	r6, r0
 800b55e:	9306      	str	r3, [sp, #24]
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	dd05      	ble.n	800b572 <_dtoa_r+0x83a>
 800b566:	9902      	ldr	r1, [sp, #8]
 800b568:	461a      	mov	r2, r3
 800b56a:	4648      	mov	r0, r9
 800b56c:	f000 fcba 	bl	800bee4 <__lshift>
 800b570:	9002      	str	r0, [sp, #8]
 800b572:	9b06      	ldr	r3, [sp, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	dd05      	ble.n	800b584 <_dtoa_r+0x84c>
 800b578:	4621      	mov	r1, r4
 800b57a:	461a      	mov	r2, r3
 800b57c:	4648      	mov	r0, r9
 800b57e:	f000 fcb1 	bl	800bee4 <__lshift>
 800b582:	4604      	mov	r4, r0
 800b584:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d061      	beq.n	800b64e <_dtoa_r+0x916>
 800b58a:	9802      	ldr	r0, [sp, #8]
 800b58c:	4621      	mov	r1, r4
 800b58e:	f000 fd15 	bl	800bfbc <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	da5b      	bge.n	800b64e <_dtoa_r+0x916>
 800b596:	2300      	movs	r3, #0
 800b598:	9902      	ldr	r1, [sp, #8]
 800b59a:	220a      	movs	r2, #10
 800b59c:	4648      	mov	r0, r9
 800b59e:	f000 fafd 	bl	800bb9c <__multadd>
 800b5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 8177 	beq.w	800b89e <_dtoa_r+0xb66>
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	220a      	movs	r2, #10
 800b5b6:	4648      	mov	r0, r9
 800b5b8:	f000 faf0 	bl	800bb9c <__multadd>
 800b5bc:	f1bb 0f00 	cmp.w	fp, #0
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	dc6f      	bgt.n	800b6a4 <_dtoa_r+0x96c>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	dc49      	bgt.n	800b65e <_dtoa_r+0x926>
 800b5ca:	e06b      	b.n	800b6a4 <_dtoa_r+0x96c>
 800b5cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b5ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b5d2:	e73c      	b.n	800b44e <_dtoa_r+0x716>
 800b5d4:	3fe00000 	.word	0x3fe00000
 800b5d8:	40240000 	.word	0x40240000
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	1e5c      	subs	r4, r3, #1
 800b5e0:	9b08      	ldr	r3, [sp, #32]
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	db09      	blt.n	800b5fa <_dtoa_r+0x8c2>
 800b5e6:	1b1c      	subs	r4, r3, r4
 800b5e8:	9b03      	ldr	r3, [sp, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f6bf af30 	bge.w	800b450 <_dtoa_r+0x718>
 800b5f0:	9b00      	ldr	r3, [sp, #0]
 800b5f2:	9a03      	ldr	r2, [sp, #12]
 800b5f4:	1a9e      	subs	r6, r3, r2
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e72b      	b.n	800b452 <_dtoa_r+0x71a>
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5fe:	9408      	str	r4, [sp, #32]
 800b600:	1ae3      	subs	r3, r4, r3
 800b602:	441a      	add	r2, r3
 800b604:	9e00      	ldr	r6, [sp, #0]
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	920d      	str	r2, [sp, #52]	@ 0x34
 800b60a:	2400      	movs	r4, #0
 800b60c:	e721      	b.n	800b452 <_dtoa_r+0x71a>
 800b60e:	9c08      	ldr	r4, [sp, #32]
 800b610:	9e00      	ldr	r6, [sp, #0]
 800b612:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b614:	e728      	b.n	800b468 <_dtoa_r+0x730>
 800b616:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b61a:	e751      	b.n	800b4c0 <_dtoa_r+0x788>
 800b61c:	9a08      	ldr	r2, [sp, #32]
 800b61e:	9902      	ldr	r1, [sp, #8]
 800b620:	e750      	b.n	800b4c4 <_dtoa_r+0x78c>
 800b622:	f8cd 8008 	str.w	r8, [sp, #8]
 800b626:	e751      	b.n	800b4cc <_dtoa_r+0x794>
 800b628:	2300      	movs	r3, #0
 800b62a:	e779      	b.n	800b520 <_dtoa_r+0x7e8>
 800b62c:	9b04      	ldr	r3, [sp, #16]
 800b62e:	e777      	b.n	800b520 <_dtoa_r+0x7e8>
 800b630:	2300      	movs	r3, #0
 800b632:	9308      	str	r3, [sp, #32]
 800b634:	e779      	b.n	800b52a <_dtoa_r+0x7f2>
 800b636:	d093      	beq.n	800b560 <_dtoa_r+0x828>
 800b638:	9a00      	ldr	r2, [sp, #0]
 800b63a:	331c      	adds	r3, #28
 800b63c:	441a      	add	r2, r3
 800b63e:	9200      	str	r2, [sp, #0]
 800b640:	9a06      	ldr	r2, [sp, #24]
 800b642:	441a      	add	r2, r3
 800b644:	441e      	add	r6, r3
 800b646:	9206      	str	r2, [sp, #24]
 800b648:	e78a      	b.n	800b560 <_dtoa_r+0x828>
 800b64a:	4603      	mov	r3, r0
 800b64c:	e7f4      	b.n	800b638 <_dtoa_r+0x900>
 800b64e:	9b03      	ldr	r3, [sp, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	46b8      	mov	r8, r7
 800b654:	dc20      	bgt.n	800b698 <_dtoa_r+0x960>
 800b656:	469b      	mov	fp, r3
 800b658:	9b07      	ldr	r3, [sp, #28]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	dd1e      	ble.n	800b69c <_dtoa_r+0x964>
 800b65e:	f1bb 0f00 	cmp.w	fp, #0
 800b662:	f47f adb1 	bne.w	800b1c8 <_dtoa_r+0x490>
 800b666:	4621      	mov	r1, r4
 800b668:	465b      	mov	r3, fp
 800b66a:	2205      	movs	r2, #5
 800b66c:	4648      	mov	r0, r9
 800b66e:	f000 fa95 	bl	800bb9c <__multadd>
 800b672:	4601      	mov	r1, r0
 800b674:	4604      	mov	r4, r0
 800b676:	9802      	ldr	r0, [sp, #8]
 800b678:	f000 fca0 	bl	800bfbc <__mcmp>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	f77f ada3 	ble.w	800b1c8 <_dtoa_r+0x490>
 800b682:	4656      	mov	r6, sl
 800b684:	2331      	movs	r3, #49	@ 0x31
 800b686:	f806 3b01 	strb.w	r3, [r6], #1
 800b68a:	f108 0801 	add.w	r8, r8, #1
 800b68e:	e59f      	b.n	800b1d0 <_dtoa_r+0x498>
 800b690:	9c03      	ldr	r4, [sp, #12]
 800b692:	46b8      	mov	r8, r7
 800b694:	4625      	mov	r5, r4
 800b696:	e7f4      	b.n	800b682 <_dtoa_r+0x94a>
 800b698:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 8101 	beq.w	800b8a6 <_dtoa_r+0xb6e>
 800b6a4:	2e00      	cmp	r6, #0
 800b6a6:	dd05      	ble.n	800b6b4 <_dtoa_r+0x97c>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	4648      	mov	r0, r9
 800b6ae:	f000 fc19 	bl	800bee4 <__lshift>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	9b08      	ldr	r3, [sp, #32]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d05c      	beq.n	800b774 <_dtoa_r+0xa3c>
 800b6ba:	6869      	ldr	r1, [r5, #4]
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f000 fa0b 	bl	800bad8 <_Balloc>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	b928      	cbnz	r0, 800b6d2 <_dtoa_r+0x99a>
 800b6c6:	4b82      	ldr	r3, [pc, #520]	@ (800b8d0 <_dtoa_r+0xb98>)
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b6ce:	f7ff bb4a 	b.w	800ad66 <_dtoa_r+0x2e>
 800b6d2:	692a      	ldr	r2, [r5, #16]
 800b6d4:	3202      	adds	r2, #2
 800b6d6:	0092      	lsls	r2, r2, #2
 800b6d8:	f105 010c 	add.w	r1, r5, #12
 800b6dc:	300c      	adds	r0, #12
 800b6de:	f001 f969 	bl	800c9b4 <memcpy>
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4648      	mov	r0, r9
 800b6e8:	f000 fbfc 	bl	800bee4 <__lshift>
 800b6ec:	f10a 0301 	add.w	r3, sl, #1
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	eb0a 030b 	add.w	r3, sl, fp
 800b6f6:	9308      	str	r3, [sp, #32]
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	462f      	mov	r7, r5
 800b700:	9306      	str	r3, [sp, #24]
 800b702:	4605      	mov	r5, r0
 800b704:	9b00      	ldr	r3, [sp, #0]
 800b706:	9802      	ldr	r0, [sp, #8]
 800b708:	4621      	mov	r1, r4
 800b70a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b70e:	f7ff fa88 	bl	800ac22 <quorem>
 800b712:	4603      	mov	r3, r0
 800b714:	3330      	adds	r3, #48	@ 0x30
 800b716:	9003      	str	r0, [sp, #12]
 800b718:	4639      	mov	r1, r7
 800b71a:	9802      	ldr	r0, [sp, #8]
 800b71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b71e:	f000 fc4d 	bl	800bfbc <__mcmp>
 800b722:	462a      	mov	r2, r5
 800b724:	9004      	str	r0, [sp, #16]
 800b726:	4621      	mov	r1, r4
 800b728:	4648      	mov	r0, r9
 800b72a:	f000 fc63 	bl	800bff4 <__mdiff>
 800b72e:	68c2      	ldr	r2, [r0, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b732:	4606      	mov	r6, r0
 800b734:	bb02      	cbnz	r2, 800b778 <_dtoa_r+0xa40>
 800b736:	4601      	mov	r1, r0
 800b738:	9802      	ldr	r0, [sp, #8]
 800b73a:	f000 fc3f 	bl	800bfbc <__mcmp>
 800b73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b740:	4602      	mov	r2, r0
 800b742:	4631      	mov	r1, r6
 800b744:	4648      	mov	r0, r9
 800b746:	920c      	str	r2, [sp, #48]	@ 0x30
 800b748:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74a:	f000 fa05 	bl	800bb58 <_Bfree>
 800b74e:	9b07      	ldr	r3, [sp, #28]
 800b750:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b752:	9e00      	ldr	r6, [sp, #0]
 800b754:	ea42 0103 	orr.w	r1, r2, r3
 800b758:	9b06      	ldr	r3, [sp, #24]
 800b75a:	4319      	orrs	r1, r3
 800b75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75e:	d10d      	bne.n	800b77c <_dtoa_r+0xa44>
 800b760:	2b39      	cmp	r3, #57	@ 0x39
 800b762:	d027      	beq.n	800b7b4 <_dtoa_r+0xa7c>
 800b764:	9a04      	ldr	r2, [sp, #16]
 800b766:	2a00      	cmp	r2, #0
 800b768:	dd01      	ble.n	800b76e <_dtoa_r+0xa36>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	3331      	adds	r3, #49	@ 0x31
 800b76e:	f88b 3000 	strb.w	r3, [fp]
 800b772:	e52e      	b.n	800b1d2 <_dtoa_r+0x49a>
 800b774:	4628      	mov	r0, r5
 800b776:	e7b9      	b.n	800b6ec <_dtoa_r+0x9b4>
 800b778:	2201      	movs	r2, #1
 800b77a:	e7e2      	b.n	800b742 <_dtoa_r+0xa0a>
 800b77c:	9904      	ldr	r1, [sp, #16]
 800b77e:	2900      	cmp	r1, #0
 800b780:	db04      	blt.n	800b78c <_dtoa_r+0xa54>
 800b782:	9807      	ldr	r0, [sp, #28]
 800b784:	4301      	orrs	r1, r0
 800b786:	9806      	ldr	r0, [sp, #24]
 800b788:	4301      	orrs	r1, r0
 800b78a:	d120      	bne.n	800b7ce <_dtoa_r+0xa96>
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	ddee      	ble.n	800b76e <_dtoa_r+0xa36>
 800b790:	9902      	ldr	r1, [sp, #8]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	2201      	movs	r2, #1
 800b796:	4648      	mov	r0, r9
 800b798:	f000 fba4 	bl	800bee4 <__lshift>
 800b79c:	4621      	mov	r1, r4
 800b79e:	9002      	str	r0, [sp, #8]
 800b7a0:	f000 fc0c 	bl	800bfbc <__mcmp>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	dc02      	bgt.n	800b7b0 <_dtoa_r+0xa78>
 800b7aa:	d1e0      	bne.n	800b76e <_dtoa_r+0xa36>
 800b7ac:	07da      	lsls	r2, r3, #31
 800b7ae:	d5de      	bpl.n	800b76e <_dtoa_r+0xa36>
 800b7b0:	2b39      	cmp	r3, #57	@ 0x39
 800b7b2:	d1da      	bne.n	800b76a <_dtoa_r+0xa32>
 800b7b4:	2339      	movs	r3, #57	@ 0x39
 800b7b6:	f88b 3000 	strb.w	r3, [fp]
 800b7ba:	4633      	mov	r3, r6
 800b7bc:	461e      	mov	r6, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b7c4:	2a39      	cmp	r2, #57	@ 0x39
 800b7c6:	d04e      	beq.n	800b866 <_dtoa_r+0xb2e>
 800b7c8:	3201      	adds	r2, #1
 800b7ca:	701a      	strb	r2, [r3, #0]
 800b7cc:	e501      	b.n	800b1d2 <_dtoa_r+0x49a>
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	dd03      	ble.n	800b7da <_dtoa_r+0xaa2>
 800b7d2:	2b39      	cmp	r3, #57	@ 0x39
 800b7d4:	d0ee      	beq.n	800b7b4 <_dtoa_r+0xa7c>
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	e7c9      	b.n	800b76e <_dtoa_r+0xa36>
 800b7da:	9a00      	ldr	r2, [sp, #0]
 800b7dc:	9908      	ldr	r1, [sp, #32]
 800b7de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b7e2:	428a      	cmp	r2, r1
 800b7e4:	d028      	beq.n	800b838 <_dtoa_r+0xb00>
 800b7e6:	9902      	ldr	r1, [sp, #8]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	220a      	movs	r2, #10
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f000 f9d5 	bl	800bb9c <__multadd>
 800b7f2:	42af      	cmp	r7, r5
 800b7f4:	9002      	str	r0, [sp, #8]
 800b7f6:	f04f 0300 	mov.w	r3, #0
 800b7fa:	f04f 020a 	mov.w	r2, #10
 800b7fe:	4639      	mov	r1, r7
 800b800:	4648      	mov	r0, r9
 800b802:	d107      	bne.n	800b814 <_dtoa_r+0xadc>
 800b804:	f000 f9ca 	bl	800bb9c <__multadd>
 800b808:	4607      	mov	r7, r0
 800b80a:	4605      	mov	r5, r0
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	e777      	b.n	800b704 <_dtoa_r+0x9cc>
 800b814:	f000 f9c2 	bl	800bb9c <__multadd>
 800b818:	4629      	mov	r1, r5
 800b81a:	4607      	mov	r7, r0
 800b81c:	2300      	movs	r3, #0
 800b81e:	220a      	movs	r2, #10
 800b820:	4648      	mov	r0, r9
 800b822:	f000 f9bb 	bl	800bb9c <__multadd>
 800b826:	4605      	mov	r5, r0
 800b828:	e7f0      	b.n	800b80c <_dtoa_r+0xad4>
 800b82a:	f1bb 0f00 	cmp.w	fp, #0
 800b82e:	bfcc      	ite	gt
 800b830:	465e      	movgt	r6, fp
 800b832:	2601      	movle	r6, #1
 800b834:	4456      	add	r6, sl
 800b836:	2700      	movs	r7, #0
 800b838:	9902      	ldr	r1, [sp, #8]
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	2201      	movs	r2, #1
 800b83e:	4648      	mov	r0, r9
 800b840:	f000 fb50 	bl	800bee4 <__lshift>
 800b844:	4621      	mov	r1, r4
 800b846:	9002      	str	r0, [sp, #8]
 800b848:	f000 fbb8 	bl	800bfbc <__mcmp>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	dcb4      	bgt.n	800b7ba <_dtoa_r+0xa82>
 800b850:	d102      	bne.n	800b858 <_dtoa_r+0xb20>
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	07db      	lsls	r3, r3, #31
 800b856:	d4b0      	bmi.n	800b7ba <_dtoa_r+0xa82>
 800b858:	4633      	mov	r3, r6
 800b85a:	461e      	mov	r6, r3
 800b85c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b860:	2a30      	cmp	r2, #48	@ 0x30
 800b862:	d0fa      	beq.n	800b85a <_dtoa_r+0xb22>
 800b864:	e4b5      	b.n	800b1d2 <_dtoa_r+0x49a>
 800b866:	459a      	cmp	sl, r3
 800b868:	d1a8      	bne.n	800b7bc <_dtoa_r+0xa84>
 800b86a:	2331      	movs	r3, #49	@ 0x31
 800b86c:	f108 0801 	add.w	r8, r8, #1
 800b870:	f88a 3000 	strb.w	r3, [sl]
 800b874:	e4ad      	b.n	800b1d2 <_dtoa_r+0x49a>
 800b876:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b878:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b8d4 <_dtoa_r+0xb9c>
 800b87c:	b11b      	cbz	r3, 800b886 <_dtoa_r+0xb4e>
 800b87e:	f10a 0308 	add.w	r3, sl, #8
 800b882:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	4650      	mov	r0, sl
 800b888:	b017      	add	sp, #92	@ 0x5c
 800b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	9b07      	ldr	r3, [sp, #28]
 800b890:	2b01      	cmp	r3, #1
 800b892:	f77f ae2e 	ble.w	800b4f2 <_dtoa_r+0x7ba>
 800b896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b898:	9308      	str	r3, [sp, #32]
 800b89a:	2001      	movs	r0, #1
 800b89c:	e64d      	b.n	800b53a <_dtoa_r+0x802>
 800b89e:	f1bb 0f00 	cmp.w	fp, #0
 800b8a2:	f77f aed9 	ble.w	800b658 <_dtoa_r+0x920>
 800b8a6:	4656      	mov	r6, sl
 800b8a8:	9802      	ldr	r0, [sp, #8]
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	f7ff f9b9 	bl	800ac22 <quorem>
 800b8b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b8b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b8b8:	eba6 020a 	sub.w	r2, r6, sl
 800b8bc:	4593      	cmp	fp, r2
 800b8be:	ddb4      	ble.n	800b82a <_dtoa_r+0xaf2>
 800b8c0:	9902      	ldr	r1, [sp, #8]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	f000 f968 	bl	800bb9c <__multadd>
 800b8cc:	9002      	str	r0, [sp, #8]
 800b8ce:	e7eb      	b.n	800b8a8 <_dtoa_r+0xb70>
 800b8d0:	0800cfc2 	.word	0x0800cfc2
 800b8d4:	0800cf46 	.word	0x0800cf46

0800b8d8 <_free_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4605      	mov	r5, r0
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	d041      	beq.n	800b964 <_free_r+0x8c>
 800b8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e4:	1f0c      	subs	r4, r1, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfb8      	it	lt
 800b8ea:	18e4      	addlt	r4, r4, r3
 800b8ec:	f000 f8e8 	bl	800bac0 <__malloc_lock>
 800b8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b968 <_free_r+0x90>)
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	b933      	cbnz	r3, 800b904 <_free_r+0x2c>
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6014      	str	r4, [r2, #0]
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b900:	f000 b8e4 	b.w	800bacc <__malloc_unlock>
 800b904:	42a3      	cmp	r3, r4
 800b906:	d908      	bls.n	800b91a <_free_r+0x42>
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	1821      	adds	r1, r4, r0
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf01      	itttt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	1809      	addeq	r1, r1, r0
 800b916:	6021      	streq	r1, [r4, #0]
 800b918:	e7ed      	b.n	800b8f6 <_free_r+0x1e>
 800b91a:	461a      	mov	r2, r3
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b10b      	cbz	r3, 800b924 <_free_r+0x4c>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d9fa      	bls.n	800b91a <_free_r+0x42>
 800b924:	6811      	ldr	r1, [r2, #0]
 800b926:	1850      	adds	r0, r2, r1
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d10b      	bne.n	800b944 <_free_r+0x6c>
 800b92c:	6820      	ldr	r0, [r4, #0]
 800b92e:	4401      	add	r1, r0
 800b930:	1850      	adds	r0, r2, r1
 800b932:	4283      	cmp	r3, r0
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	d1e0      	bne.n	800b8fa <_free_r+0x22>
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	6053      	str	r3, [r2, #4]
 800b93e:	4408      	add	r0, r1
 800b940:	6010      	str	r0, [r2, #0]
 800b942:	e7da      	b.n	800b8fa <_free_r+0x22>
 800b944:	d902      	bls.n	800b94c <_free_r+0x74>
 800b946:	230c      	movs	r3, #12
 800b948:	602b      	str	r3, [r5, #0]
 800b94a:	e7d6      	b.n	800b8fa <_free_r+0x22>
 800b94c:	6820      	ldr	r0, [r4, #0]
 800b94e:	1821      	adds	r1, r4, r0
 800b950:	428b      	cmp	r3, r1
 800b952:	bf04      	itt	eq
 800b954:	6819      	ldreq	r1, [r3, #0]
 800b956:	685b      	ldreq	r3, [r3, #4]
 800b958:	6063      	str	r3, [r4, #4]
 800b95a:	bf04      	itt	eq
 800b95c:	1809      	addeq	r1, r1, r0
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	6054      	str	r4, [r2, #4]
 800b962:	e7ca      	b.n	800b8fa <_free_r+0x22>
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	200005f0 	.word	0x200005f0

0800b96c <malloc>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	@ (800b978 <malloc+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f000 b825 	b.w	800b9c0 <_malloc_r>
 800b976:	bf00      	nop
 800b978:	20000038 	.word	0x20000038

0800b97c <sbrk_aligned>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4e0f      	ldr	r6, [pc, #60]	@ (800b9bc <sbrk_aligned+0x40>)
 800b980:	460c      	mov	r4, r1
 800b982:	6831      	ldr	r1, [r6, #0]
 800b984:	4605      	mov	r5, r0
 800b986:	b911      	cbnz	r1, 800b98e <sbrk_aligned+0x12>
 800b988:	f001 f804 	bl	800c994 <_sbrk_r>
 800b98c:	6030      	str	r0, [r6, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	4628      	mov	r0, r5
 800b992:	f000 ffff 	bl	800c994 <_sbrk_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	d103      	bne.n	800b9a2 <sbrk_aligned+0x26>
 800b99a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b99e:	4620      	mov	r0, r4
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	1cc4      	adds	r4, r0, #3
 800b9a4:	f024 0403 	bic.w	r4, r4, #3
 800b9a8:	42a0      	cmp	r0, r4
 800b9aa:	d0f8      	beq.n	800b99e <sbrk_aligned+0x22>
 800b9ac:	1a21      	subs	r1, r4, r0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 fff0 	bl	800c994 <_sbrk_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d1f2      	bne.n	800b99e <sbrk_aligned+0x22>
 800b9b8:	e7ef      	b.n	800b99a <sbrk_aligned+0x1e>
 800b9ba:	bf00      	nop
 800b9bc:	200005ec 	.word	0x200005ec

0800b9c0 <_malloc_r>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	1ccd      	adds	r5, r1, #3
 800b9c6:	f025 0503 	bic.w	r5, r5, #3
 800b9ca:	3508      	adds	r5, #8
 800b9cc:	2d0c      	cmp	r5, #12
 800b9ce:	bf38      	it	cc
 800b9d0:	250c      	movcc	r5, #12
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	db01      	blt.n	800b9dc <_malloc_r+0x1c>
 800b9d8:	42a9      	cmp	r1, r5
 800b9da:	d904      	bls.n	800b9e6 <_malloc_r+0x26>
 800b9dc:	230c      	movs	r3, #12
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800babc <_malloc_r+0xfc>
 800b9ea:	f000 f869 	bl	800bac0 <__malloc_lock>
 800b9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f2:	461c      	mov	r4, r3
 800b9f4:	bb44      	cbnz	r4, 800ba48 <_malloc_r+0x88>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7ff ffbf 	bl	800b97c <sbrk_aligned>
 800b9fe:	1c43      	adds	r3, r0, #1
 800ba00:	4604      	mov	r4, r0
 800ba02:	d158      	bne.n	800bab6 <_malloc_r+0xf6>
 800ba04:	f8d8 4000 	ldr.w	r4, [r8]
 800ba08:	4627      	mov	r7, r4
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	d143      	bne.n	800ba96 <_malloc_r+0xd6>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	d04b      	beq.n	800baaa <_malloc_r+0xea>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	4639      	mov	r1, r7
 800ba16:	4630      	mov	r0, r6
 800ba18:	eb04 0903 	add.w	r9, r4, r3
 800ba1c:	f000 ffba 	bl	800c994 <_sbrk_r>
 800ba20:	4581      	cmp	r9, r0
 800ba22:	d142      	bne.n	800baaa <_malloc_r+0xea>
 800ba24:	6821      	ldr	r1, [r4, #0]
 800ba26:	1a6d      	subs	r5, r5, r1
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ffa6 	bl	800b97c <sbrk_aligned>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d03a      	beq.n	800baaa <_malloc_r+0xea>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	442b      	add	r3, r5
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	bb62      	cbnz	r2, 800ba9c <_malloc_r+0xdc>
 800ba42:	f8c8 7000 	str.w	r7, [r8]
 800ba46:	e00f      	b.n	800ba68 <_malloc_r+0xa8>
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	1b52      	subs	r2, r2, r5
 800ba4c:	d420      	bmi.n	800ba90 <_malloc_r+0xd0>
 800ba4e:	2a0b      	cmp	r2, #11
 800ba50:	d917      	bls.n	800ba82 <_malloc_r+0xc2>
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	6025      	str	r5, [r4, #0]
 800ba58:	bf18      	it	ne
 800ba5a:	6059      	strne	r1, [r3, #4]
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	bf08      	it	eq
 800ba60:	f8c8 1000 	streq.w	r1, [r8]
 800ba64:	5162      	str	r2, [r4, r5]
 800ba66:	604b      	str	r3, [r1, #4]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f82f 	bl	800bacc <__malloc_unlock>
 800ba6e:	f104 000b 	add.w	r0, r4, #11
 800ba72:	1d23      	adds	r3, r4, #4
 800ba74:	f020 0007 	bic.w	r0, r0, #7
 800ba78:	1ac2      	subs	r2, r0, r3
 800ba7a:	bf1c      	itt	ne
 800ba7c:	1a1b      	subne	r3, r3, r0
 800ba7e:	50a3      	strne	r3, [r4, r2]
 800ba80:	e7af      	b.n	800b9e2 <_malloc_r+0x22>
 800ba82:	6862      	ldr	r2, [r4, #4]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	bf0c      	ite	eq
 800ba88:	f8c8 2000 	streq.w	r2, [r8]
 800ba8c:	605a      	strne	r2, [r3, #4]
 800ba8e:	e7eb      	b.n	800ba68 <_malloc_r+0xa8>
 800ba90:	4623      	mov	r3, r4
 800ba92:	6864      	ldr	r4, [r4, #4]
 800ba94:	e7ae      	b.n	800b9f4 <_malloc_r+0x34>
 800ba96:	463c      	mov	r4, r7
 800ba98:	687f      	ldr	r7, [r7, #4]
 800ba9a:	e7b6      	b.n	800ba0a <_malloc_r+0x4a>
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d1fb      	bne.n	800ba9c <_malloc_r+0xdc>
 800baa4:	2300      	movs	r3, #0
 800baa6:	6053      	str	r3, [r2, #4]
 800baa8:	e7de      	b.n	800ba68 <_malloc_r+0xa8>
 800baaa:	230c      	movs	r3, #12
 800baac:	6033      	str	r3, [r6, #0]
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f80c 	bl	800bacc <__malloc_unlock>
 800bab4:	e794      	b.n	800b9e0 <_malloc_r+0x20>
 800bab6:	6005      	str	r5, [r0, #0]
 800bab8:	e7d6      	b.n	800ba68 <_malloc_r+0xa8>
 800baba:	bf00      	nop
 800babc:	200005f0 	.word	0x200005f0

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__malloc_lock+0x8>)
 800bac2:	f7ff b8ac 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	200005e8 	.word	0x200005e8

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	@ (800bad4 <__malloc_unlock+0x8>)
 800bace:	f7ff b8a7 	b.w	800ac20 <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	200005e8 	.word	0x200005e8

0800bad8 <_Balloc>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	69c6      	ldr	r6, [r0, #28]
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Balloc+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ff42 	bl	800b96c <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	61e0      	str	r0, [r4, #28]
 800baec:	b920      	cbnz	r0, 800baf8 <_Balloc+0x20>
 800baee:	4b18      	ldr	r3, [pc, #96]	@ (800bb50 <_Balloc+0x78>)
 800baf0:	4818      	ldr	r0, [pc, #96]	@ (800bb54 <_Balloc+0x7c>)
 800baf2:	216b      	movs	r1, #107	@ 0x6b
 800baf4:	f000 ff6c 	bl	800c9d0 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	69e6      	ldr	r6, [r4, #28]
 800bb02:	68f3      	ldr	r3, [r6, #12]
 800bb04:	b183      	cbz	r3, 800bb28 <_Balloc+0x50>
 800bb06:	69e3      	ldr	r3, [r4, #28]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb0e:	b9b8      	cbnz	r0, 800bb40 <_Balloc+0x68>
 800bb10:	2101      	movs	r1, #1
 800bb12:	fa01 f605 	lsl.w	r6, r1, r5
 800bb16:	1d72      	adds	r2, r6, #5
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 ff76 	bl	800ca0c <_calloc_r>
 800bb20:	b160      	cbz	r0, 800bb3c <_Balloc+0x64>
 800bb22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb26:	e00e      	b.n	800bb46 <_Balloc+0x6e>
 800bb28:	2221      	movs	r2, #33	@ 0x21
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 ff6d 	bl	800ca0c <_calloc_r>
 800bb32:	69e3      	ldr	r3, [r4, #28]
 800bb34:	60f0      	str	r0, [r6, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <_Balloc+0x2e>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	6802      	ldr	r2, [r0, #0]
 800bb42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb46:	2300      	movs	r3, #0
 800bb48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb4c:	e7f7      	b.n	800bb3e <_Balloc+0x66>
 800bb4e:	bf00      	nop
 800bb50:	0800cf53 	.word	0x0800cf53
 800bb54:	0800cfd3 	.word	0x0800cfd3

0800bb58 <_Bfree>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	69c6      	ldr	r6, [r0, #28]
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b976      	cbnz	r6, 800bb80 <_Bfree+0x28>
 800bb62:	2010      	movs	r0, #16
 800bb64:	f7ff ff02 	bl	800b96c <malloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	61e8      	str	r0, [r5, #28]
 800bb6c:	b920      	cbnz	r0, 800bb78 <_Bfree+0x20>
 800bb6e:	4b09      	ldr	r3, [pc, #36]	@ (800bb94 <_Bfree+0x3c>)
 800bb70:	4809      	ldr	r0, [pc, #36]	@ (800bb98 <_Bfree+0x40>)
 800bb72:	218f      	movs	r1, #143	@ 0x8f
 800bb74:	f000 ff2c 	bl	800c9d0 <__assert_func>
 800bb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb7c:	6006      	str	r6, [r0, #0]
 800bb7e:	60c6      	str	r6, [r0, #12]
 800bb80:	b13c      	cbz	r4, 800bb92 <_Bfree+0x3a>
 800bb82:	69eb      	ldr	r3, [r5, #28]
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb8c:	6021      	str	r1, [r4, #0]
 800bb8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0800cf53 	.word	0x0800cf53
 800bb98:	0800cfd3 	.word	0x0800cfd3

0800bb9c <__multadd>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	690d      	ldr	r5, [r1, #16]
 800bba2:	4607      	mov	r7, r0
 800bba4:	460c      	mov	r4, r1
 800bba6:	461e      	mov	r6, r3
 800bba8:	f101 0c14 	add.w	ip, r1, #20
 800bbac:	2000      	movs	r0, #0
 800bbae:	f8dc 3000 	ldr.w	r3, [ip]
 800bbb2:	b299      	uxth	r1, r3
 800bbb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bbb8:	0c1e      	lsrs	r6, r3, #16
 800bbba:	0c0b      	lsrs	r3, r1, #16
 800bbbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bbc0:	b289      	uxth	r1, r1
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbc8:	4285      	cmp	r5, r0
 800bbca:	f84c 1b04 	str.w	r1, [ip], #4
 800bbce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbd2:	dcec      	bgt.n	800bbae <__multadd+0x12>
 800bbd4:	b30e      	cbz	r6, 800bc1a <__multadd+0x7e>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	dc19      	bgt.n	800bc10 <__multadd+0x74>
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4638      	mov	r0, r7
 800bbe0:	3101      	adds	r1, #1
 800bbe2:	f7ff ff79 	bl	800bad8 <_Balloc>
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	b928      	cbnz	r0, 800bbf6 <__multadd+0x5a>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b0c      	ldr	r3, [pc, #48]	@ (800bc20 <__multadd+0x84>)
 800bbee:	480d      	ldr	r0, [pc, #52]	@ (800bc24 <__multadd+0x88>)
 800bbf0:	21ba      	movs	r1, #186	@ 0xba
 800bbf2:	f000 feed 	bl	800c9d0 <__assert_func>
 800bbf6:	6922      	ldr	r2, [r4, #16]
 800bbf8:	3202      	adds	r2, #2
 800bbfa:	f104 010c 	add.w	r1, r4, #12
 800bbfe:	0092      	lsls	r2, r2, #2
 800bc00:	300c      	adds	r0, #12
 800bc02:	f000 fed7 	bl	800c9b4 <memcpy>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ffa5 	bl	800bb58 <_Bfree>
 800bc0e:	4644      	mov	r4, r8
 800bc10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc14:	3501      	adds	r5, #1
 800bc16:	615e      	str	r6, [r3, #20]
 800bc18:	6125      	str	r5, [r4, #16]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	0800cfc2 	.word	0x0800cfc2
 800bc24:	0800cfd3 	.word	0x0800cfd3

0800bc28 <__hi0bits>:
 800bc28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	bf36      	itet	cc
 800bc30:	0403      	lslcc	r3, r0, #16
 800bc32:	2000      	movcs	r0, #0
 800bc34:	2010      	movcc	r0, #16
 800bc36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc3a:	bf3c      	itt	cc
 800bc3c:	021b      	lslcc	r3, r3, #8
 800bc3e:	3008      	addcc	r0, #8
 800bc40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc44:	bf3c      	itt	cc
 800bc46:	011b      	lslcc	r3, r3, #4
 800bc48:	3004      	addcc	r0, #4
 800bc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc4e:	bf3c      	itt	cc
 800bc50:	009b      	lslcc	r3, r3, #2
 800bc52:	3002      	addcc	r0, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	db05      	blt.n	800bc64 <__hi0bits+0x3c>
 800bc58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc5c:	f100 0001 	add.w	r0, r0, #1
 800bc60:	bf08      	it	eq
 800bc62:	2020      	moveq	r0, #32
 800bc64:	4770      	bx	lr

0800bc66 <__lo0bits>:
 800bc66:	6803      	ldr	r3, [r0, #0]
 800bc68:	4602      	mov	r2, r0
 800bc6a:	f013 0007 	ands.w	r0, r3, #7
 800bc6e:	d00b      	beq.n	800bc88 <__lo0bits+0x22>
 800bc70:	07d9      	lsls	r1, r3, #31
 800bc72:	d421      	bmi.n	800bcb8 <__lo0bits+0x52>
 800bc74:	0798      	lsls	r0, r3, #30
 800bc76:	bf49      	itett	mi
 800bc78:	085b      	lsrmi	r3, r3, #1
 800bc7a:	089b      	lsrpl	r3, r3, #2
 800bc7c:	2001      	movmi	r0, #1
 800bc7e:	6013      	strmi	r3, [r2, #0]
 800bc80:	bf5c      	itt	pl
 800bc82:	6013      	strpl	r3, [r2, #0]
 800bc84:	2002      	movpl	r0, #2
 800bc86:	4770      	bx	lr
 800bc88:	b299      	uxth	r1, r3
 800bc8a:	b909      	cbnz	r1, 800bc90 <__lo0bits+0x2a>
 800bc8c:	0c1b      	lsrs	r3, r3, #16
 800bc8e:	2010      	movs	r0, #16
 800bc90:	b2d9      	uxtb	r1, r3
 800bc92:	b909      	cbnz	r1, 800bc98 <__lo0bits+0x32>
 800bc94:	3008      	adds	r0, #8
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	0719      	lsls	r1, r3, #28
 800bc9a:	bf04      	itt	eq
 800bc9c:	091b      	lsreq	r3, r3, #4
 800bc9e:	3004      	addeq	r0, #4
 800bca0:	0799      	lsls	r1, r3, #30
 800bca2:	bf04      	itt	eq
 800bca4:	089b      	lsreq	r3, r3, #2
 800bca6:	3002      	addeq	r0, #2
 800bca8:	07d9      	lsls	r1, r3, #31
 800bcaa:	d403      	bmi.n	800bcb4 <__lo0bits+0x4e>
 800bcac:	085b      	lsrs	r3, r3, #1
 800bcae:	f100 0001 	add.w	r0, r0, #1
 800bcb2:	d003      	beq.n	800bcbc <__lo0bits+0x56>
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4770      	bx	lr
 800bcb8:	2000      	movs	r0, #0
 800bcba:	4770      	bx	lr
 800bcbc:	2020      	movs	r0, #32
 800bcbe:	4770      	bx	lr

0800bcc0 <__i2b>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7ff ff07 	bl	800bad8 <_Balloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	b928      	cbnz	r0, 800bcda <__i2b+0x1a>
 800bcce:	4b05      	ldr	r3, [pc, #20]	@ (800bce4 <__i2b+0x24>)
 800bcd0:	4805      	ldr	r0, [pc, #20]	@ (800bce8 <__i2b+0x28>)
 800bcd2:	f240 1145 	movw	r1, #325	@ 0x145
 800bcd6:	f000 fe7b 	bl	800c9d0 <__assert_func>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6144      	str	r4, [r0, #20]
 800bcde:	6103      	str	r3, [r0, #16]
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	bf00      	nop
 800bce4:	0800cfc2 	.word	0x0800cfc2
 800bce8:	0800cfd3 	.word	0x0800cfd3

0800bcec <__multiply>:
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4617      	mov	r7, r2
 800bcf2:	690a      	ldr	r2, [r1, #16]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	bfa8      	it	ge
 800bcfa:	463b      	movge	r3, r7
 800bcfc:	4689      	mov	r9, r1
 800bcfe:	bfa4      	itt	ge
 800bd00:	460f      	movge	r7, r1
 800bd02:	4699      	movge	r9, r3
 800bd04:	693d      	ldr	r5, [r7, #16]
 800bd06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	eb05 060a 	add.w	r6, r5, sl
 800bd12:	42b3      	cmp	r3, r6
 800bd14:	b085      	sub	sp, #20
 800bd16:	bfb8      	it	lt
 800bd18:	3101      	addlt	r1, #1
 800bd1a:	f7ff fedd 	bl	800bad8 <_Balloc>
 800bd1e:	b930      	cbnz	r0, 800bd2e <__multiply+0x42>
 800bd20:	4602      	mov	r2, r0
 800bd22:	4b41      	ldr	r3, [pc, #260]	@ (800be28 <__multiply+0x13c>)
 800bd24:	4841      	ldr	r0, [pc, #260]	@ (800be2c <__multiply+0x140>)
 800bd26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd2a:	f000 fe51 	bl	800c9d0 <__assert_func>
 800bd2e:	f100 0414 	add.w	r4, r0, #20
 800bd32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bd36:	4623      	mov	r3, r4
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4573      	cmp	r3, lr
 800bd3c:	d320      	bcc.n	800bd80 <__multiply+0x94>
 800bd3e:	f107 0814 	add.w	r8, r7, #20
 800bd42:	f109 0114 	add.w	r1, r9, #20
 800bd46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bd4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bd4e:	9302      	str	r3, [sp, #8]
 800bd50:	1beb      	subs	r3, r5, r7
 800bd52:	3b15      	subs	r3, #21
 800bd54:	f023 0303 	bic.w	r3, r3, #3
 800bd58:	3304      	adds	r3, #4
 800bd5a:	3715      	adds	r7, #21
 800bd5c:	42bd      	cmp	r5, r7
 800bd5e:	bf38      	it	cc
 800bd60:	2304      	movcc	r3, #4
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	9b02      	ldr	r3, [sp, #8]
 800bd66:	9103      	str	r1, [sp, #12]
 800bd68:	428b      	cmp	r3, r1
 800bd6a:	d80c      	bhi.n	800bd86 <__multiply+0x9a>
 800bd6c:	2e00      	cmp	r6, #0
 800bd6e:	dd03      	ble.n	800bd78 <__multiply+0x8c>
 800bd70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d055      	beq.n	800be24 <__multiply+0x138>
 800bd78:	6106      	str	r6, [r0, #16]
 800bd7a:	b005      	add	sp, #20
 800bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd80:	f843 2b04 	str.w	r2, [r3], #4
 800bd84:	e7d9      	b.n	800bd3a <__multiply+0x4e>
 800bd86:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd8a:	f1ba 0f00 	cmp.w	sl, #0
 800bd8e:	d01f      	beq.n	800bdd0 <__multiply+0xe4>
 800bd90:	46c4      	mov	ip, r8
 800bd92:	46a1      	mov	r9, r4
 800bd94:	2700      	movs	r7, #0
 800bd96:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd9a:	f8d9 3000 	ldr.w	r3, [r9]
 800bd9e:	fa1f fb82 	uxth.w	fp, r2
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bda8:	443b      	add	r3, r7
 800bdaa:	f8d9 7000 	ldr.w	r7, [r9]
 800bdae:	0c12      	lsrs	r2, r2, #16
 800bdb0:	0c3f      	lsrs	r7, r7, #16
 800bdb2:	fb0a 7202 	mla	r2, sl, r2, r7
 800bdb6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdc0:	4565      	cmp	r5, ip
 800bdc2:	f849 3b04 	str.w	r3, [r9], #4
 800bdc6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bdca:	d8e4      	bhi.n	800bd96 <__multiply+0xaa>
 800bdcc:	9b01      	ldr	r3, [sp, #4]
 800bdce:	50e7      	str	r7, [r4, r3]
 800bdd0:	9b03      	ldr	r3, [sp, #12]
 800bdd2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bdd6:	3104      	adds	r1, #4
 800bdd8:	f1b9 0f00 	cmp.w	r9, #0
 800bddc:	d020      	beq.n	800be20 <__multiply+0x134>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	4647      	mov	r7, r8
 800bde2:	46a4      	mov	ip, r4
 800bde4:	f04f 0a00 	mov.w	sl, #0
 800bde8:	f8b7 b000 	ldrh.w	fp, [r7]
 800bdec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bdf0:	fb09 220b 	mla	r2, r9, fp, r2
 800bdf4:	4452      	add	r2, sl
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdfc:	f84c 3b04 	str.w	r3, [ip], #4
 800be00:	f857 3b04 	ldr.w	r3, [r7], #4
 800be04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be08:	f8bc 3000 	ldrh.w	r3, [ip]
 800be0c:	fb09 330a 	mla	r3, r9, sl, r3
 800be10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be14:	42bd      	cmp	r5, r7
 800be16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be1a:	d8e5      	bhi.n	800bde8 <__multiply+0xfc>
 800be1c:	9a01      	ldr	r2, [sp, #4]
 800be1e:	50a3      	str	r3, [r4, r2]
 800be20:	3404      	adds	r4, #4
 800be22:	e79f      	b.n	800bd64 <__multiply+0x78>
 800be24:	3e01      	subs	r6, #1
 800be26:	e7a1      	b.n	800bd6c <__multiply+0x80>
 800be28:	0800cfc2 	.word	0x0800cfc2
 800be2c:	0800cfd3 	.word	0x0800cfd3

0800be30 <__pow5mult>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4615      	mov	r5, r2
 800be36:	f012 0203 	ands.w	r2, r2, #3
 800be3a:	4607      	mov	r7, r0
 800be3c:	460e      	mov	r6, r1
 800be3e:	d007      	beq.n	800be50 <__pow5mult+0x20>
 800be40:	4c25      	ldr	r4, [pc, #148]	@ (800bed8 <__pow5mult+0xa8>)
 800be42:	3a01      	subs	r2, #1
 800be44:	2300      	movs	r3, #0
 800be46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be4a:	f7ff fea7 	bl	800bb9c <__multadd>
 800be4e:	4606      	mov	r6, r0
 800be50:	10ad      	asrs	r5, r5, #2
 800be52:	d03d      	beq.n	800bed0 <__pow5mult+0xa0>
 800be54:	69fc      	ldr	r4, [r7, #28]
 800be56:	b97c      	cbnz	r4, 800be78 <__pow5mult+0x48>
 800be58:	2010      	movs	r0, #16
 800be5a:	f7ff fd87 	bl	800b96c <malloc>
 800be5e:	4602      	mov	r2, r0
 800be60:	61f8      	str	r0, [r7, #28]
 800be62:	b928      	cbnz	r0, 800be70 <__pow5mult+0x40>
 800be64:	4b1d      	ldr	r3, [pc, #116]	@ (800bedc <__pow5mult+0xac>)
 800be66:	481e      	ldr	r0, [pc, #120]	@ (800bee0 <__pow5mult+0xb0>)
 800be68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be6c:	f000 fdb0 	bl	800c9d0 <__assert_func>
 800be70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be74:	6004      	str	r4, [r0, #0]
 800be76:	60c4      	str	r4, [r0, #12]
 800be78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be80:	b94c      	cbnz	r4, 800be96 <__pow5mult+0x66>
 800be82:	f240 2171 	movw	r1, #625	@ 0x271
 800be86:	4638      	mov	r0, r7
 800be88:	f7ff ff1a 	bl	800bcc0 <__i2b>
 800be8c:	2300      	movs	r3, #0
 800be8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be92:	4604      	mov	r4, r0
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	f04f 0900 	mov.w	r9, #0
 800be9a:	07eb      	lsls	r3, r5, #31
 800be9c:	d50a      	bpl.n	800beb4 <__pow5mult+0x84>
 800be9e:	4631      	mov	r1, r6
 800bea0:	4622      	mov	r2, r4
 800bea2:	4638      	mov	r0, r7
 800bea4:	f7ff ff22 	bl	800bcec <__multiply>
 800bea8:	4631      	mov	r1, r6
 800beaa:	4680      	mov	r8, r0
 800beac:	4638      	mov	r0, r7
 800beae:	f7ff fe53 	bl	800bb58 <_Bfree>
 800beb2:	4646      	mov	r6, r8
 800beb4:	106d      	asrs	r5, r5, #1
 800beb6:	d00b      	beq.n	800bed0 <__pow5mult+0xa0>
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	b938      	cbnz	r0, 800becc <__pow5mult+0x9c>
 800bebc:	4622      	mov	r2, r4
 800bebe:	4621      	mov	r1, r4
 800bec0:	4638      	mov	r0, r7
 800bec2:	f7ff ff13 	bl	800bcec <__multiply>
 800bec6:	6020      	str	r0, [r4, #0]
 800bec8:	f8c0 9000 	str.w	r9, [r0]
 800becc:	4604      	mov	r4, r0
 800bece:	e7e4      	b.n	800be9a <__pow5mult+0x6a>
 800bed0:	4630      	mov	r0, r6
 800bed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed6:	bf00      	nop
 800bed8:	0800d09c 	.word	0x0800d09c
 800bedc:	0800cf53 	.word	0x0800cf53
 800bee0:	0800cfd3 	.word	0x0800cfd3

0800bee4 <__lshift>:
 800bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee8:	460c      	mov	r4, r1
 800beea:	6849      	ldr	r1, [r1, #4]
 800beec:	6923      	ldr	r3, [r4, #16]
 800beee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	4607      	mov	r7, r0
 800bef6:	4691      	mov	r9, r2
 800bef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800befc:	f108 0601 	add.w	r6, r8, #1
 800bf00:	42b3      	cmp	r3, r6
 800bf02:	db0b      	blt.n	800bf1c <__lshift+0x38>
 800bf04:	4638      	mov	r0, r7
 800bf06:	f7ff fde7 	bl	800bad8 <_Balloc>
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b948      	cbnz	r0, 800bf22 <__lshift+0x3e>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	4b28      	ldr	r3, [pc, #160]	@ (800bfb4 <__lshift+0xd0>)
 800bf12:	4829      	ldr	r0, [pc, #164]	@ (800bfb8 <__lshift+0xd4>)
 800bf14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf18:	f000 fd5a 	bl	800c9d0 <__assert_func>
 800bf1c:	3101      	adds	r1, #1
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	e7ee      	b.n	800bf00 <__lshift+0x1c>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f100 0114 	add.w	r1, r0, #20
 800bf28:	f100 0210 	add.w	r2, r0, #16
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	4553      	cmp	r3, sl
 800bf30:	db33      	blt.n	800bf9a <__lshift+0xb6>
 800bf32:	6920      	ldr	r0, [r4, #16]
 800bf34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf38:	f104 0314 	add.w	r3, r4, #20
 800bf3c:	f019 091f 	ands.w	r9, r9, #31
 800bf40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf48:	d02b      	beq.n	800bfa2 <__lshift+0xbe>
 800bf4a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf4e:	468a      	mov	sl, r1
 800bf50:	2200      	movs	r2, #0
 800bf52:	6818      	ldr	r0, [r3, #0]
 800bf54:	fa00 f009 	lsl.w	r0, r0, r9
 800bf58:	4310      	orrs	r0, r2
 800bf5a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf62:	459c      	cmp	ip, r3
 800bf64:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf68:	d8f3      	bhi.n	800bf52 <__lshift+0x6e>
 800bf6a:	ebac 0304 	sub.w	r3, ip, r4
 800bf6e:	3b15      	subs	r3, #21
 800bf70:	f023 0303 	bic.w	r3, r3, #3
 800bf74:	3304      	adds	r3, #4
 800bf76:	f104 0015 	add.w	r0, r4, #21
 800bf7a:	4560      	cmp	r0, ip
 800bf7c:	bf88      	it	hi
 800bf7e:	2304      	movhi	r3, #4
 800bf80:	50ca      	str	r2, [r1, r3]
 800bf82:	b10a      	cbz	r2, 800bf88 <__lshift+0xa4>
 800bf84:	f108 0602 	add.w	r6, r8, #2
 800bf88:	3e01      	subs	r6, #1
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	612e      	str	r6, [r5, #16]
 800bf8e:	4621      	mov	r1, r4
 800bf90:	f7ff fde2 	bl	800bb58 <_Bfree>
 800bf94:	4628      	mov	r0, r5
 800bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	e7c5      	b.n	800bf2e <__lshift+0x4a>
 800bfa2:	3904      	subs	r1, #4
 800bfa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfac:	459c      	cmp	ip, r3
 800bfae:	d8f9      	bhi.n	800bfa4 <__lshift+0xc0>
 800bfb0:	e7ea      	b.n	800bf88 <__lshift+0xa4>
 800bfb2:	bf00      	nop
 800bfb4:	0800cfc2 	.word	0x0800cfc2
 800bfb8:	0800cfd3 	.word	0x0800cfd3

0800bfbc <__mcmp>:
 800bfbc:	690a      	ldr	r2, [r1, #16]
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	6900      	ldr	r0, [r0, #16]
 800bfc2:	1a80      	subs	r0, r0, r2
 800bfc4:	b530      	push	{r4, r5, lr}
 800bfc6:	d10e      	bne.n	800bfe6 <__mcmp+0x2a>
 800bfc8:	3314      	adds	r3, #20
 800bfca:	3114      	adds	r1, #20
 800bfcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfdc:	4295      	cmp	r5, r2
 800bfde:	d003      	beq.n	800bfe8 <__mcmp+0x2c>
 800bfe0:	d205      	bcs.n	800bfee <__mcmp+0x32>
 800bfe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfe6:	bd30      	pop	{r4, r5, pc}
 800bfe8:	42a3      	cmp	r3, r4
 800bfea:	d3f3      	bcc.n	800bfd4 <__mcmp+0x18>
 800bfec:	e7fb      	b.n	800bfe6 <__mcmp+0x2a>
 800bfee:	2001      	movs	r0, #1
 800bff0:	e7f9      	b.n	800bfe6 <__mcmp+0x2a>
	...

0800bff4 <__mdiff>:
 800bff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff8:	4689      	mov	r9, r1
 800bffa:	4606      	mov	r6, r0
 800bffc:	4611      	mov	r1, r2
 800bffe:	4648      	mov	r0, r9
 800c000:	4614      	mov	r4, r2
 800c002:	f7ff ffdb 	bl	800bfbc <__mcmp>
 800c006:	1e05      	subs	r5, r0, #0
 800c008:	d112      	bne.n	800c030 <__mdiff+0x3c>
 800c00a:	4629      	mov	r1, r5
 800c00c:	4630      	mov	r0, r6
 800c00e:	f7ff fd63 	bl	800bad8 <_Balloc>
 800c012:	4602      	mov	r2, r0
 800c014:	b928      	cbnz	r0, 800c022 <__mdiff+0x2e>
 800c016:	4b3f      	ldr	r3, [pc, #252]	@ (800c114 <__mdiff+0x120>)
 800c018:	f240 2137 	movw	r1, #567	@ 0x237
 800c01c:	483e      	ldr	r0, [pc, #248]	@ (800c118 <__mdiff+0x124>)
 800c01e:	f000 fcd7 	bl	800c9d0 <__assert_func>
 800c022:	2301      	movs	r3, #1
 800c024:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c028:	4610      	mov	r0, r2
 800c02a:	b003      	add	sp, #12
 800c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c030:	bfbc      	itt	lt
 800c032:	464b      	movlt	r3, r9
 800c034:	46a1      	movlt	r9, r4
 800c036:	4630      	mov	r0, r6
 800c038:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c03c:	bfba      	itte	lt
 800c03e:	461c      	movlt	r4, r3
 800c040:	2501      	movlt	r5, #1
 800c042:	2500      	movge	r5, #0
 800c044:	f7ff fd48 	bl	800bad8 <_Balloc>
 800c048:	4602      	mov	r2, r0
 800c04a:	b918      	cbnz	r0, 800c054 <__mdiff+0x60>
 800c04c:	4b31      	ldr	r3, [pc, #196]	@ (800c114 <__mdiff+0x120>)
 800c04e:	f240 2145 	movw	r1, #581	@ 0x245
 800c052:	e7e3      	b.n	800c01c <__mdiff+0x28>
 800c054:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c058:	6926      	ldr	r6, [r4, #16]
 800c05a:	60c5      	str	r5, [r0, #12]
 800c05c:	f109 0310 	add.w	r3, r9, #16
 800c060:	f109 0514 	add.w	r5, r9, #20
 800c064:	f104 0e14 	add.w	lr, r4, #20
 800c068:	f100 0b14 	add.w	fp, r0, #20
 800c06c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c070:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c074:	9301      	str	r3, [sp, #4]
 800c076:	46d9      	mov	r9, fp
 800c078:	f04f 0c00 	mov.w	ip, #0
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c082:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	fa1f f38a 	uxth.w	r3, sl
 800c08c:	4619      	mov	r1, r3
 800c08e:	b283      	uxth	r3, r0
 800c090:	1acb      	subs	r3, r1, r3
 800c092:	0c00      	lsrs	r0, r0, #16
 800c094:	4463      	add	r3, ip
 800c096:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c09a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0a4:	4576      	cmp	r6, lr
 800c0a6:	f849 3b04 	str.w	r3, [r9], #4
 800c0aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0ae:	d8e5      	bhi.n	800c07c <__mdiff+0x88>
 800c0b0:	1b33      	subs	r3, r6, r4
 800c0b2:	3b15      	subs	r3, #21
 800c0b4:	f023 0303 	bic.w	r3, r3, #3
 800c0b8:	3415      	adds	r4, #21
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	42a6      	cmp	r6, r4
 800c0be:	bf38      	it	cc
 800c0c0:	2304      	movcc	r3, #4
 800c0c2:	441d      	add	r5, r3
 800c0c4:	445b      	add	r3, fp
 800c0c6:	461e      	mov	r6, r3
 800c0c8:	462c      	mov	r4, r5
 800c0ca:	4544      	cmp	r4, r8
 800c0cc:	d30e      	bcc.n	800c0ec <__mdiff+0xf8>
 800c0ce:	f108 0103 	add.w	r1, r8, #3
 800c0d2:	1b49      	subs	r1, r1, r5
 800c0d4:	f021 0103 	bic.w	r1, r1, #3
 800c0d8:	3d03      	subs	r5, #3
 800c0da:	45a8      	cmp	r8, r5
 800c0dc:	bf38      	it	cc
 800c0de:	2100      	movcc	r1, #0
 800c0e0:	440b      	add	r3, r1
 800c0e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0e6:	b191      	cbz	r1, 800c10e <__mdiff+0x11a>
 800c0e8:	6117      	str	r7, [r2, #16]
 800c0ea:	e79d      	b.n	800c028 <__mdiff+0x34>
 800c0ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0f0:	46e6      	mov	lr, ip
 800c0f2:	0c08      	lsrs	r0, r1, #16
 800c0f4:	fa1c fc81 	uxtah	ip, ip, r1
 800c0f8:	4471      	add	r1, lr
 800c0fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c0fe:	b289      	uxth	r1, r1
 800c100:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c104:	f846 1b04 	str.w	r1, [r6], #4
 800c108:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c10c:	e7dd      	b.n	800c0ca <__mdiff+0xd6>
 800c10e:	3f01      	subs	r7, #1
 800c110:	e7e7      	b.n	800c0e2 <__mdiff+0xee>
 800c112:	bf00      	nop
 800c114:	0800cfc2 	.word	0x0800cfc2
 800c118:	0800cfd3 	.word	0x0800cfd3

0800c11c <__d2b>:
 800c11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c120:	460f      	mov	r7, r1
 800c122:	2101      	movs	r1, #1
 800c124:	ec59 8b10 	vmov	r8, r9, d0
 800c128:	4616      	mov	r6, r2
 800c12a:	f7ff fcd5 	bl	800bad8 <_Balloc>
 800c12e:	4604      	mov	r4, r0
 800c130:	b930      	cbnz	r0, 800c140 <__d2b+0x24>
 800c132:	4602      	mov	r2, r0
 800c134:	4b23      	ldr	r3, [pc, #140]	@ (800c1c4 <__d2b+0xa8>)
 800c136:	4824      	ldr	r0, [pc, #144]	@ (800c1c8 <__d2b+0xac>)
 800c138:	f240 310f 	movw	r1, #783	@ 0x30f
 800c13c:	f000 fc48 	bl	800c9d0 <__assert_func>
 800c140:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c148:	b10d      	cbz	r5, 800c14e <__d2b+0x32>
 800c14a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	f1b8 0300 	subs.w	r3, r8, #0
 800c154:	d023      	beq.n	800c19e <__d2b+0x82>
 800c156:	4668      	mov	r0, sp
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	f7ff fd84 	bl	800bc66 <__lo0bits>
 800c15e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c162:	b1d0      	cbz	r0, 800c19a <__d2b+0x7e>
 800c164:	f1c0 0320 	rsb	r3, r0, #32
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	430b      	orrs	r3, r1
 800c16e:	40c2      	lsrs	r2, r0
 800c170:	6163      	str	r3, [r4, #20]
 800c172:	9201      	str	r2, [sp, #4]
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	61a3      	str	r3, [r4, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	bf0c      	ite	eq
 800c17c:	2201      	moveq	r2, #1
 800c17e:	2202      	movne	r2, #2
 800c180:	6122      	str	r2, [r4, #16]
 800c182:	b1a5      	cbz	r5, 800c1ae <__d2b+0x92>
 800c184:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c188:	4405      	add	r5, r0
 800c18a:	603d      	str	r5, [r7, #0]
 800c18c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c190:	6030      	str	r0, [r6, #0]
 800c192:	4620      	mov	r0, r4
 800c194:	b003      	add	sp, #12
 800c196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c19a:	6161      	str	r1, [r4, #20]
 800c19c:	e7ea      	b.n	800c174 <__d2b+0x58>
 800c19e:	a801      	add	r0, sp, #4
 800c1a0:	f7ff fd61 	bl	800bc66 <__lo0bits>
 800c1a4:	9b01      	ldr	r3, [sp, #4]
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	3020      	adds	r0, #32
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	e7e8      	b.n	800c180 <__d2b+0x64>
 800c1ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1b6:	6038      	str	r0, [r7, #0]
 800c1b8:	6918      	ldr	r0, [r3, #16]
 800c1ba:	f7ff fd35 	bl	800bc28 <__hi0bits>
 800c1be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1c2:	e7e5      	b.n	800c190 <__d2b+0x74>
 800c1c4:	0800cfc2 	.word	0x0800cfc2
 800c1c8:	0800cfd3 	.word	0x0800cfd3

0800c1cc <__ssputs_r>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	688e      	ldr	r6, [r1, #8]
 800c1d2:	461f      	mov	r7, r3
 800c1d4:	42be      	cmp	r6, r7
 800c1d6:	680b      	ldr	r3, [r1, #0]
 800c1d8:	4682      	mov	sl, r0
 800c1da:	460c      	mov	r4, r1
 800c1dc:	4690      	mov	r8, r2
 800c1de:	d82d      	bhi.n	800c23c <__ssputs_r+0x70>
 800c1e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1e8:	d026      	beq.n	800c238 <__ssputs_r+0x6c>
 800c1ea:	6965      	ldr	r5, [r4, #20]
 800c1ec:	6909      	ldr	r1, [r1, #16]
 800c1ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1f2:	eba3 0901 	sub.w	r9, r3, r1
 800c1f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1fa:	1c7b      	adds	r3, r7, #1
 800c1fc:	444b      	add	r3, r9
 800c1fe:	106d      	asrs	r5, r5, #1
 800c200:	429d      	cmp	r5, r3
 800c202:	bf38      	it	cc
 800c204:	461d      	movcc	r5, r3
 800c206:	0553      	lsls	r3, r2, #21
 800c208:	d527      	bpl.n	800c25a <__ssputs_r+0x8e>
 800c20a:	4629      	mov	r1, r5
 800c20c:	f7ff fbd8 	bl	800b9c0 <_malloc_r>
 800c210:	4606      	mov	r6, r0
 800c212:	b360      	cbz	r0, 800c26e <__ssputs_r+0xa2>
 800c214:	6921      	ldr	r1, [r4, #16]
 800c216:	464a      	mov	r2, r9
 800c218:	f000 fbcc 	bl	800c9b4 <memcpy>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c226:	81a3      	strh	r3, [r4, #12]
 800c228:	6126      	str	r6, [r4, #16]
 800c22a:	6165      	str	r5, [r4, #20]
 800c22c:	444e      	add	r6, r9
 800c22e:	eba5 0509 	sub.w	r5, r5, r9
 800c232:	6026      	str	r6, [r4, #0]
 800c234:	60a5      	str	r5, [r4, #8]
 800c236:	463e      	mov	r6, r7
 800c238:	42be      	cmp	r6, r7
 800c23a:	d900      	bls.n	800c23e <__ssputs_r+0x72>
 800c23c:	463e      	mov	r6, r7
 800c23e:	6820      	ldr	r0, [r4, #0]
 800c240:	4632      	mov	r2, r6
 800c242:	4641      	mov	r1, r8
 800c244:	f000 fb6a 	bl	800c91c <memmove>
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	1b9b      	subs	r3, r3, r6
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	4433      	add	r3, r6
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	2000      	movs	r0, #0
 800c256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25a:	462a      	mov	r2, r5
 800c25c:	f000 fbfc 	bl	800ca58 <_realloc_r>
 800c260:	4606      	mov	r6, r0
 800c262:	2800      	cmp	r0, #0
 800c264:	d1e0      	bne.n	800c228 <__ssputs_r+0x5c>
 800c266:	6921      	ldr	r1, [r4, #16]
 800c268:	4650      	mov	r0, sl
 800c26a:	f7ff fb35 	bl	800b8d8 <_free_r>
 800c26e:	230c      	movs	r3, #12
 800c270:	f8ca 3000 	str.w	r3, [sl]
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c280:	e7e9      	b.n	800c256 <__ssputs_r+0x8a>
	...

0800c284 <_svfiprintf_r>:
 800c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	4698      	mov	r8, r3
 800c28a:	898b      	ldrh	r3, [r1, #12]
 800c28c:	061b      	lsls	r3, r3, #24
 800c28e:	b09d      	sub	sp, #116	@ 0x74
 800c290:	4607      	mov	r7, r0
 800c292:	460d      	mov	r5, r1
 800c294:	4614      	mov	r4, r2
 800c296:	d510      	bpl.n	800c2ba <_svfiprintf_r+0x36>
 800c298:	690b      	ldr	r3, [r1, #16]
 800c29a:	b973      	cbnz	r3, 800c2ba <_svfiprintf_r+0x36>
 800c29c:	2140      	movs	r1, #64	@ 0x40
 800c29e:	f7ff fb8f 	bl	800b9c0 <_malloc_r>
 800c2a2:	6028      	str	r0, [r5, #0]
 800c2a4:	6128      	str	r0, [r5, #16]
 800c2a6:	b930      	cbnz	r0, 800c2b6 <_svfiprintf_r+0x32>
 800c2a8:	230c      	movs	r3, #12
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2b0:	b01d      	add	sp, #116	@ 0x74
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	2340      	movs	r3, #64	@ 0x40
 800c2b8:	616b      	str	r3, [r5, #20]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2be:	2320      	movs	r3, #32
 800c2c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2c8:	2330      	movs	r3, #48	@ 0x30
 800c2ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c468 <_svfiprintf_r+0x1e4>
 800c2ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2d2:	f04f 0901 	mov.w	r9, #1
 800c2d6:	4623      	mov	r3, r4
 800c2d8:	469a      	mov	sl, r3
 800c2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2de:	b10a      	cbz	r2, 800c2e4 <_svfiprintf_r+0x60>
 800c2e0:	2a25      	cmp	r2, #37	@ 0x25
 800c2e2:	d1f9      	bne.n	800c2d8 <_svfiprintf_r+0x54>
 800c2e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c2e8:	d00b      	beq.n	800c302 <_svfiprintf_r+0x7e>
 800c2ea:	465b      	mov	r3, fp
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f7ff ff6b 	bl	800c1cc <__ssputs_r>
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	f000 80a7 	beq.w	800c44a <_svfiprintf_r+0x1c6>
 800c2fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2fe:	445a      	add	r2, fp
 800c300:	9209      	str	r2, [sp, #36]	@ 0x24
 800c302:	f89a 3000 	ldrb.w	r3, [sl]
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 809f 	beq.w	800c44a <_svfiprintf_r+0x1c6>
 800c30c:	2300      	movs	r3, #0
 800c30e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c316:	f10a 0a01 	add.w	sl, sl, #1
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	9307      	str	r3, [sp, #28]
 800c31e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c322:	931a      	str	r3, [sp, #104]	@ 0x68
 800c324:	4654      	mov	r4, sl
 800c326:	2205      	movs	r2, #5
 800c328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c32c:	484e      	ldr	r0, [pc, #312]	@ (800c468 <_svfiprintf_r+0x1e4>)
 800c32e:	f7f3 ff57 	bl	80001e0 <memchr>
 800c332:	9a04      	ldr	r2, [sp, #16]
 800c334:	b9d8      	cbnz	r0, 800c36e <_svfiprintf_r+0xea>
 800c336:	06d0      	lsls	r0, r2, #27
 800c338:	bf44      	itt	mi
 800c33a:	2320      	movmi	r3, #32
 800c33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c340:	0711      	lsls	r1, r2, #28
 800c342:	bf44      	itt	mi
 800c344:	232b      	movmi	r3, #43	@ 0x2b
 800c346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c34a:	f89a 3000 	ldrb.w	r3, [sl]
 800c34e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c350:	d015      	beq.n	800c37e <_svfiprintf_r+0xfa>
 800c352:	9a07      	ldr	r2, [sp, #28]
 800c354:	4654      	mov	r4, sl
 800c356:	2000      	movs	r0, #0
 800c358:	f04f 0c0a 	mov.w	ip, #10
 800c35c:	4621      	mov	r1, r4
 800c35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c362:	3b30      	subs	r3, #48	@ 0x30
 800c364:	2b09      	cmp	r3, #9
 800c366:	d94b      	bls.n	800c400 <_svfiprintf_r+0x17c>
 800c368:	b1b0      	cbz	r0, 800c398 <_svfiprintf_r+0x114>
 800c36a:	9207      	str	r2, [sp, #28]
 800c36c:	e014      	b.n	800c398 <_svfiprintf_r+0x114>
 800c36e:	eba0 0308 	sub.w	r3, r0, r8
 800c372:	fa09 f303 	lsl.w	r3, r9, r3
 800c376:	4313      	orrs	r3, r2
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	46a2      	mov	sl, r4
 800c37c:	e7d2      	b.n	800c324 <_svfiprintf_r+0xa0>
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	1d19      	adds	r1, r3, #4
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	9103      	str	r1, [sp, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	bfbb      	ittet	lt
 800c38a:	425b      	neglt	r3, r3
 800c38c:	f042 0202 	orrlt.w	r2, r2, #2
 800c390:	9307      	strge	r3, [sp, #28]
 800c392:	9307      	strlt	r3, [sp, #28]
 800c394:	bfb8      	it	lt
 800c396:	9204      	strlt	r2, [sp, #16]
 800c398:	7823      	ldrb	r3, [r4, #0]
 800c39a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c39c:	d10a      	bne.n	800c3b4 <_svfiprintf_r+0x130>
 800c39e:	7863      	ldrb	r3, [r4, #1]
 800c3a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a2:	d132      	bne.n	800c40a <_svfiprintf_r+0x186>
 800c3a4:	9b03      	ldr	r3, [sp, #12]
 800c3a6:	1d1a      	adds	r2, r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	9203      	str	r2, [sp, #12]
 800c3ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3b0:	3402      	adds	r4, #2
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c478 <_svfiprintf_r+0x1f4>
 800c3b8:	7821      	ldrb	r1, [r4, #0]
 800c3ba:	2203      	movs	r2, #3
 800c3bc:	4650      	mov	r0, sl
 800c3be:	f7f3 ff0f 	bl	80001e0 <memchr>
 800c3c2:	b138      	cbz	r0, 800c3d4 <_svfiprintf_r+0x150>
 800c3c4:	9b04      	ldr	r3, [sp, #16]
 800c3c6:	eba0 000a 	sub.w	r0, r0, sl
 800c3ca:	2240      	movs	r2, #64	@ 0x40
 800c3cc:	4082      	lsls	r2, r0
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	3401      	adds	r4, #1
 800c3d2:	9304      	str	r3, [sp, #16]
 800c3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d8:	4824      	ldr	r0, [pc, #144]	@ (800c46c <_svfiprintf_r+0x1e8>)
 800c3da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3de:	2206      	movs	r2, #6
 800c3e0:	f7f3 fefe 	bl	80001e0 <memchr>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d036      	beq.n	800c456 <_svfiprintf_r+0x1d2>
 800c3e8:	4b21      	ldr	r3, [pc, #132]	@ (800c470 <_svfiprintf_r+0x1ec>)
 800c3ea:	bb1b      	cbnz	r3, 800c434 <_svfiprintf_r+0x1b0>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	3307      	adds	r3, #7
 800c3f0:	f023 0307 	bic.w	r3, r3, #7
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	9303      	str	r3, [sp, #12]
 800c3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fa:	4433      	add	r3, r6
 800c3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3fe:	e76a      	b.n	800c2d6 <_svfiprintf_r+0x52>
 800c400:	fb0c 3202 	mla	r2, ip, r2, r3
 800c404:	460c      	mov	r4, r1
 800c406:	2001      	movs	r0, #1
 800c408:	e7a8      	b.n	800c35c <_svfiprintf_r+0xd8>
 800c40a:	2300      	movs	r3, #0
 800c40c:	3401      	adds	r4, #1
 800c40e:	9305      	str	r3, [sp, #20]
 800c410:	4619      	mov	r1, r3
 800c412:	f04f 0c0a 	mov.w	ip, #10
 800c416:	4620      	mov	r0, r4
 800c418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c41c:	3a30      	subs	r2, #48	@ 0x30
 800c41e:	2a09      	cmp	r2, #9
 800c420:	d903      	bls.n	800c42a <_svfiprintf_r+0x1a6>
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0c6      	beq.n	800c3b4 <_svfiprintf_r+0x130>
 800c426:	9105      	str	r1, [sp, #20]
 800c428:	e7c4      	b.n	800c3b4 <_svfiprintf_r+0x130>
 800c42a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c42e:	4604      	mov	r4, r0
 800c430:	2301      	movs	r3, #1
 800c432:	e7f0      	b.n	800c416 <_svfiprintf_r+0x192>
 800c434:	ab03      	add	r3, sp, #12
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	462a      	mov	r2, r5
 800c43a:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <_svfiprintf_r+0x1f0>)
 800c43c:	a904      	add	r1, sp, #16
 800c43e:	4638      	mov	r0, r7
 800c440:	f7fd fd52 	bl	8009ee8 <_printf_float>
 800c444:	1c42      	adds	r2, r0, #1
 800c446:	4606      	mov	r6, r0
 800c448:	d1d6      	bne.n	800c3f8 <_svfiprintf_r+0x174>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	065b      	lsls	r3, r3, #25
 800c44e:	f53f af2d 	bmi.w	800c2ac <_svfiprintf_r+0x28>
 800c452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c454:	e72c      	b.n	800c2b0 <_svfiprintf_r+0x2c>
 800c456:	ab03      	add	r3, sp, #12
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	462a      	mov	r2, r5
 800c45c:	4b05      	ldr	r3, [pc, #20]	@ (800c474 <_svfiprintf_r+0x1f0>)
 800c45e:	a904      	add	r1, sp, #16
 800c460:	4638      	mov	r0, r7
 800c462:	f7fd ffd9 	bl	800a418 <_printf_i>
 800c466:	e7ed      	b.n	800c444 <_svfiprintf_r+0x1c0>
 800c468:	0800d02c 	.word	0x0800d02c
 800c46c:	0800d036 	.word	0x0800d036
 800c470:	08009ee9 	.word	0x08009ee9
 800c474:	0800c1cd 	.word	0x0800c1cd
 800c478:	0800d032 	.word	0x0800d032

0800c47c <__sfputc_r>:
 800c47c:	6893      	ldr	r3, [r2, #8]
 800c47e:	3b01      	subs	r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	b410      	push	{r4}
 800c484:	6093      	str	r3, [r2, #8]
 800c486:	da08      	bge.n	800c49a <__sfputc_r+0x1e>
 800c488:	6994      	ldr	r4, [r2, #24]
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	db01      	blt.n	800c492 <__sfputc_r+0x16>
 800c48e:	290a      	cmp	r1, #10
 800c490:	d103      	bne.n	800c49a <__sfputc_r+0x1e>
 800c492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c496:	f7fe bab1 	b.w	800a9fc <__swbuf_r>
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	1c58      	adds	r0, r3, #1
 800c49e:	6010      	str	r0, [r2, #0]
 800c4a0:	7019      	strb	r1, [r3, #0]
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <__sfputs_r>:
 800c4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	460f      	mov	r7, r1
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	18d5      	adds	r5, r2, r3
 800c4b4:	42ac      	cmp	r4, r5
 800c4b6:	d101      	bne.n	800c4bc <__sfputs_r+0x12>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e007      	b.n	800c4cc <__sfputs_r+0x22>
 800c4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c0:	463a      	mov	r2, r7
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7ff ffda 	bl	800c47c <__sfputc_r>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d1f3      	bne.n	800c4b4 <__sfputs_r+0xa>
 800c4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4d0 <_vfiprintf_r>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	b09d      	sub	sp, #116	@ 0x74
 800c4d8:	4614      	mov	r4, r2
 800c4da:	4698      	mov	r8, r3
 800c4dc:	4606      	mov	r6, r0
 800c4de:	b118      	cbz	r0, 800c4e8 <_vfiprintf_r+0x18>
 800c4e0:	6a03      	ldr	r3, [r0, #32]
 800c4e2:	b90b      	cbnz	r3, 800c4e8 <_vfiprintf_r+0x18>
 800c4e4:	f7fe f942 	bl	800a76c <__sinit>
 800c4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ea:	07d9      	lsls	r1, r3, #31
 800c4ec:	d405      	bmi.n	800c4fa <_vfiprintf_r+0x2a>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	059a      	lsls	r2, r3, #22
 800c4f2:	d402      	bmi.n	800c4fa <_vfiprintf_r+0x2a>
 800c4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4f6:	f7fe fb92 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800c4fa:	89ab      	ldrh	r3, [r5, #12]
 800c4fc:	071b      	lsls	r3, r3, #28
 800c4fe:	d501      	bpl.n	800c504 <_vfiprintf_r+0x34>
 800c500:	692b      	ldr	r3, [r5, #16]
 800c502:	b99b      	cbnz	r3, 800c52c <_vfiprintf_r+0x5c>
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f7fe fab6 	bl	800aa78 <__swsetup_r>
 800c50c:	b170      	cbz	r0, 800c52c <_vfiprintf_r+0x5c>
 800c50e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c510:	07dc      	lsls	r4, r3, #31
 800c512:	d504      	bpl.n	800c51e <_vfiprintf_r+0x4e>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c518:	b01d      	add	sp, #116	@ 0x74
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	0598      	lsls	r0, r3, #22
 800c522:	d4f7      	bmi.n	800c514 <_vfiprintf_r+0x44>
 800c524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c526:	f7fe fb7b 	bl	800ac20 <__retarget_lock_release_recursive>
 800c52a:	e7f3      	b.n	800c514 <_vfiprintf_r+0x44>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c530:	2320      	movs	r3, #32
 800c532:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c536:	f8cd 800c 	str.w	r8, [sp, #12]
 800c53a:	2330      	movs	r3, #48	@ 0x30
 800c53c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6ec <_vfiprintf_r+0x21c>
 800c540:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c544:	f04f 0901 	mov.w	r9, #1
 800c548:	4623      	mov	r3, r4
 800c54a:	469a      	mov	sl, r3
 800c54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c550:	b10a      	cbz	r2, 800c556 <_vfiprintf_r+0x86>
 800c552:	2a25      	cmp	r2, #37	@ 0x25
 800c554:	d1f9      	bne.n	800c54a <_vfiprintf_r+0x7a>
 800c556:	ebba 0b04 	subs.w	fp, sl, r4
 800c55a:	d00b      	beq.n	800c574 <_vfiprintf_r+0xa4>
 800c55c:	465b      	mov	r3, fp
 800c55e:	4622      	mov	r2, r4
 800c560:	4629      	mov	r1, r5
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ffa1 	bl	800c4aa <__sfputs_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	f000 80a7 	beq.w	800c6bc <_vfiprintf_r+0x1ec>
 800c56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c570:	445a      	add	r2, fp
 800c572:	9209      	str	r2, [sp, #36]	@ 0x24
 800c574:	f89a 3000 	ldrb.w	r3, [sl]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 809f 	beq.w	800c6bc <_vfiprintf_r+0x1ec>
 800c57e:	2300      	movs	r3, #0
 800c580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c588:	f10a 0a01 	add.w	sl, sl, #1
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	9307      	str	r3, [sp, #28]
 800c590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c594:	931a      	str	r3, [sp, #104]	@ 0x68
 800c596:	4654      	mov	r4, sl
 800c598:	2205      	movs	r2, #5
 800c59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59e:	4853      	ldr	r0, [pc, #332]	@ (800c6ec <_vfiprintf_r+0x21c>)
 800c5a0:	f7f3 fe1e 	bl	80001e0 <memchr>
 800c5a4:	9a04      	ldr	r2, [sp, #16]
 800c5a6:	b9d8      	cbnz	r0, 800c5e0 <_vfiprintf_r+0x110>
 800c5a8:	06d1      	lsls	r1, r2, #27
 800c5aa:	bf44      	itt	mi
 800c5ac:	2320      	movmi	r3, #32
 800c5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5b2:	0713      	lsls	r3, r2, #28
 800c5b4:	bf44      	itt	mi
 800c5b6:	232b      	movmi	r3, #43	@ 0x2b
 800c5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5c2:	d015      	beq.n	800c5f0 <_vfiprintf_r+0x120>
 800c5c4:	9a07      	ldr	r2, [sp, #28]
 800c5c6:	4654      	mov	r4, sl
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	f04f 0c0a 	mov.w	ip, #10
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d4:	3b30      	subs	r3, #48	@ 0x30
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d94b      	bls.n	800c672 <_vfiprintf_r+0x1a2>
 800c5da:	b1b0      	cbz	r0, 800c60a <_vfiprintf_r+0x13a>
 800c5dc:	9207      	str	r2, [sp, #28]
 800c5de:	e014      	b.n	800c60a <_vfiprintf_r+0x13a>
 800c5e0:	eba0 0308 	sub.w	r3, r0, r8
 800c5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	46a2      	mov	sl, r4
 800c5ee:	e7d2      	b.n	800c596 <_vfiprintf_r+0xc6>
 800c5f0:	9b03      	ldr	r3, [sp, #12]
 800c5f2:	1d19      	adds	r1, r3, #4
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	9103      	str	r1, [sp, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bfbb      	ittet	lt
 800c5fc:	425b      	neglt	r3, r3
 800c5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c602:	9307      	strge	r3, [sp, #28]
 800c604:	9307      	strlt	r3, [sp, #28]
 800c606:	bfb8      	it	lt
 800c608:	9204      	strlt	r2, [sp, #16]
 800c60a:	7823      	ldrb	r3, [r4, #0]
 800c60c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c60e:	d10a      	bne.n	800c626 <_vfiprintf_r+0x156>
 800c610:	7863      	ldrb	r3, [r4, #1]
 800c612:	2b2a      	cmp	r3, #42	@ 0x2a
 800c614:	d132      	bne.n	800c67c <_vfiprintf_r+0x1ac>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	1d1a      	adds	r2, r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	9203      	str	r2, [sp, #12]
 800c61e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c622:	3402      	adds	r4, #2
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6fc <_vfiprintf_r+0x22c>
 800c62a:	7821      	ldrb	r1, [r4, #0]
 800c62c:	2203      	movs	r2, #3
 800c62e:	4650      	mov	r0, sl
 800c630:	f7f3 fdd6 	bl	80001e0 <memchr>
 800c634:	b138      	cbz	r0, 800c646 <_vfiprintf_r+0x176>
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	eba0 000a 	sub.w	r0, r0, sl
 800c63c:	2240      	movs	r2, #64	@ 0x40
 800c63e:	4082      	lsls	r2, r0
 800c640:	4313      	orrs	r3, r2
 800c642:	3401      	adds	r4, #1
 800c644:	9304      	str	r3, [sp, #16]
 800c646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64a:	4829      	ldr	r0, [pc, #164]	@ (800c6f0 <_vfiprintf_r+0x220>)
 800c64c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c650:	2206      	movs	r2, #6
 800c652:	f7f3 fdc5 	bl	80001e0 <memchr>
 800c656:	2800      	cmp	r0, #0
 800c658:	d03f      	beq.n	800c6da <_vfiprintf_r+0x20a>
 800c65a:	4b26      	ldr	r3, [pc, #152]	@ (800c6f4 <_vfiprintf_r+0x224>)
 800c65c:	bb1b      	cbnz	r3, 800c6a6 <_vfiprintf_r+0x1d6>
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	3307      	adds	r3, #7
 800c662:	f023 0307 	bic.w	r3, r3, #7
 800c666:	3308      	adds	r3, #8
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66c:	443b      	add	r3, r7
 800c66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c670:	e76a      	b.n	800c548 <_vfiprintf_r+0x78>
 800c672:	fb0c 3202 	mla	r2, ip, r2, r3
 800c676:	460c      	mov	r4, r1
 800c678:	2001      	movs	r0, #1
 800c67a:	e7a8      	b.n	800c5ce <_vfiprintf_r+0xfe>
 800c67c:	2300      	movs	r3, #0
 800c67e:	3401      	adds	r4, #1
 800c680:	9305      	str	r3, [sp, #20]
 800c682:	4619      	mov	r1, r3
 800c684:	f04f 0c0a 	mov.w	ip, #10
 800c688:	4620      	mov	r0, r4
 800c68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c68e:	3a30      	subs	r2, #48	@ 0x30
 800c690:	2a09      	cmp	r2, #9
 800c692:	d903      	bls.n	800c69c <_vfiprintf_r+0x1cc>
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0c6      	beq.n	800c626 <_vfiprintf_r+0x156>
 800c698:	9105      	str	r1, [sp, #20]
 800c69a:	e7c4      	b.n	800c626 <_vfiprintf_r+0x156>
 800c69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7f0      	b.n	800c688 <_vfiprintf_r+0x1b8>
 800c6a6:	ab03      	add	r3, sp, #12
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	4b12      	ldr	r3, [pc, #72]	@ (800c6f8 <_vfiprintf_r+0x228>)
 800c6ae:	a904      	add	r1, sp, #16
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f7fd fc19 	bl	8009ee8 <_printf_float>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	1c78      	adds	r0, r7, #1
 800c6ba:	d1d6      	bne.n	800c66a <_vfiprintf_r+0x19a>
 800c6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6be:	07d9      	lsls	r1, r3, #31
 800c6c0:	d405      	bmi.n	800c6ce <_vfiprintf_r+0x1fe>
 800c6c2:	89ab      	ldrh	r3, [r5, #12]
 800c6c4:	059a      	lsls	r2, r3, #22
 800c6c6:	d402      	bmi.n	800c6ce <_vfiprintf_r+0x1fe>
 800c6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6ca:	f7fe faa9 	bl	800ac20 <__retarget_lock_release_recursive>
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	065b      	lsls	r3, r3, #25
 800c6d2:	f53f af1f 	bmi.w	800c514 <_vfiprintf_r+0x44>
 800c6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6d8:	e71e      	b.n	800c518 <_vfiprintf_r+0x48>
 800c6da:	ab03      	add	r3, sp, #12
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	462a      	mov	r2, r5
 800c6e0:	4b05      	ldr	r3, [pc, #20]	@ (800c6f8 <_vfiprintf_r+0x228>)
 800c6e2:	a904      	add	r1, sp, #16
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7fd fe97 	bl	800a418 <_printf_i>
 800c6ea:	e7e4      	b.n	800c6b6 <_vfiprintf_r+0x1e6>
 800c6ec:	0800d02c 	.word	0x0800d02c
 800c6f0:	0800d036 	.word	0x0800d036
 800c6f4:	08009ee9 	.word	0x08009ee9
 800c6f8:	0800c4ab 	.word	0x0800c4ab
 800c6fc:	0800d032 	.word	0x0800d032

0800c700 <__sflush_r>:
 800c700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c708:	0716      	lsls	r6, r2, #28
 800c70a:	4605      	mov	r5, r0
 800c70c:	460c      	mov	r4, r1
 800c70e:	d454      	bmi.n	800c7ba <__sflush_r+0xba>
 800c710:	684b      	ldr	r3, [r1, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	dc02      	bgt.n	800c71c <__sflush_r+0x1c>
 800c716:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dd48      	ble.n	800c7ae <__sflush_r+0xae>
 800c71c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c71e:	2e00      	cmp	r6, #0
 800c720:	d045      	beq.n	800c7ae <__sflush_r+0xae>
 800c722:	2300      	movs	r3, #0
 800c724:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c728:	682f      	ldr	r7, [r5, #0]
 800c72a:	6a21      	ldr	r1, [r4, #32]
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	d030      	beq.n	800c792 <__sflush_r+0x92>
 800c730:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	0759      	lsls	r1, r3, #29
 800c736:	d505      	bpl.n	800c744 <__sflush_r+0x44>
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	1ad2      	subs	r2, r2, r3
 800c73c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c73e:	b10b      	cbz	r3, 800c744 <__sflush_r+0x44>
 800c740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c742:	1ad2      	subs	r2, r2, r3
 800c744:	2300      	movs	r3, #0
 800c746:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c748:	6a21      	ldr	r1, [r4, #32]
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b0      	blx	r6
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	d106      	bne.n	800c762 <__sflush_r+0x62>
 800c754:	6829      	ldr	r1, [r5, #0]
 800c756:	291d      	cmp	r1, #29
 800c758:	d82b      	bhi.n	800c7b2 <__sflush_r+0xb2>
 800c75a:	4a2a      	ldr	r2, [pc, #168]	@ (800c804 <__sflush_r+0x104>)
 800c75c:	40ca      	lsrs	r2, r1
 800c75e:	07d6      	lsls	r6, r2, #31
 800c760:	d527      	bpl.n	800c7b2 <__sflush_r+0xb2>
 800c762:	2200      	movs	r2, #0
 800c764:	6062      	str	r2, [r4, #4]
 800c766:	04d9      	lsls	r1, r3, #19
 800c768:	6922      	ldr	r2, [r4, #16]
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	d504      	bpl.n	800c778 <__sflush_r+0x78>
 800c76e:	1c42      	adds	r2, r0, #1
 800c770:	d101      	bne.n	800c776 <__sflush_r+0x76>
 800c772:	682b      	ldr	r3, [r5, #0]
 800c774:	b903      	cbnz	r3, 800c778 <__sflush_r+0x78>
 800c776:	6560      	str	r0, [r4, #84]	@ 0x54
 800c778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c77a:	602f      	str	r7, [r5, #0]
 800c77c:	b1b9      	cbz	r1, 800c7ae <__sflush_r+0xae>
 800c77e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c782:	4299      	cmp	r1, r3
 800c784:	d002      	beq.n	800c78c <__sflush_r+0x8c>
 800c786:	4628      	mov	r0, r5
 800c788:	f7ff f8a6 	bl	800b8d8 <_free_r>
 800c78c:	2300      	movs	r3, #0
 800c78e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c790:	e00d      	b.n	800c7ae <__sflush_r+0xae>
 800c792:	2301      	movs	r3, #1
 800c794:	4628      	mov	r0, r5
 800c796:	47b0      	blx	r6
 800c798:	4602      	mov	r2, r0
 800c79a:	1c50      	adds	r0, r2, #1
 800c79c:	d1c9      	bne.n	800c732 <__sflush_r+0x32>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d0c6      	beq.n	800c732 <__sflush_r+0x32>
 800c7a4:	2b1d      	cmp	r3, #29
 800c7a6:	d001      	beq.n	800c7ac <__sflush_r+0xac>
 800c7a8:	2b16      	cmp	r3, #22
 800c7aa:	d11e      	bne.n	800c7ea <__sflush_r+0xea>
 800c7ac:	602f      	str	r7, [r5, #0]
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	e022      	b.n	800c7f8 <__sflush_r+0xf8>
 800c7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b6:	b21b      	sxth	r3, r3
 800c7b8:	e01b      	b.n	800c7f2 <__sflush_r+0xf2>
 800c7ba:	690f      	ldr	r7, [r1, #16]
 800c7bc:	2f00      	cmp	r7, #0
 800c7be:	d0f6      	beq.n	800c7ae <__sflush_r+0xae>
 800c7c0:	0793      	lsls	r3, r2, #30
 800c7c2:	680e      	ldr	r6, [r1, #0]
 800c7c4:	bf08      	it	eq
 800c7c6:	694b      	ldreq	r3, [r1, #20]
 800c7c8:	600f      	str	r7, [r1, #0]
 800c7ca:	bf18      	it	ne
 800c7cc:	2300      	movne	r3, #0
 800c7ce:	eba6 0807 	sub.w	r8, r6, r7
 800c7d2:	608b      	str	r3, [r1, #8]
 800c7d4:	f1b8 0f00 	cmp.w	r8, #0
 800c7d8:	dde9      	ble.n	800c7ae <__sflush_r+0xae>
 800c7da:	6a21      	ldr	r1, [r4, #32]
 800c7dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7de:	4643      	mov	r3, r8
 800c7e0:	463a      	mov	r2, r7
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b0      	blx	r6
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	dc08      	bgt.n	800c7fc <__sflush_r+0xfc>
 800c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7fc:	4407      	add	r7, r0
 800c7fe:	eba8 0800 	sub.w	r8, r8, r0
 800c802:	e7e7      	b.n	800c7d4 <__sflush_r+0xd4>
 800c804:	20400001 	.word	0x20400001

0800c808 <_fflush_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	690b      	ldr	r3, [r1, #16]
 800c80c:	4605      	mov	r5, r0
 800c80e:	460c      	mov	r4, r1
 800c810:	b913      	cbnz	r3, 800c818 <_fflush_r+0x10>
 800c812:	2500      	movs	r5, #0
 800c814:	4628      	mov	r0, r5
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	b118      	cbz	r0, 800c822 <_fflush_r+0x1a>
 800c81a:	6a03      	ldr	r3, [r0, #32]
 800c81c:	b90b      	cbnz	r3, 800c822 <_fflush_r+0x1a>
 800c81e:	f7fd ffa5 	bl	800a76c <__sinit>
 800c822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0f3      	beq.n	800c812 <_fflush_r+0xa>
 800c82a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c82c:	07d0      	lsls	r0, r2, #31
 800c82e:	d404      	bmi.n	800c83a <_fflush_r+0x32>
 800c830:	0599      	lsls	r1, r3, #22
 800c832:	d402      	bmi.n	800c83a <_fflush_r+0x32>
 800c834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c836:	f7fe f9f2 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800c83a:	4628      	mov	r0, r5
 800c83c:	4621      	mov	r1, r4
 800c83e:	f7ff ff5f 	bl	800c700 <__sflush_r>
 800c842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c844:	07da      	lsls	r2, r3, #31
 800c846:	4605      	mov	r5, r0
 800c848:	d4e4      	bmi.n	800c814 <_fflush_r+0xc>
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	059b      	lsls	r3, r3, #22
 800c84e:	d4e1      	bmi.n	800c814 <_fflush_r+0xc>
 800c850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c852:	f7fe f9e5 	bl	800ac20 <__retarget_lock_release_recursive>
 800c856:	e7dd      	b.n	800c814 <_fflush_r+0xc>

0800c858 <__swhatbuf_r>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	460c      	mov	r4, r1
 800c85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c860:	2900      	cmp	r1, #0
 800c862:	b096      	sub	sp, #88	@ 0x58
 800c864:	4615      	mov	r5, r2
 800c866:	461e      	mov	r6, r3
 800c868:	da0d      	bge.n	800c886 <__swhatbuf_r+0x2e>
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c870:	f04f 0100 	mov.w	r1, #0
 800c874:	bf14      	ite	ne
 800c876:	2340      	movne	r3, #64	@ 0x40
 800c878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c87c:	2000      	movs	r0, #0
 800c87e:	6031      	str	r1, [r6, #0]
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	b016      	add	sp, #88	@ 0x58
 800c884:	bd70      	pop	{r4, r5, r6, pc}
 800c886:	466a      	mov	r2, sp
 800c888:	f000 f862 	bl	800c950 <_fstat_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	dbec      	blt.n	800c86a <__swhatbuf_r+0x12>
 800c890:	9901      	ldr	r1, [sp, #4]
 800c892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c89a:	4259      	negs	r1, r3
 800c89c:	4159      	adcs	r1, r3
 800c89e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8a2:	e7eb      	b.n	800c87c <__swhatbuf_r+0x24>

0800c8a4 <__smakebuf_r>:
 800c8a4:	898b      	ldrh	r3, [r1, #12]
 800c8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8a8:	079d      	lsls	r5, r3, #30
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	d507      	bpl.n	800c8c0 <__smakebuf_r+0x1c>
 800c8b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	6123      	str	r3, [r4, #16]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	6163      	str	r3, [r4, #20]
 800c8bc:	b003      	add	sp, #12
 800c8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c0:	ab01      	add	r3, sp, #4
 800c8c2:	466a      	mov	r2, sp
 800c8c4:	f7ff ffc8 	bl	800c858 <__swhatbuf_r>
 800c8c8:	9f00      	ldr	r7, [sp, #0]
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff f876 	bl	800b9c0 <_malloc_r>
 800c8d4:	b948      	cbnz	r0, 800c8ea <__smakebuf_r+0x46>
 800c8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8da:	059a      	lsls	r2, r3, #22
 800c8dc:	d4ee      	bmi.n	800c8bc <__smakebuf_r+0x18>
 800c8de:	f023 0303 	bic.w	r3, r3, #3
 800c8e2:	f043 0302 	orr.w	r3, r3, #2
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	e7e2      	b.n	800c8b0 <__smakebuf_r+0xc>
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	6020      	str	r0, [r4, #0]
 800c8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8fa:	b15b      	cbz	r3, 800c914 <__smakebuf_r+0x70>
 800c8fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c900:	4630      	mov	r0, r6
 800c902:	f000 f837 	bl	800c974 <_isatty_r>
 800c906:	b128      	cbz	r0, 800c914 <__smakebuf_r+0x70>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	f023 0303 	bic.w	r3, r3, #3
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	431d      	orrs	r5, r3
 800c918:	81a5      	strh	r5, [r4, #12]
 800c91a:	e7cf      	b.n	800c8bc <__smakebuf_r+0x18>

0800c91c <memmove>:
 800c91c:	4288      	cmp	r0, r1
 800c91e:	b510      	push	{r4, lr}
 800c920:	eb01 0402 	add.w	r4, r1, r2
 800c924:	d902      	bls.n	800c92c <memmove+0x10>
 800c926:	4284      	cmp	r4, r0
 800c928:	4623      	mov	r3, r4
 800c92a:	d807      	bhi.n	800c93c <memmove+0x20>
 800c92c:	1e43      	subs	r3, r0, #1
 800c92e:	42a1      	cmp	r1, r4
 800c930:	d008      	beq.n	800c944 <memmove+0x28>
 800c932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c93a:	e7f8      	b.n	800c92e <memmove+0x12>
 800c93c:	4402      	add	r2, r0
 800c93e:	4601      	mov	r1, r0
 800c940:	428a      	cmp	r2, r1
 800c942:	d100      	bne.n	800c946 <memmove+0x2a>
 800c944:	bd10      	pop	{r4, pc}
 800c946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c94a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c94e:	e7f7      	b.n	800c940 <memmove+0x24>

0800c950 <_fstat_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	@ (800c970 <_fstat_r+0x20>)
 800c954:	2300      	movs	r3, #0
 800c956:	4604      	mov	r4, r0
 800c958:	4608      	mov	r0, r1
 800c95a:	4611      	mov	r1, r2
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	f7fc fcdc 	bl	800931a <_fstat>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d102      	bne.n	800c96c <_fstat_r+0x1c>
 800c966:	682b      	ldr	r3, [r5, #0]
 800c968:	b103      	cbz	r3, 800c96c <_fstat_r+0x1c>
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	bd38      	pop	{r3, r4, r5, pc}
 800c96e:	bf00      	nop
 800c970:	200005e4 	.word	0x200005e4

0800c974 <_isatty_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4d06      	ldr	r5, [pc, #24]	@ (800c990 <_isatty_r+0x1c>)
 800c978:	2300      	movs	r3, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	4608      	mov	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7fc fe30 	bl	80095e4 <_isatty>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d102      	bne.n	800c98e <_isatty_r+0x1a>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	b103      	cbz	r3, 800c98e <_isatty_r+0x1a>
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	bd38      	pop	{r3, r4, r5, pc}
 800c990:	200005e4 	.word	0x200005e4

0800c994 <_sbrk_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d06      	ldr	r5, [pc, #24]	@ (800c9b0 <_sbrk_r+0x1c>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	602b      	str	r3, [r5, #0]
 800c9a0:	f7f5 f9d4 	bl	8001d4c <_sbrk>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_sbrk_r+0x1a>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_sbrk_r+0x1a>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	200005e4 	.word	0x200005e4

0800c9b4 <memcpy>:
 800c9b4:	440a      	add	r2, r1
 800c9b6:	4291      	cmp	r1, r2
 800c9b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c9bc:	d100      	bne.n	800c9c0 <memcpy+0xc>
 800c9be:	4770      	bx	lr
 800c9c0:	b510      	push	{r4, lr}
 800c9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ca:	4291      	cmp	r1, r2
 800c9cc:	d1f9      	bne.n	800c9c2 <memcpy+0xe>
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <__assert_func>:
 800c9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9d2:	4614      	mov	r4, r2
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	4b09      	ldr	r3, [pc, #36]	@ (800c9fc <__assert_func+0x2c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4605      	mov	r5, r0
 800c9dc:	68d8      	ldr	r0, [r3, #12]
 800c9de:	b14c      	cbz	r4, 800c9f4 <__assert_func+0x24>
 800c9e0:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <__assert_func+0x30>)
 800c9e2:	9100      	str	r1, [sp, #0]
 800c9e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9e8:	4906      	ldr	r1, [pc, #24]	@ (800ca04 <__assert_func+0x34>)
 800c9ea:	462b      	mov	r3, r5
 800c9ec:	f000 f870 	bl	800cad0 <fiprintf>
 800c9f0:	f000 f880 	bl	800caf4 <abort>
 800c9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ca08 <__assert_func+0x38>)
 800c9f6:	461c      	mov	r4, r3
 800c9f8:	e7f3      	b.n	800c9e2 <__assert_func+0x12>
 800c9fa:	bf00      	nop
 800c9fc:	20000038 	.word	0x20000038
 800ca00:	0800d047 	.word	0x0800d047
 800ca04:	0800d054 	.word	0x0800d054
 800ca08:	0800d082 	.word	0x0800d082

0800ca0c <_calloc_r>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ca12:	b934      	cbnz	r4, 800ca22 <_calloc_r+0x16>
 800ca14:	4629      	mov	r1, r5
 800ca16:	f7fe ffd3 	bl	800b9c0 <_malloc_r>
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	b928      	cbnz	r0, 800ca2a <_calloc_r+0x1e>
 800ca1e:	4630      	mov	r0, r6
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	220c      	movs	r2, #12
 800ca24:	6002      	str	r2, [r0, #0]
 800ca26:	2600      	movs	r6, #0
 800ca28:	e7f9      	b.n	800ca1e <_calloc_r+0x12>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7fe f879 	bl	800ab24 <memset>
 800ca32:	e7f4      	b.n	800ca1e <_calloc_r+0x12>

0800ca34 <__ascii_mbtowc>:
 800ca34:	b082      	sub	sp, #8
 800ca36:	b901      	cbnz	r1, 800ca3a <__ascii_mbtowc+0x6>
 800ca38:	a901      	add	r1, sp, #4
 800ca3a:	b142      	cbz	r2, 800ca4e <__ascii_mbtowc+0x1a>
 800ca3c:	b14b      	cbz	r3, 800ca52 <__ascii_mbtowc+0x1e>
 800ca3e:	7813      	ldrb	r3, [r2, #0]
 800ca40:	600b      	str	r3, [r1, #0]
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	1e10      	subs	r0, r2, #0
 800ca46:	bf18      	it	ne
 800ca48:	2001      	movne	r0, #1
 800ca4a:	b002      	add	sp, #8
 800ca4c:	4770      	bx	lr
 800ca4e:	4610      	mov	r0, r2
 800ca50:	e7fb      	b.n	800ca4a <__ascii_mbtowc+0x16>
 800ca52:	f06f 0001 	mvn.w	r0, #1
 800ca56:	e7f8      	b.n	800ca4a <__ascii_mbtowc+0x16>

0800ca58 <_realloc_r>:
 800ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5c:	4607      	mov	r7, r0
 800ca5e:	4614      	mov	r4, r2
 800ca60:	460d      	mov	r5, r1
 800ca62:	b921      	cbnz	r1, 800ca6e <_realloc_r+0x16>
 800ca64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca68:	4611      	mov	r1, r2
 800ca6a:	f7fe bfa9 	b.w	800b9c0 <_malloc_r>
 800ca6e:	b92a      	cbnz	r2, 800ca7c <_realloc_r+0x24>
 800ca70:	f7fe ff32 	bl	800b8d8 <_free_r>
 800ca74:	4625      	mov	r5, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7c:	f000 f841 	bl	800cb02 <_malloc_usable_size_r>
 800ca80:	4284      	cmp	r4, r0
 800ca82:	4606      	mov	r6, r0
 800ca84:	d802      	bhi.n	800ca8c <_realloc_r+0x34>
 800ca86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca8a:	d8f4      	bhi.n	800ca76 <_realloc_r+0x1e>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f7fe ff96 	bl	800b9c0 <_malloc_r>
 800ca94:	4680      	mov	r8, r0
 800ca96:	b908      	cbnz	r0, 800ca9c <_realloc_r+0x44>
 800ca98:	4645      	mov	r5, r8
 800ca9a:	e7ec      	b.n	800ca76 <_realloc_r+0x1e>
 800ca9c:	42b4      	cmp	r4, r6
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4629      	mov	r1, r5
 800caa2:	bf28      	it	cs
 800caa4:	4632      	movcs	r2, r6
 800caa6:	f7ff ff85 	bl	800c9b4 <memcpy>
 800caaa:	4629      	mov	r1, r5
 800caac:	4638      	mov	r0, r7
 800caae:	f7fe ff13 	bl	800b8d8 <_free_r>
 800cab2:	e7f1      	b.n	800ca98 <_realloc_r+0x40>

0800cab4 <__ascii_wctomb>:
 800cab4:	4603      	mov	r3, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	b141      	cbz	r1, 800cacc <__ascii_wctomb+0x18>
 800caba:	2aff      	cmp	r2, #255	@ 0xff
 800cabc:	d904      	bls.n	800cac8 <__ascii_wctomb+0x14>
 800cabe:	228a      	movs	r2, #138	@ 0x8a
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cac6:	4770      	bx	lr
 800cac8:	700a      	strb	r2, [r1, #0]
 800caca:	2001      	movs	r0, #1
 800cacc:	4770      	bx	lr
	...

0800cad0 <fiprintf>:
 800cad0:	b40e      	push	{r1, r2, r3}
 800cad2:	b503      	push	{r0, r1, lr}
 800cad4:	4601      	mov	r1, r0
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	4805      	ldr	r0, [pc, #20]	@ (800caf0 <fiprintf+0x20>)
 800cada:	f853 2b04 	ldr.w	r2, [r3], #4
 800cade:	6800      	ldr	r0, [r0, #0]
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	f7ff fcf5 	bl	800c4d0 <_vfiprintf_r>
 800cae6:	b002      	add	sp, #8
 800cae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800caec:	b003      	add	sp, #12
 800caee:	4770      	bx	lr
 800caf0:	20000038 	.word	0x20000038

0800caf4 <abort>:
 800caf4:	b508      	push	{r3, lr}
 800caf6:	2006      	movs	r0, #6
 800caf8:	f000 f834 	bl	800cb64 <raise>
 800cafc:	2001      	movs	r0, #1
 800cafe:	f000 f855 	bl	800cbac <_exit>

0800cb02 <_malloc_usable_size_r>:
 800cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb06:	1f18      	subs	r0, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbc      	itt	lt
 800cb0c:	580b      	ldrlt	r3, [r1, r0]
 800cb0e:	18c0      	addlt	r0, r0, r3
 800cb10:	4770      	bx	lr

0800cb12 <_raise_r>:
 800cb12:	291f      	cmp	r1, #31
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4605      	mov	r5, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	d904      	bls.n	800cb26 <_raise_r+0x14>
 800cb1c:	2316      	movs	r3, #22
 800cb1e:	6003      	str	r3, [r0, #0]
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb28:	b112      	cbz	r2, 800cb30 <_raise_r+0x1e>
 800cb2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb2e:	b94b      	cbnz	r3, 800cb44 <_raise_r+0x32>
 800cb30:	4628      	mov	r0, r5
 800cb32:	f000 f831 	bl	800cb98 <_getpid_r>
 800cb36:	4622      	mov	r2, r4
 800cb38:	4601      	mov	r1, r0
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb40:	f000 b818 	b.w	800cb74 <_kill_r>
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d00a      	beq.n	800cb5e <_raise_r+0x4c>
 800cb48:	1c59      	adds	r1, r3, #1
 800cb4a:	d103      	bne.n	800cb54 <_raise_r+0x42>
 800cb4c:	2316      	movs	r3, #22
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	2001      	movs	r0, #1
 800cb52:	e7e7      	b.n	800cb24 <_raise_r+0x12>
 800cb54:	2100      	movs	r1, #0
 800cb56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	4798      	blx	r3
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e7e0      	b.n	800cb24 <_raise_r+0x12>
	...

0800cb64 <raise>:
 800cb64:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <raise+0xc>)
 800cb66:	4601      	mov	r1, r0
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	f7ff bfd2 	b.w	800cb12 <_raise_r>
 800cb6e:	bf00      	nop
 800cb70:	20000038 	.word	0x20000038

0800cb74 <_kill_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d07      	ldr	r5, [pc, #28]	@ (800cb94 <_kill_r+0x20>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f000 f80b 	bl	800cb9c <_kill>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_kill_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_kill_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	200005e4 	.word	0x200005e4

0800cb98 <_getpid_r>:
 800cb98:	f7fc bb9c 	b.w	80092d4 <_getpid>

0800cb9c <_kill>:
 800cb9c:	4b02      	ldr	r3, [pc, #8]	@ (800cba8 <_kill+0xc>)
 800cb9e:	2258      	movs	r2, #88	@ 0x58
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cba6:	4770      	bx	lr
 800cba8:	200005e4 	.word	0x200005e4

0800cbac <_exit>:
 800cbac:	e7fe      	b.n	800cbac <_exit>
	...

0800cbb0 <_init>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr

0800cbbc <_fini>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr
