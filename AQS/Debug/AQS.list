
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006f20  08006f20  00007f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800733c  0800733c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007344  08007344  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007344  08007344  00008344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800734c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  08007520  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007520  00009480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000844b  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001805  00000000  00000000  0001164f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00012e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000654  00000000  00000000  000136a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170d6  00000000  00000000  00013cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7aa  00000000  00000000  0002adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092487  00000000  00000000  00035574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c79fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000c7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cb2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f08 	.word	0x08006f08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006f08 	.word	0x08006f08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f001 fc8d 	bl	8002850 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000238 	.word	0x20000238

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	214e      	movs	r1, #78	@ 0x4e
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f001 fc5d 	bl	8002850 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000238 	.word	0x20000238

08000fa4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fa8:	2032      	movs	r0, #50	@ 0x32
 8000faa:	f000 fc73 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fae:	2030      	movs	r0, #48	@ 0x30
 8000fb0:	f7ff ff98 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f000 fc6d 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fba:	2030      	movs	r0, #48	@ 0x30
 8000fbc:	f7ff ff92 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f000 fc67 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc6:	2030      	movs	r0, #48	@ 0x30
 8000fc8:	f7ff ff8c 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fc61 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f7ff ff86 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f000 fc5b 	bl	8001894 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f7ff ff80 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fc55 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff7a 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fc4f 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff74 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fc49 	bl	8001894 <HAL_Delay>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fc46 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001008:	2006      	movs	r0, #6
 800100a:	f7ff ff6b 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fc40 	bl	8001894 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001014:	200c      	movs	r0, #12
 8001016:	f7ff ff65 	bl	8000ee4 <lcd_send_cmd>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001026:	e006      	b.n	8001036 <lcd_send_string+0x18>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff87 	bl	8000f44 <lcd_send_data>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f4      	bne.n	8001028 <lcd_send_string+0xa>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Read_MQ135>:
//extern void initialise_monitor_handles(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_MQ135() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001052:	480b      	ldr	r0, [pc, #44]	@ (8001080 <Read_MQ135+0x38>)
 8001054:	f000 fc86 	bl	8001964 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001058:	210a      	movs	r1, #10
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Read_MQ135+0x38>)
 800105c:	f000 fd69 	bl	8001b32 <HAL_ADC_PollForConversion>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Read_MQ135+0x38>)
 8001068:	f000 fdee 	bl	8001c48 <HAL_ADC_GetValue>
 800106c:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <Read_MQ135+0x38>)
 8001070:	f000 fd2c 	bl	8001acc <HAL_ADC_Stop>
    return adc_value;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f0 	.word	0x200001f0

08001084 <update_measurement>:

void update_measurement(MQ135_Data *data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    data->voltage = (Read_MQ135() * 2.97f) / 4095.0f;	// obliczenie napięcia 2.97 V VrefADC - voltomierz
 800108c:	f7ff ffdc 	bl	8001048 <Read_MQ135>
 8001090:	ee07 0a90 	vmov	s15, r0
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800117c <update_measurement+0xf8>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001180 <update_measurement+0xfc>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a00 	vstr	s15, [r3]
    data->Rs = ((5.0f - data->voltage) / data->voltage) * 10.0f;  // R_load = 10 kΩ - zmierzone omomierzem, 5V - Vcc
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edc3 7a01 	vstr	s15, [r3, #4]
    data->ppm = 116.602f * powf((data->Rs / R0), -2.769f);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001184 <update_measurement+0x100>
 80010de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e2:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001188 <update_measurement+0x104>
 80010e6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ea:	f002 fcd5 	bl	8003a98 <powf>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800118c <update_measurement+0x108>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edc3 7a02 	vstr	s15, [r3, #8]

    // ograniczenie GCI do 20000
    if (data->ppm > 20000) data->ppm = 20000;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a02 	vldr	s15, [r3, #8]
 8001106:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001190 <update_measurement+0x10c>
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd02      	ble.n	800111a <update_measurement+0x96>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <update_measurement+0x110>)
 8001118:	609a      	str	r2, [r3, #8]

    // klasyfikacja jakosci powietrza
    if (data->ppm < 700) data->air_quality_level = 0;       // :D Great
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001198 <update_measurement+0x114>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d503      	bpl.n	8001136 <update_measurement+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	731a      	strb	r2, [r3, #12]
 *
 * WARSZAWA:
 * w Rivierze:
 * na dworze:
 * */
}
 8001134:	e01e      	b.n	8001174 <update_measurement+0xf0>
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a02 	vldr	s15, [r3, #8]
 800113c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800119c <update_measurement+0x118>
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d503      	bpl.n	8001152 <update_measurement+0xce>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	731a      	strb	r2, [r3, #12]
}
 8001150:	e010      	b.n	8001174 <update_measurement+0xf0>
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a02 	vldr	s15, [r3, #8]
 8001158:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011a0 <update_measurement+0x11c>
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d503      	bpl.n	800116e <update_measurement+0xea>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	731a      	strb	r2, [r3, #12]
}
 800116c:	e002      	b.n	8001174 <update_measurement+0xf0>
    else data->air_quality_level = 3;                       // :(	Bad
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	731a      	strb	r2, [r3, #12]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	403e147b 	.word	0x403e147b
 8001180:	457ff000 	.word	0x457ff000
 8001184:	4285051f 	.word	0x4285051f
 8001188:	c031374c 	.word	0xc031374c
 800118c:	42e93439 	.word	0x42e93439
 8001190:	469c4000 	.word	0x469c4000
 8001194:	469c4000 	.word	0x469c4000
 8001198:	442f0000 	.word	0x442f0000
 800119c:	44fa0000 	.word	0x44fa0000
 80011a0:	459c4000 	.word	0x459c4000

080011a4 <lcd_printf>:
            printf("Found device at 0x%02X\r\n", addr << 1);
        }
    }
}

void lcd_printf(const char *fmt, ...) {
 80011a4:	b40f      	push	{r0, r1, r2, r3}
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b092      	sub	sp, #72	@ 0x48
 80011aa:	af00      	add	r7, sp, #0
    char buffer[64]; // zwiększ jeśli masz długie ciągi znakow
    va_list args;
    va_start(args, fmt);
 80011ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011b2:	f107 0008 	add.w	r0, r7, #8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	f003 fdbc 	bl	8004d38 <vsniprintf>
    va_end(args);
    lcd_send_string(buffer);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff2a 	bl	800101e <lcd_send_string>
}
 80011ca:	bf00      	nop
 80011cc:	3748      	adds	r7, #72	@ 0x48
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fae7 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */
  // initialise_monitor_handles();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f83d 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 f925 	bl	8001434 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011ea:	f000 f8a3 	bl	8001334 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011ee:	f000 f8f3 	bl	80013d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja struktury
  MQ135_Data data;
  // inicjalizacja ekranu
  lcd_init();
 80011f2:	f7ff fed7 	bl	8000fa4 <lcd_init>

  lcd_send_cmd (0x80|0x00);
 80011f6:	2080      	movs	r0, #128	@ 0x80
 80011f8:	f7ff fe74 	bl	8000ee4 <lcd_send_cmd>
  lcd_send_string("HELLO WORLD");
 80011fc:	4814      	ldr	r0, [pc, #80]	@ (8001250 <main+0x78>)
 80011fe:	f7ff ff0e 	bl	800101e <lcd_send_string>

  /* kod do kalibaracji czujnika*/
//  float V0 = (Read_MQ135() * 2.97f) / 4095.0f; //2.97 V VrefADC - voltomierz
//  float R0 = ((5.0 - V0) / V0) * 10.0;  // Zakładając R_load = 10 kΩ - kalibracja R0, Vcc = 5V
//  printf("R0 = %.2f, V0 = %.2f \n", R0, V0);
  char msg[] = "Hello from STM32!\r\n";
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <main+0x7c>)
 8001204:	1d3c      	adds	r4, r7, #4
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	6023      	str	r3, [r4, #0]
  while (1)
  {

	  //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  update_measurement(&data);
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff35 	bl	8001084 <update_measurement>
	  lcd_send_cmd (0x80|0x00);
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	f7ff fe62 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("PPM: %.2f ", data.ppm);
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	480a      	ldr	r0, [pc, #40]	@ (8001258 <main+0x80>)
 800122e:	f7ff ffb9 	bl	80011a4 <lcd_printf>

	  lcd_send_cmd(0x80 | 0x40);  // linia 2, kol
 8001232:	20c0      	movs	r0, #192	@ 0xc0
 8001234:	f7ff fe56 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("Air Quality: %d ", data.air_quality_level);
 8001238:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	@ (800125c <main+0x84>)
 8001240:	f7ff ffb0 	bl	80011a4 <lcd_printf>

      HAL_Delay(1000);
 8001244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001248:	f000 fb24 	bl	8001894 <HAL_Delay>
	  update_measurement(&data);
 800124c:	bf00      	nop
 800124e:	e7df      	b.n	8001210 <main+0x38>
 8001250:	08006f54 	.word	0x08006f54
 8001254:	08006f80 	.word	0x08006f80
 8001258:	08006f60 	.word	0x08006f60
 800125c:	08006f6c 	.word	0x08006f6c

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2230      	movs	r2, #48	@ 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fe04 	bl	8004e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SystemClock_Config+0xcc>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	4a27      	ldr	r2, [pc, #156]	@ (800132c <SystemClock_Config+0xcc>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001292:	6413      	str	r3, [r2, #64]	@ 0x40
 8001294:	4b25      	ldr	r3, [pc, #148]	@ (800132c <SystemClock_Config+0xcc>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <SystemClock_Config+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <SystemClock_Config+0xd0>)
 80012aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <SystemClock_Config+0xd0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d0:	2308      	movs	r3, #8
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012d4:	23c0      	movs	r3, #192	@ 0xc0
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012d8:	2304      	movs	r3, #4
 80012da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80012dc:	2308      	movs	r3, #8
 80012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fe0d 	bl	8002f04 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f0:	f000 f902 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001300:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2103      	movs	r1, #3
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f86e 	bl	80033f4 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800131e:	f000 f8eb 	bl	80014f8 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	@ 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <MX_ADC1_Init+0x9c>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_ADC1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_ADC1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001374:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <MX_ADC1_Init+0xa0>)
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001380:	2201      	movs	r2, #1
 8001382:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_ADC1_Init+0x98>)
 800138e:	2201      	movs	r2, #1
 8001390:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001392:	480e      	ldr	r0, [pc, #56]	@ (80013cc <MX_ADC1_Init+0x98>)
 8001394:	f000 faa2 	bl	80018dc <HAL_ADC_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f8ab 	bl	80014f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_ADC1_Init+0x98>)
 80013b4:	f000 fc56 	bl	8001c64 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013be:	f000 f89b 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001f0 	.word	0x200001f0
 80013d0:	40012000 	.word	0x40012000
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <MX_I2C1_Init+0x54>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_I2C1_Init+0x58>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_I2C1_Init+0x50>)
 8001416:	f001 f8d7 	bl	80025c8 <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 f86a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000238 	.word	0x20000238
 800142c:	40005400 	.word	0x40005400
 8001430:	000186a0 	.word	0x000186a0

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <MX_GPIO_Init+0xb8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <MX_GPIO_Init+0xb8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <MX_GPIO_Init+0xb8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_GPIO_Init+0xb8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <MX_GPIO_Init+0xbc>)
 80014a6:	f001 f875 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 80014aa:	2301      	movs	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <MX_GPIO_Init+0xc0>)
 80014c0:	f000 fee4 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80014c4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_GPIO_Init+0xbc>)
 80014de:	f000 fed5 	bl	800228c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40020000 	.word	0x40020000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	@ (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001542:	2007      	movs	r0, #7
 8001544:	f000 fe6e 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HAL_ADC_MspInit+0x7c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d127      	bne.n	80015c6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	6453      	str	r3, [r2, #68]	@ 0x44
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_ADC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 80015ae:	2302      	movs	r3, #2
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_ADC_MspInit+0x84>)
 80015c2:	f000 fe63 	bl	800228c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40012000 	.word	0x40012000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_I2C_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12b      	bne.n	8001656 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <HAL_I2C_MspInit+0x8c>)
 8001636:	f000 fe29 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_I2C_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <NMI_Handler+0x4>

08001674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <MemManage_Handler+0x4>

08001684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <UsageFault_Handler+0x4>

08001694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c2:	f000 f8c7 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f003 fc10 	bl	8004f20 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20020000 	.word	0x20020000
 800172c:	00000400 	.word	0x00000400
 8001730:	2000028c 	.word	0x2000028c
 8001734:	20000480 	.word	0x20000480

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001760:	f7ff ffea 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f003 fbcf 	bl	8004f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fd23 	bl	80011d8 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017a0:	0800734c 	.word	0x0800734c
  ldr r2, =_sbss
 80017a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017a8:	20000480 	.word	0x20000480

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_Init+0x40>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_Init+0x40>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_Init+0x40>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 fd23 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fe8e 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd2d 	bl	8002272 <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001830:	f000 fd03 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	@ (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	20000290 	.word	0x20000290

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000290 	.word	0x20000290

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fe2a 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 faca 	bl	8001ec8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	e001      	b.n	8001950 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ADC_Start+0x1a>
 800197a:	2302      	movs	r3, #2
 800197c:	e097      	b.n	8001aae <HAL_ADC_Start+0x14a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d018      	beq.n	80019c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a4:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <HAL_ADC_Start+0x158>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a45      	ldr	r2, [pc, #276]	@ (8001ac0 <HAL_ADC_Start+0x15c>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9a      	lsrs	r2, r3, #18
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019b8:	e002      	b.n	80019c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f9      	bne.n	80019ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d15f      	bne.n	8001a94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a12:	d106      	bne.n	8001a22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f023 0206 	bic.w	r2, r3, #6
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_ADC_Start+0x160>)
 8001a32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d129      	bne.n	8001aac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e020      	b.n	8001aac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_ADC_Start+0x164>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d11b      	bne.n	8001aac <HAL_ADC_Start+0x148>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d114      	bne.n	8001aac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	e00b      	b.n	8001aac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	40012000 	.word	0x40012000

08001acc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Stop+0x16>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e021      	b.n	8001b26 <HAL_ADC_Stop+0x5a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4e:	d113      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e063      	b.n	8001c40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b78:	f7ff fe80 	bl	800187c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b7e:	e021      	b.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b86:	d01d      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_PollForConversion+0x6c>
 8001b8e:	f7ff fe75 	bl	800187c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d212      	bcs.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d00b      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e03d      	b.n	8001c40 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d1d6      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0212 	mvn.w	r2, #18
 8001bda:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d123      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11f      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1c>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e113      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x244>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d925      	bls.n	8001cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43da      	mvns	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4403      	add	r3, r0
 8001cce:	3b1e      	subs	r3, #30
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	e022      	b.n	8001d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6919      	ldr	r1, [r3, #16]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4403      	add	r3, r0
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d824      	bhi.n	8001d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b05      	subs	r3, #5
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	400a      	ands	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3b05      	subs	r3, #5
 8001d66:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d72:	e04c      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d824      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b23      	subs	r3, #35	@ 0x23
 8001d8e:	221f      	movs	r2, #31
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43da      	mvns	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b23      	subs	r3, #35	@ 0x23
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc4:	e023      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b41      	subs	r3, #65	@ 0x41
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b41      	subs	r3, #65	@ 0x41
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x250>)
 8001e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a28      	ldr	r2, [pc, #160]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x254>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10f      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1d8>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b12      	cmp	r3, #18
 8001e22:	d10b      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x254>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ebc <HAL_ADC_ConfigChannel+0x258>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x1f4>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d122      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_ADC_ConfigChannel+0x258>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x260>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9a      	lsrs	r2, r3, #18
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	40012000 	.word	0x40012000
 8001ebc:	10000012 	.word	0x10000012
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	4b79      	ldr	r3, [pc, #484]	@ (80020b8 <ADC_Init+0x1f0>)
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	021a      	lsls	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <ADC_Init+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e00f      	b.n	8001fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0202 	bic.w	r2, r2, #2
 8001fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	005a      	lsls	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	3b01      	subs	r3, #1
 8002020:	035a      	lsls	r2, r3, #13
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e007      	b.n	800203c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	051a      	lsls	r2, r3, #20
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207e:	025a      	lsls	r2, r3, #9
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	029a      	lsls	r2, r3, #10
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	0f000001 	.word	0x0f000001

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	@ (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002204:	f7ff ff8e 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff47 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff5c 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff8e 	bl	8002178 <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5d 	bl	8002124 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffb0 	bl	80021e0 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e159      	b.n	800255c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8148 	bne.w	8002556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d005      	beq.n	80022de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d123      	bne.n	80023d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a2 	beq.w	8002556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b57      	ldr	r3, [pc, #348]	@ (8002574 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a56      	ldr	r2, [pc, #344]	@ (8002574 <HAL_GPIO_Init+0x2e8>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
 8002422:	4b54      	ldr	r3, [pc, #336]	@ (8002574 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242e:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_GPIO_Init+0x2ec>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	@ (800257c <HAL_GPIO_Init+0x2f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d019      	beq.n	800248e <HAL_GPIO_Init+0x202>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	@ (8002580 <HAL_GPIO_Init+0x2f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x1fe>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a47      	ldr	r2, [pc, #284]	@ (8002584 <HAL_GPIO_Init+0x2f8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x1fa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a46      	ldr	r2, [pc, #280]	@ (8002588 <HAL_GPIO_Init+0x2fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x1f6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a45      	ldr	r2, [pc, #276]	@ (800258c <HAL_GPIO_Init+0x300>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x1f2>
 800247a:	2304      	movs	r3, #4
 800247c:	e008      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800247e:	2307      	movs	r3, #7
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248e:	2300      	movs	r3, #0
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a0:	4935      	ldr	r1, [pc, #212]	@ (8002578 <HAL_GPIO_Init+0x2ec>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_GPIO_Init+0x304>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002590 <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_GPIO_Init+0x304>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002502:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_GPIO_Init+0x304>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002526:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252c:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_GPIO_Init+0x304>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002550:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	f67f aea2 	bls.w	80022a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3724      	adds	r7, #36	@ 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e12b      	b.n	8002832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fff4 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	@ 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800262c:	f001 f8da 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a81      	ldr	r2, [pc, #516]	@ (800283c <HAL_I2C_Init+0x274>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d807      	bhi.n	800264c <HAL_I2C_Init+0x84>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a80      	ldr	r2, [pc, #512]	@ (8002840 <HAL_I2C_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e006      	b.n	800265a <HAL_I2C_Init+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a7d      	ldr	r2, [pc, #500]	@ (8002844 <HAL_I2C_Init+0x27c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e7      	b.n	8002832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a78      	ldr	r2, [pc, #480]	@ (8002848 <HAL_I2C_Init+0x280>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a6a      	ldr	r2, [pc, #424]	@ (800283c <HAL_I2C_Init+0x274>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d802      	bhi.n	800269c <HAL_I2C_Init+0xd4>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	e009      	b.n	80026b0 <HAL_I2C_Init+0xe8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a69      	ldr	r2, [pc, #420]	@ (800284c <HAL_I2C_Init+0x284>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	495c      	ldr	r1, [pc, #368]	@ (800283c <HAL_I2C_Init+0x274>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d819      	bhi.n	8002704 <HAL_I2C_Init+0x13c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb1 f3f3 	udiv	r3, r1, r3
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_Init+0x138>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	e051      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002700:	2304      	movs	r3, #4
 8002702:	e04f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_I2C_Init+0x168>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e012      	b.n	8002756 <HAL_I2C_Init+0x18e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x196>
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_I2C_Init+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	440b      	add	r3, r1
 8002774:	fbb0 f3f3 	udiv	r3, r0, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002782:	e00f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6911      	ldr	r1, [r2, #16]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	000186a0 	.word	0x000186a0
 8002840:	001e847f 	.word	0x001e847f
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	431bde83 	.word	0x431bde83
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff f80a 	bl	800187c <HAL_GetTick>
 8002868:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 80e0 	bne.w	8002a38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2319      	movs	r3, #25
 800287e:	2201      	movs	r2, #1
 8002880:	4970      	ldr	r1, [pc, #448]	@ (8002a44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f964 	bl	8002b50 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	e0d3      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x50>
 800289c:	2302      	movs	r3, #2
 800289e:	e0cc      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d007      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2221      	movs	r2, #33	@ 0x21
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2210      	movs	r2, #16
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a50      	ldr	r2, [pc, #320]	@ (8002a48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f89c 	bl	8002a4c <I2C_MasterRequestWrite>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e08d      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002934:	e066      	b.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa22 	bl	8002d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa19 	bl	8002e14 <I2C_WaitOnBTFFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d107      	bne.n	8002a00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01a      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d194      	bne.n	8002936 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	00100002 	.word	0x00100002
 8002a48:	ffff0000 	.word	0xffff0000

08002a4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d006      	beq.n	8002a76 <I2C_MasterRequestWrite+0x2a>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d003      	beq.n	8002a76 <I2C_MasterRequestWrite+0x2a>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a74:	d108      	bne.n	8002a88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e00b      	b.n	8002aa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	2b12      	cmp	r3, #18
 8002a8e:	d107      	bne.n	8002aa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f84f 	bl	8002b50 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac6:	d103      	bne.n	8002ad0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e035      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002adc:	d108      	bne.n	8002af0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	e01b      	b.n	8002b28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	11db      	asrs	r3, r3, #7
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0306 	and.w	r3, r3, #6
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f063 030f 	orn	r3, r3, #15
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	490e      	ldr	r1, [pc, #56]	@ (8002b48 <I2C_MasterRequestWrite+0xfc>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f898 	bl	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e010      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <I2C_MasterRequestWrite+0x100>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f888 	bl	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010008 	.word	0x00010008
 8002b4c:	00010002 	.word	0x00010002

08002b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b60:	e048      	b.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b68:	d044      	beq.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe fe87 	bl	800187c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d139      	bne.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10d      	bne.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	43da      	mvns	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4013      	ands	r3, r2
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	e00c      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d116      	bne.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e023      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10d      	bne.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	43da      	mvns	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	e00c      	b.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	43da      	mvns	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d093      	beq.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c52:	e071      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c62:	d123      	bne.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0204 	orr.w	r2, r3, #4
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e067      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cb2:	d041      	beq.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe fde2 	bl	800187c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d136      	bne.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10c      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e00b      	b.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e021      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10c      	bne.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e00b      	b.n	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f af6d 	bne.w	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d90:	e034      	b.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f886 	bl	8002ea4 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e034      	b.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da8:	d028      	beq.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe fd67 	bl	800187c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11d      	bne.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dca:	2b80      	cmp	r3, #128	@ 0x80
 8002dcc:	d016      	beq.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b80      	cmp	r3, #128	@ 0x80
 8002e08:	d1c3      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e20:	e034      	b.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f83e 	bl	8002ea4 <I2C_IsAcknowledgeFailed>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e034      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e38:	d028      	beq.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe fd1f 	bl	800187c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11d      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d016      	beq.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d1c3      	bne.n	8002e22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eba:	d11b      	bne.n	8002ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e267      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f22:	4b88      	ldr	r3, [pc, #544]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b85      	ldr	r3, [pc, #532]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b82      	ldr	r3, [pc, #520]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e242      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6f      	ldr	r2, [pc, #444]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6c      	ldr	r2, [pc, #432]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b69      	ldr	r3, [pc, #420]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a68      	ldr	r2, [pc, #416]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b66      	ldr	r3, [pc, #408]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a65      	ldr	r2, [pc, #404]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fc5e 	bl	800187c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fc5a 	bl	800187c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	@ 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e207      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fc4a 	bl	800187c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fc46 	bl	800187c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	@ 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1f3      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800301a:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b47      	ldr	r3, [pc, #284]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b44      	ldr	r3, [pc, #272]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1c7      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4937      	ldr	r1, [pc, #220]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <HAL_RCC_OscConfig+0x244>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fbff 	bl	800187c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fbfb 	bl	800187c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1a8      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b28      	ldr	r3, [pc, #160]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4925      	ldr	r1, [pc, #148]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <HAL_RCC_OscConfig+0x244>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fbde 	bl	800187c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c4:	f7fe fbda 	bl	800187c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e187      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d036      	beq.n	800315c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b15      	ldr	r3, [pc, #84]	@ (800314c <HAL_RCC_OscConfig+0x248>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fbbe 	bl	800187c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe fbba 	bl	800187c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e167      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <HAL_RCC_OscConfig+0x240>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_OscConfig+0x248>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe fba7 	bl	800187c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e00e      	b.n	8003150 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe fba3 	bl	800187c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d907      	bls.n	8003150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e150      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
 8003144:	40023800 	.word	0x40023800
 8003148:	42470000 	.word	0x42470000
 800314c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ea      	bne.n	8003132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8097 	beq.w	8003298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b81      	ldr	r3, [pc, #516]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b7d      	ldr	r3, [pc, #500]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	4a7c      	ldr	r2, [pc, #496]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	@ 0x40
 800318a:	4b7a      	ldr	r3, [pc, #488]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b77      	ldr	r3, [pc, #476]	@ (8003378 <HAL_RCC_OscConfig+0x474>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a6:	4b74      	ldr	r3, [pc, #464]	@ (8003378 <HAL_RCC_OscConfig+0x474>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a73      	ldr	r2, [pc, #460]	@ (8003378 <HAL_RCC_OscConfig+0x474>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fb63 	bl	800187c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe fb5f 	bl	800187c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e10c      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003378 <HAL_RCC_OscConfig+0x474>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x2ea>
 80031e0:	4b64      	ldr	r3, [pc, #400]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a63      	ldr	r2, [pc, #396]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ec:	e01c      	b.n	8003228 <HAL_RCC_OscConfig+0x324>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x30c>
 80031f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6713      	str	r3, [r2, #112]	@ 0x70
 8003202:	4b5c      	ldr	r3, [pc, #368]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a5b      	ldr	r2, [pc, #364]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x324>
 8003210:	4b58      	ldr	r3, [pc, #352]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003214:	4a57      	ldr	r2, [pc, #348]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	@ 0x70
 800321c:	4b55      	ldr	r3, [pc, #340]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a54      	ldr	r2, [pc, #336]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fb24 	bl	800187c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fb20 	bl	800187c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0cb      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	4b49      	ldr	r3, [pc, #292]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCC_OscConfig+0x334>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe fb0e 	bl	800187c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fb0a 	bl	800187c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0b5      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	4b3e      	ldr	r3, [pc, #248]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ee      	bne.n	8003264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b39      	ldr	r3, [pc, #228]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	4a38      	ldr	r2, [pc, #224]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003296:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a1 	beq.w	80033e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a2:	4b34      	ldr	r3, [pc, #208]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d05c      	beq.n	8003368 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d141      	bne.n	800333a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b31      	ldr	r3, [pc, #196]	@ (800337c <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fade 	bl	800187c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fada 	bl	800187c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e087      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	491b      	ldr	r1, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x478>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fab3 	bl	800187c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe faaf 	bl	800187c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e05c      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x416>
 8003338:	e054      	b.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_RCC_OscConfig+0x478>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fa9c 	bl	800187c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fa98 	bl	800187c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e045      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_OscConfig+0x470>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
 8003366:	e03d      	b.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e038      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000
 800337c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d028      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d121      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d111      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0cc      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b68      	ldr	r3, [pc, #416]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d90c      	bls.n	8003430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b65      	ldr	r3, [pc, #404]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a58      	ldr	r2, [pc, #352]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a52      	ldr	r2, [pc, #328]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800346a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d044      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d119      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b3f      	ldr	r3, [pc, #252]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e067      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b37      	ldr	r3, [pc, #220]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4934      	ldr	r1, [pc, #208]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fe f9ca 	bl	800187c <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fe f9c6 	bl	800187c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e04f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b25      	ldr	r3, [pc, #148]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b22      	ldr	r3, [pc, #136]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003566:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490a      	ldr	r1, [pc, #40]	@ (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	@ (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe f92a 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08006f94 	.word	0x08006f94
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b094      	sub	sp, #80	@ 0x50
 80035c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d8:	4b79      	ldr	r3, [pc, #484]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d00d      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x40>
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	f200 80e1 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x3a>
 80035f2:	e0db      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b73      	ldr	r3, [pc, #460]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f8:	e0db      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4b73      	ldr	r3, [pc, #460]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fe:	e0d8      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003600:	4b6f      	ldr	r3, [pc, #444]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360a:	4b6d      	ldr	r3, [pc, #436]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003616:	4b6a      	ldr	r3, [pc, #424]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	2200      	movs	r2, #0
 800361e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003620:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003628:	633b      	str	r3, [r7, #48]	@ 0x30
 800362a:	2300      	movs	r3, #0
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
 800362e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003632:	4622      	mov	r2, r4
 8003634:	462b      	mov	r3, r5
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003644:	0150      	lsls	r0, r2, #5
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4621      	mov	r1, r4
 800364c:	1a51      	subs	r1, r2, r1
 800364e:	6139      	str	r1, [r7, #16]
 8003650:	4629      	mov	r1, r5
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003664:	4659      	mov	r1, fp
 8003666:	018b      	lsls	r3, r1, #6
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366e:	4651      	mov	r1, sl
 8003670:	018a      	lsls	r2, r1, #6
 8003672:	4651      	mov	r1, sl
 8003674:	ebb2 0801 	subs.w	r8, r2, r1
 8003678:	4659      	mov	r1, fp
 800367a:	eb63 0901 	sbc.w	r9, r3, r1
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800368a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003692:	4690      	mov	r8, r2
 8003694:	4699      	mov	r9, r3
 8003696:	4623      	mov	r3, r4
 8003698:	eb18 0303 	adds.w	r3, r8, r3
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	462b      	mov	r3, r5
 80036a0:	eb49 0303 	adc.w	r3, r9, r3
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036b2:	4629      	mov	r1, r5
 80036b4:	024b      	lsls	r3, r1, #9
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036bc:	4621      	mov	r1, r4
 80036be:	024a      	lsls	r2, r1, #9
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c6:	2200      	movs	r2, #0
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036d0:	f7fd fa72 	bl	8000bb8 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036dc:	e058      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	2200      	movs	r2, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	4611      	mov	r1, r2
 80036ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0159      	lsls	r1, r3, #5
 8003706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370a:	0150      	lsls	r0, r2, #5
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4641      	mov	r1, r8
 8003712:	ebb2 0a01 	subs.w	sl, r2, r1
 8003716:	4649      	mov	r1, r9
 8003718:	eb63 0b01 	sbc.w	fp, r3, r1
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800372c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003730:	ebb2 040a 	subs.w	r4, r2, sl
 8003734:	eb63 050b 	sbc.w	r5, r3, fp
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	464b      	mov	r3, r9
 8003754:	eb45 0303 	adc.w	r3, r5, r3
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003766:	4629      	mov	r1, r5
 8003768:	028b      	lsls	r3, r1, #10
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003770:	4621      	mov	r1, r4
 8003772:	028a      	lsls	r2, r1, #10
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800377a:	2200      	movs	r2, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	61fa      	str	r2, [r7, #28]
 8003780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003784:	f7fd fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3750      	adds	r7, #80	@ 0x50
 80037b8:	46bd      	mov	sp, r7
 80037ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	@ (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	08006fa4 	.word	0x08006fa4

0800380c <findslot>:
 800380c:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <findslot+0x2c>)
 800380e:	b510      	push	{r4, lr}
 8003810:	4604      	mov	r4, r0
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	b118      	cbz	r0, 800381e <findslot+0x12>
 8003816:	6a03      	ldr	r3, [r0, #32]
 8003818:	b90b      	cbnz	r3, 800381e <findslot+0x12>
 800381a:	f001 f9e5 	bl	8004be8 <__sinit>
 800381e:	2c13      	cmp	r4, #19
 8003820:	d807      	bhi.n	8003832 <findslot+0x26>
 8003822:	4806      	ldr	r0, [pc, #24]	@ (800383c <findslot+0x30>)
 8003824:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003828:	3201      	adds	r2, #1
 800382a:	d002      	beq.n	8003832 <findslot+0x26>
 800382c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003830:	bd10      	pop	{r4, pc}
 8003832:	2000      	movs	r0, #0
 8003834:	e7fc      	b.n	8003830 <findslot+0x24>
 8003836:	bf00      	nop
 8003838:	20000018 	.word	0x20000018
 800383c:	20000294 	.word	0x20000294

08003840 <error>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	4604      	mov	r4, r0
 8003844:	f001 fb6c 	bl	8004f20 <__errno>
 8003848:	2613      	movs	r6, #19
 800384a:	4605      	mov	r5, r0
 800384c:	2700      	movs	r7, #0
 800384e:	4630      	mov	r0, r6
 8003850:	4639      	mov	r1, r7
 8003852:	beab      	bkpt	0x00ab
 8003854:	4606      	mov	r6, r0
 8003856:	602e      	str	r6, [r5, #0]
 8003858:	4620      	mov	r0, r4
 800385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800385c <checkerror>:
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d101      	bne.n	8003864 <checkerror+0x8>
 8003860:	f7ff bfee 	b.w	8003840 <error>
 8003864:	4770      	bx	lr

08003866 <_swiread>:
 8003866:	b530      	push	{r4, r5, lr}
 8003868:	b085      	sub	sp, #20
 800386a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800386e:	9203      	str	r2, [sp, #12]
 8003870:	2406      	movs	r4, #6
 8003872:	ad01      	add	r5, sp, #4
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	beab      	bkpt	0x00ab
 800387a:	4604      	mov	r4, r0
 800387c:	4620      	mov	r0, r4
 800387e:	f7ff ffed 	bl	800385c <checkerror>
 8003882:	b005      	add	sp, #20
 8003884:	bd30      	pop	{r4, r5, pc}

08003886 <_read>:
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	460e      	mov	r6, r1
 800388a:	4614      	mov	r4, r2
 800388c:	f7ff ffbe 	bl	800380c <findslot>
 8003890:	4605      	mov	r5, r0
 8003892:	b930      	cbnz	r0, 80038a2 <_read+0x1c>
 8003894:	f001 fb44 	bl	8004f20 <__errno>
 8003898:	2309      	movs	r3, #9
 800389a:	6003      	str	r3, [r0, #0]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	6800      	ldr	r0, [r0, #0]
 80038a4:	4622      	mov	r2, r4
 80038a6:	4631      	mov	r1, r6
 80038a8:	f7ff ffdd 	bl	8003866 <_swiread>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d0f5      	beq.n	800389c <_read+0x16>
 80038b0:	686b      	ldr	r3, [r5, #4]
 80038b2:	1a20      	subs	r0, r4, r0
 80038b4:	4403      	add	r3, r0
 80038b6:	606b      	str	r3, [r5, #4]
 80038b8:	e7f2      	b.n	80038a0 <_read+0x1a>

080038ba <_swilseek>:
 80038ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	4616      	mov	r6, r2
 80038c0:	f7ff ffa4 	bl	800380c <findslot>
 80038c4:	4605      	mov	r5, r0
 80038c6:	b940      	cbnz	r0, 80038da <_swilseek+0x20>
 80038c8:	f001 fb2a 	bl	8004f20 <__errno>
 80038cc:	2309      	movs	r3, #9
 80038ce:	6003      	str	r3, [r0, #0]
 80038d0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038d4:	4620      	mov	r0, r4
 80038d6:	b003      	add	sp, #12
 80038d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038da:	2e02      	cmp	r6, #2
 80038dc:	d903      	bls.n	80038e6 <_swilseek+0x2c>
 80038de:	f001 fb1f 	bl	8004f20 <__errno>
 80038e2:	2316      	movs	r3, #22
 80038e4:	e7f3      	b.n	80038ce <_swilseek+0x14>
 80038e6:	2e01      	cmp	r6, #1
 80038e8:	d112      	bne.n	8003910 <_swilseek+0x56>
 80038ea:	6843      	ldr	r3, [r0, #4]
 80038ec:	18e4      	adds	r4, r4, r3
 80038ee:	d4f6      	bmi.n	80038de <_swilseek+0x24>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	260a      	movs	r6, #10
 80038f4:	e9cd 3400 	strd	r3, r4, [sp]
 80038f8:	466f      	mov	r7, sp
 80038fa:	4630      	mov	r0, r6
 80038fc:	4639      	mov	r1, r7
 80038fe:	beab      	bkpt	0x00ab
 8003900:	4606      	mov	r6, r0
 8003902:	4630      	mov	r0, r6
 8003904:	f7ff ffaa 	bl	800385c <checkerror>
 8003908:	2800      	cmp	r0, #0
 800390a:	dbe1      	blt.n	80038d0 <_swilseek+0x16>
 800390c:	606c      	str	r4, [r5, #4]
 800390e:	e7e1      	b.n	80038d4 <_swilseek+0x1a>
 8003910:	2e02      	cmp	r6, #2
 8003912:	6803      	ldr	r3, [r0, #0]
 8003914:	d1ec      	bne.n	80038f0 <_swilseek+0x36>
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	260c      	movs	r6, #12
 800391a:	466f      	mov	r7, sp
 800391c:	4630      	mov	r0, r6
 800391e:	4639      	mov	r1, r7
 8003920:	beab      	bkpt	0x00ab
 8003922:	4606      	mov	r6, r0
 8003924:	4630      	mov	r0, r6
 8003926:	f7ff ff99 	bl	800385c <checkerror>
 800392a:	1c43      	adds	r3, r0, #1
 800392c:	d0d0      	beq.n	80038d0 <_swilseek+0x16>
 800392e:	4404      	add	r4, r0
 8003930:	e7de      	b.n	80038f0 <_swilseek+0x36>

08003932 <_lseek>:
 8003932:	f7ff bfc2 	b.w	80038ba <_swilseek>

08003936 <_swiwrite>:
 8003936:	b530      	push	{r4, r5, lr}
 8003938:	b085      	sub	sp, #20
 800393a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800393e:	9203      	str	r2, [sp, #12]
 8003940:	2405      	movs	r4, #5
 8003942:	ad01      	add	r5, sp, #4
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	beab      	bkpt	0x00ab
 800394a:	4604      	mov	r4, r0
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff ff85 	bl	800385c <checkerror>
 8003952:	b005      	add	sp, #20
 8003954:	bd30      	pop	{r4, r5, pc}

08003956 <_write>:
 8003956:	b570      	push	{r4, r5, r6, lr}
 8003958:	460e      	mov	r6, r1
 800395a:	4615      	mov	r5, r2
 800395c:	f7ff ff56 	bl	800380c <findslot>
 8003960:	4604      	mov	r4, r0
 8003962:	b930      	cbnz	r0, 8003972 <_write+0x1c>
 8003964:	f001 fadc 	bl	8004f20 <__errno>
 8003968:	2309      	movs	r3, #9
 800396a:	6003      	str	r3, [r0, #0]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	462a      	mov	r2, r5
 8003976:	4631      	mov	r1, r6
 8003978:	f7ff ffdd 	bl	8003936 <_swiwrite>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	dbf5      	blt.n	800396c <_write+0x16>
 8003980:	6862      	ldr	r2, [r4, #4]
 8003982:	1ae8      	subs	r0, r5, r3
 8003984:	4402      	add	r2, r0
 8003986:	42ab      	cmp	r3, r5
 8003988:	6062      	str	r2, [r4, #4]
 800398a:	d1f1      	bne.n	8003970 <_write+0x1a>
 800398c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003990:	2000      	movs	r0, #0
 8003992:	f7ff bf55 	b.w	8003840 <error>

08003996 <_swiclose>:
 8003996:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003998:	2402      	movs	r4, #2
 800399a:	9001      	str	r0, [sp, #4]
 800399c:	ad01      	add	r5, sp, #4
 800399e:	4620      	mov	r0, r4
 80039a0:	4629      	mov	r1, r5
 80039a2:	beab      	bkpt	0x00ab
 80039a4:	4604      	mov	r4, r0
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff ff58 	bl	800385c <checkerror>
 80039ac:	b003      	add	sp, #12
 80039ae:	bd30      	pop	{r4, r5, pc}

080039b0 <_close>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4605      	mov	r5, r0
 80039b4:	f7ff ff2a 	bl	800380c <findslot>
 80039b8:	4604      	mov	r4, r0
 80039ba:	b930      	cbnz	r0, 80039ca <_close+0x1a>
 80039bc:	f001 fab0 	bl	8004f20 <__errno>
 80039c0:	2309      	movs	r3, #9
 80039c2:	6003      	str	r3, [r0, #0]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c8:	bd38      	pop	{r3, r4, r5, pc}
 80039ca:	3d01      	subs	r5, #1
 80039cc:	2d01      	cmp	r5, #1
 80039ce:	d809      	bhi.n	80039e4 <_close+0x34>
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <_close+0x48>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d104      	bne.n	80039e4 <_close+0x34>
 80039da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039de:	6003      	str	r3, [r0, #0]
 80039e0:	2000      	movs	r0, #0
 80039e2:	e7f1      	b.n	80039c8 <_close+0x18>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	f7ff ffd6 	bl	8003996 <_swiclose>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d1ec      	bne.n	80039c8 <_close+0x18>
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	e7e8      	b.n	80039c8 <_close+0x18>
 80039f6:	bf00      	nop
 80039f8:	20000294 	.word	0x20000294

080039fc <_getpid>:
 80039fc:	2001      	movs	r0, #1
 80039fe:	4770      	bx	lr

08003a00 <_swistat>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	460c      	mov	r4, r1
 8003a04:	f7ff ff02 	bl	800380c <findslot>
 8003a08:	4605      	mov	r5, r0
 8003a0a:	b930      	cbnz	r0, 8003a1a <_swistat+0x1a>
 8003a0c:	f001 fa88 	bl	8004f20 <__errno>
 8003a10:	2309      	movs	r3, #9
 8003a12:	6003      	str	r3, [r0, #0]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a26:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003a28:	260c      	movs	r6, #12
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	beab      	bkpt	0x00ab
 8003a30:	4605      	mov	r5, r0
 8003a32:	4628      	mov	r0, r5
 8003a34:	f7ff ff12 	bl	800385c <checkerror>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d0eb      	beq.n	8003a14 <_swistat+0x14>
 8003a3c:	6120      	str	r0, [r4, #16]
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e7ea      	b.n	8003a18 <_swistat+0x18>

08003a42 <_fstat>:
 8003a42:	460b      	mov	r3, r1
 8003a44:	b510      	push	{r4, lr}
 8003a46:	2100      	movs	r1, #0
 8003a48:	4604      	mov	r4, r0
 8003a4a:	2258      	movs	r2, #88	@ 0x58
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 fa15 	bl	8004e7c <memset>
 8003a52:	4601      	mov	r1, r0
 8003a54:	4620      	mov	r0, r4
 8003a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a5a:	f7ff bfd1 	b.w	8003a00 <_swistat>

08003a5e <_isatty>:
 8003a5e:	b570      	push	{r4, r5, r6, lr}
 8003a60:	f7ff fed4 	bl	800380c <findslot>
 8003a64:	2409      	movs	r4, #9
 8003a66:	4605      	mov	r5, r0
 8003a68:	b920      	cbnz	r0, 8003a74 <_isatty+0x16>
 8003a6a:	f001 fa59 	bl	8004f20 <__errno>
 8003a6e:	6004      	str	r4, [r0, #0]
 8003a70:	2000      	movs	r0, #0
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	4620      	mov	r0, r4
 8003a76:	4629      	mov	r1, r5
 8003a78:	beab      	bkpt	0x00ab
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	2c01      	cmp	r4, #1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	d0f7      	beq.n	8003a72 <_isatty+0x14>
 8003a82:	f001 fa4d 	bl	8004f20 <__errno>
 8003a86:	2513      	movs	r5, #19
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	4631      	mov	r1, r6
 8003a90:	beab      	bkpt	0x00ab
 8003a92:	4605      	mov	r5, r0
 8003a94:	6025      	str	r5, [r4, #0]
 8003a96:	e7eb      	b.n	8003a70 <_isatty+0x12>

08003a98 <powf>:
 8003a98:	b508      	push	{r3, lr}
 8003a9a:	ed2d 8b04 	vpush	{d8-d9}
 8003a9e:	eeb0 8a60 	vmov.f32	s16, s1
 8003aa2:	eeb0 9a40 	vmov.f32	s18, s0
 8003aa6:	f000 f859 	bl	8003b5c <__ieee754_powf>
 8003aaa:	eeb4 8a48 	vcmp.f32	s16, s16
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	eef0 8a40 	vmov.f32	s17, s0
 8003ab6:	d63e      	bvs.n	8003b36 <powf+0x9e>
 8003ab8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d112      	bne.n	8003ae8 <powf+0x50>
 8003ac2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d039      	beq.n	8003b40 <powf+0xa8>
 8003acc:	eeb0 0a48 	vmov.f32	s0, s16
 8003ad0:	f000 f839 	bl	8003b46 <finitef>
 8003ad4:	b378      	cbz	r0, 8003b36 <powf+0x9e>
 8003ad6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	d52a      	bpl.n	8003b36 <powf+0x9e>
 8003ae0:	f001 fa1e 	bl	8004f20 <__errno>
 8003ae4:	2322      	movs	r3, #34	@ 0x22
 8003ae6:	e014      	b.n	8003b12 <powf+0x7a>
 8003ae8:	f000 f82d 	bl	8003b46 <finitef>
 8003aec:	b998      	cbnz	r0, 8003b16 <powf+0x7e>
 8003aee:	eeb0 0a49 	vmov.f32	s0, s18
 8003af2:	f000 f828 	bl	8003b46 <finitef>
 8003af6:	b170      	cbz	r0, 8003b16 <powf+0x7e>
 8003af8:	eeb0 0a48 	vmov.f32	s0, s16
 8003afc:	f000 f823 	bl	8003b46 <finitef>
 8003b00:	b148      	cbz	r0, 8003b16 <powf+0x7e>
 8003b02:	eef4 8a68 	vcmp.f32	s17, s17
 8003b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0a:	d7e9      	bvc.n	8003ae0 <powf+0x48>
 8003b0c:	f001 fa08 	bl	8004f20 <__errno>
 8003b10:	2321      	movs	r3, #33	@ 0x21
 8003b12:	6003      	str	r3, [r0, #0]
 8003b14:	e00f      	b.n	8003b36 <powf+0x9e>
 8003b16:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1e:	d10a      	bne.n	8003b36 <powf+0x9e>
 8003b20:	eeb0 0a49 	vmov.f32	s0, s18
 8003b24:	f000 f80f 	bl	8003b46 <finitef>
 8003b28:	b128      	cbz	r0, 8003b36 <powf+0x9e>
 8003b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8003b2e:	f000 f80a 	bl	8003b46 <finitef>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d1d4      	bne.n	8003ae0 <powf+0x48>
 8003b36:	eeb0 0a68 	vmov.f32	s0, s17
 8003b3a:	ecbd 8b04 	vpop	{d8-d9}
 8003b3e:	bd08      	pop	{r3, pc}
 8003b40:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8003b44:	e7f7      	b.n	8003b36 <powf+0x9e>

08003b46 <finitef>:
 8003b46:	ee10 3a10 	vmov	r3, s0
 8003b4a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003b4e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003b52:	bfac      	ite	ge
 8003b54:	2000      	movge	r0, #0
 8003b56:	2001      	movlt	r0, #1
 8003b58:	4770      	bx	lr
	...

08003b5c <__ieee754_powf>:
 8003b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b60:	ee10 4a90 	vmov	r4, s1
 8003b64:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8003b68:	ed2d 8b02 	vpush	{d8}
 8003b6c:	ee10 6a10 	vmov	r6, s0
 8003b70:	eeb0 8a40 	vmov.f32	s16, s0
 8003b74:	eef0 8a60 	vmov.f32	s17, s1
 8003b78:	d10c      	bne.n	8003b94 <__ieee754_powf+0x38>
 8003b7a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8003b7e:	0076      	lsls	r6, r6, #1
 8003b80:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003b84:	f240 8274 	bls.w	8004070 <__ieee754_powf+0x514>
 8003b88:	ee38 0a28 	vadd.f32	s0, s16, s17
 8003b8c:	ecbd 8b02 	vpop	{d8}
 8003b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b94:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8003b98:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8003b9c:	d802      	bhi.n	8003ba4 <__ieee754_powf+0x48>
 8003b9e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003ba2:	d908      	bls.n	8003bb6 <__ieee754_powf+0x5a>
 8003ba4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8003ba8:	d1ee      	bne.n	8003b88 <__ieee754_powf+0x2c>
 8003baa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8003bae:	0064      	lsls	r4, r4, #1
 8003bb0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8003bb4:	e7e6      	b.n	8003b84 <__ieee754_powf+0x28>
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	da1f      	bge.n	8003bfa <__ieee754_powf+0x9e>
 8003bba:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8003bbe:	f080 8260 	bcs.w	8004082 <__ieee754_powf+0x526>
 8003bc2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003bc6:	d32f      	bcc.n	8003c28 <__ieee754_powf+0xcc>
 8003bc8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8003bcc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8003bd0:	fa49 f503 	asr.w	r5, r9, r3
 8003bd4:	fa05 f303 	lsl.w	r3, r5, r3
 8003bd8:	454b      	cmp	r3, r9
 8003bda:	d123      	bne.n	8003c24 <__ieee754_powf+0xc8>
 8003bdc:	f005 0501 	and.w	r5, r5, #1
 8003be0:	f1c5 0502 	rsb	r5, r5, #2
 8003be4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003be8:	d11f      	bne.n	8003c2a <__ieee754_powf+0xce>
 8003bea:	2c00      	cmp	r4, #0
 8003bec:	f280 8246 	bge.w	800407c <__ieee754_powf+0x520>
 8003bf0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003bf4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003bf8:	e7c8      	b.n	8003b8c <__ieee754_powf+0x30>
 8003bfa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8003bfe:	d111      	bne.n	8003c24 <__ieee754_powf+0xc8>
 8003c00:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003c04:	f000 8234 	beq.w	8004070 <__ieee754_powf+0x514>
 8003c08:	d906      	bls.n	8003c18 <__ieee754_powf+0xbc>
 8003c0a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8003f20 <__ieee754_powf+0x3c4>
 8003c0e:	2c00      	cmp	r4, #0
 8003c10:	bfa8      	it	ge
 8003c12:	eeb0 0a68 	vmovge.f32	s0, s17
 8003c16:	e7b9      	b.n	8003b8c <__ieee754_powf+0x30>
 8003c18:	2c00      	cmp	r4, #0
 8003c1a:	f280 822c 	bge.w	8004076 <__ieee754_powf+0x51a>
 8003c1e:	eeb1 0a68 	vneg.f32	s0, s17
 8003c22:	e7b3      	b.n	8003b8c <__ieee754_powf+0x30>
 8003c24:	2500      	movs	r5, #0
 8003c26:	e7dd      	b.n	8003be4 <__ieee754_powf+0x88>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003c2e:	d102      	bne.n	8003c36 <__ieee754_powf+0xda>
 8003c30:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003c34:	e7aa      	b.n	8003b8c <__ieee754_powf+0x30>
 8003c36:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8003c3a:	f040 8227 	bne.w	800408c <__ieee754_powf+0x530>
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	f2c0 8224 	blt.w	800408c <__ieee754_powf+0x530>
 8003c44:	eeb0 0a48 	vmov.f32	s0, s16
 8003c48:	ecbd 8b02 	vpop	{d8}
 8003c4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	f000 bae6 	b.w	8004220 <__ieee754_sqrtf>
 8003c54:	2d01      	cmp	r5, #1
 8003c56:	d199      	bne.n	8003b8c <__ieee754_powf+0x30>
 8003c58:	eeb1 0a40 	vneg.f32	s0, s0
 8003c5c:	e796      	b.n	8003b8c <__ieee754_powf+0x30>
 8003c5e:	0ff0      	lsrs	r0, r6, #31
 8003c60:	3801      	subs	r0, #1
 8003c62:	ea55 0300 	orrs.w	r3, r5, r0
 8003c66:	d104      	bne.n	8003c72 <__ieee754_powf+0x116>
 8003c68:	ee38 8a48 	vsub.f32	s16, s16, s16
 8003c6c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8003c70:	e78c      	b.n	8003b8c <__ieee754_powf+0x30>
 8003c72:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8003c76:	d96d      	bls.n	8003d54 <__ieee754_powf+0x1f8>
 8003c78:	4baa      	ldr	r3, [pc, #680]	@ (8003f24 <__ieee754_powf+0x3c8>)
 8003c7a:	4598      	cmp	r8, r3
 8003c7c:	d808      	bhi.n	8003c90 <__ieee754_powf+0x134>
 8003c7e:	2c00      	cmp	r4, #0
 8003c80:	da0b      	bge.n	8003c9a <__ieee754_powf+0x13e>
 8003c82:	2000      	movs	r0, #0
 8003c84:	ecbd 8b02 	vpop	{d8}
 8003c88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	f000 bac2 	b.w	8004214 <__math_oflowf>
 8003c90:	4ba5      	ldr	r3, [pc, #660]	@ (8003f28 <__ieee754_powf+0x3cc>)
 8003c92:	4598      	cmp	r8, r3
 8003c94:	d908      	bls.n	8003ca8 <__ieee754_powf+0x14c>
 8003c96:	2c00      	cmp	r4, #0
 8003c98:	dcf3      	bgt.n	8003c82 <__ieee754_powf+0x126>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	ecbd 8b02 	vpop	{d8}
 8003ca0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	f000 bab0 	b.w	8004208 <__math_uflowf>
 8003ca8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003cac:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003cb0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8003f2c <__ieee754_powf+0x3d0>
 8003cb4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8003cb8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8003cbc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003cc0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8003cc4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003cc8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8003f30 <__ieee754_powf+0x3d4>
 8003ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cd0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8003f34 <__ieee754_powf+0x3d8>
 8003cd4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003cd8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8003f38 <__ieee754_powf+0x3dc>
 8003cdc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ce0:	eeb0 7a67 	vmov.f32	s14, s15
 8003ce4:	eea0 7a26 	vfma.f32	s14, s0, s13
 8003ce8:	ee17 3a10 	vmov	r3, s14
 8003cec:	f36f 030b 	bfc	r3, #0, #12
 8003cf0:	ee07 3a10 	vmov	s14, r3
 8003cf4:	eeb0 6a47 	vmov.f32	s12, s14
 8003cf8:	eea0 6a66 	vfms.f32	s12, s0, s13
 8003cfc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003d00:	3d01      	subs	r5, #1
 8003d02:	4305      	orrs	r5, r0
 8003d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d08:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003d0c:	f36f 040b 	bfc	r4, #0, #12
 8003d10:	bf18      	it	ne
 8003d12:	eeb0 8a66 	vmovne.f32	s16, s13
 8003d16:	ee06 4a90 	vmov	s13, r4
 8003d1a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8003d1e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8003d22:	ee67 7a26 	vmul.f32	s15, s14, s13
 8003d26:	eee6 0a07 	vfma.f32	s1, s12, s14
 8003d2a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8003d2e:	ee17 1a10 	vmov	r1, s14
 8003d32:	2900      	cmp	r1, #0
 8003d34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003d38:	f340 80dd 	ble.w	8003ef6 <__ieee754_powf+0x39a>
 8003d3c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8003d40:	f240 80ca 	bls.w	8003ed8 <__ieee754_powf+0x37c>
 8003d44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	bf4c      	ite	mi
 8003d4e:	2001      	movmi	r0, #1
 8003d50:	2000      	movpl	r0, #0
 8003d52:	e797      	b.n	8003c84 <__ieee754_powf+0x128>
 8003d54:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003d58:	bf01      	itttt	eq
 8003d5a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8003f3c <__ieee754_powf+0x3e0>
 8003d5e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8003d62:	f06f 0317 	mvneq.w	r3, #23
 8003d66:	ee17 7a90 	vmoveq	r7, s15
 8003d6a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8003d6e:	bf18      	it	ne
 8003d70:	2300      	movne	r3, #0
 8003d72:	3a7f      	subs	r2, #127	@ 0x7f
 8003d74:	441a      	add	r2, r3
 8003d76:	4b72      	ldr	r3, [pc, #456]	@ (8003f40 <__ieee754_powf+0x3e4>)
 8003d78:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8003d7c:	429f      	cmp	r7, r3
 8003d7e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8003d82:	dd06      	ble.n	8003d92 <__ieee754_powf+0x236>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <__ieee754_powf+0x3e8>)
 8003d86:	429f      	cmp	r7, r3
 8003d88:	f340 80a4 	ble.w	8003ed4 <__ieee754_powf+0x378>
 8003d8c:	3201      	adds	r2, #1
 8003d8e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8003d92:	2600      	movs	r6, #0
 8003d94:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <__ieee754_powf+0x3ec>)
 8003d96:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003d9a:	ee07 1a10 	vmov	s14, r1
 8003d9e:	edd3 5a00 	vldr	s11, [r3]
 8003da2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f4c <__ieee754_powf+0x3f0>)
 8003da4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8003da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8003db0:	1049      	asrs	r1, r1, #1
 8003db2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8003db6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8003dba:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8003dbe:	ee37 6a65 	vsub.f32	s12, s14, s11
 8003dc2:	ee07 1a90 	vmov	s15, r1
 8003dc6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8003dca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8003dce:	ee15 7a10 	vmov	r7, s10
 8003dd2:	401f      	ands	r7, r3
 8003dd4:	ee06 7a90 	vmov	s13, r7
 8003dd8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8003ddc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8003de0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8003de4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8003de8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003f50 <__ieee754_powf+0x3f4>
 8003dec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003f54 <__ieee754_powf+0x3f8>
 8003df0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003df4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8003f58 <__ieee754_powf+0x3fc>
 8003df8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003dfc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8003f2c <__ieee754_powf+0x3d0>
 8003e00:	eee7 5a27 	vfma.f32	s11, s14, s15
 8003e04:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003f5c <__ieee754_powf+0x400>
 8003e08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003e0c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8003f60 <__ieee754_powf+0x404>
 8003e10:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003e14:	eee7 5a27 	vfma.f32	s11, s14, s15
 8003e18:	ee35 7a26 	vadd.f32	s14, s10, s13
 8003e1c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8003e20:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003e24:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8003e28:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8003e2c:	eef0 5a67 	vmov.f32	s11, s15
 8003e30:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8003e34:	ee75 5a87 	vadd.f32	s11, s11, s14
 8003e38:	ee15 1a90 	vmov	r1, s11
 8003e3c:	4019      	ands	r1, r3
 8003e3e:	ee05 1a90 	vmov	s11, r1
 8003e42:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e46:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8003e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003e52:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003e56:	eeb0 6a67 	vmov.f32	s12, s15
 8003e5a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8003e5e:	ee16 1a10 	vmov	r1, s12
 8003e62:	4019      	ands	r1, r3
 8003e64:	ee06 1a10 	vmov	s12, r1
 8003e68:	eeb0 7a46 	vmov.f32	s14, s12
 8003e6c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8003e70:	493c      	ldr	r1, [pc, #240]	@ (8003f64 <__ieee754_powf+0x408>)
 8003e72:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e7a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003f68 <__ieee754_powf+0x40c>
 8003e7e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8003f6c <__ieee754_powf+0x410>
 8003e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e86:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003f70 <__ieee754_powf+0x414>
 8003e8a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003e8e:	ed91 7a00 	vldr	s14, [r1]
 8003e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e96:	ee07 2a10 	vmov	s14, r2
 8003e9a:	4a36      	ldr	r2, [pc, #216]	@ (8003f74 <__ieee754_powf+0x418>)
 8003e9c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003ea0:	eeb0 7a67 	vmov.f32	s14, s15
 8003ea4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8003ea8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8003eac:	ed92 5a00 	vldr	s10, [r2]
 8003eb0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003eb4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003eb8:	ee17 2a10 	vmov	r2, s14
 8003ebc:	401a      	ands	r2, r3
 8003ebe:	ee07 2a10 	vmov	s14, r2
 8003ec2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8003ec6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8003eca:	eee6 6a65 	vfms.f32	s13, s12, s11
 8003ece:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003ed2:	e715      	b.n	8003d00 <__ieee754_powf+0x1a4>
 8003ed4:	2601      	movs	r6, #1
 8003ed6:	e75d      	b.n	8003d94 <__ieee754_powf+0x238>
 8003ed8:	d152      	bne.n	8003f80 <__ieee754_powf+0x424>
 8003eda:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003f78 <__ieee754_powf+0x41c>
 8003ede:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8003ee6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	f73f af29 	bgt.w	8003d44 <__ieee754_powf+0x1e8>
 8003ef2:	2386      	movs	r3, #134	@ 0x86
 8003ef4:	e048      	b.n	8003f88 <__ieee754_powf+0x42c>
 8003ef6:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <__ieee754_powf+0x420>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d907      	bls.n	8003f0c <__ieee754_powf+0x3b0>
 8003efc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	bf4c      	ite	mi
 8003f06:	2001      	movmi	r0, #1
 8003f08:	2000      	movpl	r0, #0
 8003f0a:	e6c7      	b.n	8003c9c <__ieee754_powf+0x140>
 8003f0c:	d138      	bne.n	8003f80 <__ieee754_powf+0x424>
 8003f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f12:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8003f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1a:	dbea      	blt.n	8003ef2 <__ieee754_powf+0x396>
 8003f1c:	e7ee      	b.n	8003efc <__ieee754_powf+0x3a0>
 8003f1e:	bf00      	nop
 8003f20:	00000000 	.word	0x00000000
 8003f24:	3f7ffff3 	.word	0x3f7ffff3
 8003f28:	3f800007 	.word	0x3f800007
 8003f2c:	3eaaaaab 	.word	0x3eaaaaab
 8003f30:	3fb8aa00 	.word	0x3fb8aa00
 8003f34:	3fb8aa3b 	.word	0x3fb8aa3b
 8003f38:	36eca570 	.word	0x36eca570
 8003f3c:	4b800000 	.word	0x4b800000
 8003f40:	001cc471 	.word	0x001cc471
 8003f44:	005db3d6 	.word	0x005db3d6
 8003f48:	08006fbc 	.word	0x08006fbc
 8003f4c:	fffff000 	.word	0xfffff000
 8003f50:	3e6c3255 	.word	0x3e6c3255
 8003f54:	3e53f142 	.word	0x3e53f142
 8003f58:	3e8ba305 	.word	0x3e8ba305
 8003f5c:	3edb6db7 	.word	0x3edb6db7
 8003f60:	3f19999a 	.word	0x3f19999a
 8003f64:	08006fac 	.word	0x08006fac
 8003f68:	3f76384f 	.word	0x3f76384f
 8003f6c:	3f763800 	.word	0x3f763800
 8003f70:	369dc3a0 	.word	0x369dc3a0
 8003f74:	08006fb4 	.word	0x08006fb4
 8003f78:	3338aa3c 	.word	0x3338aa3c
 8003f7c:	43160000 	.word	0x43160000
 8003f80:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8003f84:	d96f      	bls.n	8004066 <__ieee754_powf+0x50a>
 8003f86:	15db      	asrs	r3, r3, #23
 8003f88:	3b7e      	subs	r3, #126	@ 0x7e
 8003f8a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003f8e:	4118      	asrs	r0, r3
 8003f90:	4408      	add	r0, r1
 8003f92:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003f96:	4a4e      	ldr	r2, [pc, #312]	@ (80040d0 <__ieee754_powf+0x574>)
 8003f98:	3b7f      	subs	r3, #127	@ 0x7f
 8003f9a:	411a      	asrs	r2, r3
 8003f9c:	4002      	ands	r2, r0
 8003f9e:	ee07 2a10 	vmov	s14, r2
 8003fa2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8003fa6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8003faa:	f1c3 0317 	rsb	r3, r3, #23
 8003fae:	4118      	asrs	r0, r3
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fb6:	bfb8      	it	lt
 8003fb8:	4240      	neglt	r0, r0
 8003fba:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8003fbe:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80040d4 <__ieee754_powf+0x578>
 8003fc2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80040d8 <__ieee754_powf+0x57c>
 8003fc6:	ee16 3a90 	vmov	r3, s13
 8003fca:	f36f 030b 	bfc	r3, #0, #12
 8003fce:	ee06 3a90 	vmov	s13, r3
 8003fd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fd6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003fda:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8003fde:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80040dc <__ieee754_powf+0x580>
 8003fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe6:	eee0 7a87 	vfma.f32	s15, s1, s14
 8003fea:	eeb0 7a67 	vmov.f32	s14, s15
 8003fee:	eea6 7a86 	vfma.f32	s14, s13, s12
 8003ff2:	eef0 5a47 	vmov.f32	s11, s14
 8003ff6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8003ffa:	ee67 6a07 	vmul.f32	s13, s14, s14
 8003ffe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004002:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80040e0 <__ieee754_powf+0x584>
 8004006:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80040e4 <__ieee754_powf+0x588>
 800400a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800400e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80040e8 <__ieee754_powf+0x58c>
 8004012:	eee6 5a26 	vfma.f32	s11, s12, s13
 8004016:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80040ec <__ieee754_powf+0x590>
 800401a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800401e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040f0 <__ieee754_powf+0x594>
 8004022:	eee6 5a26 	vfma.f32	s11, s12, s13
 8004026:	eeb0 6a47 	vmov.f32	s12, s14
 800402a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800402e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004032:	ee67 5a06 	vmul.f32	s11, s14, s12
 8004036:	ee36 6a66 	vsub.f32	s12, s12, s13
 800403a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800403e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004042:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800404a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800404e:	ee10 3a10 	vmov	r3, s0
 8004052:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004056:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800405a:	da06      	bge.n	800406a <__ieee754_powf+0x50e>
 800405c:	f000 f854 	bl	8004108 <scalbnf>
 8004060:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004064:	e592      	b.n	8003b8c <__ieee754_powf+0x30>
 8004066:	2000      	movs	r0, #0
 8004068:	e7a7      	b.n	8003fba <__ieee754_powf+0x45e>
 800406a:	ee00 3a10 	vmov	s0, r3
 800406e:	e7f7      	b.n	8004060 <__ieee754_powf+0x504>
 8004070:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004074:	e58a      	b.n	8003b8c <__ieee754_powf+0x30>
 8004076:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80040f4 <__ieee754_powf+0x598>
 800407a:	e587      	b.n	8003b8c <__ieee754_powf+0x30>
 800407c:	eeb0 0a48 	vmov.f32	s0, s16
 8004080:	e584      	b.n	8003b8c <__ieee754_powf+0x30>
 8004082:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8004086:	f43f adbb 	beq.w	8003c00 <__ieee754_powf+0xa4>
 800408a:	2502      	movs	r5, #2
 800408c:	eeb0 0a48 	vmov.f32	s0, s16
 8004090:	f000 f832 	bl	80040f8 <fabsf>
 8004094:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8004098:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800409c:	4647      	mov	r7, r8
 800409e:	d003      	beq.n	80040a8 <__ieee754_powf+0x54c>
 80040a0:	f1b8 0f00 	cmp.w	r8, #0
 80040a4:	f47f addb 	bne.w	8003c5e <__ieee754_powf+0x102>
 80040a8:	2c00      	cmp	r4, #0
 80040aa:	bfbc      	itt	lt
 80040ac:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80040b0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80040b4:	2e00      	cmp	r6, #0
 80040b6:	f6bf ad69 	bge.w	8003b8c <__ieee754_powf+0x30>
 80040ba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80040be:	ea58 0805 	orrs.w	r8, r8, r5
 80040c2:	f47f adc7 	bne.w	8003c54 <__ieee754_powf+0xf8>
 80040c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80040ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80040ce:	e55d      	b.n	8003b8c <__ieee754_powf+0x30>
 80040d0:	ff800000 	.word	0xff800000
 80040d4:	3f317218 	.word	0x3f317218
 80040d8:	3f317200 	.word	0x3f317200
 80040dc:	35bfbe8c 	.word	0x35bfbe8c
 80040e0:	b5ddea0e 	.word	0xb5ddea0e
 80040e4:	3331bb4c 	.word	0x3331bb4c
 80040e8:	388ab355 	.word	0x388ab355
 80040ec:	bb360b61 	.word	0xbb360b61
 80040f0:	3e2aaaab 	.word	0x3e2aaaab
 80040f4:	00000000 	.word	0x00000000

080040f8 <fabsf>:
 80040f8:	ee10 3a10 	vmov	r3, s0
 80040fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004100:	ee00 3a10 	vmov	s0, r3
 8004104:	4770      	bx	lr
	...

08004108 <scalbnf>:
 8004108:	ee10 3a10 	vmov	r3, s0
 800410c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004110:	d02b      	beq.n	800416a <scalbnf+0x62>
 8004112:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004116:	d302      	bcc.n	800411e <scalbnf+0x16>
 8004118:	ee30 0a00 	vadd.f32	s0, s0, s0
 800411c:	4770      	bx	lr
 800411e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004122:	d123      	bne.n	800416c <scalbnf+0x64>
 8004124:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <scalbnf+0xb0>)
 8004126:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80041bc <scalbnf+0xb4>
 800412a:	4298      	cmp	r0, r3
 800412c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004130:	db17      	blt.n	8004162 <scalbnf+0x5a>
 8004132:	ee10 3a10 	vmov	r3, s0
 8004136:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800413a:	3a19      	subs	r2, #25
 800413c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004140:	4288      	cmp	r0, r1
 8004142:	dd15      	ble.n	8004170 <scalbnf+0x68>
 8004144:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80041c0 <scalbnf+0xb8>
 8004148:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80041c4 <scalbnf+0xbc>
 800414c:	ee10 3a10 	vmov	r3, s0
 8004150:	eeb0 7a67 	vmov.f32	s14, s15
 8004154:	2b00      	cmp	r3, #0
 8004156:	bfb8      	it	lt
 8004158:	eef0 7a66 	vmovlt.f32	s15, s13
 800415c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004160:	4770      	bx	lr
 8004162:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80041c8 <scalbnf+0xc0>
 8004166:	ee27 0a80 	vmul.f32	s0, s15, s0
 800416a:	4770      	bx	lr
 800416c:	0dd2      	lsrs	r2, r2, #23
 800416e:	e7e5      	b.n	800413c <scalbnf+0x34>
 8004170:	4410      	add	r0, r2
 8004172:	28fe      	cmp	r0, #254	@ 0xfe
 8004174:	dce6      	bgt.n	8004144 <scalbnf+0x3c>
 8004176:	2800      	cmp	r0, #0
 8004178:	dd06      	ble.n	8004188 <scalbnf+0x80>
 800417a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800417e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004182:	ee00 3a10 	vmov	s0, r3
 8004186:	4770      	bx	lr
 8004188:	f110 0f16 	cmn.w	r0, #22
 800418c:	da09      	bge.n	80041a2 <scalbnf+0x9a>
 800418e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80041c8 <scalbnf+0xc0>
 8004192:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80041cc <scalbnf+0xc4>
 8004196:	ee10 3a10 	vmov	r3, s0
 800419a:	eeb0 7a67 	vmov.f32	s14, s15
 800419e:	2b00      	cmp	r3, #0
 80041a0:	e7d9      	b.n	8004156 <scalbnf+0x4e>
 80041a2:	3019      	adds	r0, #25
 80041a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80041a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80041ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80041d0 <scalbnf+0xc8>
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	e7d7      	b.n	8004166 <scalbnf+0x5e>
 80041b6:	bf00      	nop
 80041b8:	ffff3cb0 	.word	0xffff3cb0
 80041bc:	4c000000 	.word	0x4c000000
 80041c0:	7149f2ca 	.word	0x7149f2ca
 80041c4:	f149f2ca 	.word	0xf149f2ca
 80041c8:	0da24260 	.word	0x0da24260
 80041cc:	8da24260 	.word	0x8da24260
 80041d0:	33000000 	.word	0x33000000

080041d4 <with_errnof>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	ed2d 8b02 	vpush	{d8}
 80041da:	eeb0 8a40 	vmov.f32	s16, s0
 80041de:	4604      	mov	r4, r0
 80041e0:	f000 fe9e 	bl	8004f20 <__errno>
 80041e4:	eeb0 0a48 	vmov.f32	s0, s16
 80041e8:	ecbd 8b02 	vpop	{d8}
 80041ec:	6004      	str	r4, [r0, #0]
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <xflowf>:
 80041f0:	b130      	cbz	r0, 8004200 <xflowf+0x10>
 80041f2:	eef1 7a40 	vneg.f32	s15, s0
 80041f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80041fa:	2022      	movs	r0, #34	@ 0x22
 80041fc:	f7ff bfea 	b.w	80041d4 <with_errnof>
 8004200:	eef0 7a40 	vmov.f32	s15, s0
 8004204:	e7f7      	b.n	80041f6 <xflowf+0x6>
	...

08004208 <__math_uflowf>:
 8004208:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004210 <__math_uflowf+0x8>
 800420c:	f7ff bff0 	b.w	80041f0 <xflowf>
 8004210:	10000000 	.word	0x10000000

08004214 <__math_oflowf>:
 8004214:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800421c <__math_oflowf+0x8>
 8004218:	f7ff bfea 	b.w	80041f0 <xflowf>
 800421c:	70000000 	.word	0x70000000

08004220 <__ieee754_sqrtf>:
 8004220:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004224:	4770      	bx	lr

08004226 <__cvt>:
 8004226:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800422a:	ec57 6b10 	vmov	r6, r7, d0
 800422e:	2f00      	cmp	r7, #0
 8004230:	460c      	mov	r4, r1
 8004232:	4619      	mov	r1, r3
 8004234:	463b      	mov	r3, r7
 8004236:	bfbb      	ittet	lt
 8004238:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800423c:	461f      	movlt	r7, r3
 800423e:	2300      	movge	r3, #0
 8004240:	232d      	movlt	r3, #45	@ 0x2d
 8004242:	700b      	strb	r3, [r1, #0]
 8004244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004246:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800424a:	4691      	mov	r9, r2
 800424c:	f023 0820 	bic.w	r8, r3, #32
 8004250:	bfbc      	itt	lt
 8004252:	4632      	movlt	r2, r6
 8004254:	4616      	movlt	r6, r2
 8004256:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800425a:	d005      	beq.n	8004268 <__cvt+0x42>
 800425c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004260:	d100      	bne.n	8004264 <__cvt+0x3e>
 8004262:	3401      	adds	r4, #1
 8004264:	2102      	movs	r1, #2
 8004266:	e000      	b.n	800426a <__cvt+0x44>
 8004268:	2103      	movs	r1, #3
 800426a:	ab03      	add	r3, sp, #12
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	ab02      	add	r3, sp, #8
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	ec47 6b10 	vmov	d0, r6, r7
 8004276:	4653      	mov	r3, sl
 8004278:	4622      	mov	r2, r4
 800427a:	f000 ff09 	bl	8005090 <_dtoa_r>
 800427e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004282:	4605      	mov	r5, r0
 8004284:	d119      	bne.n	80042ba <__cvt+0x94>
 8004286:	f019 0f01 	tst.w	r9, #1
 800428a:	d00e      	beq.n	80042aa <__cvt+0x84>
 800428c:	eb00 0904 	add.w	r9, r0, r4
 8004290:	2200      	movs	r2, #0
 8004292:	2300      	movs	r3, #0
 8004294:	4630      	mov	r0, r6
 8004296:	4639      	mov	r1, r7
 8004298:	f7fc fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800429c:	b108      	cbz	r0, 80042a2 <__cvt+0x7c>
 800429e:	f8cd 900c 	str.w	r9, [sp, #12]
 80042a2:	2230      	movs	r2, #48	@ 0x30
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	454b      	cmp	r3, r9
 80042a8:	d31e      	bcc.n	80042e8 <__cvt+0xc2>
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042ae:	1b5b      	subs	r3, r3, r5
 80042b0:	4628      	mov	r0, r5
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	b004      	add	sp, #16
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042be:	eb00 0904 	add.w	r9, r0, r4
 80042c2:	d1e5      	bne.n	8004290 <__cvt+0x6a>
 80042c4:	7803      	ldrb	r3, [r0, #0]
 80042c6:	2b30      	cmp	r3, #48	@ 0x30
 80042c8:	d10a      	bne.n	80042e0 <__cvt+0xba>
 80042ca:	2200      	movs	r2, #0
 80042cc:	2300      	movs	r3, #0
 80042ce:	4630      	mov	r0, r6
 80042d0:	4639      	mov	r1, r7
 80042d2:	f7fc fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80042d6:	b918      	cbnz	r0, 80042e0 <__cvt+0xba>
 80042d8:	f1c4 0401 	rsb	r4, r4, #1
 80042dc:	f8ca 4000 	str.w	r4, [sl]
 80042e0:	f8da 3000 	ldr.w	r3, [sl]
 80042e4:	4499      	add	r9, r3
 80042e6:	e7d3      	b.n	8004290 <__cvt+0x6a>
 80042e8:	1c59      	adds	r1, r3, #1
 80042ea:	9103      	str	r1, [sp, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e7d9      	b.n	80042a4 <__cvt+0x7e>

080042f0 <__exponent>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	2900      	cmp	r1, #0
 80042f4:	bfba      	itte	lt
 80042f6:	4249      	neglt	r1, r1
 80042f8:	232d      	movlt	r3, #45	@ 0x2d
 80042fa:	232b      	movge	r3, #43	@ 0x2b
 80042fc:	2909      	cmp	r1, #9
 80042fe:	7002      	strb	r2, [r0, #0]
 8004300:	7043      	strb	r3, [r0, #1]
 8004302:	dd29      	ble.n	8004358 <__exponent+0x68>
 8004304:	f10d 0307 	add.w	r3, sp, #7
 8004308:	461d      	mov	r5, r3
 800430a:	270a      	movs	r7, #10
 800430c:	461a      	mov	r2, r3
 800430e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004312:	fb07 1416 	mls	r4, r7, r6, r1
 8004316:	3430      	adds	r4, #48	@ 0x30
 8004318:	f802 4c01 	strb.w	r4, [r2, #-1]
 800431c:	460c      	mov	r4, r1
 800431e:	2c63      	cmp	r4, #99	@ 0x63
 8004320:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004324:	4631      	mov	r1, r6
 8004326:	dcf1      	bgt.n	800430c <__exponent+0x1c>
 8004328:	3130      	adds	r1, #48	@ 0x30
 800432a:	1e94      	subs	r4, r2, #2
 800432c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004330:	1c41      	adds	r1, r0, #1
 8004332:	4623      	mov	r3, r4
 8004334:	42ab      	cmp	r3, r5
 8004336:	d30a      	bcc.n	800434e <__exponent+0x5e>
 8004338:	f10d 0309 	add.w	r3, sp, #9
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	42ac      	cmp	r4, r5
 8004340:	bf88      	it	hi
 8004342:	2300      	movhi	r3, #0
 8004344:	3302      	adds	r3, #2
 8004346:	4403      	add	r3, r0
 8004348:	1a18      	subs	r0, r3, r0
 800434a:	b003      	add	sp, #12
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004352:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004356:	e7ed      	b.n	8004334 <__exponent+0x44>
 8004358:	2330      	movs	r3, #48	@ 0x30
 800435a:	3130      	adds	r1, #48	@ 0x30
 800435c:	7083      	strb	r3, [r0, #2]
 800435e:	70c1      	strb	r1, [r0, #3]
 8004360:	1d03      	adds	r3, r0, #4
 8004362:	e7f1      	b.n	8004348 <__exponent+0x58>

08004364 <_printf_float>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	b08d      	sub	sp, #52	@ 0x34
 800436a:	460c      	mov	r4, r1
 800436c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004370:	4616      	mov	r6, r2
 8004372:	461f      	mov	r7, r3
 8004374:	4605      	mov	r5, r0
 8004376:	f000 fd89 	bl	8004e8c <_localeconv_r>
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fb ff7e 	bl	8000280 <strlen>
 8004384:	2300      	movs	r3, #0
 8004386:	930a      	str	r3, [sp, #40]	@ 0x28
 8004388:	f8d8 3000 	ldr.w	r3, [r8]
 800438c:	9005      	str	r0, [sp, #20]
 800438e:	3307      	adds	r3, #7
 8004390:	f023 0307 	bic.w	r3, r3, #7
 8004394:	f103 0208 	add.w	r2, r3, #8
 8004398:	f894 a018 	ldrb.w	sl, [r4, #24]
 800439c:	f8d4 b000 	ldr.w	fp, [r4]
 80043a0:	f8c8 2000 	str.w	r2, [r8]
 80043a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043ac:	9307      	str	r3, [sp, #28]
 80043ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80043b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ba:	4b9c      	ldr	r3, [pc, #624]	@ (800462c <_printf_float+0x2c8>)
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043c0:	f7fc fbbc 	bl	8000b3c <__aeabi_dcmpun>
 80043c4:	bb70      	cbnz	r0, 8004424 <_printf_float+0xc0>
 80043c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ca:	4b98      	ldr	r3, [pc, #608]	@ (800462c <_printf_float+0x2c8>)
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043d0:	f7fc fb96 	bl	8000b00 <__aeabi_dcmple>
 80043d4:	bb30      	cbnz	r0, 8004424 <_printf_float+0xc0>
 80043d6:	2200      	movs	r2, #0
 80043d8:	2300      	movs	r3, #0
 80043da:	4640      	mov	r0, r8
 80043dc:	4649      	mov	r1, r9
 80043de:	f7fc fb85 	bl	8000aec <__aeabi_dcmplt>
 80043e2:	b110      	cbz	r0, 80043ea <_printf_float+0x86>
 80043e4:	232d      	movs	r3, #45	@ 0x2d
 80043e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ea:	4a91      	ldr	r2, [pc, #580]	@ (8004630 <_printf_float+0x2cc>)
 80043ec:	4b91      	ldr	r3, [pc, #580]	@ (8004634 <_printf_float+0x2d0>)
 80043ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80043f2:	bf8c      	ite	hi
 80043f4:	4690      	movhi	r8, r2
 80043f6:	4698      	movls	r8, r3
 80043f8:	2303      	movs	r3, #3
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	f02b 0304 	bic.w	r3, fp, #4
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	9700      	str	r7, [sp, #0]
 8004408:	4633      	mov	r3, r6
 800440a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800440c:	4621      	mov	r1, r4
 800440e:	4628      	mov	r0, r5
 8004410:	f000 f9d2 	bl	80047b8 <_printf_common>
 8004414:	3001      	adds	r0, #1
 8004416:	f040 808d 	bne.w	8004534 <_printf_float+0x1d0>
 800441a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800441e:	b00d      	add	sp, #52	@ 0x34
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc fb86 	bl	8000b3c <__aeabi_dcmpun>
 8004430:	b140      	cbz	r0, 8004444 <_printf_float+0xe0>
 8004432:	464b      	mov	r3, r9
 8004434:	2b00      	cmp	r3, #0
 8004436:	bfbc      	itt	lt
 8004438:	232d      	movlt	r3, #45	@ 0x2d
 800443a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800443e:	4a7e      	ldr	r2, [pc, #504]	@ (8004638 <_printf_float+0x2d4>)
 8004440:	4b7e      	ldr	r3, [pc, #504]	@ (800463c <_printf_float+0x2d8>)
 8004442:	e7d4      	b.n	80043ee <_printf_float+0x8a>
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800444a:	9206      	str	r2, [sp, #24]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	d13b      	bne.n	80044c8 <_printf_float+0x164>
 8004450:	2306      	movs	r3, #6
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004458:	2300      	movs	r3, #0
 800445a:	6022      	str	r2, [r4, #0]
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004460:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004464:	ab09      	add	r3, sp, #36	@ 0x24
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	6861      	ldr	r1, [r4, #4]
 800446a:	ec49 8b10 	vmov	d0, r8, r9
 800446e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004472:	4628      	mov	r0, r5
 8004474:	f7ff fed7 	bl	8004226 <__cvt>
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800447c:	2b47      	cmp	r3, #71	@ 0x47
 800447e:	4680      	mov	r8, r0
 8004480:	d129      	bne.n	80044d6 <_printf_float+0x172>
 8004482:	1cc8      	adds	r0, r1, #3
 8004484:	db02      	blt.n	800448c <_printf_float+0x128>
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	4299      	cmp	r1, r3
 800448a:	dd41      	ble.n	8004510 <_printf_float+0x1ac>
 800448c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004490:	fa5f fa8a 	uxtb.w	sl, sl
 8004494:	3901      	subs	r1, #1
 8004496:	4652      	mov	r2, sl
 8004498:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800449c:	9109      	str	r1, [sp, #36]	@ 0x24
 800449e:	f7ff ff27 	bl	80042f0 <__exponent>
 80044a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044a4:	1813      	adds	r3, r2, r0
 80044a6:	2a01      	cmp	r2, #1
 80044a8:	4681      	mov	r9, r0
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	dc02      	bgt.n	80044b4 <_printf_float+0x150>
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	07d2      	lsls	r2, r2, #31
 80044b2:	d501      	bpl.n	80044b8 <_printf_float+0x154>
 80044b4:	3301      	adds	r3, #1
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0a2      	beq.n	8004406 <_printf_float+0xa2>
 80044c0:	232d      	movs	r3, #45	@ 0x2d
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c6:	e79e      	b.n	8004406 <_printf_float+0xa2>
 80044c8:	9a06      	ldr	r2, [sp, #24]
 80044ca:	2a47      	cmp	r2, #71	@ 0x47
 80044cc:	d1c2      	bne.n	8004454 <_printf_float+0xf0>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1c0      	bne.n	8004454 <_printf_float+0xf0>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e7bd      	b.n	8004452 <_printf_float+0xee>
 80044d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044da:	d9db      	bls.n	8004494 <_printf_float+0x130>
 80044dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80044e0:	d118      	bne.n	8004514 <_printf_float+0x1b0>
 80044e2:	2900      	cmp	r1, #0
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	dd0b      	ble.n	8004500 <_printf_float+0x19c>
 80044e8:	6121      	str	r1, [r4, #16]
 80044ea:	b913      	cbnz	r3, 80044f2 <_printf_float+0x18e>
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	07d0      	lsls	r0, r2, #31
 80044f0:	d502      	bpl.n	80044f8 <_printf_float+0x194>
 80044f2:	3301      	adds	r3, #1
 80044f4:	440b      	add	r3, r1
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80044fa:	f04f 0900 	mov.w	r9, #0
 80044fe:	e7db      	b.n	80044b8 <_printf_float+0x154>
 8004500:	b913      	cbnz	r3, 8004508 <_printf_float+0x1a4>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	07d2      	lsls	r2, r2, #31
 8004506:	d501      	bpl.n	800450c <_printf_float+0x1a8>
 8004508:	3302      	adds	r3, #2
 800450a:	e7f4      	b.n	80044f6 <_printf_float+0x192>
 800450c:	2301      	movs	r3, #1
 800450e:	e7f2      	b.n	80044f6 <_printf_float+0x192>
 8004510:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004516:	4299      	cmp	r1, r3
 8004518:	db05      	blt.n	8004526 <_printf_float+0x1c2>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	6121      	str	r1, [r4, #16]
 800451e:	07d8      	lsls	r0, r3, #31
 8004520:	d5ea      	bpl.n	80044f8 <_printf_float+0x194>
 8004522:	1c4b      	adds	r3, r1, #1
 8004524:	e7e7      	b.n	80044f6 <_printf_float+0x192>
 8004526:	2900      	cmp	r1, #0
 8004528:	bfd4      	ite	le
 800452a:	f1c1 0202 	rsble	r2, r1, #2
 800452e:	2201      	movgt	r2, #1
 8004530:	4413      	add	r3, r2
 8004532:	e7e0      	b.n	80044f6 <_printf_float+0x192>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	055a      	lsls	r2, r3, #21
 8004538:	d407      	bmi.n	800454a <_printf_float+0x1e6>
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	4642      	mov	r2, r8
 800453e:	4631      	mov	r1, r6
 8004540:	4628      	mov	r0, r5
 8004542:	47b8      	blx	r7
 8004544:	3001      	adds	r0, #1
 8004546:	d12b      	bne.n	80045a0 <_printf_float+0x23c>
 8004548:	e767      	b.n	800441a <_printf_float+0xb6>
 800454a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800454e:	f240 80dd 	bls.w	800470c <_printf_float+0x3a8>
 8004552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004556:	2200      	movs	r2, #0
 8004558:	2300      	movs	r3, #0
 800455a:	f7fc fabd 	bl	8000ad8 <__aeabi_dcmpeq>
 800455e:	2800      	cmp	r0, #0
 8004560:	d033      	beq.n	80045ca <_printf_float+0x266>
 8004562:	4a37      	ldr	r2, [pc, #220]	@ (8004640 <_printf_float+0x2dc>)
 8004564:	2301      	movs	r3, #1
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f af54 	beq.w	800441a <_printf_float+0xb6>
 8004572:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004576:	4543      	cmp	r3, r8
 8004578:	db02      	blt.n	8004580 <_printf_float+0x21c>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	07d8      	lsls	r0, r3, #31
 800457e:	d50f      	bpl.n	80045a0 <_printf_float+0x23c>
 8004580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	f43f af45 	beq.w	800441a <_printf_float+0xb6>
 8004590:	f04f 0900 	mov.w	r9, #0
 8004594:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004598:	f104 0a1a 	add.w	sl, r4, #26
 800459c:	45c8      	cmp	r8, r9
 800459e:	dc09      	bgt.n	80045b4 <_printf_float+0x250>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	079b      	lsls	r3, r3, #30
 80045a4:	f100 8103 	bmi.w	80047ae <_printf_float+0x44a>
 80045a8:	68e0      	ldr	r0, [r4, #12]
 80045aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045ac:	4298      	cmp	r0, r3
 80045ae:	bfb8      	it	lt
 80045b0:	4618      	movlt	r0, r3
 80045b2:	e734      	b.n	800441e <_printf_float+0xba>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4652      	mov	r2, sl
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af2b 	beq.w	800441a <_printf_float+0xb6>
 80045c4:	f109 0901 	add.w	r9, r9, #1
 80045c8:	e7e8      	b.n	800459c <_printf_float+0x238>
 80045ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dc39      	bgt.n	8004644 <_printf_float+0x2e0>
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <_printf_float+0x2dc>)
 80045d2:	2301      	movs	r3, #1
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	f43f af1d 	beq.w	800441a <_printf_float+0xb6>
 80045e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80045e4:	ea59 0303 	orrs.w	r3, r9, r3
 80045e8:	d102      	bne.n	80045f0 <_printf_float+0x28c>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	07d9      	lsls	r1, r3, #31
 80045ee:	d5d7      	bpl.n	80045a0 <_printf_float+0x23c>
 80045f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	f43f af0d 	beq.w	800441a <_printf_float+0xb6>
 8004600:	f04f 0a00 	mov.w	sl, #0
 8004604:	f104 0b1a 	add.w	fp, r4, #26
 8004608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800460a:	425b      	negs	r3, r3
 800460c:	4553      	cmp	r3, sl
 800460e:	dc01      	bgt.n	8004614 <_printf_float+0x2b0>
 8004610:	464b      	mov	r3, r9
 8004612:	e793      	b.n	800453c <_printf_float+0x1d8>
 8004614:	2301      	movs	r3, #1
 8004616:	465a      	mov	r2, fp
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f aefb 	beq.w	800441a <_printf_float+0xb6>
 8004624:	f10a 0a01 	add.w	sl, sl, #1
 8004628:	e7ee      	b.n	8004608 <_printf_float+0x2a4>
 800462a:	bf00      	nop
 800462c:	7fefffff 	.word	0x7fefffff
 8004630:	08006fc8 	.word	0x08006fc8
 8004634:	08006fc4 	.word	0x08006fc4
 8004638:	08006fd0 	.word	0x08006fd0
 800463c:	08006fcc 	.word	0x08006fcc
 8004640:	08006fd4 	.word	0x08006fd4
 8004644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004646:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800464a:	4553      	cmp	r3, sl
 800464c:	bfa8      	it	ge
 800464e:	4653      	movge	r3, sl
 8004650:	2b00      	cmp	r3, #0
 8004652:	4699      	mov	r9, r3
 8004654:	dc36      	bgt.n	80046c4 <_printf_float+0x360>
 8004656:	f04f 0b00 	mov.w	fp, #0
 800465a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800465e:	f104 021a 	add.w	r2, r4, #26
 8004662:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004664:	9306      	str	r3, [sp, #24]
 8004666:	eba3 0309 	sub.w	r3, r3, r9
 800466a:	455b      	cmp	r3, fp
 800466c:	dc31      	bgt.n	80046d2 <_printf_float+0x36e>
 800466e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004670:	459a      	cmp	sl, r3
 8004672:	dc3a      	bgt.n	80046ea <_printf_float+0x386>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	07da      	lsls	r2, r3, #31
 8004678:	d437      	bmi.n	80046ea <_printf_float+0x386>
 800467a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800467c:	ebaa 0903 	sub.w	r9, sl, r3
 8004680:	9b06      	ldr	r3, [sp, #24]
 8004682:	ebaa 0303 	sub.w	r3, sl, r3
 8004686:	4599      	cmp	r9, r3
 8004688:	bfa8      	it	ge
 800468a:	4699      	movge	r9, r3
 800468c:	f1b9 0f00 	cmp.w	r9, #0
 8004690:	dc33      	bgt.n	80046fa <_printf_float+0x396>
 8004692:	f04f 0800 	mov.w	r8, #0
 8004696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469a:	f104 0b1a 	add.w	fp, r4, #26
 800469e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a0:	ebaa 0303 	sub.w	r3, sl, r3
 80046a4:	eba3 0309 	sub.w	r3, r3, r9
 80046a8:	4543      	cmp	r3, r8
 80046aa:	f77f af79 	ble.w	80045a0 <_printf_float+0x23c>
 80046ae:	2301      	movs	r3, #1
 80046b0:	465a      	mov	r2, fp
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f aeae 	beq.w	800441a <_printf_float+0xb6>
 80046be:	f108 0801 	add.w	r8, r8, #1
 80046c2:	e7ec      	b.n	800469e <_printf_float+0x33a>
 80046c4:	4642      	mov	r2, r8
 80046c6:	4631      	mov	r1, r6
 80046c8:	4628      	mov	r0, r5
 80046ca:	47b8      	blx	r7
 80046cc:	3001      	adds	r0, #1
 80046ce:	d1c2      	bne.n	8004656 <_printf_float+0x2f2>
 80046d0:	e6a3      	b.n	800441a <_printf_float+0xb6>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4631      	mov	r1, r6
 80046d6:	4628      	mov	r0, r5
 80046d8:	9206      	str	r2, [sp, #24]
 80046da:	47b8      	blx	r7
 80046dc:	3001      	adds	r0, #1
 80046de:	f43f ae9c 	beq.w	800441a <_printf_float+0xb6>
 80046e2:	9a06      	ldr	r2, [sp, #24]
 80046e4:	f10b 0b01 	add.w	fp, fp, #1
 80046e8:	e7bb      	b.n	8004662 <_printf_float+0x2fe>
 80046ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ee:	4631      	mov	r1, r6
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b8      	blx	r7
 80046f4:	3001      	adds	r0, #1
 80046f6:	d1c0      	bne.n	800467a <_printf_float+0x316>
 80046f8:	e68f      	b.n	800441a <_printf_float+0xb6>
 80046fa:	9a06      	ldr	r2, [sp, #24]
 80046fc:	464b      	mov	r3, r9
 80046fe:	4442      	add	r2, r8
 8004700:	4631      	mov	r1, r6
 8004702:	4628      	mov	r0, r5
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	d1c3      	bne.n	8004692 <_printf_float+0x32e>
 800470a:	e686      	b.n	800441a <_printf_float+0xb6>
 800470c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004710:	f1ba 0f01 	cmp.w	sl, #1
 8004714:	dc01      	bgt.n	800471a <_printf_float+0x3b6>
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d536      	bpl.n	8004788 <_printf_float+0x424>
 800471a:	2301      	movs	r3, #1
 800471c:	4642      	mov	r2, r8
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f ae78 	beq.w	800441a <_printf_float+0xb6>
 800472a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f ae70 	beq.w	800441a <_printf_float+0xb6>
 800473a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800473e:	2200      	movs	r2, #0
 8004740:	2300      	movs	r3, #0
 8004742:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004746:	f7fc f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800474a:	b9c0      	cbnz	r0, 800477e <_printf_float+0x41a>
 800474c:	4653      	mov	r3, sl
 800474e:	f108 0201 	add.w	r2, r8, #1
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	d10c      	bne.n	8004776 <_printf_float+0x412>
 800475c:	e65d      	b.n	800441a <_printf_float+0xb6>
 800475e:	2301      	movs	r3, #1
 8004760:	465a      	mov	r2, fp
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f ae56 	beq.w	800441a <_printf_float+0xb6>
 800476e:	f108 0801 	add.w	r8, r8, #1
 8004772:	45d0      	cmp	r8, sl
 8004774:	dbf3      	blt.n	800475e <_printf_float+0x3fa>
 8004776:	464b      	mov	r3, r9
 8004778:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800477c:	e6df      	b.n	800453e <_printf_float+0x1da>
 800477e:	f04f 0800 	mov.w	r8, #0
 8004782:	f104 0b1a 	add.w	fp, r4, #26
 8004786:	e7f4      	b.n	8004772 <_printf_float+0x40e>
 8004788:	2301      	movs	r3, #1
 800478a:	4642      	mov	r2, r8
 800478c:	e7e1      	b.n	8004752 <_printf_float+0x3ee>
 800478e:	2301      	movs	r3, #1
 8004790:	464a      	mov	r2, r9
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f ae3e 	beq.w	800441a <_printf_float+0xb6>
 800479e:	f108 0801 	add.w	r8, r8, #1
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	4543      	cmp	r3, r8
 80047aa:	dcf0      	bgt.n	800478e <_printf_float+0x42a>
 80047ac:	e6fc      	b.n	80045a8 <_printf_float+0x244>
 80047ae:	f04f 0800 	mov.w	r8, #0
 80047b2:	f104 0919 	add.w	r9, r4, #25
 80047b6:	e7f4      	b.n	80047a2 <_printf_float+0x43e>

080047b8 <_printf_common>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	4616      	mov	r6, r2
 80047be:	4698      	mov	r8, r3
 80047c0:	688a      	ldr	r2, [r1, #8]
 80047c2:	690b      	ldr	r3, [r1, #16]
 80047c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bfb8      	it	lt
 80047cc:	4613      	movlt	r3, r2
 80047ce:	6033      	str	r3, [r6, #0]
 80047d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047d4:	4607      	mov	r7, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	b10a      	cbz	r2, 80047de <_printf_common+0x26>
 80047da:	3301      	adds	r3, #1
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	0699      	lsls	r1, r3, #26
 80047e2:	bf42      	ittt	mi
 80047e4:	6833      	ldrmi	r3, [r6, #0]
 80047e6:	3302      	addmi	r3, #2
 80047e8:	6033      	strmi	r3, [r6, #0]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f015 0506 	ands.w	r5, r5, #6
 80047f0:	d106      	bne.n	8004800 <_printf_common+0x48>
 80047f2:	f104 0a19 	add.w	sl, r4, #25
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	6832      	ldr	r2, [r6, #0]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	42ab      	cmp	r3, r5
 80047fe:	dc26      	bgt.n	800484e <_printf_common+0x96>
 8004800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	3b00      	subs	r3, #0
 8004808:	bf18      	it	ne
 800480a:	2301      	movne	r3, #1
 800480c:	0692      	lsls	r2, r2, #26
 800480e:	d42b      	bmi.n	8004868 <_printf_common+0xb0>
 8004810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004814:	4641      	mov	r1, r8
 8004816:	4638      	mov	r0, r7
 8004818:	47c8      	blx	r9
 800481a:	3001      	adds	r0, #1
 800481c:	d01e      	beq.n	800485c <_printf_common+0xa4>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	2b04      	cmp	r3, #4
 8004828:	bf02      	ittt	eq
 800482a:	68e5      	ldreq	r5, [r4, #12]
 800482c:	6833      	ldreq	r3, [r6, #0]
 800482e:	1aed      	subeq	r5, r5, r3
 8004830:	68a3      	ldr	r3, [r4, #8]
 8004832:	bf0c      	ite	eq
 8004834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004838:	2500      	movne	r5, #0
 800483a:	4293      	cmp	r3, r2
 800483c:	bfc4      	itt	gt
 800483e:	1a9b      	subgt	r3, r3, r2
 8004840:	18ed      	addgt	r5, r5, r3
 8004842:	2600      	movs	r6, #0
 8004844:	341a      	adds	r4, #26
 8004846:	42b5      	cmp	r5, r6
 8004848:	d11a      	bne.n	8004880 <_printf_common+0xc8>
 800484a:	2000      	movs	r0, #0
 800484c:	e008      	b.n	8004860 <_printf_common+0xa8>
 800484e:	2301      	movs	r3, #1
 8004850:	4652      	mov	r2, sl
 8004852:	4641      	mov	r1, r8
 8004854:	4638      	mov	r0, r7
 8004856:	47c8      	blx	r9
 8004858:	3001      	adds	r0, #1
 800485a:	d103      	bne.n	8004864 <_printf_common+0xac>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004864:	3501      	adds	r5, #1
 8004866:	e7c6      	b.n	80047f6 <_printf_common+0x3e>
 8004868:	18e1      	adds	r1, r4, r3
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	2030      	movs	r0, #48	@ 0x30
 800486e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004872:	4422      	add	r2, r4
 8004874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800487c:	3302      	adds	r3, #2
 800487e:	e7c7      	b.n	8004810 <_printf_common+0x58>
 8004880:	2301      	movs	r3, #1
 8004882:	4622      	mov	r2, r4
 8004884:	4641      	mov	r1, r8
 8004886:	4638      	mov	r0, r7
 8004888:	47c8      	blx	r9
 800488a:	3001      	adds	r0, #1
 800488c:	d0e6      	beq.n	800485c <_printf_common+0xa4>
 800488e:	3601      	adds	r6, #1
 8004890:	e7d9      	b.n	8004846 <_printf_common+0x8e>
	...

08004894 <_printf_i>:
 8004894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	7e0f      	ldrb	r7, [r1, #24]
 800489a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800489c:	2f78      	cmp	r7, #120	@ 0x78
 800489e:	4691      	mov	r9, r2
 80048a0:	4680      	mov	r8, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	469a      	mov	sl, r3
 80048a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048aa:	d807      	bhi.n	80048bc <_printf_i+0x28>
 80048ac:	2f62      	cmp	r7, #98	@ 0x62
 80048ae:	d80a      	bhi.n	80048c6 <_printf_i+0x32>
 80048b0:	2f00      	cmp	r7, #0
 80048b2:	f000 80d1 	beq.w	8004a58 <_printf_i+0x1c4>
 80048b6:	2f58      	cmp	r7, #88	@ 0x58
 80048b8:	f000 80b8 	beq.w	8004a2c <_printf_i+0x198>
 80048bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048c4:	e03a      	b.n	800493c <_printf_i+0xa8>
 80048c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048ca:	2b15      	cmp	r3, #21
 80048cc:	d8f6      	bhi.n	80048bc <_printf_i+0x28>
 80048ce:	a101      	add	r1, pc, #4	@ (adr r1, 80048d4 <_printf_i+0x40>)
 80048d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	08004941 	.word	0x08004941
 80048dc:	080048bd 	.word	0x080048bd
 80048e0:	080048bd 	.word	0x080048bd
 80048e4:	080048bd 	.word	0x080048bd
 80048e8:	080048bd 	.word	0x080048bd
 80048ec:	08004941 	.word	0x08004941
 80048f0:	080048bd 	.word	0x080048bd
 80048f4:	080048bd 	.word	0x080048bd
 80048f8:	080048bd 	.word	0x080048bd
 80048fc:	080048bd 	.word	0x080048bd
 8004900:	08004a3f 	.word	0x08004a3f
 8004904:	0800496b 	.word	0x0800496b
 8004908:	080049f9 	.word	0x080049f9
 800490c:	080048bd 	.word	0x080048bd
 8004910:	080048bd 	.word	0x080048bd
 8004914:	08004a61 	.word	0x08004a61
 8004918:	080048bd 	.word	0x080048bd
 800491c:	0800496b 	.word	0x0800496b
 8004920:	080048bd 	.word	0x080048bd
 8004924:	080048bd 	.word	0x080048bd
 8004928:	08004a01 	.word	0x08004a01
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6032      	str	r2, [r6, #0]
 8004934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800493c:	2301      	movs	r3, #1
 800493e:	e09c      	b.n	8004a7a <_printf_i+0x1e6>
 8004940:	6833      	ldr	r3, [r6, #0]
 8004942:	6820      	ldr	r0, [r4, #0]
 8004944:	1d19      	adds	r1, r3, #4
 8004946:	6031      	str	r1, [r6, #0]
 8004948:	0606      	lsls	r6, r0, #24
 800494a:	d501      	bpl.n	8004950 <_printf_i+0xbc>
 800494c:	681d      	ldr	r5, [r3, #0]
 800494e:	e003      	b.n	8004958 <_printf_i+0xc4>
 8004950:	0645      	lsls	r5, r0, #25
 8004952:	d5fb      	bpl.n	800494c <_printf_i+0xb8>
 8004954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004958:	2d00      	cmp	r5, #0
 800495a:	da03      	bge.n	8004964 <_printf_i+0xd0>
 800495c:	232d      	movs	r3, #45	@ 0x2d
 800495e:	426d      	negs	r5, r5
 8004960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004964:	4858      	ldr	r0, [pc, #352]	@ (8004ac8 <_printf_i+0x234>)
 8004966:	230a      	movs	r3, #10
 8004968:	e011      	b.n	800498e <_printf_i+0xfa>
 800496a:	6821      	ldr	r1, [r4, #0]
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	0608      	lsls	r0, r1, #24
 8004970:	f853 5b04 	ldr.w	r5, [r3], #4
 8004974:	d402      	bmi.n	800497c <_printf_i+0xe8>
 8004976:	0649      	lsls	r1, r1, #25
 8004978:	bf48      	it	mi
 800497a:	b2ad      	uxthmi	r5, r5
 800497c:	2f6f      	cmp	r7, #111	@ 0x6f
 800497e:	4852      	ldr	r0, [pc, #328]	@ (8004ac8 <_printf_i+0x234>)
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	bf14      	ite	ne
 8004984:	230a      	movne	r3, #10
 8004986:	2308      	moveq	r3, #8
 8004988:	2100      	movs	r1, #0
 800498a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800498e:	6866      	ldr	r6, [r4, #4]
 8004990:	60a6      	str	r6, [r4, #8]
 8004992:	2e00      	cmp	r6, #0
 8004994:	db05      	blt.n	80049a2 <_printf_i+0x10e>
 8004996:	6821      	ldr	r1, [r4, #0]
 8004998:	432e      	orrs	r6, r5
 800499a:	f021 0104 	bic.w	r1, r1, #4
 800499e:	6021      	str	r1, [r4, #0]
 80049a0:	d04b      	beq.n	8004a3a <_printf_i+0x1a6>
 80049a2:	4616      	mov	r6, r2
 80049a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049a8:	fb03 5711 	mls	r7, r3, r1, r5
 80049ac:	5dc7      	ldrb	r7, [r0, r7]
 80049ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049b2:	462f      	mov	r7, r5
 80049b4:	42bb      	cmp	r3, r7
 80049b6:	460d      	mov	r5, r1
 80049b8:	d9f4      	bls.n	80049a4 <_printf_i+0x110>
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d10b      	bne.n	80049d6 <_printf_i+0x142>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07df      	lsls	r7, r3, #31
 80049c2:	d508      	bpl.n	80049d6 <_printf_i+0x142>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6861      	ldr	r1, [r4, #4]
 80049c8:	4299      	cmp	r1, r3
 80049ca:	bfde      	ittt	le
 80049cc:	2330      	movle	r3, #48	@ 0x30
 80049ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80049d6:	1b92      	subs	r2, r2, r6
 80049d8:	6122      	str	r2, [r4, #16]
 80049da:	f8cd a000 	str.w	sl, [sp]
 80049de:	464b      	mov	r3, r9
 80049e0:	aa03      	add	r2, sp, #12
 80049e2:	4621      	mov	r1, r4
 80049e4:	4640      	mov	r0, r8
 80049e6:	f7ff fee7 	bl	80047b8 <_printf_common>
 80049ea:	3001      	adds	r0, #1
 80049ec:	d14a      	bne.n	8004a84 <_printf_i+0x1f0>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049f2:	b004      	add	sp, #16
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f043 0320 	orr.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	4832      	ldr	r0, [pc, #200]	@ (8004acc <_printf_i+0x238>)
 8004a02:	2778      	movs	r7, #120	@ 0x78
 8004a04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	6831      	ldr	r1, [r6, #0]
 8004a0c:	061f      	lsls	r7, r3, #24
 8004a0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a12:	d402      	bmi.n	8004a1a <_printf_i+0x186>
 8004a14:	065f      	lsls	r7, r3, #25
 8004a16:	bf48      	it	mi
 8004a18:	b2ad      	uxthmi	r5, r5
 8004a1a:	6031      	str	r1, [r6, #0]
 8004a1c:	07d9      	lsls	r1, r3, #31
 8004a1e:	bf44      	itt	mi
 8004a20:	f043 0320 	orrmi.w	r3, r3, #32
 8004a24:	6023      	strmi	r3, [r4, #0]
 8004a26:	b11d      	cbz	r5, 8004a30 <_printf_i+0x19c>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	e7ad      	b.n	8004988 <_printf_i+0xf4>
 8004a2c:	4826      	ldr	r0, [pc, #152]	@ (8004ac8 <_printf_i+0x234>)
 8004a2e:	e7e9      	b.n	8004a04 <_printf_i+0x170>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	f023 0320 	bic.w	r3, r3, #32
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	e7f6      	b.n	8004a28 <_printf_i+0x194>
 8004a3a:	4616      	mov	r6, r2
 8004a3c:	e7bd      	b.n	80049ba <_printf_i+0x126>
 8004a3e:	6833      	ldr	r3, [r6, #0]
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	6961      	ldr	r1, [r4, #20]
 8004a44:	1d18      	adds	r0, r3, #4
 8004a46:	6030      	str	r0, [r6, #0]
 8004a48:	062e      	lsls	r6, r5, #24
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	d501      	bpl.n	8004a52 <_printf_i+0x1be>
 8004a4e:	6019      	str	r1, [r3, #0]
 8004a50:	e002      	b.n	8004a58 <_printf_i+0x1c4>
 8004a52:	0668      	lsls	r0, r5, #25
 8004a54:	d5fb      	bpl.n	8004a4e <_printf_i+0x1ba>
 8004a56:	8019      	strh	r1, [r3, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	e7bc      	b.n	80049da <_printf_i+0x146>
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	6032      	str	r2, [r6, #0]
 8004a66:	681e      	ldr	r6, [r3, #0]
 8004a68:	6862      	ldr	r2, [r4, #4]
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7fb fbb7 	bl	80001e0 <memchr>
 8004a72:	b108      	cbz	r0, 8004a78 <_printf_i+0x1e4>
 8004a74:	1b80      	subs	r0, r0, r6
 8004a76:	6060      	str	r0, [r4, #4]
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a82:	e7aa      	b.n	80049da <_printf_i+0x146>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	4632      	mov	r2, r6
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	47d0      	blx	sl
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d0ad      	beq.n	80049ee <_printf_i+0x15a>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	079b      	lsls	r3, r3, #30
 8004a96:	d413      	bmi.n	8004ac0 <_printf_i+0x22c>
 8004a98:	68e0      	ldr	r0, [r4, #12]
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	4298      	cmp	r0, r3
 8004a9e:	bfb8      	it	lt
 8004aa0:	4618      	movlt	r0, r3
 8004aa2:	e7a6      	b.n	80049f2 <_printf_i+0x15e>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4640      	mov	r0, r8
 8004aac:	47d0      	blx	sl
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d09d      	beq.n	80049ee <_printf_i+0x15a>
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	68e3      	ldr	r3, [r4, #12]
 8004ab6:	9903      	ldr	r1, [sp, #12]
 8004ab8:	1a5b      	subs	r3, r3, r1
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	dcf2      	bgt.n	8004aa4 <_printf_i+0x210>
 8004abe:	e7eb      	b.n	8004a98 <_printf_i+0x204>
 8004ac0:	2500      	movs	r5, #0
 8004ac2:	f104 0619 	add.w	r6, r4, #25
 8004ac6:	e7f5      	b.n	8004ab4 <_printf_i+0x220>
 8004ac8:	08006fd6 	.word	0x08006fd6
 8004acc:	08006fe7 	.word	0x08006fe7

08004ad0 <std>:
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8004ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ade:	6083      	str	r3, [r0, #8]
 8004ae0:	8181      	strh	r1, [r0, #12]
 8004ae2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ae4:	81c2      	strh	r2, [r0, #14]
 8004ae6:	6183      	str	r3, [r0, #24]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	2208      	movs	r2, #8
 8004aec:	305c      	adds	r0, #92	@ 0x5c
 8004aee:	f000 f9c5 	bl	8004e7c <memset>
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <std+0x58>)
 8004af4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <std+0x5c>)
 8004af8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <std+0x60>)
 8004afc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <std+0x64>)
 8004b00:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x68>)
 8004b04:	6224      	str	r4, [r4, #32]
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d006      	beq.n	8004b18 <std+0x48>
 8004b0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b0e:	4294      	cmp	r4, r2
 8004b10:	d002      	beq.n	8004b18 <std+0x48>
 8004b12:	33d0      	adds	r3, #208	@ 0xd0
 8004b14:	429c      	cmp	r4, r3
 8004b16:	d105      	bne.n	8004b24 <std+0x54>
 8004b18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b20:	f000 ba28 	b.w	8004f74 <__retarget_lock_init_recursive>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	08004c55 	.word	0x08004c55
 8004b2c:	08004c77 	.word	0x08004c77
 8004b30:	08004caf 	.word	0x08004caf
 8004b34:	08004cd3 	.word	0x08004cd3
 8004b38:	20000334 	.word	0x20000334

08004b3c <stdio_exit_handler>:
 8004b3c:	4a02      	ldr	r2, [pc, #8]	@ (8004b48 <stdio_exit_handler+0xc>)
 8004b3e:	4903      	ldr	r1, [pc, #12]	@ (8004b4c <stdio_exit_handler+0x10>)
 8004b40:	4803      	ldr	r0, [pc, #12]	@ (8004b50 <stdio_exit_handler+0x14>)
 8004b42:	f000 b869 	b.w	8004c18 <_fwalk_sglue>
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c
 8004b4c:	08006b61 	.word	0x08006b61
 8004b50:	2000001c 	.word	0x2000001c

08004b54 <cleanup_stdio>:
 8004b54:	6841      	ldr	r1, [r0, #4]
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <cleanup_stdio+0x34>)
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	d001      	beq.n	8004b64 <cleanup_stdio+0x10>
 8004b60:	f001 fffe 	bl	8006b60 <_fflush_r>
 8004b64:	68a1      	ldr	r1, [r4, #8]
 8004b66:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <cleanup_stdio+0x38>)
 8004b68:	4299      	cmp	r1, r3
 8004b6a:	d002      	beq.n	8004b72 <cleanup_stdio+0x1e>
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f001 fff7 	bl	8006b60 <_fflush_r>
 8004b72:	68e1      	ldr	r1, [r4, #12]
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <cleanup_stdio+0x3c>)
 8004b76:	4299      	cmp	r1, r3
 8004b78:	d004      	beq.n	8004b84 <cleanup_stdio+0x30>
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b80:	f001 bfee 	b.w	8006b60 <_fflush_r>
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	bf00      	nop
 8004b88:	20000334 	.word	0x20000334
 8004b8c:	2000039c 	.word	0x2000039c
 8004b90:	20000404 	.word	0x20000404

08004b94 <global_stdio_init.part.0>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <global_stdio_init.part.0+0x30>)
 8004b98:	4c0b      	ldr	r4, [pc, #44]	@ (8004bc8 <global_stdio_init.part.0+0x34>)
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004bcc <global_stdio_init.part.0+0x38>)
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	f7ff ff94 	bl	8004ad0 <std>
 8004ba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bac:	2201      	movs	r2, #1
 8004bae:	2109      	movs	r1, #9
 8004bb0:	f7ff ff8e 	bl	8004ad0 <std>
 8004bb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bb8:	2202      	movs	r2, #2
 8004bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bbe:	2112      	movs	r1, #18
 8004bc0:	f7ff bf86 	b.w	8004ad0 <std>
 8004bc4:	2000046c 	.word	0x2000046c
 8004bc8:	20000334 	.word	0x20000334
 8004bcc:	08004b3d 	.word	0x08004b3d

08004bd0 <__sfp_lock_acquire>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	@ (8004bd8 <__sfp_lock_acquire+0x8>)
 8004bd2:	f000 b9d0 	b.w	8004f76 <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20000475 	.word	0x20000475

08004bdc <__sfp_lock_release>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	@ (8004be4 <__sfp_lock_release+0x8>)
 8004bde:	f000 b9cb 	b.w	8004f78 <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	20000475 	.word	0x20000475

08004be8 <__sinit>:
 8004be8:	b510      	push	{r4, lr}
 8004bea:	4604      	mov	r4, r0
 8004bec:	f7ff fff0 	bl	8004bd0 <__sfp_lock_acquire>
 8004bf0:	6a23      	ldr	r3, [r4, #32]
 8004bf2:	b11b      	cbz	r3, 8004bfc <__sinit+0x14>
 8004bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf8:	f7ff bff0 	b.w	8004bdc <__sfp_lock_release>
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <__sinit+0x28>)
 8004bfe:	6223      	str	r3, [r4, #32]
 8004c00:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <__sinit+0x2c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f5      	bne.n	8004bf4 <__sinit+0xc>
 8004c08:	f7ff ffc4 	bl	8004b94 <global_stdio_init.part.0>
 8004c0c:	e7f2      	b.n	8004bf4 <__sinit+0xc>
 8004c0e:	bf00      	nop
 8004c10:	08004b55 	.word	0x08004b55
 8004c14:	2000046c 	.word	0x2000046c

08004c18 <_fwalk_sglue>:
 8004c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	4688      	mov	r8, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	2600      	movs	r6, #0
 8004c24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c28:	f1b9 0901 	subs.w	r9, r9, #1
 8004c2c:	d505      	bpl.n	8004c3a <_fwalk_sglue+0x22>
 8004c2e:	6824      	ldr	r4, [r4, #0]
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	d1f7      	bne.n	8004c24 <_fwalk_sglue+0xc>
 8004c34:	4630      	mov	r0, r6
 8004c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c3a:	89ab      	ldrh	r3, [r5, #12]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d907      	bls.n	8004c50 <_fwalk_sglue+0x38>
 8004c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c44:	3301      	adds	r3, #1
 8004c46:	d003      	beq.n	8004c50 <_fwalk_sglue+0x38>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	47c0      	blx	r8
 8004c4e:	4306      	orrs	r6, r0
 8004c50:	3568      	adds	r5, #104	@ 0x68
 8004c52:	e7e9      	b.n	8004c28 <_fwalk_sglue+0x10>

08004c54 <__sread>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	460c      	mov	r4, r1
 8004c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5c:	f000 f93c 	bl	8004ed8 <_read_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	bfab      	itete	ge
 8004c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c66:	89a3      	ldrhlt	r3, [r4, #12]
 8004c68:	181b      	addge	r3, r3, r0
 8004c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c6e:	bfac      	ite	ge
 8004c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c72:	81a3      	strhlt	r3, [r4, #12]
 8004c74:	bd10      	pop	{r4, pc}

08004c76 <__swrite>:
 8004c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	898b      	ldrh	r3, [r1, #12]
 8004c7e:	05db      	lsls	r3, r3, #23
 8004c80:	4605      	mov	r5, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	4616      	mov	r6, r2
 8004c86:	d505      	bpl.n	8004c94 <__swrite+0x1e>
 8004c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f000 f910 	bl	8004eb4 <_lseek_r>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004caa:	f000 b927 	b.w	8004efc <_write_r>

08004cae <__sseek>:
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb6:	f000 f8fd 	bl	8004eb4 <_lseek_r>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	bf15      	itete	ne
 8004cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cca:	81a3      	strheq	r3, [r4, #12]
 8004ccc:	bf18      	it	ne
 8004cce:	81a3      	strhne	r3, [r4, #12]
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <__sclose>:
 8004cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd6:	f000 b8dd 	b.w	8004e94 <_close_r>

08004cda <_vsniprintf_r>:
 8004cda:	b530      	push	{r4, r5, lr}
 8004cdc:	4614      	mov	r4, r2
 8004cde:	2c00      	cmp	r4, #0
 8004ce0:	b09b      	sub	sp, #108	@ 0x6c
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	da05      	bge.n	8004cf4 <_vsniprintf_r+0x1a>
 8004ce8:	238b      	movs	r3, #139	@ 0x8b
 8004cea:	6003      	str	r3, [r0, #0]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cf0:	b01b      	add	sp, #108	@ 0x6c
 8004cf2:	bd30      	pop	{r4, r5, pc}
 8004cf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004cf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	9319      	str	r3, [sp, #100]	@ 0x64
 8004d02:	bf14      	ite	ne
 8004d04:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004d08:	4623      	moveq	r3, r4
 8004d0a:	9302      	str	r3, [sp, #8]
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d12:	9100      	str	r1, [sp, #0]
 8004d14:	9104      	str	r1, [sp, #16]
 8004d16:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004d1a:	4669      	mov	r1, sp
 8004d1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004d1e:	f001 fc5d 	bl	80065dc <_svfiprintf_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	bfbc      	itt	lt
 8004d26:	238b      	movlt	r3, #139	@ 0x8b
 8004d28:	602b      	strlt	r3, [r5, #0]
 8004d2a:	2c00      	cmp	r4, #0
 8004d2c:	d0e0      	beq.n	8004cf0 <_vsniprintf_r+0x16>
 8004d2e:	9b00      	ldr	r3, [sp, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e7dc      	b.n	8004cf0 <_vsniprintf_r+0x16>
	...

08004d38 <vsniprintf>:
 8004d38:	b507      	push	{r0, r1, r2, lr}
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	460a      	mov	r2, r1
 8004d40:	4601      	mov	r1, r0
 8004d42:	4803      	ldr	r0, [pc, #12]	@ (8004d50 <vsniprintf+0x18>)
 8004d44:	6800      	ldr	r0, [r0, #0]
 8004d46:	f7ff ffc8 	bl	8004cda <_vsniprintf_r>
 8004d4a:	b003      	add	sp, #12
 8004d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d50:	20000018 	.word	0x20000018

08004d54 <__swbuf_r>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	460e      	mov	r6, r1
 8004d58:	4614      	mov	r4, r2
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	b118      	cbz	r0, 8004d66 <__swbuf_r+0x12>
 8004d5e:	6a03      	ldr	r3, [r0, #32]
 8004d60:	b90b      	cbnz	r3, 8004d66 <__swbuf_r+0x12>
 8004d62:	f7ff ff41 	bl	8004be8 <__sinit>
 8004d66:	69a3      	ldr	r3, [r4, #24]
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	071a      	lsls	r2, r3, #28
 8004d6e:	d501      	bpl.n	8004d74 <__swbuf_r+0x20>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	b943      	cbnz	r3, 8004d86 <__swbuf_r+0x32>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f82a 	bl	8004dd0 <__swsetup_r>
 8004d7c:	b118      	cbz	r0, 8004d86 <__swbuf_r+0x32>
 8004d7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004d82:	4638      	mov	r0, r7
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	6922      	ldr	r2, [r4, #16]
 8004d8a:	1a98      	subs	r0, r3, r2
 8004d8c:	6963      	ldr	r3, [r4, #20]
 8004d8e:	b2f6      	uxtb	r6, r6
 8004d90:	4283      	cmp	r3, r0
 8004d92:	4637      	mov	r7, r6
 8004d94:	dc05      	bgt.n	8004da2 <__swbuf_r+0x4e>
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f001 fee1 	bl	8006b60 <_fflush_r>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d1ed      	bne.n	8004d7e <__swbuf_r+0x2a>
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	60a3      	str	r3, [r4, #8]
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	6022      	str	r2, [r4, #0]
 8004dae:	701e      	strb	r6, [r3, #0]
 8004db0:	6962      	ldr	r2, [r4, #20]
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d004      	beq.n	8004dc2 <__swbuf_r+0x6e>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	07db      	lsls	r3, r3, #31
 8004dbc:	d5e1      	bpl.n	8004d82 <__swbuf_r+0x2e>
 8004dbe:	2e0a      	cmp	r6, #10
 8004dc0:	d1df      	bne.n	8004d82 <__swbuf_r+0x2e>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f001 fecb 	bl	8006b60 <_fflush_r>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0d9      	beq.n	8004d82 <__swbuf_r+0x2e>
 8004dce:	e7d6      	b.n	8004d7e <__swbuf_r+0x2a>

08004dd0 <__swsetup_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4b29      	ldr	r3, [pc, #164]	@ (8004e78 <__swsetup_r+0xa8>)
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	460c      	mov	r4, r1
 8004dda:	b118      	cbz	r0, 8004de4 <__swsetup_r+0x14>
 8004ddc:	6a03      	ldr	r3, [r0, #32]
 8004dde:	b90b      	cbnz	r3, 8004de4 <__swsetup_r+0x14>
 8004de0:	f7ff ff02 	bl	8004be8 <__sinit>
 8004de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de8:	0719      	lsls	r1, r3, #28
 8004dea:	d422      	bmi.n	8004e32 <__swsetup_r+0x62>
 8004dec:	06da      	lsls	r2, r3, #27
 8004dee:	d407      	bmi.n	8004e00 <__swsetup_r+0x30>
 8004df0:	2209      	movs	r2, #9
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dfe:	e033      	b.n	8004e68 <__swsetup_r+0x98>
 8004e00:	0758      	lsls	r0, r3, #29
 8004e02:	d512      	bpl.n	8004e2a <__swsetup_r+0x5a>
 8004e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e06:	b141      	cbz	r1, 8004e1a <__swsetup_r+0x4a>
 8004e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	d002      	beq.n	8004e16 <__swsetup_r+0x46>
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 ff0d 	bl	8005c30 <_free_r>
 8004e16:	2300      	movs	r3, #0
 8004e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	2300      	movs	r3, #0
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	f043 0308 	orr.w	r3, r3, #8
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	b94b      	cbnz	r3, 8004e4a <__swsetup_r+0x7a>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d003      	beq.n	8004e4a <__swsetup_r+0x7a>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f001 fed9 	bl	8006bfc <__smakebuf_r>
 8004e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4e:	f013 0201 	ands.w	r2, r3, #1
 8004e52:	d00a      	beq.n	8004e6a <__swsetup_r+0x9a>
 8004e54:	2200      	movs	r2, #0
 8004e56:	60a2      	str	r2, [r4, #8]
 8004e58:	6962      	ldr	r2, [r4, #20]
 8004e5a:	4252      	negs	r2, r2
 8004e5c:	61a2      	str	r2, [r4, #24]
 8004e5e:	6922      	ldr	r2, [r4, #16]
 8004e60:	b942      	cbnz	r2, 8004e74 <__swsetup_r+0xa4>
 8004e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e66:	d1c5      	bne.n	8004df4 <__swsetup_r+0x24>
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	0799      	lsls	r1, r3, #30
 8004e6c:	bf58      	it	pl
 8004e6e:	6962      	ldrpl	r2, [r4, #20]
 8004e70:	60a2      	str	r2, [r4, #8]
 8004e72:	e7f4      	b.n	8004e5e <__swsetup_r+0x8e>
 8004e74:	2000      	movs	r0, #0
 8004e76:	e7f7      	b.n	8004e68 <__swsetup_r+0x98>
 8004e78:	20000018 	.word	0x20000018

08004e7c <memset>:
 8004e7c:	4402      	add	r2, r0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d100      	bne.n	8004e86 <memset+0xa>
 8004e84:	4770      	bx	lr
 8004e86:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8a:	e7f9      	b.n	8004e80 <memset+0x4>

08004e8c <_localeconv_r>:
 8004e8c:	4800      	ldr	r0, [pc, #0]	@ (8004e90 <_localeconv_r+0x4>)
 8004e8e:	4770      	bx	lr
 8004e90:	20000158 	.word	0x20000158

08004e94 <_close_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d06      	ldr	r5, [pc, #24]	@ (8004eb0 <_close_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f7fe fd86 	bl	80039b0 <_close>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_close_r+0x1a>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_close_r+0x1a>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000470 	.word	0x20000470

08004eb4 <_lseek_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	@ (8004ed4 <_lseek_r+0x20>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	4608      	mov	r0, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fe fd35 	bl	8003932 <_lseek>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_lseek_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_lseek_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000470 	.word	0x20000470

08004ed8 <_read_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	@ (8004ef8 <_read_r+0x20>)
 8004edc:	4604      	mov	r4, r0
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	602a      	str	r2, [r5, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7fe fccd 	bl	8003886 <_read>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_read_r+0x1e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_read_r+0x1e>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000470 	.word	0x20000470

08004efc <_write_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d07      	ldr	r5, [pc, #28]	@ (8004f1c <_write_r+0x20>)
 8004f00:	4604      	mov	r4, r0
 8004f02:	4608      	mov	r0, r1
 8004f04:	4611      	mov	r1, r2
 8004f06:	2200      	movs	r2, #0
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f7fe fd23 	bl	8003956 <_write>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_write_r+0x1e>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_write_r+0x1e>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000470 	.word	0x20000470

08004f20 <__errno>:
 8004f20:	4b01      	ldr	r3, [pc, #4]	@ (8004f28 <__errno+0x8>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000018 	.word	0x20000018

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f64 <__libc_init_array+0x38>)
 8004f30:	4c0d      	ldr	r4, [pc, #52]	@ (8004f68 <__libc_init_array+0x3c>)
 8004f32:	1b64      	subs	r4, r4, r5
 8004f34:	10a4      	asrs	r4, r4, #2
 8004f36:	2600      	movs	r6, #0
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f6c <__libc_init_array+0x40>)
 8004f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004f70 <__libc_init_array+0x44>)
 8004f40:	f001 ffe2 	bl	8006f08 <_init>
 8004f44:	1b64      	subs	r4, r4, r5
 8004f46:	10a4      	asrs	r4, r4, #2
 8004f48:	2600      	movs	r6, #0
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	08007344 	.word	0x08007344
 8004f68:	08007344 	.word	0x08007344
 8004f6c:	08007344 	.word	0x08007344
 8004f70:	08007348 	.word	0x08007348

08004f74 <__retarget_lock_init_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_acquire_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <__retarget_lock_release_recursive>:
 8004f78:	4770      	bx	lr

08004f7a <quorem>:
 8004f7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7e:	6903      	ldr	r3, [r0, #16]
 8004f80:	690c      	ldr	r4, [r1, #16]
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	4607      	mov	r7, r0
 8004f86:	db7e      	blt.n	8005086 <quorem+0x10c>
 8004f88:	3c01      	subs	r4, #1
 8004f8a:	f101 0814 	add.w	r8, r1, #20
 8004f8e:	00a3      	lsls	r3, r4, #2
 8004f90:	f100 0514 	add.w	r5, r0, #20
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fb0:	d32e      	bcc.n	8005010 <quorem+0x96>
 8004fb2:	f04f 0a00 	mov.w	sl, #0
 8004fb6:	46c4      	mov	ip, r8
 8004fb8:	46ae      	mov	lr, r5
 8004fba:	46d3      	mov	fp, sl
 8004fbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fc0:	b298      	uxth	r0, r3
 8004fc2:	fb06 a000 	mla	r0, r6, r0, sl
 8004fc6:	0c02      	lsrs	r2, r0, #16
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	fb06 2303 	mla	r3, r6, r3, r2
 8004fce:	f8de 2000 	ldr.w	r2, [lr]
 8004fd2:	b280      	uxth	r0, r0
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	1a12      	subs	r2, r2, r0
 8004fd8:	445a      	add	r2, fp
 8004fda:	f8de 0000 	ldr.w	r0, [lr]
 8004fde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004fe8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004fec:	b292      	uxth	r2, r2
 8004fee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ff2:	45e1      	cmp	r9, ip
 8004ff4:	f84e 2b04 	str.w	r2, [lr], #4
 8004ff8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ffc:	d2de      	bcs.n	8004fbc <quorem+0x42>
 8004ffe:	9b00      	ldr	r3, [sp, #0]
 8005000:	58eb      	ldr	r3, [r5, r3]
 8005002:	b92b      	cbnz	r3, 8005010 <quorem+0x96>
 8005004:	9b01      	ldr	r3, [sp, #4]
 8005006:	3b04      	subs	r3, #4
 8005008:	429d      	cmp	r5, r3
 800500a:	461a      	mov	r2, r3
 800500c:	d32f      	bcc.n	800506e <quorem+0xf4>
 800500e:	613c      	str	r4, [r7, #16]
 8005010:	4638      	mov	r0, r7
 8005012:	f001 f97f 	bl	8006314 <__mcmp>
 8005016:	2800      	cmp	r0, #0
 8005018:	db25      	blt.n	8005066 <quorem+0xec>
 800501a:	4629      	mov	r1, r5
 800501c:	2000      	movs	r0, #0
 800501e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005022:	f8d1 c000 	ldr.w	ip, [r1]
 8005026:	fa1f fe82 	uxth.w	lr, r2
 800502a:	fa1f f38c 	uxth.w	r3, ip
 800502e:	eba3 030e 	sub.w	r3, r3, lr
 8005032:	4403      	add	r3, r0
 8005034:	0c12      	lsrs	r2, r2, #16
 8005036:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800503a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005044:	45c1      	cmp	r9, r8
 8005046:	f841 3b04 	str.w	r3, [r1], #4
 800504a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800504e:	d2e6      	bcs.n	800501e <quorem+0xa4>
 8005050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005058:	b922      	cbnz	r2, 8005064 <quorem+0xea>
 800505a:	3b04      	subs	r3, #4
 800505c:	429d      	cmp	r5, r3
 800505e:	461a      	mov	r2, r3
 8005060:	d30b      	bcc.n	800507a <quorem+0x100>
 8005062:	613c      	str	r4, [r7, #16]
 8005064:	3601      	adds	r6, #1
 8005066:	4630      	mov	r0, r6
 8005068:	b003      	add	sp, #12
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	3b04      	subs	r3, #4
 8005072:	2a00      	cmp	r2, #0
 8005074:	d1cb      	bne.n	800500e <quorem+0x94>
 8005076:	3c01      	subs	r4, #1
 8005078:	e7c6      	b.n	8005008 <quorem+0x8e>
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	3b04      	subs	r3, #4
 800507e:	2a00      	cmp	r2, #0
 8005080:	d1ef      	bne.n	8005062 <quorem+0xe8>
 8005082:	3c01      	subs	r4, #1
 8005084:	e7ea      	b.n	800505c <quorem+0xe2>
 8005086:	2000      	movs	r0, #0
 8005088:	e7ee      	b.n	8005068 <quorem+0xee>
 800508a:	0000      	movs	r0, r0
 800508c:	0000      	movs	r0, r0
	...

08005090 <_dtoa_r>:
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	69c7      	ldr	r7, [r0, #28]
 8005096:	b097      	sub	sp, #92	@ 0x5c
 8005098:	ed8d 0b04 	vstr	d0, [sp, #16]
 800509c:	ec55 4b10 	vmov	r4, r5, d0
 80050a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80050a2:	9107      	str	r1, [sp, #28]
 80050a4:	4681      	mov	r9, r0
 80050a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80050a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80050aa:	b97f      	cbnz	r7, 80050cc <_dtoa_r+0x3c>
 80050ac:	2010      	movs	r0, #16
 80050ae:	f000 fe09 	bl	8005cc4 <malloc>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80050b8:	b920      	cbnz	r0, 80050c4 <_dtoa_r+0x34>
 80050ba:	4ba9      	ldr	r3, [pc, #676]	@ (8005360 <_dtoa_r+0x2d0>)
 80050bc:	21ef      	movs	r1, #239	@ 0xef
 80050be:	48a9      	ldr	r0, [pc, #676]	@ (8005364 <_dtoa_r+0x2d4>)
 80050c0:	f001 fe32 	bl	8006d28 <__assert_func>
 80050c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80050c8:	6007      	str	r7, [r0, #0]
 80050ca:	60c7      	str	r7, [r0, #12]
 80050cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	b159      	cbz	r1, 80050ec <_dtoa_r+0x5c>
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	604a      	str	r2, [r1, #4]
 80050d8:	2301      	movs	r3, #1
 80050da:	4093      	lsls	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
 80050de:	4648      	mov	r0, r9
 80050e0:	f000 fee6 	bl	8005eb0 <_Bfree>
 80050e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	1e2b      	subs	r3, r5, #0
 80050ee:	bfb9      	ittee	lt
 80050f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80050f4:	9305      	strlt	r3, [sp, #20]
 80050f6:	2300      	movge	r3, #0
 80050f8:	6033      	strge	r3, [r6, #0]
 80050fa:	9f05      	ldr	r7, [sp, #20]
 80050fc:	4b9a      	ldr	r3, [pc, #616]	@ (8005368 <_dtoa_r+0x2d8>)
 80050fe:	bfbc      	itt	lt
 8005100:	2201      	movlt	r2, #1
 8005102:	6032      	strlt	r2, [r6, #0]
 8005104:	43bb      	bics	r3, r7
 8005106:	d112      	bne.n	800512e <_dtoa_r+0x9e>
 8005108:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800510a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005114:	4323      	orrs	r3, r4
 8005116:	f000 855a 	beq.w	8005bce <_dtoa_r+0xb3e>
 800511a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800511c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800537c <_dtoa_r+0x2ec>
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 855c 	beq.w	8005bde <_dtoa_r+0xb4e>
 8005126:	f10a 0303 	add.w	r3, sl, #3
 800512a:	f000 bd56 	b.w	8005bda <_dtoa_r+0xb4a>
 800512e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005132:	2200      	movs	r2, #0
 8005134:	ec51 0b17 	vmov	r0, r1, d7
 8005138:	2300      	movs	r3, #0
 800513a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800513e:	f7fb fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005142:	4680      	mov	r8, r0
 8005144:	b158      	cbz	r0, 800515e <_dtoa_r+0xce>
 8005146:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005148:	2301      	movs	r3, #1
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800514e:	b113      	cbz	r3, 8005156 <_dtoa_r+0xc6>
 8005150:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005152:	4b86      	ldr	r3, [pc, #536]	@ (800536c <_dtoa_r+0x2dc>)
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005380 <_dtoa_r+0x2f0>
 800515a:	f000 bd40 	b.w	8005bde <_dtoa_r+0xb4e>
 800515e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005162:	aa14      	add	r2, sp, #80	@ 0x50
 8005164:	a915      	add	r1, sp, #84	@ 0x54
 8005166:	4648      	mov	r0, r9
 8005168:	f001 f984 	bl	8006474 <__d2b>
 800516c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005170:	9002      	str	r0, [sp, #8]
 8005172:	2e00      	cmp	r6, #0
 8005174:	d078      	beq.n	8005268 <_dtoa_r+0x1d8>
 8005176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005178:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800517c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005180:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005184:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005188:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800518c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005190:	4619      	mov	r1, r3
 8005192:	2200      	movs	r2, #0
 8005194:	4b76      	ldr	r3, [pc, #472]	@ (8005370 <_dtoa_r+0x2e0>)
 8005196:	f7fb f87f 	bl	8000298 <__aeabi_dsub>
 800519a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005348 <_dtoa_r+0x2b8>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb fa32 	bl	8000608 <__aeabi_dmul>
 80051a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8005350 <_dtoa_r+0x2c0>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb f877 	bl	800029c <__adddf3>
 80051ae:	4604      	mov	r4, r0
 80051b0:	4630      	mov	r0, r6
 80051b2:	460d      	mov	r5, r1
 80051b4:	f7fb f9be 	bl	8000534 <__aeabi_i2d>
 80051b8:	a367      	add	r3, pc, #412	@ (adr r3, 8005358 <_dtoa_r+0x2c8>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb fa23 	bl	8000608 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f867 	bl	800029c <__adddf3>
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	f7fb fcc9 	bl	8000b68 <__aeabi_d2iz>
 80051d6:	2200      	movs	r2, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	2300      	movs	r3, #0
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb fc84 	bl	8000aec <__aeabi_dcmplt>
 80051e4:	b140      	cbz	r0, 80051f8 <_dtoa_r+0x168>
 80051e6:	4638      	mov	r0, r7
 80051e8:	f7fb f9a4 	bl	8000534 <__aeabi_i2d>
 80051ec:	4622      	mov	r2, r4
 80051ee:	462b      	mov	r3, r5
 80051f0:	f7fb fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f4:	b900      	cbnz	r0, 80051f8 <_dtoa_r+0x168>
 80051f6:	3f01      	subs	r7, #1
 80051f8:	2f16      	cmp	r7, #22
 80051fa:	d852      	bhi.n	80052a2 <_dtoa_r+0x212>
 80051fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005374 <_dtoa_r+0x2e4>)
 80051fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800520a:	f7fb fc6f 	bl	8000aec <__aeabi_dcmplt>
 800520e:	2800      	cmp	r0, #0
 8005210:	d049      	beq.n	80052a6 <_dtoa_r+0x216>
 8005212:	3f01      	subs	r7, #1
 8005214:	2300      	movs	r3, #0
 8005216:	9310      	str	r3, [sp, #64]	@ 0x40
 8005218:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800521a:	1b9b      	subs	r3, r3, r6
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	bf45      	ittet	mi
 8005220:	f1c3 0301 	rsbmi	r3, r3, #1
 8005224:	9300      	strmi	r3, [sp, #0]
 8005226:	2300      	movpl	r3, #0
 8005228:	2300      	movmi	r3, #0
 800522a:	9206      	str	r2, [sp, #24]
 800522c:	bf54      	ite	pl
 800522e:	9300      	strpl	r3, [sp, #0]
 8005230:	9306      	strmi	r3, [sp, #24]
 8005232:	2f00      	cmp	r7, #0
 8005234:	db39      	blt.n	80052aa <_dtoa_r+0x21a>
 8005236:	9b06      	ldr	r3, [sp, #24]
 8005238:	970d      	str	r7, [sp, #52]	@ 0x34
 800523a:	443b      	add	r3, r7
 800523c:	9306      	str	r3, [sp, #24]
 800523e:	2300      	movs	r3, #0
 8005240:	9308      	str	r3, [sp, #32]
 8005242:	9b07      	ldr	r3, [sp, #28]
 8005244:	2b09      	cmp	r3, #9
 8005246:	d863      	bhi.n	8005310 <_dtoa_r+0x280>
 8005248:	2b05      	cmp	r3, #5
 800524a:	bfc4      	itt	gt
 800524c:	3b04      	subgt	r3, #4
 800524e:	9307      	strgt	r3, [sp, #28]
 8005250:	9b07      	ldr	r3, [sp, #28]
 8005252:	f1a3 0302 	sub.w	r3, r3, #2
 8005256:	bfcc      	ite	gt
 8005258:	2400      	movgt	r4, #0
 800525a:	2401      	movle	r4, #1
 800525c:	2b03      	cmp	r3, #3
 800525e:	d863      	bhi.n	8005328 <_dtoa_r+0x298>
 8005260:	e8df f003 	tbb	[pc, r3]
 8005264:	2b375452 	.word	0x2b375452
 8005268:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800526c:	441e      	add	r6, r3
 800526e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005272:	2b20      	cmp	r3, #32
 8005274:	bfc1      	itttt	gt
 8005276:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800527a:	409f      	lslgt	r7, r3
 800527c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005280:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005284:	bfd6      	itet	le
 8005286:	f1c3 0320 	rsble	r3, r3, #32
 800528a:	ea47 0003 	orrgt.w	r0, r7, r3
 800528e:	fa04 f003 	lslle.w	r0, r4, r3
 8005292:	f7fb f93f 	bl	8000514 <__aeabi_ui2d>
 8005296:	2201      	movs	r2, #1
 8005298:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800529c:	3e01      	subs	r6, #1
 800529e:	9212      	str	r2, [sp, #72]	@ 0x48
 80052a0:	e776      	b.n	8005190 <_dtoa_r+0x100>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7b7      	b.n	8005216 <_dtoa_r+0x186>
 80052a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80052a8:	e7b6      	b.n	8005218 <_dtoa_r+0x188>
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	1bdb      	subs	r3, r3, r7
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	427b      	negs	r3, r7
 80052b2:	9308      	str	r3, [sp, #32]
 80052b4:	2300      	movs	r3, #0
 80052b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80052b8:	e7c3      	b.n	8005242 <_dtoa_r+0x1b2>
 80052ba:	2301      	movs	r3, #1
 80052bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052c0:	eb07 0b03 	add.w	fp, r7, r3
 80052c4:	f10b 0301 	add.w	r3, fp, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	bfb8      	it	lt
 80052ce:	2301      	movlt	r3, #1
 80052d0:	e006      	b.n	80052e0 <_dtoa_r+0x250>
 80052d2:	2301      	movs	r3, #1
 80052d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dd28      	ble.n	800532e <_dtoa_r+0x29e>
 80052dc:	469b      	mov	fp, r3
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80052e4:	2100      	movs	r1, #0
 80052e6:	2204      	movs	r2, #4
 80052e8:	f102 0514 	add.w	r5, r2, #20
 80052ec:	429d      	cmp	r5, r3
 80052ee:	d926      	bls.n	800533e <_dtoa_r+0x2ae>
 80052f0:	6041      	str	r1, [r0, #4]
 80052f2:	4648      	mov	r0, r9
 80052f4:	f000 fd9c 	bl	8005e30 <_Balloc>
 80052f8:	4682      	mov	sl, r0
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d142      	bne.n	8005384 <_dtoa_r+0x2f4>
 80052fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <_dtoa_r+0x2e8>)
 8005300:	4602      	mov	r2, r0
 8005302:	f240 11af 	movw	r1, #431	@ 0x1af
 8005306:	e6da      	b.n	80050be <_dtoa_r+0x2e>
 8005308:	2300      	movs	r3, #0
 800530a:	e7e3      	b.n	80052d4 <_dtoa_r+0x244>
 800530c:	2300      	movs	r3, #0
 800530e:	e7d5      	b.n	80052bc <_dtoa_r+0x22c>
 8005310:	2401      	movs	r4, #1
 8005312:	2300      	movs	r3, #0
 8005314:	9307      	str	r3, [sp, #28]
 8005316:	9409      	str	r4, [sp, #36]	@ 0x24
 8005318:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800531c:	2200      	movs	r2, #0
 800531e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005322:	2312      	movs	r3, #18
 8005324:	920c      	str	r2, [sp, #48]	@ 0x30
 8005326:	e7db      	b.n	80052e0 <_dtoa_r+0x250>
 8005328:	2301      	movs	r3, #1
 800532a:	9309      	str	r3, [sp, #36]	@ 0x24
 800532c:	e7f4      	b.n	8005318 <_dtoa_r+0x288>
 800532e:	f04f 0b01 	mov.w	fp, #1
 8005332:	f8cd b00c 	str.w	fp, [sp, #12]
 8005336:	465b      	mov	r3, fp
 8005338:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800533c:	e7d0      	b.n	80052e0 <_dtoa_r+0x250>
 800533e:	3101      	adds	r1, #1
 8005340:	0052      	lsls	r2, r2, #1
 8005342:	e7d1      	b.n	80052e8 <_dtoa_r+0x258>
 8005344:	f3af 8000 	nop.w
 8005348:	636f4361 	.word	0x636f4361
 800534c:	3fd287a7 	.word	0x3fd287a7
 8005350:	8b60c8b3 	.word	0x8b60c8b3
 8005354:	3fc68a28 	.word	0x3fc68a28
 8005358:	509f79fb 	.word	0x509f79fb
 800535c:	3fd34413 	.word	0x3fd34413
 8005360:	08007005 	.word	0x08007005
 8005364:	0800701c 	.word	0x0800701c
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	08006fd5 	.word	0x08006fd5
 8005370:	3ff80000 	.word	0x3ff80000
 8005374:	08007170 	.word	0x08007170
 8005378:	08007074 	.word	0x08007074
 800537c:	08007001 	.word	0x08007001
 8005380:	08006fd4 	.word	0x08006fd4
 8005384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005388:	6018      	str	r0, [r3, #0]
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	2b0e      	cmp	r3, #14
 800538e:	f200 80a1 	bhi.w	80054d4 <_dtoa_r+0x444>
 8005392:	2c00      	cmp	r4, #0
 8005394:	f000 809e 	beq.w	80054d4 <_dtoa_r+0x444>
 8005398:	2f00      	cmp	r7, #0
 800539a:	dd33      	ble.n	8005404 <_dtoa_r+0x374>
 800539c:	4b9c      	ldr	r3, [pc, #624]	@ (8005610 <_dtoa_r+0x580>)
 800539e:	f007 020f 	and.w	r2, r7, #15
 80053a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a6:	ed93 7b00 	vldr	d7, [r3]
 80053aa:	05f8      	lsls	r0, r7, #23
 80053ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80053b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053b4:	d516      	bpl.n	80053e4 <_dtoa_r+0x354>
 80053b6:	4b97      	ldr	r3, [pc, #604]	@ (8005614 <_dtoa_r+0x584>)
 80053b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053c0:	f7fb fa4c 	bl	800085c <__aeabi_ddiv>
 80053c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053c8:	f004 040f 	and.w	r4, r4, #15
 80053cc:	2603      	movs	r6, #3
 80053ce:	4d91      	ldr	r5, [pc, #580]	@ (8005614 <_dtoa_r+0x584>)
 80053d0:	b954      	cbnz	r4, 80053e8 <_dtoa_r+0x358>
 80053d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80053d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053da:	f7fb fa3f 	bl	800085c <__aeabi_ddiv>
 80053de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e2:	e028      	b.n	8005436 <_dtoa_r+0x3a6>
 80053e4:	2602      	movs	r6, #2
 80053e6:	e7f2      	b.n	80053ce <_dtoa_r+0x33e>
 80053e8:	07e1      	lsls	r1, r4, #31
 80053ea:	d508      	bpl.n	80053fe <_dtoa_r+0x36e>
 80053ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80053f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053f4:	f7fb f908 	bl	8000608 <__aeabi_dmul>
 80053f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053fc:	3601      	adds	r6, #1
 80053fe:	1064      	asrs	r4, r4, #1
 8005400:	3508      	adds	r5, #8
 8005402:	e7e5      	b.n	80053d0 <_dtoa_r+0x340>
 8005404:	f000 80af 	beq.w	8005566 <_dtoa_r+0x4d6>
 8005408:	427c      	negs	r4, r7
 800540a:	4b81      	ldr	r3, [pc, #516]	@ (8005610 <_dtoa_r+0x580>)
 800540c:	4d81      	ldr	r5, [pc, #516]	@ (8005614 <_dtoa_r+0x584>)
 800540e:	f004 020f 	and.w	r2, r4, #15
 8005412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800541e:	f7fb f8f3 	bl	8000608 <__aeabi_dmul>
 8005422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005426:	1124      	asrs	r4, r4, #4
 8005428:	2300      	movs	r3, #0
 800542a:	2602      	movs	r6, #2
 800542c:	2c00      	cmp	r4, #0
 800542e:	f040 808f 	bne.w	8005550 <_dtoa_r+0x4c0>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d3      	bne.n	80053de <_dtoa_r+0x34e>
 8005436:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005438:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8094 	beq.w	800556a <_dtoa_r+0x4da>
 8005442:	4b75      	ldr	r3, [pc, #468]	@ (8005618 <_dtoa_r+0x588>)
 8005444:	2200      	movs	r2, #0
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fb fb4f 	bl	8000aec <__aeabi_dcmplt>
 800544e:	2800      	cmp	r0, #0
 8005450:	f000 808b 	beq.w	800556a <_dtoa_r+0x4da>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8087 	beq.w	800556a <_dtoa_r+0x4da>
 800545c:	f1bb 0f00 	cmp.w	fp, #0
 8005460:	dd34      	ble.n	80054cc <_dtoa_r+0x43c>
 8005462:	4620      	mov	r0, r4
 8005464:	4b6d      	ldr	r3, [pc, #436]	@ (800561c <_dtoa_r+0x58c>)
 8005466:	2200      	movs	r2, #0
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb f8cd 	bl	8000608 <__aeabi_dmul>
 800546e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005472:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005476:	3601      	adds	r6, #1
 8005478:	465c      	mov	r4, fp
 800547a:	4630      	mov	r0, r6
 800547c:	f7fb f85a 	bl	8000534 <__aeabi_i2d>
 8005480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005484:	f7fb f8c0 	bl	8000608 <__aeabi_dmul>
 8005488:	4b65      	ldr	r3, [pc, #404]	@ (8005620 <_dtoa_r+0x590>)
 800548a:	2200      	movs	r2, #0
 800548c:	f7fa ff06 	bl	800029c <__adddf3>
 8005490:	4605      	mov	r5, r0
 8005492:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005496:	2c00      	cmp	r4, #0
 8005498:	d16a      	bne.n	8005570 <_dtoa_r+0x4e0>
 800549a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800549e:	4b61      	ldr	r3, [pc, #388]	@ (8005624 <_dtoa_r+0x594>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	f7fa fef9 	bl	8000298 <__aeabi_dsub>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ae:	462a      	mov	r2, r5
 80054b0:	4633      	mov	r3, r6
 80054b2:	f7fb fb39 	bl	8000b28 <__aeabi_dcmpgt>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f040 8298 	bne.w	80059ec <_dtoa_r+0x95c>
 80054bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054c0:	462a      	mov	r2, r5
 80054c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054c6:	f7fb fb11 	bl	8000aec <__aeabi_dcmplt>
 80054ca:	bb38      	cbnz	r0, 800551c <_dtoa_r+0x48c>
 80054cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80054d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f2c0 8157 	blt.w	800578a <_dtoa_r+0x6fa>
 80054dc:	2f0e      	cmp	r7, #14
 80054de:	f300 8154 	bgt.w	800578a <_dtoa_r+0x6fa>
 80054e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005610 <_dtoa_r+0x580>)
 80054e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054e8:	ed93 7b00 	vldr	d7, [r3]
 80054ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	ed8d 7b00 	vstr	d7, [sp]
 80054f4:	f280 80e5 	bge.w	80056c2 <_dtoa_r+0x632>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f300 80e1 	bgt.w	80056c2 <_dtoa_r+0x632>
 8005500:	d10c      	bne.n	800551c <_dtoa_r+0x48c>
 8005502:	4b48      	ldr	r3, [pc, #288]	@ (8005624 <_dtoa_r+0x594>)
 8005504:	2200      	movs	r2, #0
 8005506:	ec51 0b17 	vmov	r0, r1, d7
 800550a:	f7fb f87d 	bl	8000608 <__aeabi_dmul>
 800550e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005512:	f7fb faff 	bl	8000b14 <__aeabi_dcmpge>
 8005516:	2800      	cmp	r0, #0
 8005518:	f000 8266 	beq.w	80059e8 <_dtoa_r+0x958>
 800551c:	2400      	movs	r4, #0
 800551e:	4625      	mov	r5, r4
 8005520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005522:	4656      	mov	r6, sl
 8005524:	ea6f 0803 	mvn.w	r8, r3
 8005528:	2700      	movs	r7, #0
 800552a:	4621      	mov	r1, r4
 800552c:	4648      	mov	r0, r9
 800552e:	f000 fcbf 	bl	8005eb0 <_Bfree>
 8005532:	2d00      	cmp	r5, #0
 8005534:	f000 80bd 	beq.w	80056b2 <_dtoa_r+0x622>
 8005538:	b12f      	cbz	r7, 8005546 <_dtoa_r+0x4b6>
 800553a:	42af      	cmp	r7, r5
 800553c:	d003      	beq.n	8005546 <_dtoa_r+0x4b6>
 800553e:	4639      	mov	r1, r7
 8005540:	4648      	mov	r0, r9
 8005542:	f000 fcb5 	bl	8005eb0 <_Bfree>
 8005546:	4629      	mov	r1, r5
 8005548:	4648      	mov	r0, r9
 800554a:	f000 fcb1 	bl	8005eb0 <_Bfree>
 800554e:	e0b0      	b.n	80056b2 <_dtoa_r+0x622>
 8005550:	07e2      	lsls	r2, r4, #31
 8005552:	d505      	bpl.n	8005560 <_dtoa_r+0x4d0>
 8005554:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005558:	f7fb f856 	bl	8000608 <__aeabi_dmul>
 800555c:	3601      	adds	r6, #1
 800555e:	2301      	movs	r3, #1
 8005560:	1064      	asrs	r4, r4, #1
 8005562:	3508      	adds	r5, #8
 8005564:	e762      	b.n	800542c <_dtoa_r+0x39c>
 8005566:	2602      	movs	r6, #2
 8005568:	e765      	b.n	8005436 <_dtoa_r+0x3a6>
 800556a:	9c03      	ldr	r4, [sp, #12]
 800556c:	46b8      	mov	r8, r7
 800556e:	e784      	b.n	800547a <_dtoa_r+0x3ea>
 8005570:	4b27      	ldr	r3, [pc, #156]	@ (8005610 <_dtoa_r+0x580>)
 8005572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005574:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005578:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800557c:	4454      	add	r4, sl
 800557e:	2900      	cmp	r1, #0
 8005580:	d054      	beq.n	800562c <_dtoa_r+0x59c>
 8005582:	4929      	ldr	r1, [pc, #164]	@ (8005628 <_dtoa_r+0x598>)
 8005584:	2000      	movs	r0, #0
 8005586:	f7fb f969 	bl	800085c <__aeabi_ddiv>
 800558a:	4633      	mov	r3, r6
 800558c:	462a      	mov	r2, r5
 800558e:	f7fa fe83 	bl	8000298 <__aeabi_dsub>
 8005592:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005596:	4656      	mov	r6, sl
 8005598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559c:	f7fb fae4 	bl	8000b68 <__aeabi_d2iz>
 80055a0:	4605      	mov	r5, r0
 80055a2:	f7fa ffc7 	bl	8000534 <__aeabi_i2d>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ae:	f7fa fe73 	bl	8000298 <__aeabi_dsub>
 80055b2:	3530      	adds	r5, #48	@ 0x30
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055bc:	f806 5b01 	strb.w	r5, [r6], #1
 80055c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055c4:	f7fb fa92 	bl	8000aec <__aeabi_dcmplt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d172      	bne.n	80056b2 <_dtoa_r+0x622>
 80055cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d0:	4911      	ldr	r1, [pc, #68]	@ (8005618 <_dtoa_r+0x588>)
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7fa fe60 	bl	8000298 <__aeabi_dsub>
 80055d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055dc:	f7fb fa86 	bl	8000aec <__aeabi_dcmplt>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f040 80b4 	bne.w	800574e <_dtoa_r+0x6be>
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	f43f af70 	beq.w	80054cc <_dtoa_r+0x43c>
 80055ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80055f0:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <_dtoa_r+0x58c>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	f7fb f808 	bl	8000608 <__aeabi_dmul>
 80055f8:	4b08      	ldr	r3, [pc, #32]	@ (800561c <_dtoa_r+0x58c>)
 80055fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055fe:	2200      	movs	r2, #0
 8005600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005604:	f7fb f800 	bl	8000608 <__aeabi_dmul>
 8005608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800560c:	e7c4      	b.n	8005598 <_dtoa_r+0x508>
 800560e:	bf00      	nop
 8005610:	08007170 	.word	0x08007170
 8005614:	08007148 	.word	0x08007148
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	40240000 	.word	0x40240000
 8005620:	401c0000 	.word	0x401c0000
 8005624:	40140000 	.word	0x40140000
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	f7fa ffea 	bl	8000608 <__aeabi_dmul>
 8005634:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005638:	9413      	str	r4, [sp, #76]	@ 0x4c
 800563a:	4656      	mov	r6, sl
 800563c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005640:	f7fb fa92 	bl	8000b68 <__aeabi_d2iz>
 8005644:	4605      	mov	r5, r0
 8005646:	f7fa ff75 	bl	8000534 <__aeabi_i2d>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005652:	f7fa fe21 	bl	8000298 <__aeabi_dsub>
 8005656:	3530      	adds	r5, #48	@ 0x30
 8005658:	f806 5b01 	strb.w	r5, [r6], #1
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	42a6      	cmp	r6, r4
 8005662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	d124      	bne.n	80056b6 <_dtoa_r+0x626>
 800566c:	4baf      	ldr	r3, [pc, #700]	@ (800592c <_dtoa_r+0x89c>)
 800566e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005672:	f7fa fe13 	bl	800029c <__adddf3>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567e:	f7fb fa53 	bl	8000b28 <__aeabi_dcmpgt>
 8005682:	2800      	cmp	r0, #0
 8005684:	d163      	bne.n	800574e <_dtoa_r+0x6be>
 8005686:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800568a:	49a8      	ldr	r1, [pc, #672]	@ (800592c <_dtoa_r+0x89c>)
 800568c:	2000      	movs	r0, #0
 800568e:	f7fa fe03 	bl	8000298 <__aeabi_dsub>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800569a:	f7fb fa27 	bl	8000aec <__aeabi_dcmplt>
 800569e:	2800      	cmp	r0, #0
 80056a0:	f43f af14 	beq.w	80054cc <_dtoa_r+0x43c>
 80056a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80056a6:	1e73      	subs	r3, r6, #1
 80056a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056ae:	2b30      	cmp	r3, #48	@ 0x30
 80056b0:	d0f8      	beq.n	80056a4 <_dtoa_r+0x614>
 80056b2:	4647      	mov	r7, r8
 80056b4:	e03b      	b.n	800572e <_dtoa_r+0x69e>
 80056b6:	4b9e      	ldr	r3, [pc, #632]	@ (8005930 <_dtoa_r+0x8a0>)
 80056b8:	f7fa ffa6 	bl	8000608 <__aeabi_dmul>
 80056bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056c0:	e7bc      	b.n	800563c <_dtoa_r+0x5ac>
 80056c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80056c6:	4656      	mov	r6, sl
 80056c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f7fb f8c4 	bl	800085c <__aeabi_ddiv>
 80056d4:	f7fb fa48 	bl	8000b68 <__aeabi_d2iz>
 80056d8:	4680      	mov	r8, r0
 80056da:	f7fa ff2b 	bl	8000534 <__aeabi_i2d>
 80056de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e2:	f7fa ff91 	bl	8000608 <__aeabi_dmul>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4620      	mov	r0, r4
 80056ec:	4629      	mov	r1, r5
 80056ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80056f2:	f7fa fdd1 	bl	8000298 <__aeabi_dsub>
 80056f6:	f806 4b01 	strb.w	r4, [r6], #1
 80056fa:	9d03      	ldr	r5, [sp, #12]
 80056fc:	eba6 040a 	sub.w	r4, r6, sl
 8005700:	42a5      	cmp	r5, r4
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	d133      	bne.n	8005770 <_dtoa_r+0x6e0>
 8005708:	f7fa fdc8 	bl	800029c <__adddf3>
 800570c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	f7fb fa08 	bl	8000b28 <__aeabi_dcmpgt>
 8005718:	b9c0      	cbnz	r0, 800574c <_dtoa_r+0x6bc>
 800571a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005726:	b110      	cbz	r0, 800572e <_dtoa_r+0x69e>
 8005728:	f018 0f01 	tst.w	r8, #1
 800572c:	d10e      	bne.n	800574c <_dtoa_r+0x6bc>
 800572e:	9902      	ldr	r1, [sp, #8]
 8005730:	4648      	mov	r0, r9
 8005732:	f000 fbbd 	bl	8005eb0 <_Bfree>
 8005736:	2300      	movs	r3, #0
 8005738:	7033      	strb	r3, [r6, #0]
 800573a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800573c:	3701      	adds	r7, #1
 800573e:	601f      	str	r7, [r3, #0]
 8005740:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 824b 	beq.w	8005bde <_dtoa_r+0xb4e>
 8005748:	601e      	str	r6, [r3, #0]
 800574a:	e248      	b.n	8005bde <_dtoa_r+0xb4e>
 800574c:	46b8      	mov	r8, r7
 800574e:	4633      	mov	r3, r6
 8005750:	461e      	mov	r6, r3
 8005752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005756:	2a39      	cmp	r2, #57	@ 0x39
 8005758:	d106      	bne.n	8005768 <_dtoa_r+0x6d8>
 800575a:	459a      	cmp	sl, r3
 800575c:	d1f8      	bne.n	8005750 <_dtoa_r+0x6c0>
 800575e:	2230      	movs	r2, #48	@ 0x30
 8005760:	f108 0801 	add.w	r8, r8, #1
 8005764:	f88a 2000 	strb.w	r2, [sl]
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	3201      	adds	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e7a0      	b.n	80056b2 <_dtoa_r+0x622>
 8005770:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <_dtoa_r+0x8a0>)
 8005772:	2200      	movs	r2, #0
 8005774:	f7fa ff48 	bl	8000608 <__aeabi_dmul>
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	f7fb f9aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005784:	2800      	cmp	r0, #0
 8005786:	d09f      	beq.n	80056c8 <_dtoa_r+0x638>
 8005788:	e7d1      	b.n	800572e <_dtoa_r+0x69e>
 800578a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800578c:	2a00      	cmp	r2, #0
 800578e:	f000 80ea 	beq.w	8005966 <_dtoa_r+0x8d6>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	2a01      	cmp	r2, #1
 8005796:	f300 80cd 	bgt.w	8005934 <_dtoa_r+0x8a4>
 800579a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800579c:	2a00      	cmp	r2, #0
 800579e:	f000 80c1 	beq.w	8005924 <_dtoa_r+0x894>
 80057a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80057a6:	9c08      	ldr	r4, [sp, #32]
 80057a8:	9e00      	ldr	r6, [sp, #0]
 80057aa:	9a00      	ldr	r2, [sp, #0]
 80057ac:	441a      	add	r2, r3
 80057ae:	9200      	str	r2, [sp, #0]
 80057b0:	9a06      	ldr	r2, [sp, #24]
 80057b2:	2101      	movs	r1, #1
 80057b4:	441a      	add	r2, r3
 80057b6:	4648      	mov	r0, r9
 80057b8:	9206      	str	r2, [sp, #24]
 80057ba:	f000 fc2d 	bl	8006018 <__i2b>
 80057be:	4605      	mov	r5, r0
 80057c0:	b166      	cbz	r6, 80057dc <_dtoa_r+0x74c>
 80057c2:	9b06      	ldr	r3, [sp, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dd09      	ble.n	80057dc <_dtoa_r+0x74c>
 80057c8:	42b3      	cmp	r3, r6
 80057ca:	9a00      	ldr	r2, [sp, #0]
 80057cc:	bfa8      	it	ge
 80057ce:	4633      	movge	r3, r6
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	9200      	str	r2, [sp, #0]
 80057d4:	9a06      	ldr	r2, [sp, #24]
 80057d6:	1af6      	subs	r6, r6, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	9306      	str	r3, [sp, #24]
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	b30b      	cbz	r3, 8005824 <_dtoa_r+0x794>
 80057e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80c6 	beq.w	8005974 <_dtoa_r+0x8e4>
 80057e8:	2c00      	cmp	r4, #0
 80057ea:	f000 80c0 	beq.w	800596e <_dtoa_r+0x8de>
 80057ee:	4629      	mov	r1, r5
 80057f0:	4622      	mov	r2, r4
 80057f2:	4648      	mov	r0, r9
 80057f4:	f000 fcc8 	bl	8006188 <__pow5mult>
 80057f8:	9a02      	ldr	r2, [sp, #8]
 80057fa:	4601      	mov	r1, r0
 80057fc:	4605      	mov	r5, r0
 80057fe:	4648      	mov	r0, r9
 8005800:	f000 fc20 	bl	8006044 <__multiply>
 8005804:	9902      	ldr	r1, [sp, #8]
 8005806:	4680      	mov	r8, r0
 8005808:	4648      	mov	r0, r9
 800580a:	f000 fb51 	bl	8005eb0 <_Bfree>
 800580e:	9b08      	ldr	r3, [sp, #32]
 8005810:	1b1b      	subs	r3, r3, r4
 8005812:	9308      	str	r3, [sp, #32]
 8005814:	f000 80b1 	beq.w	800597a <_dtoa_r+0x8ea>
 8005818:	9a08      	ldr	r2, [sp, #32]
 800581a:	4641      	mov	r1, r8
 800581c:	4648      	mov	r0, r9
 800581e:	f000 fcb3 	bl	8006188 <__pow5mult>
 8005822:	9002      	str	r0, [sp, #8]
 8005824:	2101      	movs	r1, #1
 8005826:	4648      	mov	r0, r9
 8005828:	f000 fbf6 	bl	8006018 <__i2b>
 800582c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800582e:	4604      	mov	r4, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81d8 	beq.w	8005be6 <_dtoa_r+0xb56>
 8005836:	461a      	mov	r2, r3
 8005838:	4601      	mov	r1, r0
 800583a:	4648      	mov	r0, r9
 800583c:	f000 fca4 	bl	8006188 <__pow5mult>
 8005840:	9b07      	ldr	r3, [sp, #28]
 8005842:	2b01      	cmp	r3, #1
 8005844:	4604      	mov	r4, r0
 8005846:	f300 809f 	bgt.w	8005988 <_dtoa_r+0x8f8>
 800584a:	9b04      	ldr	r3, [sp, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 8097 	bne.w	8005980 <_dtoa_r+0x8f0>
 8005852:	9b05      	ldr	r3, [sp, #20]
 8005854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 8093 	bne.w	8005984 <_dtoa_r+0x8f4>
 800585e:	9b05      	ldr	r3, [sp, #20]
 8005860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	051b      	lsls	r3, r3, #20
 8005868:	b133      	cbz	r3, 8005878 <_dtoa_r+0x7e8>
 800586a:	9b00      	ldr	r3, [sp, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	9b06      	ldr	r3, [sp, #24]
 8005872:	3301      	adds	r3, #1
 8005874:	9306      	str	r3, [sp, #24]
 8005876:	2301      	movs	r3, #1
 8005878:	9308      	str	r3, [sp, #32]
 800587a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 81b8 	beq.w	8005bf2 <_dtoa_r+0xb62>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005888:	6918      	ldr	r0, [r3, #16]
 800588a:	f000 fb79 	bl	8005f80 <__hi0bits>
 800588e:	f1c0 0020 	rsb	r0, r0, #32
 8005892:	9b06      	ldr	r3, [sp, #24]
 8005894:	4418      	add	r0, r3
 8005896:	f010 001f 	ands.w	r0, r0, #31
 800589a:	f000 8082 	beq.w	80059a2 <_dtoa_r+0x912>
 800589e:	f1c0 0320 	rsb	r3, r0, #32
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	dd73      	ble.n	800598e <_dtoa_r+0x8fe>
 80058a6:	9b00      	ldr	r3, [sp, #0]
 80058a8:	f1c0 001c 	rsb	r0, r0, #28
 80058ac:	4403      	add	r3, r0
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	4403      	add	r3, r0
 80058b4:	4406      	add	r6, r0
 80058b6:	9306      	str	r3, [sp, #24]
 80058b8:	9b00      	ldr	r3, [sp, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dd05      	ble.n	80058ca <_dtoa_r+0x83a>
 80058be:	9902      	ldr	r1, [sp, #8]
 80058c0:	461a      	mov	r2, r3
 80058c2:	4648      	mov	r0, r9
 80058c4:	f000 fcba 	bl	800623c <__lshift>
 80058c8:	9002      	str	r0, [sp, #8]
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd05      	ble.n	80058dc <_dtoa_r+0x84c>
 80058d0:	4621      	mov	r1, r4
 80058d2:	461a      	mov	r2, r3
 80058d4:	4648      	mov	r0, r9
 80058d6:	f000 fcb1 	bl	800623c <__lshift>
 80058da:	4604      	mov	r4, r0
 80058dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d061      	beq.n	80059a6 <_dtoa_r+0x916>
 80058e2:	9802      	ldr	r0, [sp, #8]
 80058e4:	4621      	mov	r1, r4
 80058e6:	f000 fd15 	bl	8006314 <__mcmp>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	da5b      	bge.n	80059a6 <_dtoa_r+0x916>
 80058ee:	2300      	movs	r3, #0
 80058f0:	9902      	ldr	r1, [sp, #8]
 80058f2:	220a      	movs	r2, #10
 80058f4:	4648      	mov	r0, r9
 80058f6:	f000 fafd 	bl	8005ef4 <__multadd>
 80058fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fc:	9002      	str	r0, [sp, #8]
 80058fe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8177 	beq.w	8005bf6 <_dtoa_r+0xb66>
 8005908:	4629      	mov	r1, r5
 800590a:	2300      	movs	r3, #0
 800590c:	220a      	movs	r2, #10
 800590e:	4648      	mov	r0, r9
 8005910:	f000 faf0 	bl	8005ef4 <__multadd>
 8005914:	f1bb 0f00 	cmp.w	fp, #0
 8005918:	4605      	mov	r5, r0
 800591a:	dc6f      	bgt.n	80059fc <_dtoa_r+0x96c>
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	2b02      	cmp	r3, #2
 8005920:	dc49      	bgt.n	80059b6 <_dtoa_r+0x926>
 8005922:	e06b      	b.n	80059fc <_dtoa_r+0x96c>
 8005924:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800592a:	e73c      	b.n	80057a6 <_dtoa_r+0x716>
 800592c:	3fe00000 	.word	0x3fe00000
 8005930:	40240000 	.word	0x40240000
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	1e5c      	subs	r4, r3, #1
 8005938:	9b08      	ldr	r3, [sp, #32]
 800593a:	42a3      	cmp	r3, r4
 800593c:	db09      	blt.n	8005952 <_dtoa_r+0x8c2>
 800593e:	1b1c      	subs	r4, r3, r4
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f6bf af30 	bge.w	80057a8 <_dtoa_r+0x718>
 8005948:	9b00      	ldr	r3, [sp, #0]
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	1a9e      	subs	r6, r3, r2
 800594e:	2300      	movs	r3, #0
 8005950:	e72b      	b.n	80057aa <_dtoa_r+0x71a>
 8005952:	9b08      	ldr	r3, [sp, #32]
 8005954:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005956:	9408      	str	r4, [sp, #32]
 8005958:	1ae3      	subs	r3, r4, r3
 800595a:	441a      	add	r2, r3
 800595c:	9e00      	ldr	r6, [sp, #0]
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	920d      	str	r2, [sp, #52]	@ 0x34
 8005962:	2400      	movs	r4, #0
 8005964:	e721      	b.n	80057aa <_dtoa_r+0x71a>
 8005966:	9c08      	ldr	r4, [sp, #32]
 8005968:	9e00      	ldr	r6, [sp, #0]
 800596a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800596c:	e728      	b.n	80057c0 <_dtoa_r+0x730>
 800596e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005972:	e751      	b.n	8005818 <_dtoa_r+0x788>
 8005974:	9a08      	ldr	r2, [sp, #32]
 8005976:	9902      	ldr	r1, [sp, #8]
 8005978:	e750      	b.n	800581c <_dtoa_r+0x78c>
 800597a:	f8cd 8008 	str.w	r8, [sp, #8]
 800597e:	e751      	b.n	8005824 <_dtoa_r+0x794>
 8005980:	2300      	movs	r3, #0
 8005982:	e779      	b.n	8005878 <_dtoa_r+0x7e8>
 8005984:	9b04      	ldr	r3, [sp, #16]
 8005986:	e777      	b.n	8005878 <_dtoa_r+0x7e8>
 8005988:	2300      	movs	r3, #0
 800598a:	9308      	str	r3, [sp, #32]
 800598c:	e779      	b.n	8005882 <_dtoa_r+0x7f2>
 800598e:	d093      	beq.n	80058b8 <_dtoa_r+0x828>
 8005990:	9a00      	ldr	r2, [sp, #0]
 8005992:	331c      	adds	r3, #28
 8005994:	441a      	add	r2, r3
 8005996:	9200      	str	r2, [sp, #0]
 8005998:	9a06      	ldr	r2, [sp, #24]
 800599a:	441a      	add	r2, r3
 800599c:	441e      	add	r6, r3
 800599e:	9206      	str	r2, [sp, #24]
 80059a0:	e78a      	b.n	80058b8 <_dtoa_r+0x828>
 80059a2:	4603      	mov	r3, r0
 80059a4:	e7f4      	b.n	8005990 <_dtoa_r+0x900>
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	46b8      	mov	r8, r7
 80059ac:	dc20      	bgt.n	80059f0 <_dtoa_r+0x960>
 80059ae:	469b      	mov	fp, r3
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	dd1e      	ble.n	80059f4 <_dtoa_r+0x964>
 80059b6:	f1bb 0f00 	cmp.w	fp, #0
 80059ba:	f47f adb1 	bne.w	8005520 <_dtoa_r+0x490>
 80059be:	4621      	mov	r1, r4
 80059c0:	465b      	mov	r3, fp
 80059c2:	2205      	movs	r2, #5
 80059c4:	4648      	mov	r0, r9
 80059c6:	f000 fa95 	bl	8005ef4 <__multadd>
 80059ca:	4601      	mov	r1, r0
 80059cc:	4604      	mov	r4, r0
 80059ce:	9802      	ldr	r0, [sp, #8]
 80059d0:	f000 fca0 	bl	8006314 <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f77f ada3 	ble.w	8005520 <_dtoa_r+0x490>
 80059da:	4656      	mov	r6, sl
 80059dc:	2331      	movs	r3, #49	@ 0x31
 80059de:	f806 3b01 	strb.w	r3, [r6], #1
 80059e2:	f108 0801 	add.w	r8, r8, #1
 80059e6:	e59f      	b.n	8005528 <_dtoa_r+0x498>
 80059e8:	9c03      	ldr	r4, [sp, #12]
 80059ea:	46b8      	mov	r8, r7
 80059ec:	4625      	mov	r5, r4
 80059ee:	e7f4      	b.n	80059da <_dtoa_r+0x94a>
 80059f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80059f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8101 	beq.w	8005bfe <_dtoa_r+0xb6e>
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	dd05      	ble.n	8005a0c <_dtoa_r+0x97c>
 8005a00:	4629      	mov	r1, r5
 8005a02:	4632      	mov	r2, r6
 8005a04:	4648      	mov	r0, r9
 8005a06:	f000 fc19 	bl	800623c <__lshift>
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	9b08      	ldr	r3, [sp, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d05c      	beq.n	8005acc <_dtoa_r+0xa3c>
 8005a12:	6869      	ldr	r1, [r5, #4]
 8005a14:	4648      	mov	r0, r9
 8005a16:	f000 fa0b 	bl	8005e30 <_Balloc>
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	b928      	cbnz	r0, 8005a2a <_dtoa_r+0x99a>
 8005a1e:	4b82      	ldr	r3, [pc, #520]	@ (8005c28 <_dtoa_r+0xb98>)
 8005a20:	4602      	mov	r2, r0
 8005a22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a26:	f7ff bb4a 	b.w	80050be <_dtoa_r+0x2e>
 8005a2a:	692a      	ldr	r2, [r5, #16]
 8005a2c:	3202      	adds	r2, #2
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	f105 010c 	add.w	r1, r5, #12
 8005a34:	300c      	adds	r0, #12
 8005a36:	f001 f969 	bl	8006d0c <memcpy>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4648      	mov	r0, r9
 8005a40:	f000 fbfc 	bl	800623c <__lshift>
 8005a44:	f10a 0301 	add.w	r3, sl, #1
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	eb0a 030b 	add.w	r3, sl, fp
 8005a4e:	9308      	str	r3, [sp, #32]
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	462f      	mov	r7, r5
 8005a58:	9306      	str	r3, [sp, #24]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	9b00      	ldr	r3, [sp, #0]
 8005a5e:	9802      	ldr	r0, [sp, #8]
 8005a60:	4621      	mov	r1, r4
 8005a62:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005a66:	f7ff fa88 	bl	8004f7a <quorem>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	3330      	adds	r3, #48	@ 0x30
 8005a6e:	9003      	str	r0, [sp, #12]
 8005a70:	4639      	mov	r1, r7
 8005a72:	9802      	ldr	r0, [sp, #8]
 8005a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a76:	f000 fc4d 	bl	8006314 <__mcmp>
 8005a7a:	462a      	mov	r2, r5
 8005a7c:	9004      	str	r0, [sp, #16]
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4648      	mov	r0, r9
 8005a82:	f000 fc63 	bl	800634c <__mdiff>
 8005a86:	68c2      	ldr	r2, [r0, #12]
 8005a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	bb02      	cbnz	r2, 8005ad0 <_dtoa_r+0xa40>
 8005a8e:	4601      	mov	r1, r0
 8005a90:	9802      	ldr	r0, [sp, #8]
 8005a92:	f000 fc3f 	bl	8006314 <__mcmp>
 8005a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4648      	mov	r0, r9
 8005a9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa2:	f000 fa05 	bl	8005eb0 <_Bfree>
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005aaa:	9e00      	ldr	r6, [sp, #0]
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
 8005ab0:	9b06      	ldr	r3, [sp, #24]
 8005ab2:	4319      	orrs	r1, r3
 8005ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab6:	d10d      	bne.n	8005ad4 <_dtoa_r+0xa44>
 8005ab8:	2b39      	cmp	r3, #57	@ 0x39
 8005aba:	d027      	beq.n	8005b0c <_dtoa_r+0xa7c>
 8005abc:	9a04      	ldr	r2, [sp, #16]
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	dd01      	ble.n	8005ac6 <_dtoa_r+0xa36>
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	3331      	adds	r3, #49	@ 0x31
 8005ac6:	f88b 3000 	strb.w	r3, [fp]
 8005aca:	e52e      	b.n	800552a <_dtoa_r+0x49a>
 8005acc:	4628      	mov	r0, r5
 8005ace:	e7b9      	b.n	8005a44 <_dtoa_r+0x9b4>
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	e7e2      	b.n	8005a9a <_dtoa_r+0xa0a>
 8005ad4:	9904      	ldr	r1, [sp, #16]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	db04      	blt.n	8005ae4 <_dtoa_r+0xa54>
 8005ada:	9807      	ldr	r0, [sp, #28]
 8005adc:	4301      	orrs	r1, r0
 8005ade:	9806      	ldr	r0, [sp, #24]
 8005ae0:	4301      	orrs	r1, r0
 8005ae2:	d120      	bne.n	8005b26 <_dtoa_r+0xa96>
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	ddee      	ble.n	8005ac6 <_dtoa_r+0xa36>
 8005ae8:	9902      	ldr	r1, [sp, #8]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	4648      	mov	r0, r9
 8005af0:	f000 fba4 	bl	800623c <__lshift>
 8005af4:	4621      	mov	r1, r4
 8005af6:	9002      	str	r0, [sp, #8]
 8005af8:	f000 fc0c 	bl	8006314 <__mcmp>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	dc02      	bgt.n	8005b08 <_dtoa_r+0xa78>
 8005b02:	d1e0      	bne.n	8005ac6 <_dtoa_r+0xa36>
 8005b04:	07da      	lsls	r2, r3, #31
 8005b06:	d5de      	bpl.n	8005ac6 <_dtoa_r+0xa36>
 8005b08:	2b39      	cmp	r3, #57	@ 0x39
 8005b0a:	d1da      	bne.n	8005ac2 <_dtoa_r+0xa32>
 8005b0c:	2339      	movs	r3, #57	@ 0x39
 8005b0e:	f88b 3000 	strb.w	r3, [fp]
 8005b12:	4633      	mov	r3, r6
 8005b14:	461e      	mov	r6, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b1c:	2a39      	cmp	r2, #57	@ 0x39
 8005b1e:	d04e      	beq.n	8005bbe <_dtoa_r+0xb2e>
 8005b20:	3201      	adds	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e501      	b.n	800552a <_dtoa_r+0x49a>
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	dd03      	ble.n	8005b32 <_dtoa_r+0xaa2>
 8005b2a:	2b39      	cmp	r3, #57	@ 0x39
 8005b2c:	d0ee      	beq.n	8005b0c <_dtoa_r+0xa7c>
 8005b2e:	3301      	adds	r3, #1
 8005b30:	e7c9      	b.n	8005ac6 <_dtoa_r+0xa36>
 8005b32:	9a00      	ldr	r2, [sp, #0]
 8005b34:	9908      	ldr	r1, [sp, #32]
 8005b36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b3a:	428a      	cmp	r2, r1
 8005b3c:	d028      	beq.n	8005b90 <_dtoa_r+0xb00>
 8005b3e:	9902      	ldr	r1, [sp, #8]
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4648      	mov	r0, r9
 8005b46:	f000 f9d5 	bl	8005ef4 <__multadd>
 8005b4a:	42af      	cmp	r7, r5
 8005b4c:	9002      	str	r0, [sp, #8]
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	f04f 020a 	mov.w	r2, #10
 8005b56:	4639      	mov	r1, r7
 8005b58:	4648      	mov	r0, r9
 8005b5a:	d107      	bne.n	8005b6c <_dtoa_r+0xadc>
 8005b5c:	f000 f9ca 	bl	8005ef4 <__multadd>
 8005b60:	4607      	mov	r7, r0
 8005b62:	4605      	mov	r5, r0
 8005b64:	9b00      	ldr	r3, [sp, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	e777      	b.n	8005a5c <_dtoa_r+0x9cc>
 8005b6c:	f000 f9c2 	bl	8005ef4 <__multadd>
 8005b70:	4629      	mov	r1, r5
 8005b72:	4607      	mov	r7, r0
 8005b74:	2300      	movs	r3, #0
 8005b76:	220a      	movs	r2, #10
 8005b78:	4648      	mov	r0, r9
 8005b7a:	f000 f9bb 	bl	8005ef4 <__multadd>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	e7f0      	b.n	8005b64 <_dtoa_r+0xad4>
 8005b82:	f1bb 0f00 	cmp.w	fp, #0
 8005b86:	bfcc      	ite	gt
 8005b88:	465e      	movgt	r6, fp
 8005b8a:	2601      	movle	r6, #1
 8005b8c:	4456      	add	r6, sl
 8005b8e:	2700      	movs	r7, #0
 8005b90:	9902      	ldr	r1, [sp, #8]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2201      	movs	r2, #1
 8005b96:	4648      	mov	r0, r9
 8005b98:	f000 fb50 	bl	800623c <__lshift>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	9002      	str	r0, [sp, #8]
 8005ba0:	f000 fbb8 	bl	8006314 <__mcmp>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	dcb4      	bgt.n	8005b12 <_dtoa_r+0xa82>
 8005ba8:	d102      	bne.n	8005bb0 <_dtoa_r+0xb20>
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	07db      	lsls	r3, r3, #31
 8005bae:	d4b0      	bmi.n	8005b12 <_dtoa_r+0xa82>
 8005bb0:	4633      	mov	r3, r6
 8005bb2:	461e      	mov	r6, r3
 8005bb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bb8:	2a30      	cmp	r2, #48	@ 0x30
 8005bba:	d0fa      	beq.n	8005bb2 <_dtoa_r+0xb22>
 8005bbc:	e4b5      	b.n	800552a <_dtoa_r+0x49a>
 8005bbe:	459a      	cmp	sl, r3
 8005bc0:	d1a8      	bne.n	8005b14 <_dtoa_r+0xa84>
 8005bc2:	2331      	movs	r3, #49	@ 0x31
 8005bc4:	f108 0801 	add.w	r8, r8, #1
 8005bc8:	f88a 3000 	strb.w	r3, [sl]
 8005bcc:	e4ad      	b.n	800552a <_dtoa_r+0x49a>
 8005bce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005c2c <_dtoa_r+0xb9c>
 8005bd4:	b11b      	cbz	r3, 8005bde <_dtoa_r+0xb4e>
 8005bd6:	f10a 0308 	add.w	r3, sl, #8
 8005bda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4650      	mov	r0, sl
 8005be0:	b017      	add	sp, #92	@ 0x5c
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	9b07      	ldr	r3, [sp, #28]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f77f ae2e 	ble.w	800584a <_dtoa_r+0x7ba>
 8005bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf0:	9308      	str	r3, [sp, #32]
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e64d      	b.n	8005892 <_dtoa_r+0x802>
 8005bf6:	f1bb 0f00 	cmp.w	fp, #0
 8005bfa:	f77f aed9 	ble.w	80059b0 <_dtoa_r+0x920>
 8005bfe:	4656      	mov	r6, sl
 8005c00:	9802      	ldr	r0, [sp, #8]
 8005c02:	4621      	mov	r1, r4
 8005c04:	f7ff f9b9 	bl	8004f7a <quorem>
 8005c08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8005c10:	eba6 020a 	sub.w	r2, r6, sl
 8005c14:	4593      	cmp	fp, r2
 8005c16:	ddb4      	ble.n	8005b82 <_dtoa_r+0xaf2>
 8005c18:	9902      	ldr	r1, [sp, #8]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	4648      	mov	r0, r9
 8005c20:	f000 f968 	bl	8005ef4 <__multadd>
 8005c24:	9002      	str	r0, [sp, #8]
 8005c26:	e7eb      	b.n	8005c00 <_dtoa_r+0xb70>
 8005c28:	08007074 	.word	0x08007074
 8005c2c:	08006ff8 	.word	0x08006ff8

08005c30 <_free_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4605      	mov	r5, r0
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d041      	beq.n	8005cbc <_free_r+0x8c>
 8005c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3c:	1f0c      	subs	r4, r1, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bfb8      	it	lt
 8005c42:	18e4      	addlt	r4, r4, r3
 8005c44:	f000 f8e8 	bl	8005e18 <__malloc_lock>
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <_free_r+0x90>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	b933      	cbnz	r3, 8005c5c <_free_r+0x2c>
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	6014      	str	r4, [r2, #0]
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c58:	f000 b8e4 	b.w	8005e24 <__malloc_unlock>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d908      	bls.n	8005c72 <_free_r+0x42>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	1821      	adds	r1, r4, r0
 8005c64:	428b      	cmp	r3, r1
 8005c66:	bf01      	itttt	eq
 8005c68:	6819      	ldreq	r1, [r3, #0]
 8005c6a:	685b      	ldreq	r3, [r3, #4]
 8005c6c:	1809      	addeq	r1, r1, r0
 8005c6e:	6021      	streq	r1, [r4, #0]
 8005c70:	e7ed      	b.n	8005c4e <_free_r+0x1e>
 8005c72:	461a      	mov	r2, r3
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b10b      	cbz	r3, 8005c7c <_free_r+0x4c>
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d9fa      	bls.n	8005c72 <_free_r+0x42>
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	1850      	adds	r0, r2, r1
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d10b      	bne.n	8005c9c <_free_r+0x6c>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	4401      	add	r1, r0
 8005c88:	1850      	adds	r0, r2, r1
 8005c8a:	4283      	cmp	r3, r0
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	d1e0      	bne.n	8005c52 <_free_r+0x22>
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	6053      	str	r3, [r2, #4]
 8005c96:	4408      	add	r0, r1
 8005c98:	6010      	str	r0, [r2, #0]
 8005c9a:	e7da      	b.n	8005c52 <_free_r+0x22>
 8005c9c:	d902      	bls.n	8005ca4 <_free_r+0x74>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	e7d6      	b.n	8005c52 <_free_r+0x22>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	1821      	adds	r1, r4, r0
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	bf04      	itt	eq
 8005cac:	6819      	ldreq	r1, [r3, #0]
 8005cae:	685b      	ldreq	r3, [r3, #4]
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	bf04      	itt	eq
 8005cb4:	1809      	addeq	r1, r1, r0
 8005cb6:	6021      	streq	r1, [r4, #0]
 8005cb8:	6054      	str	r4, [r2, #4]
 8005cba:	e7ca      	b.n	8005c52 <_free_r+0x22>
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000047c 	.word	0x2000047c

08005cc4 <malloc>:
 8005cc4:	4b02      	ldr	r3, [pc, #8]	@ (8005cd0 <malloc+0xc>)
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f000 b825 	b.w	8005d18 <_malloc_r>
 8005cce:	bf00      	nop
 8005cd0:	20000018 	.word	0x20000018

08005cd4 <sbrk_aligned>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8005d14 <sbrk_aligned+0x40>)
 8005cd8:	460c      	mov	r4, r1
 8005cda:	6831      	ldr	r1, [r6, #0]
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b911      	cbnz	r1, 8005ce6 <sbrk_aligned+0x12>
 8005ce0:	f001 f804 	bl	8006cec <_sbrk_r>
 8005ce4:	6030      	str	r0, [r6, #0]
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 ffff 	bl	8006cec <_sbrk_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d103      	bne.n	8005cfa <sbrk_aligned+0x26>
 8005cf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
 8005cfa:	1cc4      	adds	r4, r0, #3
 8005cfc:	f024 0403 	bic.w	r4, r4, #3
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d0f8      	beq.n	8005cf6 <sbrk_aligned+0x22>
 8005d04:	1a21      	subs	r1, r4, r0
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 fff0 	bl	8006cec <_sbrk_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d1f2      	bne.n	8005cf6 <sbrk_aligned+0x22>
 8005d10:	e7ef      	b.n	8005cf2 <sbrk_aligned+0x1e>
 8005d12:	bf00      	nop
 8005d14:	20000478 	.word	0x20000478

08005d18 <_malloc_r>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	1ccd      	adds	r5, r1, #3
 8005d1e:	f025 0503 	bic.w	r5, r5, #3
 8005d22:	3508      	adds	r5, #8
 8005d24:	2d0c      	cmp	r5, #12
 8005d26:	bf38      	it	cc
 8005d28:	250c      	movcc	r5, #12
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	db01      	blt.n	8005d34 <_malloc_r+0x1c>
 8005d30:	42a9      	cmp	r1, r5
 8005d32:	d904      	bls.n	8005d3e <_malloc_r+0x26>
 8005d34:	230c      	movs	r3, #12
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	2000      	movs	r0, #0
 8005d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e14 <_malloc_r+0xfc>
 8005d42:	f000 f869 	bl	8005e18 <__malloc_lock>
 8005d46:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4a:	461c      	mov	r4, r3
 8005d4c:	bb44      	cbnz	r4, 8005da0 <_malloc_r+0x88>
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff ffbf 	bl	8005cd4 <sbrk_aligned>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	4604      	mov	r4, r0
 8005d5a:	d158      	bne.n	8005e0e <_malloc_r+0xf6>
 8005d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8005d60:	4627      	mov	r7, r4
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	d143      	bne.n	8005dee <_malloc_r+0xd6>
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	d04b      	beq.n	8005e02 <_malloc_r+0xea>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	eb04 0903 	add.w	r9, r4, r3
 8005d74:	f000 ffba 	bl	8006cec <_sbrk_r>
 8005d78:	4581      	cmp	r9, r0
 8005d7a:	d142      	bne.n	8005e02 <_malloc_r+0xea>
 8005d7c:	6821      	ldr	r1, [r4, #0]
 8005d7e:	1a6d      	subs	r5, r5, r1
 8005d80:	4629      	mov	r1, r5
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ffa6 	bl	8005cd4 <sbrk_aligned>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d03a      	beq.n	8005e02 <_malloc_r+0xea>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	442b      	add	r3, r5
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	f8d8 3000 	ldr.w	r3, [r8]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	bb62      	cbnz	r2, 8005df4 <_malloc_r+0xdc>
 8005d9a:	f8c8 7000 	str.w	r7, [r8]
 8005d9e:	e00f      	b.n	8005dc0 <_malloc_r+0xa8>
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	1b52      	subs	r2, r2, r5
 8005da4:	d420      	bmi.n	8005de8 <_malloc_r+0xd0>
 8005da6:	2a0b      	cmp	r2, #11
 8005da8:	d917      	bls.n	8005dda <_malloc_r+0xc2>
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	6025      	str	r5, [r4, #0]
 8005db0:	bf18      	it	ne
 8005db2:	6059      	strne	r1, [r3, #4]
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	bf08      	it	eq
 8005db8:	f8c8 1000 	streq.w	r1, [r8]
 8005dbc:	5162      	str	r2, [r4, r5]
 8005dbe:	604b      	str	r3, [r1, #4]
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 f82f 	bl	8005e24 <__malloc_unlock>
 8005dc6:	f104 000b 	add.w	r0, r4, #11
 8005dca:	1d23      	adds	r3, r4, #4
 8005dcc:	f020 0007 	bic.w	r0, r0, #7
 8005dd0:	1ac2      	subs	r2, r0, r3
 8005dd2:	bf1c      	itt	ne
 8005dd4:	1a1b      	subne	r3, r3, r0
 8005dd6:	50a3      	strne	r3, [r4, r2]
 8005dd8:	e7af      	b.n	8005d3a <_malloc_r+0x22>
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	bf0c      	ite	eq
 8005de0:	f8c8 2000 	streq.w	r2, [r8]
 8005de4:	605a      	strne	r2, [r3, #4]
 8005de6:	e7eb      	b.n	8005dc0 <_malloc_r+0xa8>
 8005de8:	4623      	mov	r3, r4
 8005dea:	6864      	ldr	r4, [r4, #4]
 8005dec:	e7ae      	b.n	8005d4c <_malloc_r+0x34>
 8005dee:	463c      	mov	r4, r7
 8005df0:	687f      	ldr	r7, [r7, #4]
 8005df2:	e7b6      	b.n	8005d62 <_malloc_r+0x4a>
 8005df4:	461a      	mov	r2, r3
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d1fb      	bne.n	8005df4 <_malloc_r+0xdc>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6053      	str	r3, [r2, #4]
 8005e00:	e7de      	b.n	8005dc0 <_malloc_r+0xa8>
 8005e02:	230c      	movs	r3, #12
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	4630      	mov	r0, r6
 8005e08:	f000 f80c 	bl	8005e24 <__malloc_unlock>
 8005e0c:	e794      	b.n	8005d38 <_malloc_r+0x20>
 8005e0e:	6005      	str	r5, [r0, #0]
 8005e10:	e7d6      	b.n	8005dc0 <_malloc_r+0xa8>
 8005e12:	bf00      	nop
 8005e14:	2000047c 	.word	0x2000047c

08005e18 <__malloc_lock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	@ (8005e20 <__malloc_lock+0x8>)
 8005e1a:	f7ff b8ac 	b.w	8004f76 <__retarget_lock_acquire_recursive>
 8005e1e:	bf00      	nop
 8005e20:	20000474 	.word	0x20000474

08005e24 <__malloc_unlock>:
 8005e24:	4801      	ldr	r0, [pc, #4]	@ (8005e2c <__malloc_unlock+0x8>)
 8005e26:	f7ff b8a7 	b.w	8004f78 <__retarget_lock_release_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	20000474 	.word	0x20000474

08005e30 <_Balloc>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	69c6      	ldr	r6, [r0, #28]
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	b976      	cbnz	r6, 8005e58 <_Balloc+0x28>
 8005e3a:	2010      	movs	r0, #16
 8005e3c:	f7ff ff42 	bl	8005cc4 <malloc>
 8005e40:	4602      	mov	r2, r0
 8005e42:	61e0      	str	r0, [r4, #28]
 8005e44:	b920      	cbnz	r0, 8005e50 <_Balloc+0x20>
 8005e46:	4b18      	ldr	r3, [pc, #96]	@ (8005ea8 <_Balloc+0x78>)
 8005e48:	4818      	ldr	r0, [pc, #96]	@ (8005eac <_Balloc+0x7c>)
 8005e4a:	216b      	movs	r1, #107	@ 0x6b
 8005e4c:	f000 ff6c 	bl	8006d28 <__assert_func>
 8005e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e54:	6006      	str	r6, [r0, #0]
 8005e56:	60c6      	str	r6, [r0, #12]
 8005e58:	69e6      	ldr	r6, [r4, #28]
 8005e5a:	68f3      	ldr	r3, [r6, #12]
 8005e5c:	b183      	cbz	r3, 8005e80 <_Balloc+0x50>
 8005e5e:	69e3      	ldr	r3, [r4, #28]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e66:	b9b8      	cbnz	r0, 8005e98 <_Balloc+0x68>
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f605 	lsl.w	r6, r1, r5
 8005e6e:	1d72      	adds	r2, r6, #5
 8005e70:	0092      	lsls	r2, r2, #2
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 ff76 	bl	8006d64 <_calloc_r>
 8005e78:	b160      	cbz	r0, 8005e94 <_Balloc+0x64>
 8005e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e7e:	e00e      	b.n	8005e9e <_Balloc+0x6e>
 8005e80:	2221      	movs	r2, #33	@ 0x21
 8005e82:	2104      	movs	r1, #4
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 ff6d 	bl	8006d64 <_calloc_r>
 8005e8a:	69e3      	ldr	r3, [r4, #28]
 8005e8c:	60f0      	str	r0, [r6, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e4      	bne.n	8005e5e <_Balloc+0x2e>
 8005e94:	2000      	movs	r0, #0
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	6802      	ldr	r2, [r0, #0]
 8005e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ea4:	e7f7      	b.n	8005e96 <_Balloc+0x66>
 8005ea6:	bf00      	nop
 8005ea8:	08007005 	.word	0x08007005
 8005eac:	08007085 	.word	0x08007085

08005eb0 <_Bfree>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	69c6      	ldr	r6, [r0, #28]
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	b976      	cbnz	r6, 8005ed8 <_Bfree+0x28>
 8005eba:	2010      	movs	r0, #16
 8005ebc:	f7ff ff02 	bl	8005cc4 <malloc>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	61e8      	str	r0, [r5, #28]
 8005ec4:	b920      	cbnz	r0, 8005ed0 <_Bfree+0x20>
 8005ec6:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <_Bfree+0x3c>)
 8005ec8:	4809      	ldr	r0, [pc, #36]	@ (8005ef0 <_Bfree+0x40>)
 8005eca:	218f      	movs	r1, #143	@ 0x8f
 8005ecc:	f000 ff2c 	bl	8006d28 <__assert_func>
 8005ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ed4:	6006      	str	r6, [r0, #0]
 8005ed6:	60c6      	str	r6, [r0, #12]
 8005ed8:	b13c      	cbz	r4, 8005eea <_Bfree+0x3a>
 8005eda:	69eb      	ldr	r3, [r5, #28]
 8005edc:	6862      	ldr	r2, [r4, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ee4:	6021      	str	r1, [r4, #0]
 8005ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	08007005 	.word	0x08007005
 8005ef0:	08007085 	.word	0x08007085

08005ef4 <__multadd>:
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	690d      	ldr	r5, [r1, #16]
 8005efa:	4607      	mov	r7, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	461e      	mov	r6, r3
 8005f00:	f101 0c14 	add.w	ip, r1, #20
 8005f04:	2000      	movs	r0, #0
 8005f06:	f8dc 3000 	ldr.w	r3, [ip]
 8005f0a:	b299      	uxth	r1, r3
 8005f0c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f10:	0c1e      	lsrs	r6, r3, #16
 8005f12:	0c0b      	lsrs	r3, r1, #16
 8005f14:	fb02 3306 	mla	r3, r2, r6, r3
 8005f18:	b289      	uxth	r1, r1
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f20:	4285      	cmp	r5, r0
 8005f22:	f84c 1b04 	str.w	r1, [ip], #4
 8005f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f2a:	dcec      	bgt.n	8005f06 <__multadd+0x12>
 8005f2c:	b30e      	cbz	r6, 8005f72 <__multadd+0x7e>
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dc19      	bgt.n	8005f68 <__multadd+0x74>
 8005f34:	6861      	ldr	r1, [r4, #4]
 8005f36:	4638      	mov	r0, r7
 8005f38:	3101      	adds	r1, #1
 8005f3a:	f7ff ff79 	bl	8005e30 <_Balloc>
 8005f3e:	4680      	mov	r8, r0
 8005f40:	b928      	cbnz	r0, 8005f4e <__multadd+0x5a>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <__multadd+0x84>)
 8005f46:	480d      	ldr	r0, [pc, #52]	@ (8005f7c <__multadd+0x88>)
 8005f48:	21ba      	movs	r1, #186	@ 0xba
 8005f4a:	f000 feed 	bl	8006d28 <__assert_func>
 8005f4e:	6922      	ldr	r2, [r4, #16]
 8005f50:	3202      	adds	r2, #2
 8005f52:	f104 010c 	add.w	r1, r4, #12
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	300c      	adds	r0, #12
 8005f5a:	f000 fed7 	bl	8006d0c <memcpy>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7ff ffa5 	bl	8005eb0 <_Bfree>
 8005f66:	4644      	mov	r4, r8
 8005f68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	615e      	str	r6, [r3, #20]
 8005f70:	6125      	str	r5, [r4, #16]
 8005f72:	4620      	mov	r0, r4
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	08007074 	.word	0x08007074
 8005f7c:	08007085 	.word	0x08007085

08005f80 <__hi0bits>:
 8005f80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f84:	4603      	mov	r3, r0
 8005f86:	bf36      	itet	cc
 8005f88:	0403      	lslcc	r3, r0, #16
 8005f8a:	2000      	movcs	r0, #0
 8005f8c:	2010      	movcc	r0, #16
 8005f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f92:	bf3c      	itt	cc
 8005f94:	021b      	lslcc	r3, r3, #8
 8005f96:	3008      	addcc	r0, #8
 8005f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f9c:	bf3c      	itt	cc
 8005f9e:	011b      	lslcc	r3, r3, #4
 8005fa0:	3004      	addcc	r0, #4
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	bf3c      	itt	cc
 8005fa8:	009b      	lslcc	r3, r3, #2
 8005faa:	3002      	addcc	r0, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db05      	blt.n	8005fbc <__hi0bits+0x3c>
 8005fb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fb4:	f100 0001 	add.w	r0, r0, #1
 8005fb8:	bf08      	it	eq
 8005fba:	2020      	moveq	r0, #32
 8005fbc:	4770      	bx	lr

08005fbe <__lo0bits>:
 8005fbe:	6803      	ldr	r3, [r0, #0]
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	f013 0007 	ands.w	r0, r3, #7
 8005fc6:	d00b      	beq.n	8005fe0 <__lo0bits+0x22>
 8005fc8:	07d9      	lsls	r1, r3, #31
 8005fca:	d421      	bmi.n	8006010 <__lo0bits+0x52>
 8005fcc:	0798      	lsls	r0, r3, #30
 8005fce:	bf49      	itett	mi
 8005fd0:	085b      	lsrmi	r3, r3, #1
 8005fd2:	089b      	lsrpl	r3, r3, #2
 8005fd4:	2001      	movmi	r0, #1
 8005fd6:	6013      	strmi	r3, [r2, #0]
 8005fd8:	bf5c      	itt	pl
 8005fda:	6013      	strpl	r3, [r2, #0]
 8005fdc:	2002      	movpl	r0, #2
 8005fde:	4770      	bx	lr
 8005fe0:	b299      	uxth	r1, r3
 8005fe2:	b909      	cbnz	r1, 8005fe8 <__lo0bits+0x2a>
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	2010      	movs	r0, #16
 8005fe8:	b2d9      	uxtb	r1, r3
 8005fea:	b909      	cbnz	r1, 8005ff0 <__lo0bits+0x32>
 8005fec:	3008      	adds	r0, #8
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	0719      	lsls	r1, r3, #28
 8005ff2:	bf04      	itt	eq
 8005ff4:	091b      	lsreq	r3, r3, #4
 8005ff6:	3004      	addeq	r0, #4
 8005ff8:	0799      	lsls	r1, r3, #30
 8005ffa:	bf04      	itt	eq
 8005ffc:	089b      	lsreq	r3, r3, #2
 8005ffe:	3002      	addeq	r0, #2
 8006000:	07d9      	lsls	r1, r3, #31
 8006002:	d403      	bmi.n	800600c <__lo0bits+0x4e>
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	f100 0001 	add.w	r0, r0, #1
 800600a:	d003      	beq.n	8006014 <__lo0bits+0x56>
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	4770      	bx	lr
 8006010:	2000      	movs	r0, #0
 8006012:	4770      	bx	lr
 8006014:	2020      	movs	r0, #32
 8006016:	4770      	bx	lr

08006018 <__i2b>:
 8006018:	b510      	push	{r4, lr}
 800601a:	460c      	mov	r4, r1
 800601c:	2101      	movs	r1, #1
 800601e:	f7ff ff07 	bl	8005e30 <_Balloc>
 8006022:	4602      	mov	r2, r0
 8006024:	b928      	cbnz	r0, 8006032 <__i2b+0x1a>
 8006026:	4b05      	ldr	r3, [pc, #20]	@ (800603c <__i2b+0x24>)
 8006028:	4805      	ldr	r0, [pc, #20]	@ (8006040 <__i2b+0x28>)
 800602a:	f240 1145 	movw	r1, #325	@ 0x145
 800602e:	f000 fe7b 	bl	8006d28 <__assert_func>
 8006032:	2301      	movs	r3, #1
 8006034:	6144      	str	r4, [r0, #20]
 8006036:	6103      	str	r3, [r0, #16]
 8006038:	bd10      	pop	{r4, pc}
 800603a:	bf00      	nop
 800603c:	08007074 	.word	0x08007074
 8006040:	08007085 	.word	0x08007085

08006044 <__multiply>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	4617      	mov	r7, r2
 800604a:	690a      	ldr	r2, [r1, #16]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	429a      	cmp	r2, r3
 8006050:	bfa8      	it	ge
 8006052:	463b      	movge	r3, r7
 8006054:	4689      	mov	r9, r1
 8006056:	bfa4      	itt	ge
 8006058:	460f      	movge	r7, r1
 800605a:	4699      	movge	r9, r3
 800605c:	693d      	ldr	r5, [r7, #16]
 800605e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	eb05 060a 	add.w	r6, r5, sl
 800606a:	42b3      	cmp	r3, r6
 800606c:	b085      	sub	sp, #20
 800606e:	bfb8      	it	lt
 8006070:	3101      	addlt	r1, #1
 8006072:	f7ff fedd 	bl	8005e30 <_Balloc>
 8006076:	b930      	cbnz	r0, 8006086 <__multiply+0x42>
 8006078:	4602      	mov	r2, r0
 800607a:	4b41      	ldr	r3, [pc, #260]	@ (8006180 <__multiply+0x13c>)
 800607c:	4841      	ldr	r0, [pc, #260]	@ (8006184 <__multiply+0x140>)
 800607e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006082:	f000 fe51 	bl	8006d28 <__assert_func>
 8006086:	f100 0414 	add.w	r4, r0, #20
 800608a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800608e:	4623      	mov	r3, r4
 8006090:	2200      	movs	r2, #0
 8006092:	4573      	cmp	r3, lr
 8006094:	d320      	bcc.n	80060d8 <__multiply+0x94>
 8006096:	f107 0814 	add.w	r8, r7, #20
 800609a:	f109 0114 	add.w	r1, r9, #20
 800609e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80060a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	1beb      	subs	r3, r5, r7
 80060aa:	3b15      	subs	r3, #21
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	3304      	adds	r3, #4
 80060b2:	3715      	adds	r7, #21
 80060b4:	42bd      	cmp	r5, r7
 80060b6:	bf38      	it	cc
 80060b8:	2304      	movcc	r3, #4
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	9b02      	ldr	r3, [sp, #8]
 80060be:	9103      	str	r1, [sp, #12]
 80060c0:	428b      	cmp	r3, r1
 80060c2:	d80c      	bhi.n	80060de <__multiply+0x9a>
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	dd03      	ble.n	80060d0 <__multiply+0x8c>
 80060c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d055      	beq.n	800617c <__multiply+0x138>
 80060d0:	6106      	str	r6, [r0, #16]
 80060d2:	b005      	add	sp, #20
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	f843 2b04 	str.w	r2, [r3], #4
 80060dc:	e7d9      	b.n	8006092 <__multiply+0x4e>
 80060de:	f8b1 a000 	ldrh.w	sl, [r1]
 80060e2:	f1ba 0f00 	cmp.w	sl, #0
 80060e6:	d01f      	beq.n	8006128 <__multiply+0xe4>
 80060e8:	46c4      	mov	ip, r8
 80060ea:	46a1      	mov	r9, r4
 80060ec:	2700      	movs	r7, #0
 80060ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060f2:	f8d9 3000 	ldr.w	r3, [r9]
 80060f6:	fa1f fb82 	uxth.w	fp, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006100:	443b      	add	r3, r7
 8006102:	f8d9 7000 	ldr.w	r7, [r9]
 8006106:	0c12      	lsrs	r2, r2, #16
 8006108:	0c3f      	lsrs	r7, r7, #16
 800610a:	fb0a 7202 	mla	r2, sl, r2, r7
 800610e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006118:	4565      	cmp	r5, ip
 800611a:	f849 3b04 	str.w	r3, [r9], #4
 800611e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006122:	d8e4      	bhi.n	80060ee <__multiply+0xaa>
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	50e7      	str	r7, [r4, r3]
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800612e:	3104      	adds	r1, #4
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	d020      	beq.n	8006178 <__multiply+0x134>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	4647      	mov	r7, r8
 800613a:	46a4      	mov	ip, r4
 800613c:	f04f 0a00 	mov.w	sl, #0
 8006140:	f8b7 b000 	ldrh.w	fp, [r7]
 8006144:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006148:	fb09 220b 	mla	r2, r9, fp, r2
 800614c:	4452      	add	r2, sl
 800614e:	b29b      	uxth	r3, r3
 8006150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006154:	f84c 3b04 	str.w	r3, [ip], #4
 8006158:	f857 3b04 	ldr.w	r3, [r7], #4
 800615c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006160:	f8bc 3000 	ldrh.w	r3, [ip]
 8006164:	fb09 330a 	mla	r3, r9, sl, r3
 8006168:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800616c:	42bd      	cmp	r5, r7
 800616e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006172:	d8e5      	bhi.n	8006140 <__multiply+0xfc>
 8006174:	9a01      	ldr	r2, [sp, #4]
 8006176:	50a3      	str	r3, [r4, r2]
 8006178:	3404      	adds	r4, #4
 800617a:	e79f      	b.n	80060bc <__multiply+0x78>
 800617c:	3e01      	subs	r6, #1
 800617e:	e7a1      	b.n	80060c4 <__multiply+0x80>
 8006180:	08007074 	.word	0x08007074
 8006184:	08007085 	.word	0x08007085

08006188 <__pow5mult>:
 8006188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800618c:	4615      	mov	r5, r2
 800618e:	f012 0203 	ands.w	r2, r2, #3
 8006192:	4607      	mov	r7, r0
 8006194:	460e      	mov	r6, r1
 8006196:	d007      	beq.n	80061a8 <__pow5mult+0x20>
 8006198:	4c25      	ldr	r4, [pc, #148]	@ (8006230 <__pow5mult+0xa8>)
 800619a:	3a01      	subs	r2, #1
 800619c:	2300      	movs	r3, #0
 800619e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061a2:	f7ff fea7 	bl	8005ef4 <__multadd>
 80061a6:	4606      	mov	r6, r0
 80061a8:	10ad      	asrs	r5, r5, #2
 80061aa:	d03d      	beq.n	8006228 <__pow5mult+0xa0>
 80061ac:	69fc      	ldr	r4, [r7, #28]
 80061ae:	b97c      	cbnz	r4, 80061d0 <__pow5mult+0x48>
 80061b0:	2010      	movs	r0, #16
 80061b2:	f7ff fd87 	bl	8005cc4 <malloc>
 80061b6:	4602      	mov	r2, r0
 80061b8:	61f8      	str	r0, [r7, #28]
 80061ba:	b928      	cbnz	r0, 80061c8 <__pow5mult+0x40>
 80061bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006234 <__pow5mult+0xac>)
 80061be:	481e      	ldr	r0, [pc, #120]	@ (8006238 <__pow5mult+0xb0>)
 80061c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061c4:	f000 fdb0 	bl	8006d28 <__assert_func>
 80061c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061cc:	6004      	str	r4, [r0, #0]
 80061ce:	60c4      	str	r4, [r0, #12]
 80061d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061d8:	b94c      	cbnz	r4, 80061ee <__pow5mult+0x66>
 80061da:	f240 2171 	movw	r1, #625	@ 0x271
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff ff1a 	bl	8006018 <__i2b>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80061ea:	4604      	mov	r4, r0
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	f04f 0900 	mov.w	r9, #0
 80061f2:	07eb      	lsls	r3, r5, #31
 80061f4:	d50a      	bpl.n	800620c <__pow5mult+0x84>
 80061f6:	4631      	mov	r1, r6
 80061f8:	4622      	mov	r2, r4
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7ff ff22 	bl	8006044 <__multiply>
 8006200:	4631      	mov	r1, r6
 8006202:	4680      	mov	r8, r0
 8006204:	4638      	mov	r0, r7
 8006206:	f7ff fe53 	bl	8005eb0 <_Bfree>
 800620a:	4646      	mov	r6, r8
 800620c:	106d      	asrs	r5, r5, #1
 800620e:	d00b      	beq.n	8006228 <__pow5mult+0xa0>
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	b938      	cbnz	r0, 8006224 <__pow5mult+0x9c>
 8006214:	4622      	mov	r2, r4
 8006216:	4621      	mov	r1, r4
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff ff13 	bl	8006044 <__multiply>
 800621e:	6020      	str	r0, [r4, #0]
 8006220:	f8c0 9000 	str.w	r9, [r0]
 8006224:	4604      	mov	r4, r0
 8006226:	e7e4      	b.n	80061f2 <__pow5mult+0x6a>
 8006228:	4630      	mov	r0, r6
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622e:	bf00      	nop
 8006230:	08007138 	.word	0x08007138
 8006234:	08007005 	.word	0x08007005
 8006238:	08007085 	.word	0x08007085

0800623c <__lshift>:
 800623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	6849      	ldr	r1, [r1, #4]
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800624a:	68a3      	ldr	r3, [r4, #8]
 800624c:	4607      	mov	r7, r0
 800624e:	4691      	mov	r9, r2
 8006250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006254:	f108 0601 	add.w	r6, r8, #1
 8006258:	42b3      	cmp	r3, r6
 800625a:	db0b      	blt.n	8006274 <__lshift+0x38>
 800625c:	4638      	mov	r0, r7
 800625e:	f7ff fde7 	bl	8005e30 <_Balloc>
 8006262:	4605      	mov	r5, r0
 8006264:	b948      	cbnz	r0, 800627a <__lshift+0x3e>
 8006266:	4602      	mov	r2, r0
 8006268:	4b28      	ldr	r3, [pc, #160]	@ (800630c <__lshift+0xd0>)
 800626a:	4829      	ldr	r0, [pc, #164]	@ (8006310 <__lshift+0xd4>)
 800626c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006270:	f000 fd5a 	bl	8006d28 <__assert_func>
 8006274:	3101      	adds	r1, #1
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	e7ee      	b.n	8006258 <__lshift+0x1c>
 800627a:	2300      	movs	r3, #0
 800627c:	f100 0114 	add.w	r1, r0, #20
 8006280:	f100 0210 	add.w	r2, r0, #16
 8006284:	4618      	mov	r0, r3
 8006286:	4553      	cmp	r3, sl
 8006288:	db33      	blt.n	80062f2 <__lshift+0xb6>
 800628a:	6920      	ldr	r0, [r4, #16]
 800628c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006290:	f104 0314 	add.w	r3, r4, #20
 8006294:	f019 091f 	ands.w	r9, r9, #31
 8006298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800629c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062a0:	d02b      	beq.n	80062fa <__lshift+0xbe>
 80062a2:	f1c9 0e20 	rsb	lr, r9, #32
 80062a6:	468a      	mov	sl, r1
 80062a8:	2200      	movs	r2, #0
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	fa00 f009 	lsl.w	r0, r0, r9
 80062b0:	4310      	orrs	r0, r2
 80062b2:	f84a 0b04 	str.w	r0, [sl], #4
 80062b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ba:	459c      	cmp	ip, r3
 80062bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80062c0:	d8f3      	bhi.n	80062aa <__lshift+0x6e>
 80062c2:	ebac 0304 	sub.w	r3, ip, r4
 80062c6:	3b15      	subs	r3, #21
 80062c8:	f023 0303 	bic.w	r3, r3, #3
 80062cc:	3304      	adds	r3, #4
 80062ce:	f104 0015 	add.w	r0, r4, #21
 80062d2:	4560      	cmp	r0, ip
 80062d4:	bf88      	it	hi
 80062d6:	2304      	movhi	r3, #4
 80062d8:	50ca      	str	r2, [r1, r3]
 80062da:	b10a      	cbz	r2, 80062e0 <__lshift+0xa4>
 80062dc:	f108 0602 	add.w	r6, r8, #2
 80062e0:	3e01      	subs	r6, #1
 80062e2:	4638      	mov	r0, r7
 80062e4:	612e      	str	r6, [r5, #16]
 80062e6:	4621      	mov	r1, r4
 80062e8:	f7ff fde2 	bl	8005eb0 <_Bfree>
 80062ec:	4628      	mov	r0, r5
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80062f6:	3301      	adds	r3, #1
 80062f8:	e7c5      	b.n	8006286 <__lshift+0x4a>
 80062fa:	3904      	subs	r1, #4
 80062fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006300:	f841 2f04 	str.w	r2, [r1, #4]!
 8006304:	459c      	cmp	ip, r3
 8006306:	d8f9      	bhi.n	80062fc <__lshift+0xc0>
 8006308:	e7ea      	b.n	80062e0 <__lshift+0xa4>
 800630a:	bf00      	nop
 800630c:	08007074 	.word	0x08007074
 8006310:	08007085 	.word	0x08007085

08006314 <__mcmp>:
 8006314:	690a      	ldr	r2, [r1, #16]
 8006316:	4603      	mov	r3, r0
 8006318:	6900      	ldr	r0, [r0, #16]
 800631a:	1a80      	subs	r0, r0, r2
 800631c:	b530      	push	{r4, r5, lr}
 800631e:	d10e      	bne.n	800633e <__mcmp+0x2a>
 8006320:	3314      	adds	r3, #20
 8006322:	3114      	adds	r1, #20
 8006324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800632c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006334:	4295      	cmp	r5, r2
 8006336:	d003      	beq.n	8006340 <__mcmp+0x2c>
 8006338:	d205      	bcs.n	8006346 <__mcmp+0x32>
 800633a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	42a3      	cmp	r3, r4
 8006342:	d3f3      	bcc.n	800632c <__mcmp+0x18>
 8006344:	e7fb      	b.n	800633e <__mcmp+0x2a>
 8006346:	2001      	movs	r0, #1
 8006348:	e7f9      	b.n	800633e <__mcmp+0x2a>
	...

0800634c <__mdiff>:
 800634c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	4689      	mov	r9, r1
 8006352:	4606      	mov	r6, r0
 8006354:	4611      	mov	r1, r2
 8006356:	4648      	mov	r0, r9
 8006358:	4614      	mov	r4, r2
 800635a:	f7ff ffdb 	bl	8006314 <__mcmp>
 800635e:	1e05      	subs	r5, r0, #0
 8006360:	d112      	bne.n	8006388 <__mdiff+0x3c>
 8006362:	4629      	mov	r1, r5
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff fd63 	bl	8005e30 <_Balloc>
 800636a:	4602      	mov	r2, r0
 800636c:	b928      	cbnz	r0, 800637a <__mdiff+0x2e>
 800636e:	4b3f      	ldr	r3, [pc, #252]	@ (800646c <__mdiff+0x120>)
 8006370:	f240 2137 	movw	r1, #567	@ 0x237
 8006374:	483e      	ldr	r0, [pc, #248]	@ (8006470 <__mdiff+0x124>)
 8006376:	f000 fcd7 	bl	8006d28 <__assert_func>
 800637a:	2301      	movs	r3, #1
 800637c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006380:	4610      	mov	r0, r2
 8006382:	b003      	add	sp, #12
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	bfbc      	itt	lt
 800638a:	464b      	movlt	r3, r9
 800638c:	46a1      	movlt	r9, r4
 800638e:	4630      	mov	r0, r6
 8006390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006394:	bfba      	itte	lt
 8006396:	461c      	movlt	r4, r3
 8006398:	2501      	movlt	r5, #1
 800639a:	2500      	movge	r5, #0
 800639c:	f7ff fd48 	bl	8005e30 <_Balloc>
 80063a0:	4602      	mov	r2, r0
 80063a2:	b918      	cbnz	r0, 80063ac <__mdiff+0x60>
 80063a4:	4b31      	ldr	r3, [pc, #196]	@ (800646c <__mdiff+0x120>)
 80063a6:	f240 2145 	movw	r1, #581	@ 0x245
 80063aa:	e7e3      	b.n	8006374 <__mdiff+0x28>
 80063ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063b0:	6926      	ldr	r6, [r4, #16]
 80063b2:	60c5      	str	r5, [r0, #12]
 80063b4:	f109 0310 	add.w	r3, r9, #16
 80063b8:	f109 0514 	add.w	r5, r9, #20
 80063bc:	f104 0e14 	add.w	lr, r4, #20
 80063c0:	f100 0b14 	add.w	fp, r0, #20
 80063c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	46d9      	mov	r9, fp
 80063d0:	f04f 0c00 	mov.w	ip, #0
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	fa1f f38a 	uxth.w	r3, sl
 80063e4:	4619      	mov	r1, r3
 80063e6:	b283      	uxth	r3, r0
 80063e8:	1acb      	subs	r3, r1, r3
 80063ea:	0c00      	lsrs	r0, r0, #16
 80063ec:	4463      	add	r3, ip
 80063ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063fc:	4576      	cmp	r6, lr
 80063fe:	f849 3b04 	str.w	r3, [r9], #4
 8006402:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006406:	d8e5      	bhi.n	80063d4 <__mdiff+0x88>
 8006408:	1b33      	subs	r3, r6, r4
 800640a:	3b15      	subs	r3, #21
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	3415      	adds	r4, #21
 8006412:	3304      	adds	r3, #4
 8006414:	42a6      	cmp	r6, r4
 8006416:	bf38      	it	cc
 8006418:	2304      	movcc	r3, #4
 800641a:	441d      	add	r5, r3
 800641c:	445b      	add	r3, fp
 800641e:	461e      	mov	r6, r3
 8006420:	462c      	mov	r4, r5
 8006422:	4544      	cmp	r4, r8
 8006424:	d30e      	bcc.n	8006444 <__mdiff+0xf8>
 8006426:	f108 0103 	add.w	r1, r8, #3
 800642a:	1b49      	subs	r1, r1, r5
 800642c:	f021 0103 	bic.w	r1, r1, #3
 8006430:	3d03      	subs	r5, #3
 8006432:	45a8      	cmp	r8, r5
 8006434:	bf38      	it	cc
 8006436:	2100      	movcc	r1, #0
 8006438:	440b      	add	r3, r1
 800643a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800643e:	b191      	cbz	r1, 8006466 <__mdiff+0x11a>
 8006440:	6117      	str	r7, [r2, #16]
 8006442:	e79d      	b.n	8006380 <__mdiff+0x34>
 8006444:	f854 1b04 	ldr.w	r1, [r4], #4
 8006448:	46e6      	mov	lr, ip
 800644a:	0c08      	lsrs	r0, r1, #16
 800644c:	fa1c fc81 	uxtah	ip, ip, r1
 8006450:	4471      	add	r1, lr
 8006452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006456:	b289      	uxth	r1, r1
 8006458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800645c:	f846 1b04 	str.w	r1, [r6], #4
 8006460:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006464:	e7dd      	b.n	8006422 <__mdiff+0xd6>
 8006466:	3f01      	subs	r7, #1
 8006468:	e7e7      	b.n	800643a <__mdiff+0xee>
 800646a:	bf00      	nop
 800646c:	08007074 	.word	0x08007074
 8006470:	08007085 	.word	0x08007085

08006474 <__d2b>:
 8006474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006478:	460f      	mov	r7, r1
 800647a:	2101      	movs	r1, #1
 800647c:	ec59 8b10 	vmov	r8, r9, d0
 8006480:	4616      	mov	r6, r2
 8006482:	f7ff fcd5 	bl	8005e30 <_Balloc>
 8006486:	4604      	mov	r4, r0
 8006488:	b930      	cbnz	r0, 8006498 <__d2b+0x24>
 800648a:	4602      	mov	r2, r0
 800648c:	4b23      	ldr	r3, [pc, #140]	@ (800651c <__d2b+0xa8>)
 800648e:	4824      	ldr	r0, [pc, #144]	@ (8006520 <__d2b+0xac>)
 8006490:	f240 310f 	movw	r1, #783	@ 0x30f
 8006494:	f000 fc48 	bl	8006d28 <__assert_func>
 8006498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800649c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064a0:	b10d      	cbz	r5, 80064a6 <__d2b+0x32>
 80064a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	f1b8 0300 	subs.w	r3, r8, #0
 80064ac:	d023      	beq.n	80064f6 <__d2b+0x82>
 80064ae:	4668      	mov	r0, sp
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	f7ff fd84 	bl	8005fbe <__lo0bits>
 80064b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064ba:	b1d0      	cbz	r0, 80064f2 <__d2b+0x7e>
 80064bc:	f1c0 0320 	rsb	r3, r0, #32
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	430b      	orrs	r3, r1
 80064c6:	40c2      	lsrs	r2, r0
 80064c8:	6163      	str	r3, [r4, #20]
 80064ca:	9201      	str	r2, [sp, #4]
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	61a3      	str	r3, [r4, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf0c      	ite	eq
 80064d4:	2201      	moveq	r2, #1
 80064d6:	2202      	movne	r2, #2
 80064d8:	6122      	str	r2, [r4, #16]
 80064da:	b1a5      	cbz	r5, 8006506 <__d2b+0x92>
 80064dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064e0:	4405      	add	r5, r0
 80064e2:	603d      	str	r5, [r7, #0]
 80064e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064e8:	6030      	str	r0, [r6, #0]
 80064ea:	4620      	mov	r0, r4
 80064ec:	b003      	add	sp, #12
 80064ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064f2:	6161      	str	r1, [r4, #20]
 80064f4:	e7ea      	b.n	80064cc <__d2b+0x58>
 80064f6:	a801      	add	r0, sp, #4
 80064f8:	f7ff fd61 	bl	8005fbe <__lo0bits>
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	6163      	str	r3, [r4, #20]
 8006500:	3020      	adds	r0, #32
 8006502:	2201      	movs	r2, #1
 8006504:	e7e8      	b.n	80064d8 <__d2b+0x64>
 8006506:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800650a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800650e:	6038      	str	r0, [r7, #0]
 8006510:	6918      	ldr	r0, [r3, #16]
 8006512:	f7ff fd35 	bl	8005f80 <__hi0bits>
 8006516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800651a:	e7e5      	b.n	80064e8 <__d2b+0x74>
 800651c:	08007074 	.word	0x08007074
 8006520:	08007085 	.word	0x08007085

08006524 <__ssputs_r>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	688e      	ldr	r6, [r1, #8]
 800652a:	461f      	mov	r7, r3
 800652c:	42be      	cmp	r6, r7
 800652e:	680b      	ldr	r3, [r1, #0]
 8006530:	4682      	mov	sl, r0
 8006532:	460c      	mov	r4, r1
 8006534:	4690      	mov	r8, r2
 8006536:	d82d      	bhi.n	8006594 <__ssputs_r+0x70>
 8006538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800653c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006540:	d026      	beq.n	8006590 <__ssputs_r+0x6c>
 8006542:	6965      	ldr	r5, [r4, #20]
 8006544:	6909      	ldr	r1, [r1, #16]
 8006546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654a:	eba3 0901 	sub.w	r9, r3, r1
 800654e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006552:	1c7b      	adds	r3, r7, #1
 8006554:	444b      	add	r3, r9
 8006556:	106d      	asrs	r5, r5, #1
 8006558:	429d      	cmp	r5, r3
 800655a:	bf38      	it	cc
 800655c:	461d      	movcc	r5, r3
 800655e:	0553      	lsls	r3, r2, #21
 8006560:	d527      	bpl.n	80065b2 <__ssputs_r+0x8e>
 8006562:	4629      	mov	r1, r5
 8006564:	f7ff fbd8 	bl	8005d18 <_malloc_r>
 8006568:	4606      	mov	r6, r0
 800656a:	b360      	cbz	r0, 80065c6 <__ssputs_r+0xa2>
 800656c:	6921      	ldr	r1, [r4, #16]
 800656e:	464a      	mov	r2, r9
 8006570:	f000 fbcc 	bl	8006d0c <memcpy>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	6126      	str	r6, [r4, #16]
 8006582:	6165      	str	r5, [r4, #20]
 8006584:	444e      	add	r6, r9
 8006586:	eba5 0509 	sub.w	r5, r5, r9
 800658a:	6026      	str	r6, [r4, #0]
 800658c:	60a5      	str	r5, [r4, #8]
 800658e:	463e      	mov	r6, r7
 8006590:	42be      	cmp	r6, r7
 8006592:	d900      	bls.n	8006596 <__ssputs_r+0x72>
 8006594:	463e      	mov	r6, r7
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	4632      	mov	r2, r6
 800659a:	4641      	mov	r1, r8
 800659c:	f000 fb6a 	bl	8006c74 <memmove>
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	1b9b      	subs	r3, r3, r6
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	4433      	add	r3, r6
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	2000      	movs	r0, #0
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	462a      	mov	r2, r5
 80065b4:	f000 fbfc 	bl	8006db0 <_realloc_r>
 80065b8:	4606      	mov	r6, r0
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1e0      	bne.n	8006580 <__ssputs_r+0x5c>
 80065be:	6921      	ldr	r1, [r4, #16]
 80065c0:	4650      	mov	r0, sl
 80065c2:	f7ff fb35 	bl	8005c30 <_free_r>
 80065c6:	230c      	movs	r3, #12
 80065c8:	f8ca 3000 	str.w	r3, [sl]
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d8:	e7e9      	b.n	80065ae <__ssputs_r+0x8a>
	...

080065dc <_svfiprintf_r>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	4698      	mov	r8, r3
 80065e2:	898b      	ldrh	r3, [r1, #12]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	b09d      	sub	sp, #116	@ 0x74
 80065e8:	4607      	mov	r7, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	d510      	bpl.n	8006612 <_svfiprintf_r+0x36>
 80065f0:	690b      	ldr	r3, [r1, #16]
 80065f2:	b973      	cbnz	r3, 8006612 <_svfiprintf_r+0x36>
 80065f4:	2140      	movs	r1, #64	@ 0x40
 80065f6:	f7ff fb8f 	bl	8005d18 <_malloc_r>
 80065fa:	6028      	str	r0, [r5, #0]
 80065fc:	6128      	str	r0, [r5, #16]
 80065fe:	b930      	cbnz	r0, 800660e <_svfiprintf_r+0x32>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006608:	b01d      	add	sp, #116	@ 0x74
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	2340      	movs	r3, #64	@ 0x40
 8006610:	616b      	str	r3, [r5, #20]
 8006612:	2300      	movs	r3, #0
 8006614:	9309      	str	r3, [sp, #36]	@ 0x24
 8006616:	2320      	movs	r3, #32
 8006618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800661c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006620:	2330      	movs	r3, #48	@ 0x30
 8006622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067c0 <_svfiprintf_r+0x1e4>
 8006626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800662a:	f04f 0901 	mov.w	r9, #1
 800662e:	4623      	mov	r3, r4
 8006630:	469a      	mov	sl, r3
 8006632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006636:	b10a      	cbz	r2, 800663c <_svfiprintf_r+0x60>
 8006638:	2a25      	cmp	r2, #37	@ 0x25
 800663a:	d1f9      	bne.n	8006630 <_svfiprintf_r+0x54>
 800663c:	ebba 0b04 	subs.w	fp, sl, r4
 8006640:	d00b      	beq.n	800665a <_svfiprintf_r+0x7e>
 8006642:	465b      	mov	r3, fp
 8006644:	4622      	mov	r2, r4
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff6b 	bl	8006524 <__ssputs_r>
 800664e:	3001      	adds	r0, #1
 8006650:	f000 80a7 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006656:	445a      	add	r2, fp
 8006658:	9209      	str	r2, [sp, #36]	@ 0x24
 800665a:	f89a 3000 	ldrb.w	r3, [sl]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809f 	beq.w	80067a2 <_svfiprintf_r+0x1c6>
 8006664:	2300      	movs	r3, #0
 8006666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666e:	f10a 0a01 	add.w	sl, sl, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800667a:	931a      	str	r3, [sp, #104]	@ 0x68
 800667c:	4654      	mov	r4, sl
 800667e:	2205      	movs	r2, #5
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	484e      	ldr	r0, [pc, #312]	@ (80067c0 <_svfiprintf_r+0x1e4>)
 8006686:	f7f9 fdab 	bl	80001e0 <memchr>
 800668a:	9a04      	ldr	r2, [sp, #16]
 800668c:	b9d8      	cbnz	r0, 80066c6 <_svfiprintf_r+0xea>
 800668e:	06d0      	lsls	r0, r2, #27
 8006690:	bf44      	itt	mi
 8006692:	2320      	movmi	r3, #32
 8006694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006698:	0711      	lsls	r1, r2, #28
 800669a:	bf44      	itt	mi
 800669c:	232b      	movmi	r3, #43	@ 0x2b
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a2:	f89a 3000 	ldrb.w	r3, [sl]
 80066a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a8:	d015      	beq.n	80066d6 <_svfiprintf_r+0xfa>
 80066aa:	9a07      	ldr	r2, [sp, #28]
 80066ac:	4654      	mov	r4, sl
 80066ae:	2000      	movs	r0, #0
 80066b0:	f04f 0c0a 	mov.w	ip, #10
 80066b4:	4621      	mov	r1, r4
 80066b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ba:	3b30      	subs	r3, #48	@ 0x30
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d94b      	bls.n	8006758 <_svfiprintf_r+0x17c>
 80066c0:	b1b0      	cbz	r0, 80066f0 <_svfiprintf_r+0x114>
 80066c2:	9207      	str	r2, [sp, #28]
 80066c4:	e014      	b.n	80066f0 <_svfiprintf_r+0x114>
 80066c6:	eba0 0308 	sub.w	r3, r0, r8
 80066ca:	fa09 f303 	lsl.w	r3, r9, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	46a2      	mov	sl, r4
 80066d4:	e7d2      	b.n	800667c <_svfiprintf_r+0xa0>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	1d19      	adds	r1, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	9103      	str	r1, [sp, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbb      	ittet	lt
 80066e2:	425b      	neglt	r3, r3
 80066e4:	f042 0202 	orrlt.w	r2, r2, #2
 80066e8:	9307      	strge	r3, [sp, #28]
 80066ea:	9307      	strlt	r3, [sp, #28]
 80066ec:	bfb8      	it	lt
 80066ee:	9204      	strlt	r2, [sp, #16]
 80066f0:	7823      	ldrb	r3, [r4, #0]
 80066f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066f4:	d10a      	bne.n	800670c <_svfiprintf_r+0x130>
 80066f6:	7863      	ldrb	r3, [r4, #1]
 80066f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066fa:	d132      	bne.n	8006762 <_svfiprintf_r+0x186>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	9203      	str	r2, [sp, #12]
 8006704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006708:	3402      	adds	r4, #2
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067d0 <_svfiprintf_r+0x1f4>
 8006710:	7821      	ldrb	r1, [r4, #0]
 8006712:	2203      	movs	r2, #3
 8006714:	4650      	mov	r0, sl
 8006716:	f7f9 fd63 	bl	80001e0 <memchr>
 800671a:	b138      	cbz	r0, 800672c <_svfiprintf_r+0x150>
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	eba0 000a 	sub.w	r0, r0, sl
 8006722:	2240      	movs	r2, #64	@ 0x40
 8006724:	4082      	lsls	r2, r0
 8006726:	4313      	orrs	r3, r2
 8006728:	3401      	adds	r4, #1
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	4824      	ldr	r0, [pc, #144]	@ (80067c4 <_svfiprintf_r+0x1e8>)
 8006732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006736:	2206      	movs	r2, #6
 8006738:	f7f9 fd52 	bl	80001e0 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d036      	beq.n	80067ae <_svfiprintf_r+0x1d2>
 8006740:	4b21      	ldr	r3, [pc, #132]	@ (80067c8 <_svfiprintf_r+0x1ec>)
 8006742:	bb1b      	cbnz	r3, 800678c <_svfiprintf_r+0x1b0>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	3307      	adds	r3, #7
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006752:	4433      	add	r3, r6
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	e76a      	b.n	800662e <_svfiprintf_r+0x52>
 8006758:	fb0c 3202 	mla	r2, ip, r2, r3
 800675c:	460c      	mov	r4, r1
 800675e:	2001      	movs	r0, #1
 8006760:	e7a8      	b.n	80066b4 <_svfiprintf_r+0xd8>
 8006762:	2300      	movs	r3, #0
 8006764:	3401      	adds	r4, #1
 8006766:	9305      	str	r3, [sp, #20]
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0c0a 	mov.w	ip, #10
 800676e:	4620      	mov	r0, r4
 8006770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006774:	3a30      	subs	r2, #48	@ 0x30
 8006776:	2a09      	cmp	r2, #9
 8006778:	d903      	bls.n	8006782 <_svfiprintf_r+0x1a6>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0c6      	beq.n	800670c <_svfiprintf_r+0x130>
 800677e:	9105      	str	r1, [sp, #20]
 8006780:	e7c4      	b.n	800670c <_svfiprintf_r+0x130>
 8006782:	fb0c 2101 	mla	r1, ip, r1, r2
 8006786:	4604      	mov	r4, r0
 8006788:	2301      	movs	r3, #1
 800678a:	e7f0      	b.n	800676e <_svfiprintf_r+0x192>
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462a      	mov	r2, r5
 8006792:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <_svfiprintf_r+0x1f0>)
 8006794:	a904      	add	r1, sp, #16
 8006796:	4638      	mov	r0, r7
 8006798:	f7fd fde4 	bl	8004364 <_printf_float>
 800679c:	1c42      	adds	r2, r0, #1
 800679e:	4606      	mov	r6, r0
 80067a0:	d1d6      	bne.n	8006750 <_svfiprintf_r+0x174>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af2d 	bmi.w	8006604 <_svfiprintf_r+0x28>
 80067aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ac:	e72c      	b.n	8006608 <_svfiprintf_r+0x2c>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <_svfiprintf_r+0x1f0>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7fe f86b 	bl	8004894 <_printf_i>
 80067be:	e7ed      	b.n	800679c <_svfiprintf_r+0x1c0>
 80067c0:	080070de 	.word	0x080070de
 80067c4:	080070e8 	.word	0x080070e8
 80067c8:	08004365 	.word	0x08004365
 80067cc:	08006525 	.word	0x08006525
 80067d0:	080070e4 	.word	0x080070e4

080067d4 <__sfputc_r>:
 80067d4:	6893      	ldr	r3, [r2, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	b410      	push	{r4}
 80067dc:	6093      	str	r3, [r2, #8]
 80067de:	da08      	bge.n	80067f2 <__sfputc_r+0x1e>
 80067e0:	6994      	ldr	r4, [r2, #24]
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	db01      	blt.n	80067ea <__sfputc_r+0x16>
 80067e6:	290a      	cmp	r1, #10
 80067e8:	d103      	bne.n	80067f2 <__sfputc_r+0x1e>
 80067ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ee:	f7fe bab1 	b.w	8004d54 <__swbuf_r>
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	1c58      	adds	r0, r3, #1
 80067f6:	6010      	str	r0, [r2, #0]
 80067f8:	7019      	strb	r1, [r3, #0]
 80067fa:	4608      	mov	r0, r1
 80067fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006800:	4770      	bx	lr

08006802 <__sfputs_r>:
 8006802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	460f      	mov	r7, r1
 8006808:	4614      	mov	r4, r2
 800680a:	18d5      	adds	r5, r2, r3
 800680c:	42ac      	cmp	r4, r5
 800680e:	d101      	bne.n	8006814 <__sfputs_r+0x12>
 8006810:	2000      	movs	r0, #0
 8006812:	e007      	b.n	8006824 <__sfputs_r+0x22>
 8006814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006818:	463a      	mov	r2, r7
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff ffda 	bl	80067d4 <__sfputc_r>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d1f3      	bne.n	800680c <__sfputs_r+0xa>
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006828 <_vfiprintf_r>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	460d      	mov	r5, r1
 800682e:	b09d      	sub	sp, #116	@ 0x74
 8006830:	4614      	mov	r4, r2
 8006832:	4698      	mov	r8, r3
 8006834:	4606      	mov	r6, r0
 8006836:	b118      	cbz	r0, 8006840 <_vfiprintf_r+0x18>
 8006838:	6a03      	ldr	r3, [r0, #32]
 800683a:	b90b      	cbnz	r3, 8006840 <_vfiprintf_r+0x18>
 800683c:	f7fe f9d4 	bl	8004be8 <__sinit>
 8006840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006842:	07d9      	lsls	r1, r3, #31
 8006844:	d405      	bmi.n	8006852 <_vfiprintf_r+0x2a>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d402      	bmi.n	8006852 <_vfiprintf_r+0x2a>
 800684c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800684e:	f7fe fb92 	bl	8004f76 <__retarget_lock_acquire_recursive>
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	071b      	lsls	r3, r3, #28
 8006856:	d501      	bpl.n	800685c <_vfiprintf_r+0x34>
 8006858:	692b      	ldr	r3, [r5, #16]
 800685a:	b99b      	cbnz	r3, 8006884 <_vfiprintf_r+0x5c>
 800685c:	4629      	mov	r1, r5
 800685e:	4630      	mov	r0, r6
 8006860:	f7fe fab6 	bl	8004dd0 <__swsetup_r>
 8006864:	b170      	cbz	r0, 8006884 <_vfiprintf_r+0x5c>
 8006866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006868:	07dc      	lsls	r4, r3, #31
 800686a:	d504      	bpl.n	8006876 <_vfiprintf_r+0x4e>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006870:	b01d      	add	sp, #116	@ 0x74
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	0598      	lsls	r0, r3, #22
 800687a:	d4f7      	bmi.n	800686c <_vfiprintf_r+0x44>
 800687c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800687e:	f7fe fb7b 	bl	8004f78 <__retarget_lock_release_recursive>
 8006882:	e7f3      	b.n	800686c <_vfiprintf_r+0x44>
 8006884:	2300      	movs	r3, #0
 8006886:	9309      	str	r3, [sp, #36]	@ 0x24
 8006888:	2320      	movs	r3, #32
 800688a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800688e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006892:	2330      	movs	r3, #48	@ 0x30
 8006894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a44 <_vfiprintf_r+0x21c>
 8006898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800689c:	f04f 0901 	mov.w	r9, #1
 80068a0:	4623      	mov	r3, r4
 80068a2:	469a      	mov	sl, r3
 80068a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a8:	b10a      	cbz	r2, 80068ae <_vfiprintf_r+0x86>
 80068aa:	2a25      	cmp	r2, #37	@ 0x25
 80068ac:	d1f9      	bne.n	80068a2 <_vfiprintf_r+0x7a>
 80068ae:	ebba 0b04 	subs.w	fp, sl, r4
 80068b2:	d00b      	beq.n	80068cc <_vfiprintf_r+0xa4>
 80068b4:	465b      	mov	r3, fp
 80068b6:	4622      	mov	r2, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff ffa1 	bl	8006802 <__sfputs_r>
 80068c0:	3001      	adds	r0, #1
 80068c2:	f000 80a7 	beq.w	8006a14 <_vfiprintf_r+0x1ec>
 80068c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c8:	445a      	add	r2, fp
 80068ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80068cc:	f89a 3000 	ldrb.w	r3, [sl]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 809f 	beq.w	8006a14 <_vfiprintf_r+0x1ec>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e0:	f10a 0a01 	add.w	sl, sl, #1
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80068ee:	4654      	mov	r4, sl
 80068f0:	2205      	movs	r2, #5
 80068f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f6:	4853      	ldr	r0, [pc, #332]	@ (8006a44 <_vfiprintf_r+0x21c>)
 80068f8:	f7f9 fc72 	bl	80001e0 <memchr>
 80068fc:	9a04      	ldr	r2, [sp, #16]
 80068fe:	b9d8      	cbnz	r0, 8006938 <_vfiprintf_r+0x110>
 8006900:	06d1      	lsls	r1, r2, #27
 8006902:	bf44      	itt	mi
 8006904:	2320      	movmi	r3, #32
 8006906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800690a:	0713      	lsls	r3, r2, #28
 800690c:	bf44      	itt	mi
 800690e:	232b      	movmi	r3, #43	@ 0x2b
 8006910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006914:	f89a 3000 	ldrb.w	r3, [sl]
 8006918:	2b2a      	cmp	r3, #42	@ 0x2a
 800691a:	d015      	beq.n	8006948 <_vfiprintf_r+0x120>
 800691c:	9a07      	ldr	r2, [sp, #28]
 800691e:	4654      	mov	r4, sl
 8006920:	2000      	movs	r0, #0
 8006922:	f04f 0c0a 	mov.w	ip, #10
 8006926:	4621      	mov	r1, r4
 8006928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692c:	3b30      	subs	r3, #48	@ 0x30
 800692e:	2b09      	cmp	r3, #9
 8006930:	d94b      	bls.n	80069ca <_vfiprintf_r+0x1a2>
 8006932:	b1b0      	cbz	r0, 8006962 <_vfiprintf_r+0x13a>
 8006934:	9207      	str	r2, [sp, #28]
 8006936:	e014      	b.n	8006962 <_vfiprintf_r+0x13a>
 8006938:	eba0 0308 	sub.w	r3, r0, r8
 800693c:	fa09 f303 	lsl.w	r3, r9, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	46a2      	mov	sl, r4
 8006946:	e7d2      	b.n	80068ee <_vfiprintf_r+0xc6>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	1d19      	adds	r1, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	9103      	str	r1, [sp, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfbb      	ittet	lt
 8006954:	425b      	neglt	r3, r3
 8006956:	f042 0202 	orrlt.w	r2, r2, #2
 800695a:	9307      	strge	r3, [sp, #28]
 800695c:	9307      	strlt	r3, [sp, #28]
 800695e:	bfb8      	it	lt
 8006960:	9204      	strlt	r2, [sp, #16]
 8006962:	7823      	ldrb	r3, [r4, #0]
 8006964:	2b2e      	cmp	r3, #46	@ 0x2e
 8006966:	d10a      	bne.n	800697e <_vfiprintf_r+0x156>
 8006968:	7863      	ldrb	r3, [r4, #1]
 800696a:	2b2a      	cmp	r3, #42	@ 0x2a
 800696c:	d132      	bne.n	80069d4 <_vfiprintf_r+0x1ac>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	9203      	str	r2, [sp, #12]
 8006976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800697a:	3402      	adds	r4, #2
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a54 <_vfiprintf_r+0x22c>
 8006982:	7821      	ldrb	r1, [r4, #0]
 8006984:	2203      	movs	r2, #3
 8006986:	4650      	mov	r0, sl
 8006988:	f7f9 fc2a 	bl	80001e0 <memchr>
 800698c:	b138      	cbz	r0, 800699e <_vfiprintf_r+0x176>
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	eba0 000a 	sub.w	r0, r0, sl
 8006994:	2240      	movs	r2, #64	@ 0x40
 8006996:	4082      	lsls	r2, r0
 8006998:	4313      	orrs	r3, r2
 800699a:	3401      	adds	r4, #1
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	4829      	ldr	r0, [pc, #164]	@ (8006a48 <_vfiprintf_r+0x220>)
 80069a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069a8:	2206      	movs	r2, #6
 80069aa:	f7f9 fc19 	bl	80001e0 <memchr>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d03f      	beq.n	8006a32 <_vfiprintf_r+0x20a>
 80069b2:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <_vfiprintf_r+0x224>)
 80069b4:	bb1b      	cbnz	r3, 80069fe <_vfiprintf_r+0x1d6>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	3307      	adds	r3, #7
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	3308      	adds	r3, #8
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c4:	443b      	add	r3, r7
 80069c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c8:	e76a      	b.n	80068a0 <_vfiprintf_r+0x78>
 80069ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ce:	460c      	mov	r4, r1
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7a8      	b.n	8006926 <_vfiprintf_r+0xfe>
 80069d4:	2300      	movs	r3, #0
 80069d6:	3401      	adds	r4, #1
 80069d8:	9305      	str	r3, [sp, #20]
 80069da:	4619      	mov	r1, r3
 80069dc:	f04f 0c0a 	mov.w	ip, #10
 80069e0:	4620      	mov	r0, r4
 80069e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e6:	3a30      	subs	r2, #48	@ 0x30
 80069e8:	2a09      	cmp	r2, #9
 80069ea:	d903      	bls.n	80069f4 <_vfiprintf_r+0x1cc>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0c6      	beq.n	800697e <_vfiprintf_r+0x156>
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	e7c4      	b.n	800697e <_vfiprintf_r+0x156>
 80069f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f8:	4604      	mov	r4, r0
 80069fa:	2301      	movs	r3, #1
 80069fc:	e7f0      	b.n	80069e0 <_vfiprintf_r+0x1b8>
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	462a      	mov	r2, r5
 8006a04:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <_vfiprintf_r+0x228>)
 8006a06:	a904      	add	r1, sp, #16
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7fd fcab 	bl	8004364 <_printf_float>
 8006a0e:	4607      	mov	r7, r0
 8006a10:	1c78      	adds	r0, r7, #1
 8006a12:	d1d6      	bne.n	80069c2 <_vfiprintf_r+0x19a>
 8006a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	d405      	bmi.n	8006a26 <_vfiprintf_r+0x1fe>
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	059a      	lsls	r2, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <_vfiprintf_r+0x1fe>
 8006a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a22:	f7fe faa9 	bl	8004f78 <__retarget_lock_release_recursive>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	065b      	lsls	r3, r3, #25
 8006a2a:	f53f af1f 	bmi.w	800686c <_vfiprintf_r+0x44>
 8006a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a30:	e71e      	b.n	8006870 <_vfiprintf_r+0x48>
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	462a      	mov	r2, r5
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <_vfiprintf_r+0x228>)
 8006a3a:	a904      	add	r1, sp, #16
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7fd ff29 	bl	8004894 <_printf_i>
 8006a42:	e7e4      	b.n	8006a0e <_vfiprintf_r+0x1e6>
 8006a44:	080070de 	.word	0x080070de
 8006a48:	080070e8 	.word	0x080070e8
 8006a4c:	08004365 	.word	0x08004365
 8006a50:	08006803 	.word	0x08006803
 8006a54:	080070e4 	.word	0x080070e4

08006a58 <__sflush_r>:
 8006a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	0716      	lsls	r6, r2, #28
 8006a62:	4605      	mov	r5, r0
 8006a64:	460c      	mov	r4, r1
 8006a66:	d454      	bmi.n	8006b12 <__sflush_r+0xba>
 8006a68:	684b      	ldr	r3, [r1, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dc02      	bgt.n	8006a74 <__sflush_r+0x1c>
 8006a6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dd48      	ble.n	8006b06 <__sflush_r+0xae>
 8006a74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a76:	2e00      	cmp	r6, #0
 8006a78:	d045      	beq.n	8006b06 <__sflush_r+0xae>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a80:	682f      	ldr	r7, [r5, #0]
 8006a82:	6a21      	ldr	r1, [r4, #32]
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	d030      	beq.n	8006aea <__sflush_r+0x92>
 8006a88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	0759      	lsls	r1, r3, #29
 8006a8e:	d505      	bpl.n	8006a9c <__sflush_r+0x44>
 8006a90:	6863      	ldr	r3, [r4, #4]
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a96:	b10b      	cbz	r3, 8006a9c <__sflush_r+0x44>
 8006a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006aa0:	6a21      	ldr	r1, [r4, #32]
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b0      	blx	r6
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	d106      	bne.n	8006aba <__sflush_r+0x62>
 8006aac:	6829      	ldr	r1, [r5, #0]
 8006aae:	291d      	cmp	r1, #29
 8006ab0:	d82b      	bhi.n	8006b0a <__sflush_r+0xb2>
 8006ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b5c <__sflush_r+0x104>)
 8006ab4:	40ca      	lsrs	r2, r1
 8006ab6:	07d6      	lsls	r6, r2, #31
 8006ab8:	d527      	bpl.n	8006b0a <__sflush_r+0xb2>
 8006aba:	2200      	movs	r2, #0
 8006abc:	6062      	str	r2, [r4, #4]
 8006abe:	04d9      	lsls	r1, r3, #19
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	d504      	bpl.n	8006ad0 <__sflush_r+0x78>
 8006ac6:	1c42      	adds	r2, r0, #1
 8006ac8:	d101      	bne.n	8006ace <__sflush_r+0x76>
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	b903      	cbnz	r3, 8006ad0 <__sflush_r+0x78>
 8006ace:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ad2:	602f      	str	r7, [r5, #0]
 8006ad4:	b1b9      	cbz	r1, 8006b06 <__sflush_r+0xae>
 8006ad6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d002      	beq.n	8006ae4 <__sflush_r+0x8c>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7ff f8a6 	bl	8005c30 <_free_r>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ae8:	e00d      	b.n	8006b06 <__sflush_r+0xae>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b0      	blx	r6
 8006af0:	4602      	mov	r2, r0
 8006af2:	1c50      	adds	r0, r2, #1
 8006af4:	d1c9      	bne.n	8006a8a <__sflush_r+0x32>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0c6      	beq.n	8006a8a <__sflush_r+0x32>
 8006afc:	2b1d      	cmp	r3, #29
 8006afe:	d001      	beq.n	8006b04 <__sflush_r+0xac>
 8006b00:	2b16      	cmp	r3, #22
 8006b02:	d11e      	bne.n	8006b42 <__sflush_r+0xea>
 8006b04:	602f      	str	r7, [r5, #0]
 8006b06:	2000      	movs	r0, #0
 8006b08:	e022      	b.n	8006b50 <__sflush_r+0xf8>
 8006b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b0e:	b21b      	sxth	r3, r3
 8006b10:	e01b      	b.n	8006b4a <__sflush_r+0xf2>
 8006b12:	690f      	ldr	r7, [r1, #16]
 8006b14:	2f00      	cmp	r7, #0
 8006b16:	d0f6      	beq.n	8006b06 <__sflush_r+0xae>
 8006b18:	0793      	lsls	r3, r2, #30
 8006b1a:	680e      	ldr	r6, [r1, #0]
 8006b1c:	bf08      	it	eq
 8006b1e:	694b      	ldreq	r3, [r1, #20]
 8006b20:	600f      	str	r7, [r1, #0]
 8006b22:	bf18      	it	ne
 8006b24:	2300      	movne	r3, #0
 8006b26:	eba6 0807 	sub.w	r8, r6, r7
 8006b2a:	608b      	str	r3, [r1, #8]
 8006b2c:	f1b8 0f00 	cmp.w	r8, #0
 8006b30:	dde9      	ble.n	8006b06 <__sflush_r+0xae>
 8006b32:	6a21      	ldr	r1, [r4, #32]
 8006b34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b36:	4643      	mov	r3, r8
 8006b38:	463a      	mov	r2, r7
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b0      	blx	r6
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	dc08      	bgt.n	8006b54 <__sflush_r+0xfc>
 8006b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	4407      	add	r7, r0
 8006b56:	eba8 0800 	sub.w	r8, r8, r0
 8006b5a:	e7e7      	b.n	8006b2c <__sflush_r+0xd4>
 8006b5c:	20400001 	.word	0x20400001

08006b60 <_fflush_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	690b      	ldr	r3, [r1, #16]
 8006b64:	4605      	mov	r5, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	b913      	cbnz	r3, 8006b70 <_fflush_r+0x10>
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	b118      	cbz	r0, 8006b7a <_fflush_r+0x1a>
 8006b72:	6a03      	ldr	r3, [r0, #32]
 8006b74:	b90b      	cbnz	r3, 8006b7a <_fflush_r+0x1a>
 8006b76:	f7fe f837 	bl	8004be8 <__sinit>
 8006b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f3      	beq.n	8006b6a <_fflush_r+0xa>
 8006b82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b84:	07d0      	lsls	r0, r2, #31
 8006b86:	d404      	bmi.n	8006b92 <_fflush_r+0x32>
 8006b88:	0599      	lsls	r1, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_fflush_r+0x32>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b8e:	f7fe f9f2 	bl	8004f76 <__retarget_lock_acquire_recursive>
 8006b92:	4628      	mov	r0, r5
 8006b94:	4621      	mov	r1, r4
 8006b96:	f7ff ff5f 	bl	8006a58 <__sflush_r>
 8006b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b9c:	07da      	lsls	r2, r3, #31
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	d4e4      	bmi.n	8006b6c <_fflush_r+0xc>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	059b      	lsls	r3, r3, #22
 8006ba6:	d4e1      	bmi.n	8006b6c <_fflush_r+0xc>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006baa:	f7fe f9e5 	bl	8004f78 <__retarget_lock_release_recursive>
 8006bae:	e7dd      	b.n	8006b6c <_fflush_r+0xc>

08006bb0 <__swhatbuf_r>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	b096      	sub	sp, #88	@ 0x58
 8006bbc:	4615      	mov	r5, r2
 8006bbe:	461e      	mov	r6, r3
 8006bc0:	da0d      	bge.n	8006bde <__swhatbuf_r+0x2e>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	bf14      	ite	ne
 8006bce:	2340      	movne	r3, #64	@ 0x40
 8006bd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	6031      	str	r1, [r6, #0]
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	b016      	add	sp, #88	@ 0x58
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
 8006bde:	466a      	mov	r2, sp
 8006be0:	f000 f862 	bl	8006ca8 <_fstat_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	dbec      	blt.n	8006bc2 <__swhatbuf_r+0x12>
 8006be8:	9901      	ldr	r1, [sp, #4]
 8006bea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bf2:	4259      	negs	r1, r3
 8006bf4:	4159      	adcs	r1, r3
 8006bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bfa:	e7eb      	b.n	8006bd4 <__swhatbuf_r+0x24>

08006bfc <__smakebuf_r>:
 8006bfc:	898b      	ldrh	r3, [r1, #12]
 8006bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c00:	079d      	lsls	r5, r3, #30
 8006c02:	4606      	mov	r6, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	d507      	bpl.n	8006c18 <__smakebuf_r+0x1c>
 8006c08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	2301      	movs	r3, #1
 8006c12:	6163      	str	r3, [r4, #20]
 8006c14:	b003      	add	sp, #12
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c18:	ab01      	add	r3, sp, #4
 8006c1a:	466a      	mov	r2, sp
 8006c1c:	f7ff ffc8 	bl	8006bb0 <__swhatbuf_r>
 8006c20:	9f00      	ldr	r7, [sp, #0]
 8006c22:	4605      	mov	r5, r0
 8006c24:	4639      	mov	r1, r7
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff f876 	bl	8005d18 <_malloc_r>
 8006c2c:	b948      	cbnz	r0, 8006c42 <__smakebuf_r+0x46>
 8006c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c32:	059a      	lsls	r2, r3, #22
 8006c34:	d4ee      	bmi.n	8006c14 <__smakebuf_r+0x18>
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	e7e2      	b.n	8006c08 <__smakebuf_r+0xc>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	6020      	str	r0, [r4, #0]
 8006c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	9b01      	ldr	r3, [sp, #4]
 8006c4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c52:	b15b      	cbz	r3, 8006c6c <__smakebuf_r+0x70>
 8006c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 f837 	bl	8006ccc <_isatty_r>
 8006c5e:	b128      	cbz	r0, 8006c6c <__smakebuf_r+0x70>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	431d      	orrs	r5, r3
 8006c70:	81a5      	strh	r5, [r4, #12]
 8006c72:	e7cf      	b.n	8006c14 <__smakebuf_r+0x18>

08006c74 <memmove>:
 8006c74:	4288      	cmp	r0, r1
 8006c76:	b510      	push	{r4, lr}
 8006c78:	eb01 0402 	add.w	r4, r1, r2
 8006c7c:	d902      	bls.n	8006c84 <memmove+0x10>
 8006c7e:	4284      	cmp	r4, r0
 8006c80:	4623      	mov	r3, r4
 8006c82:	d807      	bhi.n	8006c94 <memmove+0x20>
 8006c84:	1e43      	subs	r3, r0, #1
 8006c86:	42a1      	cmp	r1, r4
 8006c88:	d008      	beq.n	8006c9c <memmove+0x28>
 8006c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c92:	e7f8      	b.n	8006c86 <memmove+0x12>
 8006c94:	4402      	add	r2, r0
 8006c96:	4601      	mov	r1, r0
 8006c98:	428a      	cmp	r2, r1
 8006c9a:	d100      	bne.n	8006c9e <memmove+0x2a>
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ca6:	e7f7      	b.n	8006c98 <memmove+0x24>

08006ca8 <_fstat_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	@ (8006cc8 <_fstat_r+0x20>)
 8006cac:	2300      	movs	r3, #0
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	602b      	str	r3, [r5, #0]
 8006cb6:	f7fc fec4 	bl	8003a42 <_fstat>
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	d102      	bne.n	8006cc4 <_fstat_r+0x1c>
 8006cbe:	682b      	ldr	r3, [r5, #0]
 8006cc0:	b103      	cbz	r3, 8006cc4 <_fstat_r+0x1c>
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	bd38      	pop	{r3, r4, r5, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000470 	.word	0x20000470

08006ccc <_isatty_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d06      	ldr	r5, [pc, #24]	@ (8006ce8 <_isatty_r+0x1c>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fc fec1 	bl	8003a5e <_isatty>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_isatty_r+0x1a>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_isatty_r+0x1a>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	20000470 	.word	0x20000470

08006cec <_sbrk_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	@ (8006d08 <_sbrk_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7fa fce8 	bl	80016cc <_sbrk>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_sbrk_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_sbrk_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20000470 	.word	0x20000470

08006d0c <memcpy>:
 8006d0c:	440a      	add	r2, r1
 8006d0e:	4291      	cmp	r1, r2
 8006d10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d14:	d100      	bne.n	8006d18 <memcpy+0xc>
 8006d16:	4770      	bx	lr
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d22:	4291      	cmp	r1, r2
 8006d24:	d1f9      	bne.n	8006d1a <memcpy+0xe>
 8006d26:	bd10      	pop	{r4, pc}

08006d28 <__assert_func>:
 8006d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <__assert_func+0x2c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4605      	mov	r5, r0
 8006d34:	68d8      	ldr	r0, [r3, #12]
 8006d36:	b14c      	cbz	r4, 8006d4c <__assert_func+0x24>
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <__assert_func+0x30>)
 8006d3a:	9100      	str	r1, [sp, #0]
 8006d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d40:	4906      	ldr	r1, [pc, #24]	@ (8006d5c <__assert_func+0x34>)
 8006d42:	462b      	mov	r3, r5
 8006d44:	f000 f870 	bl	8006e28 <fiprintf>
 8006d48:	f000 f880 	bl	8006e4c <abort>
 8006d4c:	4b04      	ldr	r3, [pc, #16]	@ (8006d60 <__assert_func+0x38>)
 8006d4e:	461c      	mov	r4, r3
 8006d50:	e7f3      	b.n	8006d3a <__assert_func+0x12>
 8006d52:	bf00      	nop
 8006d54:	20000018 	.word	0x20000018
 8006d58:	080070f9 	.word	0x080070f9
 8006d5c:	08007106 	.word	0x08007106
 8006d60:	08007134 	.word	0x08007134

08006d64 <_calloc_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	fba1 5402 	umull	r5, r4, r1, r2
 8006d6a:	b934      	cbnz	r4, 8006d7a <_calloc_r+0x16>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f7fe ffd3 	bl	8005d18 <_malloc_r>
 8006d72:	4606      	mov	r6, r0
 8006d74:	b928      	cbnz	r0, 8006d82 <_calloc_r+0x1e>
 8006d76:	4630      	mov	r0, r6
 8006d78:	bd70      	pop	{r4, r5, r6, pc}
 8006d7a:	220c      	movs	r2, #12
 8006d7c:	6002      	str	r2, [r0, #0]
 8006d7e:	2600      	movs	r6, #0
 8006d80:	e7f9      	b.n	8006d76 <_calloc_r+0x12>
 8006d82:	462a      	mov	r2, r5
 8006d84:	4621      	mov	r1, r4
 8006d86:	f7fe f879 	bl	8004e7c <memset>
 8006d8a:	e7f4      	b.n	8006d76 <_calloc_r+0x12>

08006d8c <__ascii_mbtowc>:
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	b901      	cbnz	r1, 8006d92 <__ascii_mbtowc+0x6>
 8006d90:	a901      	add	r1, sp, #4
 8006d92:	b142      	cbz	r2, 8006da6 <__ascii_mbtowc+0x1a>
 8006d94:	b14b      	cbz	r3, 8006daa <__ascii_mbtowc+0x1e>
 8006d96:	7813      	ldrb	r3, [r2, #0]
 8006d98:	600b      	str	r3, [r1, #0]
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	1e10      	subs	r0, r2, #0
 8006d9e:	bf18      	it	ne
 8006da0:	2001      	movne	r0, #1
 8006da2:	b002      	add	sp, #8
 8006da4:	4770      	bx	lr
 8006da6:	4610      	mov	r0, r2
 8006da8:	e7fb      	b.n	8006da2 <__ascii_mbtowc+0x16>
 8006daa:	f06f 0001 	mvn.w	r0, #1
 8006dae:	e7f8      	b.n	8006da2 <__ascii_mbtowc+0x16>

08006db0 <_realloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	4607      	mov	r7, r0
 8006db6:	4614      	mov	r4, r2
 8006db8:	460d      	mov	r5, r1
 8006dba:	b921      	cbnz	r1, 8006dc6 <_realloc_r+0x16>
 8006dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	f7fe bfa9 	b.w	8005d18 <_malloc_r>
 8006dc6:	b92a      	cbnz	r2, 8006dd4 <_realloc_r+0x24>
 8006dc8:	f7fe ff32 	bl	8005c30 <_free_r>
 8006dcc:	4625      	mov	r5, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	f000 f841 	bl	8006e5a <_malloc_usable_size_r>
 8006dd8:	4284      	cmp	r4, r0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	d802      	bhi.n	8006de4 <_realloc_r+0x34>
 8006dde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006de2:	d8f4      	bhi.n	8006dce <_realloc_r+0x1e>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7fe ff96 	bl	8005d18 <_malloc_r>
 8006dec:	4680      	mov	r8, r0
 8006dee:	b908      	cbnz	r0, 8006df4 <_realloc_r+0x44>
 8006df0:	4645      	mov	r5, r8
 8006df2:	e7ec      	b.n	8006dce <_realloc_r+0x1e>
 8006df4:	42b4      	cmp	r4, r6
 8006df6:	4622      	mov	r2, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	bf28      	it	cs
 8006dfc:	4632      	movcs	r2, r6
 8006dfe:	f7ff ff85 	bl	8006d0c <memcpy>
 8006e02:	4629      	mov	r1, r5
 8006e04:	4638      	mov	r0, r7
 8006e06:	f7fe ff13 	bl	8005c30 <_free_r>
 8006e0a:	e7f1      	b.n	8006df0 <_realloc_r+0x40>

08006e0c <__ascii_wctomb>:
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4608      	mov	r0, r1
 8006e10:	b141      	cbz	r1, 8006e24 <__ascii_wctomb+0x18>
 8006e12:	2aff      	cmp	r2, #255	@ 0xff
 8006e14:	d904      	bls.n	8006e20 <__ascii_wctomb+0x14>
 8006e16:	228a      	movs	r2, #138	@ 0x8a
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e1e:	4770      	bx	lr
 8006e20:	700a      	strb	r2, [r1, #0]
 8006e22:	2001      	movs	r0, #1
 8006e24:	4770      	bx	lr
	...

08006e28 <fiprintf>:
 8006e28:	b40e      	push	{r1, r2, r3}
 8006e2a:	b503      	push	{r0, r1, lr}
 8006e2c:	4601      	mov	r1, r0
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	4805      	ldr	r0, [pc, #20]	@ (8006e48 <fiprintf+0x20>)
 8006e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	f7ff fcf5 	bl	8006828 <_vfiprintf_r>
 8006e3e:	b002      	add	sp, #8
 8006e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e44:	b003      	add	sp, #12
 8006e46:	4770      	bx	lr
 8006e48:	20000018 	.word	0x20000018

08006e4c <abort>:
 8006e4c:	b508      	push	{r3, lr}
 8006e4e:	2006      	movs	r0, #6
 8006e50:	f000 f834 	bl	8006ebc <raise>
 8006e54:	2001      	movs	r0, #1
 8006e56:	f000 f855 	bl	8006f04 <_exit>

08006e5a <_malloc_usable_size_r>:
 8006e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5e:	1f18      	subs	r0, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bfbc      	itt	lt
 8006e64:	580b      	ldrlt	r3, [r1, r0]
 8006e66:	18c0      	addlt	r0, r0, r3
 8006e68:	4770      	bx	lr

08006e6a <_raise_r>:
 8006e6a:	291f      	cmp	r1, #31
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	d904      	bls.n	8006e7e <_raise_r+0x14>
 8006e74:	2316      	movs	r3, #22
 8006e76:	6003      	str	r3, [r0, #0]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e80:	b112      	cbz	r2, 8006e88 <_raise_r+0x1e>
 8006e82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e86:	b94b      	cbnz	r3, 8006e9c <_raise_r+0x32>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f831 	bl	8006ef0 <_getpid_r>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	4601      	mov	r1, r0
 8006e92:	4628      	mov	r0, r5
 8006e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e98:	f000 b818 	b.w	8006ecc <_kill_r>
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d00a      	beq.n	8006eb6 <_raise_r+0x4c>
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	d103      	bne.n	8006eac <_raise_r+0x42>
 8006ea4:	2316      	movs	r3, #22
 8006ea6:	6003      	str	r3, [r0, #0]
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	e7e7      	b.n	8006e7c <_raise_r+0x12>
 8006eac:	2100      	movs	r1, #0
 8006eae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4798      	blx	r3
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e7e0      	b.n	8006e7c <_raise_r+0x12>
	...

08006ebc <raise>:
 8006ebc:	4b02      	ldr	r3, [pc, #8]	@ (8006ec8 <raise+0xc>)
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	f7ff bfd2 	b.w	8006e6a <_raise_r>
 8006ec6:	bf00      	nop
 8006ec8:	20000018 	.word	0x20000018

08006ecc <_kill_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	@ (8006eec <_kill_r+0x20>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	f000 f80b 	bl	8006ef4 <_kill>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d102      	bne.n	8006ee8 <_kill_r+0x1c>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b103      	cbz	r3, 8006ee8 <_kill_r+0x1c>
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	bf00      	nop
 8006eec:	20000470 	.word	0x20000470

08006ef0 <_getpid_r>:
 8006ef0:	f7fc bd84 	b.w	80039fc <_getpid>

08006ef4 <_kill>:
 8006ef4:	4b02      	ldr	r3, [pc, #8]	@ (8006f00 <_kill+0xc>)
 8006ef6:	2258      	movs	r2, #88	@ 0x58
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006efe:	4770      	bx	lr
 8006f00:	20000470 	.word	0x20000470

08006f04 <_exit>:
 8006f04:	e7fe      	b.n	8006f04 <_exit>
	...

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
