
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006b60  08006b60  00007b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f80  08006f80  000081dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f80  08006f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f88  08006f88  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f88  08006f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f8c  08006f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006f90  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001dc  0800716c  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800716c  00008440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005171  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c2  00000000  00000000  0000d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  0000e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c7  00000000  00000000  0000eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016413  00000000  00000000  0000ef37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062b7  00000000  00000000  0002534a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f08c  00000000  00000000  0002b601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a60  00000000  00000000  000ba6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000bd130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b48 	.word	0x08006b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006b48 	.word	0x08006b48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Read_MQ135>:
extern void initialise_monitor_handles(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_MQ135() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8000f8e:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <Read_MQ135+0x38>)
 8000f90:	f000 fcaa 	bl	80018e8 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000f94:	210a      	movs	r1, #10
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <Read_MQ135+0x38>)
 8000f98:	f000 fd8d 	bl	8001ab6 <HAL_ADC_PollForConversion>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <Read_MQ135+0x38>)
 8000fa4:	f000 fe12 	bl	8001bcc <HAL_ADC_GetValue>
 8000fa8:	6078      	str	r0, [r7, #4]
    }

    HAL_ADC_Stop(&hadc1);
 8000faa:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <Read_MQ135+0x38>)
 8000fac:	f000 fd50 	bl	8001a50 <HAL_ADC_Stop>
    return adc_value;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f8 	.word	0x200001f8

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fbb5 	bl	8001734 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 8000fca:	f002 f943 	bl	8003254 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f883 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f93d 	bl	8001250 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd6:	f000 f8e9 	bl	80011ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // printf("R0 = %.2f \n", R0);

  float R0 = 5.08f;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <main+0x108>)
 8000fdc:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint32_t mq135_raw = Read_MQ135();
 8000fde:	f7ff ffd1 	bl	8000f84 <Read_MQ135>
 8000fe2:	6138      	str	r0, [r7, #16]
      float voltage = (mq135_raw * 3.0) / 4095;  // Przelicz na napięcie (3.3 V dla 12-bit ADC)
 8000fe4:	6938      	ldr	r0, [r7, #16]
 8000fe6:	f7ff fa95 	bl	8000514 <__aeabi_ui2d>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <main+0x10c>)
 8000ff0:	f7ff fb0a 	bl	8000608 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	a32c      	add	r3, pc, #176	@ (adr r3, 80010b0 <main+0xf0>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fc2b 	bl	800085c <__aeabi_ddiv>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdd3 	bl	8000bb8 <__aeabi_d2f>
 8001012:	4603      	mov	r3, r0
 8001014:	60fb      	str	r3, [r7, #12]
      float V0 = 1.99;  // Zmierzona wartość AO w czystym powietrzu - DO KALIBRACJI
 8001016:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <main+0x110>)
 8001018:	60bb      	str	r3, [r7, #8]

      float Rs = ((3 - voltage) / voltage) * 10.0;  // R_load = 10 kΩ
 800101a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800101e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001022:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001026:	ed97 7a03 	vldr	s14, [r7, #12]
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	edc7 7a01 	vstr	s15, [r7, #4]
      float gci = 116.602 * pow((Rs / R0), -2.769);;
 800103a:	ed97 7a01 	vldr	s14, [r7, #4]
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001046:	ee16 0a90 	vmov	r0, s13
 800104a:	f7ff fa85 	bl	8000558 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80010b8 <main+0xf8>
 8001056:	ec43 2b10 	vmov	d0, r2, r3
 800105a:	f004 fe0b 	bl	8005c74 <pow>
 800105e:	ec51 0b10 	vmov	r0, r1, d0
 8001062:	a317      	add	r3, pc, #92	@ (adr r3, 80010c0 <main+0x100>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff face 	bl	8000608 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fda0 	bl	8000bb8 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	603b      	str	r3, [r7, #0]

      printf("Napięcie: %.2f V |GCI (Gas Contamination Index): %.2f\r\n", voltage, gci); //wskaźnik jakościowy
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f7ff fa66 	bl	8000558 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9cd 2300 	strd	r2, r3, [sp]
 8001094:	4622      	mov	r2, r4
 8001096:	462b      	mov	r3, r5
 8001098:	480e      	ldr	r0, [pc, #56]	@ (80010d4 <main+0x114>)
 800109a:	f002 fe6f 	bl	8003d7c <iprintf>

      HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a2:	f000 fbb9 	bl	8001818 <HAL_Delay>
  {
 80010a6:	bf00      	nop
 80010a8:	e799      	b.n	8000fde <main+0x1e>
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40affe00 	.word	0x40affe00
 80010b8:	78d4fdf4 	.word	0x78d4fdf4
 80010bc:	c00626e9 	.word	0xc00626e9
 80010c0:	2b020c4a 	.word	0x2b020c4a
 80010c4:	405d2687 	.word	0x405d2687
 80010c8:	40a28f5c 	.word	0x40a28f5c
 80010cc:	40080000 	.word	0x40080000
 80010d0:	3ffeb852 	.word	0x3ffeb852
 80010d4:	08006b60 	.word	0x08006b60

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fe9d 	bl	8003e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <SystemClock_Config+0xd0>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800114c:	23c0      	movs	r3, #192	@ 0xc0
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001150:	2304      	movs	r3, #4
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f9f5 	bl	800254c <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f9d0 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2103      	movs	r1, #3
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fc56 	bl	8002a3c <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f9b9 	bl	800150c <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3750      	adds	r7, #80	@ 0x50
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011c0:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <MX_ADC1_Init+0x9c>)
 80011c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <MX_ADC1_Init+0xa0>)
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC1_Init+0x98>)
 8001206:	2201      	movs	r2, #1
 8001208:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_ADC1_Init+0x98>)
 800120c:	f000 fb28 	bl	8001860 <HAL_ADC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f979 	bl	800150c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800121a:	2301      	movs	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_ADC1_Init+0x98>)
 800122c:	f000 fcdc 	bl	8001be8 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001236:	f000 f969 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001f8 	.word	0x200001f8
 8001248:	40012000 	.word	0x40012000
 800124c:	0f000001 	.word	0x0f000001

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	4ba2      	ldr	r3, [pc, #648]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4aa1      	ldr	r2, [pc, #644]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b9f      	ldr	r3, [pc, #636]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	4b9b      	ldr	r3, [pc, #620]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a9a      	ldr	r2, [pc, #616]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b98      	ldr	r3, [pc, #608]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b94      	ldr	r3, [pc, #592]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a93      	ldr	r2, [pc, #588]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b91      	ldr	r3, [pc, #580]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b8d      	ldr	r3, [pc, #564]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a8c      	ldr	r2, [pc, #560]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b8a      	ldr	r3, [pc, #552]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b86      	ldr	r3, [pc, #536]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a85      	ldr	r2, [pc, #532]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b83      	ldr	r3, [pc, #524]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b7f      	ldr	r3, [pc, #508]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a7e      	ldr	r2, [pc, #504]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <MX_GPIO_Init+0x2a4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2108      	movs	r1, #8
 8001312:	4879      	ldr	r0, [pc, #484]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 8001314:	f001 f900 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2101      	movs	r1, #1
 800131c:	4877      	ldr	r0, [pc, #476]	@ (80014fc <MX_GPIO_Init+0x2ac>)
 800131e:	f001 f8fb 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001322:	2200      	movs	r2, #0
 8001324:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001328:	4875      	ldr	r0, [pc, #468]	@ (8001500 <MX_GPIO_Init+0x2b0>)
 800132a:	f001 f8f5 	bl	8002518 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	486d      	ldr	r0, [pc, #436]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 8001342:	f000 ff65 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001346:	2308      	movs	r3, #8
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4866      	ldr	r0, [pc, #408]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 800135e:	f000 ff57 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001362:	2332      	movs	r3, #50	@ 0x32
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001366:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4860      	ldr	r0, [pc, #384]	@ (80014f8 <MX_GPIO_Init+0x2a8>)
 8001378:	f000 ff4a 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	485a      	ldr	r0, [pc, #360]	@ (80014fc <MX_GPIO_Init+0x2ac>)
 8001394:	f000 ff3c 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001398:	2308      	movs	r3, #8
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a8:	2305      	movs	r3, #5
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4852      	ldr	r0, [pc, #328]	@ (80014fc <MX_GPIO_Init+0x2ac>)
 80013b4:	f000 ff2c 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	484d      	ldr	r0, [pc, #308]	@ (8001504 <MX_GPIO_Init+0x2b4>)
 80013ce:	f000 ff1f 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013d2:	2310      	movs	r3, #16
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e2:	2306      	movs	r3, #6
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4845      	ldr	r0, [pc, #276]	@ (8001504 <MX_GPIO_Init+0x2b4>)
 80013ee:	f000 ff0f 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013f2:	23e0      	movs	r3, #224	@ 0xe0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	483d      	ldr	r0, [pc, #244]	@ (8001504 <MX_GPIO_Init+0x2b4>)
 800140e:	f000 feff 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001412:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001424:	2305      	movs	r3, #5
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4836      	ldr	r0, [pc, #216]	@ (8001508 <MX_GPIO_Init+0x2b8>)
 8001430:	f000 feee 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001434:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001438:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	482c      	ldr	r0, [pc, #176]	@ (8001500 <MX_GPIO_Init+0x2b0>)
 800144e:	f000 fedf 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001452:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001464:	2306      	movs	r3, #6
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4823      	ldr	r0, [pc, #140]	@ (80014fc <MX_GPIO_Init+0x2ac>)
 8001470:	f000 fece 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	481e      	ldr	r0, [pc, #120]	@ (8001504 <MX_GPIO_Init+0x2b4>)
 800148a:	f000 fec1 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800148e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a0:	230a      	movs	r3, #10
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4816      	ldr	r0, [pc, #88]	@ (8001504 <MX_GPIO_Init+0x2b4>)
 80014ac:	f000 feb0 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014b0:	2320      	movs	r3, #32
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	480f      	ldr	r0, [pc, #60]	@ (8001500 <MX_GPIO_Init+0x2b0>)
 80014c4:	f000 fea4 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014c8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014da:	2304      	movs	r3, #4
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <MX_GPIO_Init+0x2b8>)
 80014e6:	f000 fe93 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	@ 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <Error_Handler+0x8>

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <HAL_MspInit+0x4c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001556:	2007      	movs	r0, #7
 8001558:	f000 fe26 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_ADC_MspInit+0x7c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d127      	bne.n	80015da <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_ADC_MspInit+0x80>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 80015c2:	2302      	movs	r3, #2
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_ADC_MspInit+0x84>)
 80015d6:	f000 fe1b 	bl	8002210 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40012000 	.word	0x40012000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <UsageFault_Handler+0x4>

08001618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001646:	f000 f8c7 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f002 fc24 	bl	8003ecc <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20020000 	.word	0x20020000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	20000240 	.word	0x20000240
 80016b8:	20000440 	.word	0x20000440

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e4:	f7ff ffea 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	@ (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	@ (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	@ (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170e:	f002 fbe3 	bl	8003ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7ff fc55 	bl	8000fc0 <main>
  bx  lr    
 8001716:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001724:	08006f90 	.word	0x08006f90
  ldr r2, =_sbss
 8001728:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800172c:	20000440 	.word	0x20000440

08001730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <HAL_Init+0x40>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_Init+0x40>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_Init+0x40>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 fd23 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fed6 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fd2d 	bl	80021f6 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b4:	f000 fd03 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000244 	.word	0x20000244

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000244 	.word	0x20000244

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e033      	b.n	80018de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe72 	bl	8001568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d118      	bne.n	80018d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018a6:	f023 0302 	bic.w	r3, r3, #2
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 faca 	bl	8001e4c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f023 0303 	bic.w	r3, r3, #3
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ce:	e001      	b.n	80018d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Start+0x1a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e097      	b.n	8001a32 <HAL_ADC_Start+0x14a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d018      	beq.n	800194a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001928:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HAL_ADC_Start+0x158>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a45      	ldr	r2, [pc, #276]	@ (8001a44 <HAL_ADC_Start+0x15c>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9a      	lsrs	r2, r3, #18
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800193c:	e002      	b.n	8001944 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b01      	subs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d15f      	bne.n	8001a18 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001982:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	f023 0206 	bic.w	r2, r3, #6
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80019a4:	e002      	b.n	80019ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_ADC_Start+0x160>)
 80019b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019c0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d129      	bne.n	8001a30 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e020      	b.n	8001a30 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_ADC_Start+0x164>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d11b      	bne.n	8001a30 <HAL_ADC_Start+0x148>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d114      	bne.n	8001a30 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	e00b      	b.n	8001a30 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000000 	.word	0x20000000
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	40012300 	.word	0x40012300
 8001a4c:	40012000 	.word	0x40012000

08001a50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Stop+0x16>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e021      	b.n	8001aaa <HAL_ADC_Stop+0x5a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d113      	bne.n	8001afc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ae2:	d10b      	bne.n	8001afc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e063      	b.n	8001bc4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fe80 	bl	8001800 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b02:	e021      	b.n	8001b48 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b0a:	d01d      	beq.n	8001b48 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_PollForConversion+0x6c>
 8001b12:	f7ff fe75 	bl	8001800 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d212      	bcs.n	8001b48 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d00b      	beq.n	8001b48 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e03d      	b.n	8001bc4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d1d6      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0212 	mvn.w	r2, #18
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d123      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11f      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d111      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1c>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e113      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x244>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	d925      	bls.n	8001c60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	3b1e      	subs	r3, #30
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43da      	mvns	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	400a      	ands	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68d9      	ldr	r1, [r3, #12]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4403      	add	r3, r0
 8001c52:	3b1e      	subs	r3, #30
 8001c54:	409a      	lsls	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	e022      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6919      	ldr	r1, [r3, #16]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	2207      	movs	r2, #7
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	400a      	ands	r2, r1
 8001c82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4403      	add	r3, r0
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d824      	bhi.n	8001cf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b05      	subs	r3, #5
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b05      	subs	r3, #5
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf6:	e04c      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d824      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b23      	subs	r3, #35	@ 0x23
 8001d12:	221f      	movs	r2, #31
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	400a      	ands	r2, r1
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b23      	subs	r3, #35	@ 0x23
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d48:	e023      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b41      	subs	r3, #65	@ 0x41
 8001d5c:	221f      	movs	r2, #31
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	400a      	ands	r2, r1
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b41      	subs	r3, #65	@ 0x41
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d92:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_ADC_ConfigChannel+0x250>)
 8001d94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a28      	ldr	r2, [pc, #160]	@ (8001e3c <HAL_ADC_ConfigChannel+0x254>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1d8>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e3c <HAL_ADC_ConfigChannel+0x254>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12b      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x23a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <HAL_ADC_ConfigChannel+0x258>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <HAL_ADC_ConfigChannel+0x1f4>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b11      	cmp	r3, #17
 8001dda:	d122      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_ADC_ConfigChannel+0x258>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d111      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_ADC_ConfigChannel+0x25c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_ADC_ConfigChannel+0x260>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	0c9a      	lsrs	r2, r3, #18
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e14:	e002      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f9      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	10000012 	.word	0x10000012
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e54:	4b79      	ldr	r3, [pc, #484]	@ (800203c <ADC_Init+0x1f0>)
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	021a      	lsls	r2, r3, #8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <ADC_Init+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ef2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e00f      	b.n	8001f4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0202 	bic.w	r2, r2, #2
 8001f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7e1b      	ldrb	r3, [r3, #24]
 8001f64:	005a      	lsls	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	035a      	lsls	r2, r3, #13
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	e007      	b.n	8001fc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	051a      	lsls	r2, r3, #20
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002002:	025a      	lsls	r2, r3, #9
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800201a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	029a      	lsls	r2, r3, #10
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40012300 	.word	0x40012300
 8002040:	0f000001 	.word	0x0f000001

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	@ (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	@ 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff47 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff5c 	bl	800208c <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffb0 	bl	8002164 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e159      	b.n	80024e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8148 	bne.w	80024da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	2b02      	cmp	r3, #2
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a2 	beq.w	80024da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b57      	ldr	r3, [pc, #348]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a56      	ldr	r2, [pc, #344]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <HAL_GPIO_Init+0x2e8>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b2:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <HAL_GPIO_Init+0x2ec>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a49      	ldr	r2, [pc, #292]	@ (8002500 <HAL_GPIO_Init+0x2f0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x202>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a48      	ldr	r2, [pc, #288]	@ (8002504 <HAL_GPIO_Init+0x2f4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x1fe>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a47      	ldr	r2, [pc, #284]	@ (8002508 <HAL_GPIO_Init+0x2f8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x1fa>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a46      	ldr	r2, [pc, #280]	@ (800250c <HAL_GPIO_Init+0x2fc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x1f6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a45      	ldr	r2, [pc, #276]	@ (8002510 <HAL_GPIO_Init+0x300>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x1f2>
 80023fe:	2304      	movs	r3, #4
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x204>
 8002402:	2307      	movs	r3, #7
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x204>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x204>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x204>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x204>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	@ (80024fc <HAL_GPIO_Init+0x2ec>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <HAL_GPIO_Init+0x304>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a2f      	ldr	r2, [pc, #188]	@ (8002514 <HAL_GPIO_Init+0x304>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_GPIO_Init+0x304>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a24      	ldr	r2, [pc, #144]	@ (8002514 <HAL_GPIO_Init+0x304>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <HAL_GPIO_Init+0x304>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002514 <HAL_GPIO_Init+0x304>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <HAL_GPIO_Init+0x304>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <HAL_GPIO_Init+0x304>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f aea2 	bls.w	800222c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f8fc 	bl	8001800 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f8f8 	bl	8001800 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff f8e8 	bl	8001800 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f8e4 	bl	8001800 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f89d 	bl	8001800 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f899 	bl	8001800 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff f87c 	bl	8001800 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff f878 	bl	8001800 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f85c 	bl	8001800 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff f858 	bl	8001800 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff f845 	bl	8001800 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff f841 	bl	8001800 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f801 	bl	8001800 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fffd 	bl	8001800 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe ffc2 	bl	8001800 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe ffbe 	bl	8001800 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe ffac 	bl	8001800 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe ffa8 	bl	8001800 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe ff7c 	bl	8001800 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe ff78 	bl	8001800 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe ff51 	bl	8001800 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe ff4d 	bl	8001800 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe ff3a 	bl	8001800 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe ff36 	bl	8001800 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fe68 	bl	8001800 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fe64 	bl	8001800 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fdc8 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08006b9c 	.word	0x08006b9c
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b094      	sub	sp, #80	@ 0x50
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80e1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0db      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c40:	e0db      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b73      	ldr	r3, [pc, #460]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c46:	e0d8      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4621      	mov	r1, r4
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	6139      	str	r1, [r7, #16]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	eb49 0303 	adc.w	r3, r9, r3
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	024b      	lsls	r3, r1, #9
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d04:	4621      	mov	r1, r4
 8002d06:	024a      	lsls	r2, r1, #9
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d18:	f7fd ff9e 	bl	8000c58 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	e058      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4611      	mov	r1, r2
 8002d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0159      	lsls	r1, r3, #5
 8002d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d52:	0150      	lsls	r0, r2, #5
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5e:	4649      	mov	r1, r9
 8002d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d78:	ebb2 040a 	subs.w	r4, r2, sl
 8002d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	f7fd ff44 	bl	8000c58 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3750      	adds	r7, #80	@ 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <findslot>:
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <findslot+0x2c>)
 8002e16:	b510      	push	{r4, lr}
 8002e18:	4604      	mov	r4, r0
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	b118      	cbz	r0, 8002e26 <findslot+0x12>
 8002e1e:	6a03      	ldr	r3, [r0, #32]
 8002e20:	b90b      	cbnz	r3, 8002e26 <findslot+0x12>
 8002e22:	f000 ff75 	bl	8003d10 <__sinit>
 8002e26:	2c13      	cmp	r4, #19
 8002e28:	d807      	bhi.n	8002e3a <findslot+0x26>
 8002e2a:	4806      	ldr	r0, [pc, #24]	@ (8002e44 <findslot+0x30>)
 8002e2c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002e30:	3201      	adds	r2, #1
 8002e32:	d002      	beq.n	8002e3a <findslot+0x26>
 8002e34:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e7fc      	b.n	8002e38 <findslot+0x24>
 8002e3e:	bf00      	nop
 8002e40:	20000020 	.word	0x20000020
 8002e44:	20000254 	.word	0x20000254

08002e48 <error>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	f001 f83e 	bl	8003ecc <__errno>
 8002e50:	2613      	movs	r6, #19
 8002e52:	4605      	mov	r5, r0
 8002e54:	2700      	movs	r7, #0
 8002e56:	4630      	mov	r0, r6
 8002e58:	4639      	mov	r1, r7
 8002e5a:	beab      	bkpt	0x00ab
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	602e      	str	r6, [r5, #0]
 8002e60:	4620      	mov	r0, r4
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e64 <checkerror>:
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d101      	bne.n	8002e6c <checkerror+0x8>
 8002e68:	f7ff bfee 	b.w	8002e48 <error>
 8002e6c:	4770      	bx	lr

08002e6e <_swiread>:
 8002e6e:	b530      	push	{r4, r5, lr}
 8002e70:	b085      	sub	sp, #20
 8002e72:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002e76:	9203      	str	r2, [sp, #12]
 8002e78:	2406      	movs	r4, #6
 8002e7a:	ad01      	add	r5, sp, #4
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	beab      	bkpt	0x00ab
 8002e82:	4604      	mov	r4, r0
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff ffed 	bl	8002e64 <checkerror>
 8002e8a:	b005      	add	sp, #20
 8002e8c:	bd30      	pop	{r4, r5, pc}

08002e8e <_read>:
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	460e      	mov	r6, r1
 8002e92:	4614      	mov	r4, r2
 8002e94:	f7ff ffbe 	bl	8002e14 <findslot>
 8002e98:	4605      	mov	r5, r0
 8002e9a:	b930      	cbnz	r0, 8002eaa <_read+0x1c>
 8002e9c:	f001 f816 	bl	8003ecc <__errno>
 8002ea0:	2309      	movs	r3, #9
 8002ea2:	6003      	str	r3, [r0, #0]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	4622      	mov	r2, r4
 8002eae:	4631      	mov	r1, r6
 8002eb0:	f7ff ffdd 	bl	8002e6e <_swiread>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d0f5      	beq.n	8002ea4 <_read+0x16>
 8002eb8:	686b      	ldr	r3, [r5, #4]
 8002eba:	1a20      	subs	r0, r4, r0
 8002ebc:	4403      	add	r3, r0
 8002ebe:	606b      	str	r3, [r5, #4]
 8002ec0:	e7f2      	b.n	8002ea8 <_read+0x1a>

08002ec2 <_swilseek>:
 8002ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	4616      	mov	r6, r2
 8002ec8:	f7ff ffa4 	bl	8002e14 <findslot>
 8002ecc:	4605      	mov	r5, r0
 8002ece:	b940      	cbnz	r0, 8002ee2 <_swilseek+0x20>
 8002ed0:	f000 fffc 	bl	8003ecc <__errno>
 8002ed4:	2309      	movs	r3, #9
 8002ed6:	6003      	str	r3, [r0, #0]
 8002ed8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002edc:	4620      	mov	r0, r4
 8002ede:	b003      	add	sp, #12
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	2e02      	cmp	r6, #2
 8002ee4:	d903      	bls.n	8002eee <_swilseek+0x2c>
 8002ee6:	f000 fff1 	bl	8003ecc <__errno>
 8002eea:	2316      	movs	r3, #22
 8002eec:	e7f3      	b.n	8002ed6 <_swilseek+0x14>
 8002eee:	2e01      	cmp	r6, #1
 8002ef0:	d112      	bne.n	8002f18 <_swilseek+0x56>
 8002ef2:	6843      	ldr	r3, [r0, #4]
 8002ef4:	18e4      	adds	r4, r4, r3
 8002ef6:	d4f6      	bmi.n	8002ee6 <_swilseek+0x24>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	260a      	movs	r6, #10
 8002efc:	e9cd 3400 	strd	r3, r4, [sp]
 8002f00:	466f      	mov	r7, sp
 8002f02:	4630      	mov	r0, r6
 8002f04:	4639      	mov	r1, r7
 8002f06:	beab      	bkpt	0x00ab
 8002f08:	4606      	mov	r6, r0
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f7ff ffaa 	bl	8002e64 <checkerror>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	dbe1      	blt.n	8002ed8 <_swilseek+0x16>
 8002f14:	606c      	str	r4, [r5, #4]
 8002f16:	e7e1      	b.n	8002edc <_swilseek+0x1a>
 8002f18:	2e02      	cmp	r6, #2
 8002f1a:	6803      	ldr	r3, [r0, #0]
 8002f1c:	d1ec      	bne.n	8002ef8 <_swilseek+0x36>
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	260c      	movs	r6, #12
 8002f22:	466f      	mov	r7, sp
 8002f24:	4630      	mov	r0, r6
 8002f26:	4639      	mov	r1, r7
 8002f28:	beab      	bkpt	0x00ab
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f7ff ff99 	bl	8002e64 <checkerror>
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	d0d0      	beq.n	8002ed8 <_swilseek+0x16>
 8002f36:	4404      	add	r4, r0
 8002f38:	e7de      	b.n	8002ef8 <_swilseek+0x36>

08002f3a <_lseek>:
 8002f3a:	f7ff bfc2 	b.w	8002ec2 <_swilseek>

08002f3e <_swiwrite>:
 8002f3e:	b530      	push	{r4, r5, lr}
 8002f40:	b085      	sub	sp, #20
 8002f42:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002f46:	9203      	str	r2, [sp, #12]
 8002f48:	2405      	movs	r4, #5
 8002f4a:	ad01      	add	r5, sp, #4
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	beab      	bkpt	0x00ab
 8002f52:	4604      	mov	r4, r0
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ff85 	bl	8002e64 <checkerror>
 8002f5a:	b005      	add	sp, #20
 8002f5c:	bd30      	pop	{r4, r5, pc}

08002f5e <_write>:
 8002f5e:	b570      	push	{r4, r5, r6, lr}
 8002f60:	460e      	mov	r6, r1
 8002f62:	4615      	mov	r5, r2
 8002f64:	f7ff ff56 	bl	8002e14 <findslot>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	b930      	cbnz	r0, 8002f7a <_write+0x1c>
 8002f6c:	f000 ffae 	bl	8003ecc <__errno>
 8002f70:	2309      	movs	r3, #9
 8002f72:	6003      	str	r3, [r0, #0]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	462a      	mov	r2, r5
 8002f7e:	4631      	mov	r1, r6
 8002f80:	f7ff ffdd 	bl	8002f3e <_swiwrite>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	dbf5      	blt.n	8002f74 <_write+0x16>
 8002f88:	6862      	ldr	r2, [r4, #4]
 8002f8a:	1ae8      	subs	r0, r5, r3
 8002f8c:	4402      	add	r2, r0
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	6062      	str	r2, [r4, #4]
 8002f92:	d1f1      	bne.n	8002f78 <_write+0x1a>
 8002f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff bf55 	b.w	8002e48 <error>

08002f9e <_swiclose>:
 8002f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fa0:	2402      	movs	r4, #2
 8002fa2:	9001      	str	r0, [sp, #4]
 8002fa4:	ad01      	add	r5, sp, #4
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	beab      	bkpt	0x00ab
 8002fac:	4604      	mov	r4, r0
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff ff58 	bl	8002e64 <checkerror>
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bd30      	pop	{r4, r5, pc}

08002fb8 <_close>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4605      	mov	r5, r0
 8002fbc:	f7ff ff2a 	bl	8002e14 <findslot>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	b930      	cbnz	r0, 8002fd2 <_close+0x1a>
 8002fc4:	f000 ff82 	bl	8003ecc <__errno>
 8002fc8:	2309      	movs	r3, #9
 8002fca:	6003      	str	r3, [r0, #0]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fd0:	bd38      	pop	{r3, r4, r5, pc}
 8002fd2:	3d01      	subs	r5, #1
 8002fd4:	2d01      	cmp	r5, #1
 8002fd6:	d809      	bhi.n	8002fec <_close+0x34>
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <_close+0x48>)
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d104      	bne.n	8002fec <_close+0x34>
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fe6:	6003      	str	r3, [r0, #0]
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e7f1      	b.n	8002fd0 <_close+0x18>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	f7ff ffd6 	bl	8002f9e <_swiclose>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d1ec      	bne.n	8002fd0 <_close+0x18>
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	e7e8      	b.n	8002fd0 <_close+0x18>
 8002ffe:	bf00      	nop
 8003000:	20000254 	.word	0x20000254

08003004 <_getpid>:
 8003004:	2001      	movs	r0, #1
 8003006:	4770      	bx	lr

08003008 <_swistat>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	460c      	mov	r4, r1
 800300c:	f7ff ff02 	bl	8002e14 <findslot>
 8003010:	4605      	mov	r5, r0
 8003012:	b930      	cbnz	r0, 8003022 <_swistat+0x1a>
 8003014:	f000 ff5a 	bl	8003ecc <__errno>
 8003018:	2309      	movs	r3, #9
 800301a:	6003      	str	r3, [r0, #0]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003028:	6063      	str	r3, [r4, #4]
 800302a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800302e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003030:	260c      	movs	r6, #12
 8003032:	4630      	mov	r0, r6
 8003034:	4629      	mov	r1, r5
 8003036:	beab      	bkpt	0x00ab
 8003038:	4605      	mov	r5, r0
 800303a:	4628      	mov	r0, r5
 800303c:	f7ff ff12 	bl	8002e64 <checkerror>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d0eb      	beq.n	800301c <_swistat+0x14>
 8003044:	6120      	str	r0, [r4, #16]
 8003046:	2000      	movs	r0, #0
 8003048:	e7ea      	b.n	8003020 <_swistat+0x18>

0800304a <_fstat>:
 800304a:	460b      	mov	r3, r1
 800304c:	b510      	push	{r4, lr}
 800304e:	2100      	movs	r1, #0
 8003050:	4604      	mov	r4, r0
 8003052:	2258      	movs	r2, #88	@ 0x58
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fee6 	bl	8003e26 <memset>
 800305a:	4601      	mov	r1, r0
 800305c:	4620      	mov	r0, r4
 800305e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003062:	f7ff bfd1 	b.w	8003008 <_swistat>

08003066 <_stat>:
 8003066:	b538      	push	{r3, r4, r5, lr}
 8003068:	460d      	mov	r5, r1
 800306a:	4604      	mov	r4, r0
 800306c:	2258      	movs	r2, #88	@ 0x58
 800306e:	2100      	movs	r1, #0
 8003070:	4628      	mov	r0, r5
 8003072:	f000 fed8 	bl	8003e26 <memset>
 8003076:	4620      	mov	r0, r4
 8003078:	2100      	movs	r1, #0
 800307a:	f000 f811 	bl	80030a0 <_swiopen>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	4604      	mov	r4, r0
 8003082:	d00b      	beq.n	800309c <_stat+0x36>
 8003084:	686b      	ldr	r3, [r5, #4]
 8003086:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800308a:	606b      	str	r3, [r5, #4]
 800308c:	4629      	mov	r1, r5
 800308e:	f7ff ffbb 	bl	8003008 <_swistat>
 8003092:	4605      	mov	r5, r0
 8003094:	4620      	mov	r0, r4
 8003096:	f7ff ff8f 	bl	8002fb8 <_close>
 800309a:	462c      	mov	r4, r5
 800309c:	4620      	mov	r0, r4
 800309e:	bd38      	pop	{r3, r4, r5, pc}

080030a0 <_swiopen>:
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a4:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8003150 <_swiopen+0xb0>
 80030a8:	b096      	sub	sp, #88	@ 0x58
 80030aa:	4607      	mov	r7, r0
 80030ac:	460e      	mov	r6, r1
 80030ae:	2400      	movs	r4, #0
 80030b0:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80030b4:	3301      	adds	r3, #1
 80030b6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80030ba:	d032      	beq.n	8003122 <_swiopen+0x82>
 80030bc:	3401      	adds	r4, #1
 80030be:	2c14      	cmp	r4, #20
 80030c0:	d1f6      	bne.n	80030b0 <_swiopen+0x10>
 80030c2:	f000 ff03 	bl	8003ecc <__errno>
 80030c6:	2318      	movs	r3, #24
 80030c8:	e03a      	b.n	8003140 <_swiopen+0xa0>
 80030ca:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80030ce:	f240 6301 	movw	r3, #1537	@ 0x601
 80030d2:	07b2      	lsls	r2, r6, #30
 80030d4:	bf48      	it	mi
 80030d6:	f045 0502 	orrmi.w	r5, r5, #2
 80030da:	421e      	tst	r6, r3
 80030dc:	bf18      	it	ne
 80030de:	f045 0504 	orrne.w	r5, r5, #4
 80030e2:	0733      	lsls	r3, r6, #28
 80030e4:	bf48      	it	mi
 80030e6:	f025 0504 	bicmi.w	r5, r5, #4
 80030ea:	4638      	mov	r0, r7
 80030ec:	bf48      	it	mi
 80030ee:	f045 0508 	orrmi.w	r5, r5, #8
 80030f2:	9700      	str	r7, [sp, #0]
 80030f4:	f7fd f8c4 	bl	8000280 <strlen>
 80030f8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80030fc:	2501      	movs	r5, #1
 80030fe:	4628      	mov	r0, r5
 8003100:	4651      	mov	r1, sl
 8003102:	beab      	bkpt	0x00ab
 8003104:	4605      	mov	r5, r0
 8003106:	2d00      	cmp	r5, #0
 8003108:	db06      	blt.n	8003118 <_swiopen+0x78>
 800310a:	44c8      	add	r8, r9
 800310c:	2300      	movs	r3, #0
 800310e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8003112:	f8c8 3004 	str.w	r3, [r8, #4]
 8003116:	e016      	b.n	8003146 <_swiopen+0xa6>
 8003118:	4628      	mov	r0, r5
 800311a:	f7ff fe95 	bl	8002e48 <error>
 800311e:	4604      	mov	r4, r0
 8003120:	e011      	b.n	8003146 <_swiopen+0xa6>
 8003122:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003126:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800312a:	46ea      	mov	sl, sp
 800312c:	d1cd      	bne.n	80030ca <_swiopen+0x2a>
 800312e:	4651      	mov	r1, sl
 8003130:	4638      	mov	r0, r7
 8003132:	f7ff ff98 	bl	8003066 <_stat>
 8003136:	3001      	adds	r0, #1
 8003138:	d0c7      	beq.n	80030ca <_swiopen+0x2a>
 800313a:	f000 fec7 	bl	8003ecc <__errno>
 800313e:	2311      	movs	r3, #17
 8003140:	6003      	str	r3, [r0, #0]
 8003142:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003146:	4620      	mov	r0, r4
 8003148:	b016      	add	sp, #88	@ 0x58
 800314a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314e:	bf00      	nop
 8003150:	20000254 	.word	0x20000254

08003154 <_get_semihosting_exts>:
 8003154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003158:	4606      	mov	r6, r0
 800315a:	460f      	mov	r7, r1
 800315c:	4829      	ldr	r0, [pc, #164]	@ (8003204 <_get_semihosting_exts+0xb0>)
 800315e:	2100      	movs	r1, #0
 8003160:	4615      	mov	r5, r2
 8003162:	f7ff ff9d 	bl	80030a0 <_swiopen>
 8003166:	462a      	mov	r2, r5
 8003168:	4604      	mov	r4, r0
 800316a:	2100      	movs	r1, #0
 800316c:	4630      	mov	r0, r6
 800316e:	f000 fe5a 	bl	8003e26 <memset>
 8003172:	1c63      	adds	r3, r4, #1
 8003174:	d014      	beq.n	80031a0 <_get_semihosting_exts+0x4c>
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff fe4c 	bl	8002e14 <findslot>
 800317c:	f04f 080c 	mov.w	r8, #12
 8003180:	4681      	mov	r9, r0
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	beab      	bkpt	0x00ab
 8003188:	4680      	mov	r8, r0
 800318a:	4640      	mov	r0, r8
 800318c:	f7ff fe6a 	bl	8002e64 <checkerror>
 8003190:	2803      	cmp	r0, #3
 8003192:	dd02      	ble.n	800319a <_get_semihosting_exts+0x46>
 8003194:	1ec3      	subs	r3, r0, #3
 8003196:	42ab      	cmp	r3, r5
 8003198:	dc07      	bgt.n	80031aa <_get_semihosting_exts+0x56>
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ff0c 	bl	8002fb8 <_close>
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031a4:	b003      	add	sp, #12
 80031a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031aa:	2204      	movs	r2, #4
 80031ac:	eb0d 0102 	add.w	r1, sp, r2
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fe6c 	bl	8002e8e <_read>
 80031b6:	2803      	cmp	r0, #3
 80031b8:	ddef      	ble.n	800319a <_get_semihosting_exts+0x46>
 80031ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031be:	2b53      	cmp	r3, #83	@ 0x53
 80031c0:	d1eb      	bne.n	800319a <_get_semihosting_exts+0x46>
 80031c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80031c6:	2b48      	cmp	r3, #72	@ 0x48
 80031c8:	d1e7      	bne.n	800319a <_get_semihosting_exts+0x46>
 80031ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80031ce:	2b46      	cmp	r3, #70	@ 0x46
 80031d0:	d1e3      	bne.n	800319a <_get_semihosting_exts+0x46>
 80031d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031d6:	2b42      	cmp	r3, #66	@ 0x42
 80031d8:	d1df      	bne.n	800319a <_get_semihosting_exts+0x46>
 80031da:	2201      	movs	r2, #1
 80031dc:	4639      	mov	r1, r7
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff fe6f 	bl	8002ec2 <_swilseek>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	dbd8      	blt.n	800319a <_get_semihosting_exts+0x46>
 80031e8:	462a      	mov	r2, r5
 80031ea:	4631      	mov	r1, r6
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7ff fe4e 	bl	8002e8e <_read>
 80031f2:	4605      	mov	r5, r0
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7ff fedf 	bl	8002fb8 <_close>
 80031fa:	4628      	mov	r0, r5
 80031fc:	f7ff fe32 	bl	8002e64 <checkerror>
 8003200:	e7d0      	b.n	80031a4 <_get_semihosting_exts+0x50>
 8003202:	bf00      	nop
 8003204:	08006bac 	.word	0x08006bac

08003208 <initialise_semihosting_exts>:
 8003208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800320a:	4d0a      	ldr	r5, [pc, #40]	@ (8003234 <initialise_semihosting_exts+0x2c>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	@ (8003238 <initialise_semihosting_exts+0x30>)
 800320e:	2100      	movs	r1, #0
 8003210:	2201      	movs	r2, #1
 8003212:	a801      	add	r0, sp, #4
 8003214:	6029      	str	r1, [r5, #0]
 8003216:	6022      	str	r2, [r4, #0]
 8003218:	f7ff ff9c 	bl	8003154 <_get_semihosting_exts>
 800321c:	2800      	cmp	r0, #0
 800321e:	dd07      	ble.n	8003230 <initialise_semihosting_exts+0x28>
 8003220:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003224:	f003 0201 	and.w	r2, r3, #1
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	602a      	str	r2, [r5, #0]
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	b003      	add	sp, #12
 8003232:	bd30      	pop	{r4, r5, pc}
 8003234:	20000010 	.word	0x20000010
 8003238:	2000000c 	.word	0x2000000c

0800323c <_has_ext_stdout_stderr>:
 800323c:	b510      	push	{r4, lr}
 800323e:	4c04      	ldr	r4, [pc, #16]	@ (8003250 <_has_ext_stdout_stderr+0x14>)
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da01      	bge.n	800324a <_has_ext_stdout_stderr+0xe>
 8003246:	f7ff ffdf 	bl	8003208 <initialise_semihosting_exts>
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	bd10      	pop	{r4, pc}
 800324e:	bf00      	nop
 8003250:	2000000c 	.word	0x2000000c

08003254 <initialise_monitor_handles>:
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	b085      	sub	sp, #20
 800325a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800330c <initialise_monitor_handles+0xb8>
 800325e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003262:	2303      	movs	r3, #3
 8003264:	2400      	movs	r4, #0
 8003266:	9303      	str	r3, [sp, #12]
 8003268:	af01      	add	r7, sp, #4
 800326a:	9402      	str	r4, [sp, #8]
 800326c:	2501      	movs	r5, #1
 800326e:	4628      	mov	r0, r5
 8003270:	4639      	mov	r1, r7
 8003272:	beab      	bkpt	0x00ab
 8003274:	4605      	mov	r5, r0
 8003276:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003310 <initialise_monitor_handles+0xbc>
 800327a:	4623      	mov	r3, r4
 800327c:	4c20      	ldr	r4, [pc, #128]	@ (8003300 <initialise_monitor_handles+0xac>)
 800327e:	f8c8 5000 	str.w	r5, [r8]
 8003282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003286:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800328a:	3301      	adds	r3, #1
 800328c:	2b14      	cmp	r3, #20
 800328e:	d1fa      	bne.n	8003286 <initialise_monitor_handles+0x32>
 8003290:	f7ff ffd4 	bl	800323c <_has_ext_stdout_stderr>
 8003294:	4d1b      	ldr	r5, [pc, #108]	@ (8003304 <initialise_monitor_handles+0xb0>)
 8003296:	b1d0      	cbz	r0, 80032ce <initialise_monitor_handles+0x7a>
 8003298:	f04f 0a03 	mov.w	sl, #3
 800329c:	2304      	movs	r3, #4
 800329e:	f8cd 9004 	str.w	r9, [sp, #4]
 80032a2:	2601      	movs	r6, #1
 80032a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	beab      	bkpt	0x00ab
 80032b0:	4683      	mov	fp, r0
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <initialise_monitor_handles+0xb4>)
 80032b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80032b8:	f8c3 b000 	str.w	fp, [r3]
 80032bc:	2308      	movs	r3, #8
 80032be:	f8cd a00c 	str.w	sl, [sp, #12]
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	4630      	mov	r0, r6
 80032c6:	4639      	mov	r1, r7
 80032c8:	beab      	bkpt	0x00ab
 80032ca:	4606      	mov	r6, r0
 80032cc:	602e      	str	r6, [r5, #0]
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	bf02      	ittt	eq
 80032d4:	4b0c      	ldreq	r3, [pc, #48]	@ (8003308 <initialise_monitor_handles+0xb4>)
 80032d6:	681b      	ldreq	r3, [r3, #0]
 80032d8:	602b      	streq	r3, [r5, #0]
 80032da:	2600      	movs	r6, #0
 80032dc:	f8d8 3000 	ldr.w	r3, [r8]
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	6066      	str	r6, [r4, #4]
 80032e4:	f7ff ffaa 	bl	800323c <_has_ext_stdout_stderr>
 80032e8:	b130      	cbz	r0, 80032f8 <initialise_monitor_handles+0xa4>
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <initialise_monitor_handles+0xb4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80032f8:	b005      	add	sp, #20
 80032fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fe:	bf00      	nop
 8003300:	20000254 	.word	0x20000254
 8003304:	20000248 	.word	0x20000248
 8003308:	2000024c 	.word	0x2000024c
 800330c:	08006bc2 	.word	0x08006bc2
 8003310:	20000250 	.word	0x20000250

08003314 <_isatty>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	f7ff fd7d 	bl	8002e14 <findslot>
 800331a:	2409      	movs	r4, #9
 800331c:	4605      	mov	r5, r0
 800331e:	b920      	cbnz	r0, 800332a <_isatty+0x16>
 8003320:	f000 fdd4 	bl	8003ecc <__errno>
 8003324:	6004      	str	r4, [r0, #0]
 8003326:	2000      	movs	r0, #0
 8003328:	bd70      	pop	{r4, r5, r6, pc}
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	beab      	bkpt	0x00ab
 8003330:	4604      	mov	r4, r0
 8003332:	2c01      	cmp	r4, #1
 8003334:	4620      	mov	r0, r4
 8003336:	d0f7      	beq.n	8003328 <_isatty+0x14>
 8003338:	f000 fdc8 	bl	8003ecc <__errno>
 800333c:	2513      	movs	r5, #19
 800333e:	4604      	mov	r4, r0
 8003340:	2600      	movs	r6, #0
 8003342:	4628      	mov	r0, r5
 8003344:	4631      	mov	r1, r6
 8003346:	beab      	bkpt	0x00ab
 8003348:	4605      	mov	r5, r0
 800334a:	6025      	str	r5, [r4, #0]
 800334c:	e7eb      	b.n	8003326 <_isatty+0x12>

0800334e <__cvt>:
 800334e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003352:	ec57 6b10 	vmov	r6, r7, d0
 8003356:	2f00      	cmp	r7, #0
 8003358:	460c      	mov	r4, r1
 800335a:	4619      	mov	r1, r3
 800335c:	463b      	mov	r3, r7
 800335e:	bfbb      	ittet	lt
 8003360:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003364:	461f      	movlt	r7, r3
 8003366:	2300      	movge	r3, #0
 8003368:	232d      	movlt	r3, #45	@ 0x2d
 800336a:	700b      	strb	r3, [r1, #0]
 800336c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800336e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003372:	4691      	mov	r9, r2
 8003374:	f023 0820 	bic.w	r8, r3, #32
 8003378:	bfbc      	itt	lt
 800337a:	4632      	movlt	r2, r6
 800337c:	4616      	movlt	r6, r2
 800337e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003382:	d005      	beq.n	8003390 <__cvt+0x42>
 8003384:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003388:	d100      	bne.n	800338c <__cvt+0x3e>
 800338a:	3401      	adds	r4, #1
 800338c:	2102      	movs	r1, #2
 800338e:	e000      	b.n	8003392 <__cvt+0x44>
 8003390:	2103      	movs	r1, #3
 8003392:	ab03      	add	r3, sp, #12
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	ab02      	add	r3, sp, #8
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	ec47 6b10 	vmov	d0, r6, r7
 800339e:	4653      	mov	r3, sl
 80033a0:	4622      	mov	r2, r4
 80033a2:	f000 fe49 	bl	8004038 <_dtoa_r>
 80033a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033aa:	4605      	mov	r5, r0
 80033ac:	d119      	bne.n	80033e2 <__cvt+0x94>
 80033ae:	f019 0f01 	tst.w	r9, #1
 80033b2:	d00e      	beq.n	80033d2 <__cvt+0x84>
 80033b4:	eb00 0904 	add.w	r9, r0, r4
 80033b8:	2200      	movs	r2, #0
 80033ba:	2300      	movs	r3, #0
 80033bc:	4630      	mov	r0, r6
 80033be:	4639      	mov	r1, r7
 80033c0:	f7fd fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80033c4:	b108      	cbz	r0, 80033ca <__cvt+0x7c>
 80033c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80033ca:	2230      	movs	r2, #48	@ 0x30
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	454b      	cmp	r3, r9
 80033d0:	d31e      	bcc.n	8003410 <__cvt+0xc2>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033d6:	1b5b      	subs	r3, r3, r5
 80033d8:	4628      	mov	r0, r5
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	b004      	add	sp, #16
 80033de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033e6:	eb00 0904 	add.w	r9, r0, r4
 80033ea:	d1e5      	bne.n	80033b8 <__cvt+0x6a>
 80033ec:	7803      	ldrb	r3, [r0, #0]
 80033ee:	2b30      	cmp	r3, #48	@ 0x30
 80033f0:	d10a      	bne.n	8003408 <__cvt+0xba>
 80033f2:	2200      	movs	r2, #0
 80033f4:	2300      	movs	r3, #0
 80033f6:	4630      	mov	r0, r6
 80033f8:	4639      	mov	r1, r7
 80033fa:	f7fd fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80033fe:	b918      	cbnz	r0, 8003408 <__cvt+0xba>
 8003400:	f1c4 0401 	rsb	r4, r4, #1
 8003404:	f8ca 4000 	str.w	r4, [sl]
 8003408:	f8da 3000 	ldr.w	r3, [sl]
 800340c:	4499      	add	r9, r3
 800340e:	e7d3      	b.n	80033b8 <__cvt+0x6a>
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	9103      	str	r1, [sp, #12]
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e7d9      	b.n	80033cc <__cvt+0x7e>

08003418 <__exponent>:
 8003418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800341a:	2900      	cmp	r1, #0
 800341c:	bfba      	itte	lt
 800341e:	4249      	neglt	r1, r1
 8003420:	232d      	movlt	r3, #45	@ 0x2d
 8003422:	232b      	movge	r3, #43	@ 0x2b
 8003424:	2909      	cmp	r1, #9
 8003426:	7002      	strb	r2, [r0, #0]
 8003428:	7043      	strb	r3, [r0, #1]
 800342a:	dd29      	ble.n	8003480 <__exponent+0x68>
 800342c:	f10d 0307 	add.w	r3, sp, #7
 8003430:	461d      	mov	r5, r3
 8003432:	270a      	movs	r7, #10
 8003434:	461a      	mov	r2, r3
 8003436:	fbb1 f6f7 	udiv	r6, r1, r7
 800343a:	fb07 1416 	mls	r4, r7, r6, r1
 800343e:	3430      	adds	r4, #48	@ 0x30
 8003440:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003444:	460c      	mov	r4, r1
 8003446:	2c63      	cmp	r4, #99	@ 0x63
 8003448:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800344c:	4631      	mov	r1, r6
 800344e:	dcf1      	bgt.n	8003434 <__exponent+0x1c>
 8003450:	3130      	adds	r1, #48	@ 0x30
 8003452:	1e94      	subs	r4, r2, #2
 8003454:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003458:	1c41      	adds	r1, r0, #1
 800345a:	4623      	mov	r3, r4
 800345c:	42ab      	cmp	r3, r5
 800345e:	d30a      	bcc.n	8003476 <__exponent+0x5e>
 8003460:	f10d 0309 	add.w	r3, sp, #9
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	42ac      	cmp	r4, r5
 8003468:	bf88      	it	hi
 800346a:	2300      	movhi	r3, #0
 800346c:	3302      	adds	r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	1a18      	subs	r0, r3, r0
 8003472:	b003      	add	sp, #12
 8003474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003476:	f813 6b01 	ldrb.w	r6, [r3], #1
 800347a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800347e:	e7ed      	b.n	800345c <__exponent+0x44>
 8003480:	2330      	movs	r3, #48	@ 0x30
 8003482:	3130      	adds	r1, #48	@ 0x30
 8003484:	7083      	strb	r3, [r0, #2]
 8003486:	70c1      	strb	r1, [r0, #3]
 8003488:	1d03      	adds	r3, r0, #4
 800348a:	e7f1      	b.n	8003470 <__exponent+0x58>

0800348c <_printf_float>:
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	b08d      	sub	sp, #52	@ 0x34
 8003492:	460c      	mov	r4, r1
 8003494:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003498:	4616      	mov	r6, r2
 800349a:	461f      	mov	r7, r3
 800349c:	4605      	mov	r5, r0
 800349e:	f000 fccb 	bl	8003e38 <_localeconv_r>
 80034a2:	6803      	ldr	r3, [r0, #0]
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc feea 	bl	8000280 <strlen>
 80034ac:	2300      	movs	r3, #0
 80034ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80034b0:	f8d8 3000 	ldr.w	r3, [r8]
 80034b4:	9005      	str	r0, [sp, #20]
 80034b6:	3307      	adds	r3, #7
 80034b8:	f023 0307 	bic.w	r3, r3, #7
 80034bc:	f103 0208 	add.w	r2, r3, #8
 80034c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034c4:	f8d4 b000 	ldr.w	fp, [r4]
 80034c8:	f8c8 2000 	str.w	r2, [r8]
 80034cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80034d4:	9307      	str	r3, [sp, #28]
 80034d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80034da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80034de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003754 <_printf_float+0x2c8>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e8:	f7fd fb28 	bl	8000b3c <__aeabi_dcmpun>
 80034ec:	bb70      	cbnz	r0, 800354c <_printf_float+0xc0>
 80034ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034f2:	4b98      	ldr	r3, [pc, #608]	@ (8003754 <_printf_float+0x2c8>)
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034f8:	f7fd fb02 	bl	8000b00 <__aeabi_dcmple>
 80034fc:	bb30      	cbnz	r0, 800354c <_printf_float+0xc0>
 80034fe:	2200      	movs	r2, #0
 8003500:	2300      	movs	r3, #0
 8003502:	4640      	mov	r0, r8
 8003504:	4649      	mov	r1, r9
 8003506:	f7fd faf1 	bl	8000aec <__aeabi_dcmplt>
 800350a:	b110      	cbz	r0, 8003512 <_printf_float+0x86>
 800350c:	232d      	movs	r3, #45	@ 0x2d
 800350e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003512:	4a91      	ldr	r2, [pc, #580]	@ (8003758 <_printf_float+0x2cc>)
 8003514:	4b91      	ldr	r3, [pc, #580]	@ (800375c <_printf_float+0x2d0>)
 8003516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800351a:	bf8c      	ite	hi
 800351c:	4690      	movhi	r8, r2
 800351e:	4698      	movls	r8, r3
 8003520:	2303      	movs	r3, #3
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	f02b 0304 	bic.w	r3, fp, #4
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	f04f 0900 	mov.w	r9, #0
 800352e:	9700      	str	r7, [sp, #0]
 8003530:	4633      	mov	r3, r6
 8003532:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003534:	4621      	mov	r1, r4
 8003536:	4628      	mov	r0, r5
 8003538:	f000 f9d2 	bl	80038e0 <_printf_common>
 800353c:	3001      	adds	r0, #1
 800353e:	f040 808d 	bne.w	800365c <_printf_float+0x1d0>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003546:	b00d      	add	sp, #52	@ 0x34
 8003548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	4640      	mov	r0, r8
 8003552:	4649      	mov	r1, r9
 8003554:	f7fd faf2 	bl	8000b3c <__aeabi_dcmpun>
 8003558:	b140      	cbz	r0, 800356c <_printf_float+0xe0>
 800355a:	464b      	mov	r3, r9
 800355c:	2b00      	cmp	r3, #0
 800355e:	bfbc      	itt	lt
 8003560:	232d      	movlt	r3, #45	@ 0x2d
 8003562:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003566:	4a7e      	ldr	r2, [pc, #504]	@ (8003760 <_printf_float+0x2d4>)
 8003568:	4b7e      	ldr	r3, [pc, #504]	@ (8003764 <_printf_float+0x2d8>)
 800356a:	e7d4      	b.n	8003516 <_printf_float+0x8a>
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003572:	9206      	str	r2, [sp, #24]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	d13b      	bne.n	80035f0 <_printf_float+0x164>
 8003578:	2306      	movs	r3, #6
 800357a:	6063      	str	r3, [r4, #4]
 800357c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003580:	2300      	movs	r3, #0
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	ab0a      	add	r3, sp, #40	@ 0x28
 8003588:	e9cd a301 	strd	sl, r3, [sp, #4]
 800358c:	ab09      	add	r3, sp, #36	@ 0x24
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6861      	ldr	r1, [r4, #4]
 8003592:	ec49 8b10 	vmov	d0, r8, r9
 8003596:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff fed7 	bl	800334e <__cvt>
 80035a0:	9b06      	ldr	r3, [sp, #24]
 80035a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80035a4:	2b47      	cmp	r3, #71	@ 0x47
 80035a6:	4680      	mov	r8, r0
 80035a8:	d129      	bne.n	80035fe <_printf_float+0x172>
 80035aa:	1cc8      	adds	r0, r1, #3
 80035ac:	db02      	blt.n	80035b4 <_printf_float+0x128>
 80035ae:	6863      	ldr	r3, [r4, #4]
 80035b0:	4299      	cmp	r1, r3
 80035b2:	dd41      	ble.n	8003638 <_printf_float+0x1ac>
 80035b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80035b8:	fa5f fa8a 	uxtb.w	sl, sl
 80035bc:	3901      	subs	r1, #1
 80035be:	4652      	mov	r2, sl
 80035c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80035c6:	f7ff ff27 	bl	8003418 <__exponent>
 80035ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035cc:	1813      	adds	r3, r2, r0
 80035ce:	2a01      	cmp	r2, #1
 80035d0:	4681      	mov	r9, r0
 80035d2:	6123      	str	r3, [r4, #16]
 80035d4:	dc02      	bgt.n	80035dc <_printf_float+0x150>
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	07d2      	lsls	r2, r2, #31
 80035da:	d501      	bpl.n	80035e0 <_printf_float+0x154>
 80035dc:	3301      	adds	r3, #1
 80035de:	6123      	str	r3, [r4, #16]
 80035e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0a2      	beq.n	800352e <_printf_float+0xa2>
 80035e8:	232d      	movs	r3, #45	@ 0x2d
 80035ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ee:	e79e      	b.n	800352e <_printf_float+0xa2>
 80035f0:	9a06      	ldr	r2, [sp, #24]
 80035f2:	2a47      	cmp	r2, #71	@ 0x47
 80035f4:	d1c2      	bne.n	800357c <_printf_float+0xf0>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1c0      	bne.n	800357c <_printf_float+0xf0>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e7bd      	b.n	800357a <_printf_float+0xee>
 80035fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003602:	d9db      	bls.n	80035bc <_printf_float+0x130>
 8003604:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003608:	d118      	bne.n	800363c <_printf_float+0x1b0>
 800360a:	2900      	cmp	r1, #0
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	dd0b      	ble.n	8003628 <_printf_float+0x19c>
 8003610:	6121      	str	r1, [r4, #16]
 8003612:	b913      	cbnz	r3, 800361a <_printf_float+0x18e>
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	07d0      	lsls	r0, r2, #31
 8003618:	d502      	bpl.n	8003620 <_printf_float+0x194>
 800361a:	3301      	adds	r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	6123      	str	r3, [r4, #16]
 8003620:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003622:	f04f 0900 	mov.w	r9, #0
 8003626:	e7db      	b.n	80035e0 <_printf_float+0x154>
 8003628:	b913      	cbnz	r3, 8003630 <_printf_float+0x1a4>
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	07d2      	lsls	r2, r2, #31
 800362e:	d501      	bpl.n	8003634 <_printf_float+0x1a8>
 8003630:	3302      	adds	r3, #2
 8003632:	e7f4      	b.n	800361e <_printf_float+0x192>
 8003634:	2301      	movs	r3, #1
 8003636:	e7f2      	b.n	800361e <_printf_float+0x192>
 8003638:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800363c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800363e:	4299      	cmp	r1, r3
 8003640:	db05      	blt.n	800364e <_printf_float+0x1c2>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	6121      	str	r1, [r4, #16]
 8003646:	07d8      	lsls	r0, r3, #31
 8003648:	d5ea      	bpl.n	8003620 <_printf_float+0x194>
 800364a:	1c4b      	adds	r3, r1, #1
 800364c:	e7e7      	b.n	800361e <_printf_float+0x192>
 800364e:	2900      	cmp	r1, #0
 8003650:	bfd4      	ite	le
 8003652:	f1c1 0202 	rsble	r2, r1, #2
 8003656:	2201      	movgt	r2, #1
 8003658:	4413      	add	r3, r2
 800365a:	e7e0      	b.n	800361e <_printf_float+0x192>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	055a      	lsls	r2, r3, #21
 8003660:	d407      	bmi.n	8003672 <_printf_float+0x1e6>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	4642      	mov	r2, r8
 8003666:	4631      	mov	r1, r6
 8003668:	4628      	mov	r0, r5
 800366a:	47b8      	blx	r7
 800366c:	3001      	adds	r0, #1
 800366e:	d12b      	bne.n	80036c8 <_printf_float+0x23c>
 8003670:	e767      	b.n	8003542 <_printf_float+0xb6>
 8003672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003676:	f240 80dd 	bls.w	8003834 <_printf_float+0x3a8>
 800367a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800367e:	2200      	movs	r2, #0
 8003680:	2300      	movs	r3, #0
 8003682:	f7fd fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 8003686:	2800      	cmp	r0, #0
 8003688:	d033      	beq.n	80036f2 <_printf_float+0x266>
 800368a:	4a37      	ldr	r2, [pc, #220]	@ (8003768 <_printf_float+0x2dc>)
 800368c:	2301      	movs	r3, #1
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f af54 	beq.w	8003542 <_printf_float+0xb6>
 800369a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800369e:	4543      	cmp	r3, r8
 80036a0:	db02      	blt.n	80036a8 <_printf_float+0x21c>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07d8      	lsls	r0, r3, #31
 80036a6:	d50f      	bpl.n	80036c8 <_printf_float+0x23c>
 80036a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ac:	4631      	mov	r1, r6
 80036ae:	4628      	mov	r0, r5
 80036b0:	47b8      	blx	r7
 80036b2:	3001      	adds	r0, #1
 80036b4:	f43f af45 	beq.w	8003542 <_printf_float+0xb6>
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80036c0:	f104 0a1a 	add.w	sl, r4, #26
 80036c4:	45c8      	cmp	r8, r9
 80036c6:	dc09      	bgt.n	80036dc <_printf_float+0x250>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	079b      	lsls	r3, r3, #30
 80036cc:	f100 8103 	bmi.w	80038d6 <_printf_float+0x44a>
 80036d0:	68e0      	ldr	r0, [r4, #12]
 80036d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036d4:	4298      	cmp	r0, r3
 80036d6:	bfb8      	it	lt
 80036d8:	4618      	movlt	r0, r3
 80036da:	e734      	b.n	8003546 <_printf_float+0xba>
 80036dc:	2301      	movs	r3, #1
 80036de:	4652      	mov	r2, sl
 80036e0:	4631      	mov	r1, r6
 80036e2:	4628      	mov	r0, r5
 80036e4:	47b8      	blx	r7
 80036e6:	3001      	adds	r0, #1
 80036e8:	f43f af2b 	beq.w	8003542 <_printf_float+0xb6>
 80036ec:	f109 0901 	add.w	r9, r9, #1
 80036f0:	e7e8      	b.n	80036c4 <_printf_float+0x238>
 80036f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dc39      	bgt.n	800376c <_printf_float+0x2e0>
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <_printf_float+0x2dc>)
 80036fa:	2301      	movs	r3, #1
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f af1d 	beq.w	8003542 <_printf_float+0xb6>
 8003708:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800370c:	ea59 0303 	orrs.w	r3, r9, r3
 8003710:	d102      	bne.n	8003718 <_printf_float+0x28c>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	07d9      	lsls	r1, r3, #31
 8003716:	d5d7      	bpl.n	80036c8 <_printf_float+0x23c>
 8003718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	f43f af0d 	beq.w	8003542 <_printf_float+0xb6>
 8003728:	f04f 0a00 	mov.w	sl, #0
 800372c:	f104 0b1a 	add.w	fp, r4, #26
 8003730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003732:	425b      	negs	r3, r3
 8003734:	4553      	cmp	r3, sl
 8003736:	dc01      	bgt.n	800373c <_printf_float+0x2b0>
 8003738:	464b      	mov	r3, r9
 800373a:	e793      	b.n	8003664 <_printf_float+0x1d8>
 800373c:	2301      	movs	r3, #1
 800373e:	465a      	mov	r2, fp
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f aefb 	beq.w	8003542 <_printf_float+0xb6>
 800374c:	f10a 0a01 	add.w	sl, sl, #1
 8003750:	e7ee      	b.n	8003730 <_printf_float+0x2a4>
 8003752:	bf00      	nop
 8003754:	7fefffff 	.word	0x7fefffff
 8003758:	08006bca 	.word	0x08006bca
 800375c:	08006bc6 	.word	0x08006bc6
 8003760:	08006bd2 	.word	0x08006bd2
 8003764:	08006bce 	.word	0x08006bce
 8003768:	08006bd6 	.word	0x08006bd6
 800376c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800376e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003772:	4553      	cmp	r3, sl
 8003774:	bfa8      	it	ge
 8003776:	4653      	movge	r3, sl
 8003778:	2b00      	cmp	r3, #0
 800377a:	4699      	mov	r9, r3
 800377c:	dc36      	bgt.n	80037ec <_printf_float+0x360>
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003786:	f104 021a 	add.w	r2, r4, #26
 800378a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800378c:	9306      	str	r3, [sp, #24]
 800378e:	eba3 0309 	sub.w	r3, r3, r9
 8003792:	455b      	cmp	r3, fp
 8003794:	dc31      	bgt.n	80037fa <_printf_float+0x36e>
 8003796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003798:	459a      	cmp	sl, r3
 800379a:	dc3a      	bgt.n	8003812 <_printf_float+0x386>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	07da      	lsls	r2, r3, #31
 80037a0:	d437      	bmi.n	8003812 <_printf_float+0x386>
 80037a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a4:	ebaa 0903 	sub.w	r9, sl, r3
 80037a8:	9b06      	ldr	r3, [sp, #24]
 80037aa:	ebaa 0303 	sub.w	r3, sl, r3
 80037ae:	4599      	cmp	r9, r3
 80037b0:	bfa8      	it	ge
 80037b2:	4699      	movge	r9, r3
 80037b4:	f1b9 0f00 	cmp.w	r9, #0
 80037b8:	dc33      	bgt.n	8003822 <_printf_float+0x396>
 80037ba:	f04f 0800 	mov.w	r8, #0
 80037be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037c2:	f104 0b1a 	add.w	fp, r4, #26
 80037c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c8:	ebaa 0303 	sub.w	r3, sl, r3
 80037cc:	eba3 0309 	sub.w	r3, r3, r9
 80037d0:	4543      	cmp	r3, r8
 80037d2:	f77f af79 	ble.w	80036c8 <_printf_float+0x23c>
 80037d6:	2301      	movs	r3, #1
 80037d8:	465a      	mov	r2, fp
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f aeae 	beq.w	8003542 <_printf_float+0xb6>
 80037e6:	f108 0801 	add.w	r8, r8, #1
 80037ea:	e7ec      	b.n	80037c6 <_printf_float+0x33a>
 80037ec:	4642      	mov	r2, r8
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	d1c2      	bne.n	800377e <_printf_float+0x2f2>
 80037f8:	e6a3      	b.n	8003542 <_printf_float+0xb6>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4631      	mov	r1, r6
 80037fe:	4628      	mov	r0, r5
 8003800:	9206      	str	r2, [sp, #24]
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f ae9c 	beq.w	8003542 <_printf_float+0xb6>
 800380a:	9a06      	ldr	r2, [sp, #24]
 800380c:	f10b 0b01 	add.w	fp, fp, #1
 8003810:	e7bb      	b.n	800378a <_printf_float+0x2fe>
 8003812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	d1c0      	bne.n	80037a2 <_printf_float+0x316>
 8003820:	e68f      	b.n	8003542 <_printf_float+0xb6>
 8003822:	9a06      	ldr	r2, [sp, #24]
 8003824:	464b      	mov	r3, r9
 8003826:	4442      	add	r2, r8
 8003828:	4631      	mov	r1, r6
 800382a:	4628      	mov	r0, r5
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	d1c3      	bne.n	80037ba <_printf_float+0x32e>
 8003832:	e686      	b.n	8003542 <_printf_float+0xb6>
 8003834:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003838:	f1ba 0f01 	cmp.w	sl, #1
 800383c:	dc01      	bgt.n	8003842 <_printf_float+0x3b6>
 800383e:	07db      	lsls	r3, r3, #31
 8003840:	d536      	bpl.n	80038b0 <_printf_float+0x424>
 8003842:	2301      	movs	r3, #1
 8003844:	4642      	mov	r2, r8
 8003846:	4631      	mov	r1, r6
 8003848:	4628      	mov	r0, r5
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	f43f ae78 	beq.w	8003542 <_printf_float+0xb6>
 8003852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003856:	4631      	mov	r1, r6
 8003858:	4628      	mov	r0, r5
 800385a:	47b8      	blx	r7
 800385c:	3001      	adds	r0, #1
 800385e:	f43f ae70 	beq.w	8003542 <_printf_float+0xb6>
 8003862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003866:	2200      	movs	r2, #0
 8003868:	2300      	movs	r3, #0
 800386a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800386e:	f7fd f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8003872:	b9c0      	cbnz	r0, 80038a6 <_printf_float+0x41a>
 8003874:	4653      	mov	r3, sl
 8003876:	f108 0201 	add.w	r2, r8, #1
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	d10c      	bne.n	800389e <_printf_float+0x412>
 8003884:	e65d      	b.n	8003542 <_printf_float+0xb6>
 8003886:	2301      	movs	r3, #1
 8003888:	465a      	mov	r2, fp
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae56 	beq.w	8003542 <_printf_float+0xb6>
 8003896:	f108 0801 	add.w	r8, r8, #1
 800389a:	45d0      	cmp	r8, sl
 800389c:	dbf3      	blt.n	8003886 <_printf_float+0x3fa>
 800389e:	464b      	mov	r3, r9
 80038a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038a4:	e6df      	b.n	8003666 <_printf_float+0x1da>
 80038a6:	f04f 0800 	mov.w	r8, #0
 80038aa:	f104 0b1a 	add.w	fp, r4, #26
 80038ae:	e7f4      	b.n	800389a <_printf_float+0x40e>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4642      	mov	r2, r8
 80038b4:	e7e1      	b.n	800387a <_printf_float+0x3ee>
 80038b6:	2301      	movs	r3, #1
 80038b8:	464a      	mov	r2, r9
 80038ba:	4631      	mov	r1, r6
 80038bc:	4628      	mov	r0, r5
 80038be:	47b8      	blx	r7
 80038c0:	3001      	adds	r0, #1
 80038c2:	f43f ae3e 	beq.w	8003542 <_printf_float+0xb6>
 80038c6:	f108 0801 	add.w	r8, r8, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	4543      	cmp	r3, r8
 80038d2:	dcf0      	bgt.n	80038b6 <_printf_float+0x42a>
 80038d4:	e6fc      	b.n	80036d0 <_printf_float+0x244>
 80038d6:	f04f 0800 	mov.w	r8, #0
 80038da:	f104 0919 	add.w	r9, r4, #25
 80038de:	e7f4      	b.n	80038ca <_printf_float+0x43e>

080038e0 <_printf_common>:
 80038e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	4698      	mov	r8, r3
 80038e8:	688a      	ldr	r2, [r1, #8]
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bfb8      	it	lt
 80038f4:	4613      	movlt	r3, r2
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038fc:	4607      	mov	r7, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	b10a      	cbz	r2, 8003906 <_printf_common+0x26>
 8003902:	3301      	adds	r3, #1
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	0699      	lsls	r1, r3, #26
 800390a:	bf42      	ittt	mi
 800390c:	6833      	ldrmi	r3, [r6, #0]
 800390e:	3302      	addmi	r3, #2
 8003910:	6033      	strmi	r3, [r6, #0]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	f015 0506 	ands.w	r5, r5, #6
 8003918:	d106      	bne.n	8003928 <_printf_common+0x48>
 800391a:	f104 0a19 	add.w	sl, r4, #25
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	6832      	ldr	r2, [r6, #0]
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	42ab      	cmp	r3, r5
 8003926:	dc26      	bgt.n	8003976 <_printf_common+0x96>
 8003928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800392c:	6822      	ldr	r2, [r4, #0]
 800392e:	3b00      	subs	r3, #0
 8003930:	bf18      	it	ne
 8003932:	2301      	movne	r3, #1
 8003934:	0692      	lsls	r2, r2, #26
 8003936:	d42b      	bmi.n	8003990 <_printf_common+0xb0>
 8003938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800393c:	4641      	mov	r1, r8
 800393e:	4638      	mov	r0, r7
 8003940:	47c8      	blx	r9
 8003942:	3001      	adds	r0, #1
 8003944:	d01e      	beq.n	8003984 <_printf_common+0xa4>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf02      	ittt	eq
 8003952:	68e5      	ldreq	r5, [r4, #12]
 8003954:	6833      	ldreq	r3, [r6, #0]
 8003956:	1aed      	subeq	r5, r5, r3
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	bf0c      	ite	eq
 800395c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003960:	2500      	movne	r5, #0
 8003962:	4293      	cmp	r3, r2
 8003964:	bfc4      	itt	gt
 8003966:	1a9b      	subgt	r3, r3, r2
 8003968:	18ed      	addgt	r5, r5, r3
 800396a:	2600      	movs	r6, #0
 800396c:	341a      	adds	r4, #26
 800396e:	42b5      	cmp	r5, r6
 8003970:	d11a      	bne.n	80039a8 <_printf_common+0xc8>
 8003972:	2000      	movs	r0, #0
 8003974:	e008      	b.n	8003988 <_printf_common+0xa8>
 8003976:	2301      	movs	r3, #1
 8003978:	4652      	mov	r2, sl
 800397a:	4641      	mov	r1, r8
 800397c:	4638      	mov	r0, r7
 800397e:	47c8      	blx	r9
 8003980:	3001      	adds	r0, #1
 8003982:	d103      	bne.n	800398c <_printf_common+0xac>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398c:	3501      	adds	r5, #1
 800398e:	e7c6      	b.n	800391e <_printf_common+0x3e>
 8003990:	18e1      	adds	r1, r4, r3
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	2030      	movs	r0, #48	@ 0x30
 8003996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800399a:	4422      	add	r2, r4
 800399c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039a4:	3302      	adds	r3, #2
 80039a6:	e7c7      	b.n	8003938 <_printf_common+0x58>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4622      	mov	r2, r4
 80039ac:	4641      	mov	r1, r8
 80039ae:	4638      	mov	r0, r7
 80039b0:	47c8      	blx	r9
 80039b2:	3001      	adds	r0, #1
 80039b4:	d0e6      	beq.n	8003984 <_printf_common+0xa4>
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7d9      	b.n	800396e <_printf_common+0x8e>
	...

080039bc <_printf_i>:
 80039bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	7e0f      	ldrb	r7, [r1, #24]
 80039c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039c4:	2f78      	cmp	r7, #120	@ 0x78
 80039c6:	4691      	mov	r9, r2
 80039c8:	4680      	mov	r8, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	469a      	mov	sl, r3
 80039ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039d2:	d807      	bhi.n	80039e4 <_printf_i+0x28>
 80039d4:	2f62      	cmp	r7, #98	@ 0x62
 80039d6:	d80a      	bhi.n	80039ee <_printf_i+0x32>
 80039d8:	2f00      	cmp	r7, #0
 80039da:	f000 80d1 	beq.w	8003b80 <_printf_i+0x1c4>
 80039de:	2f58      	cmp	r7, #88	@ 0x58
 80039e0:	f000 80b8 	beq.w	8003b54 <_printf_i+0x198>
 80039e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039ec:	e03a      	b.n	8003a64 <_printf_i+0xa8>
 80039ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039f2:	2b15      	cmp	r3, #21
 80039f4:	d8f6      	bhi.n	80039e4 <_printf_i+0x28>
 80039f6:	a101      	add	r1, pc, #4	@ (adr r1, 80039fc <_printf_i+0x40>)
 80039f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	080039e5 	.word	0x080039e5
 8003a08:	080039e5 	.word	0x080039e5
 8003a0c:	080039e5 	.word	0x080039e5
 8003a10:	080039e5 	.word	0x080039e5
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	080039e5 	.word	0x080039e5
 8003a1c:	080039e5 	.word	0x080039e5
 8003a20:	080039e5 	.word	0x080039e5
 8003a24:	080039e5 	.word	0x080039e5
 8003a28:	08003b67 	.word	0x08003b67
 8003a2c:	08003a93 	.word	0x08003a93
 8003a30:	08003b21 	.word	0x08003b21
 8003a34:	080039e5 	.word	0x080039e5
 8003a38:	080039e5 	.word	0x080039e5
 8003a3c:	08003b89 	.word	0x08003b89
 8003a40:	080039e5 	.word	0x080039e5
 8003a44:	08003a93 	.word	0x08003a93
 8003a48:	080039e5 	.word	0x080039e5
 8003a4c:	080039e5 	.word	0x080039e5
 8003a50:	08003b29 	.word	0x08003b29
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6032      	str	r2, [r6, #0]
 8003a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09c      	b.n	8003ba2 <_printf_i+0x1e6>
 8003a68:	6833      	ldr	r3, [r6, #0]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	6031      	str	r1, [r6, #0]
 8003a70:	0606      	lsls	r6, r0, #24
 8003a72:	d501      	bpl.n	8003a78 <_printf_i+0xbc>
 8003a74:	681d      	ldr	r5, [r3, #0]
 8003a76:	e003      	b.n	8003a80 <_printf_i+0xc4>
 8003a78:	0645      	lsls	r5, r0, #25
 8003a7a:	d5fb      	bpl.n	8003a74 <_printf_i+0xb8>
 8003a7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	da03      	bge.n	8003a8c <_printf_i+0xd0>
 8003a84:	232d      	movs	r3, #45	@ 0x2d
 8003a86:	426d      	negs	r5, r5
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a8c:	4858      	ldr	r0, [pc, #352]	@ (8003bf0 <_printf_i+0x234>)
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e011      	b.n	8003ab6 <_printf_i+0xfa>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	6833      	ldr	r3, [r6, #0]
 8003a96:	0608      	lsls	r0, r1, #24
 8003a98:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a9c:	d402      	bmi.n	8003aa4 <_printf_i+0xe8>
 8003a9e:	0649      	lsls	r1, r1, #25
 8003aa0:	bf48      	it	mi
 8003aa2:	b2ad      	uxthmi	r5, r5
 8003aa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003aa6:	4852      	ldr	r0, [pc, #328]	@ (8003bf0 <_printf_i+0x234>)
 8003aa8:	6033      	str	r3, [r6, #0]
 8003aaa:	bf14      	ite	ne
 8003aac:	230a      	movne	r3, #10
 8003aae:	2308      	moveq	r3, #8
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ab6:	6866      	ldr	r6, [r4, #4]
 8003ab8:	60a6      	str	r6, [r4, #8]
 8003aba:	2e00      	cmp	r6, #0
 8003abc:	db05      	blt.n	8003aca <_printf_i+0x10e>
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	432e      	orrs	r6, r5
 8003ac2:	f021 0104 	bic.w	r1, r1, #4
 8003ac6:	6021      	str	r1, [r4, #0]
 8003ac8:	d04b      	beq.n	8003b62 <_printf_i+0x1a6>
 8003aca:	4616      	mov	r6, r2
 8003acc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ad0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ad4:	5dc7      	ldrb	r7, [r0, r7]
 8003ad6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ada:	462f      	mov	r7, r5
 8003adc:	42bb      	cmp	r3, r7
 8003ade:	460d      	mov	r5, r1
 8003ae0:	d9f4      	bls.n	8003acc <_printf_i+0x110>
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d10b      	bne.n	8003afe <_printf_i+0x142>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	07df      	lsls	r7, r3, #31
 8003aea:	d508      	bpl.n	8003afe <_printf_i+0x142>
 8003aec:	6923      	ldr	r3, [r4, #16]
 8003aee:	6861      	ldr	r1, [r4, #4]
 8003af0:	4299      	cmp	r1, r3
 8003af2:	bfde      	ittt	le
 8003af4:	2330      	movle	r3, #48	@ 0x30
 8003af6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003afa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003afe:	1b92      	subs	r2, r2, r6
 8003b00:	6122      	str	r2, [r4, #16]
 8003b02:	f8cd a000 	str.w	sl, [sp]
 8003b06:	464b      	mov	r3, r9
 8003b08:	aa03      	add	r2, sp, #12
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	f7ff fee7 	bl	80038e0 <_printf_common>
 8003b12:	3001      	adds	r0, #1
 8003b14:	d14a      	bne.n	8003bac <_printf_i+0x1f0>
 8003b16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b1a:	b004      	add	sp, #16
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	f043 0320 	orr.w	r3, r3, #32
 8003b26:	6023      	str	r3, [r4, #0]
 8003b28:	4832      	ldr	r0, [pc, #200]	@ (8003bf4 <_printf_i+0x238>)
 8003b2a:	2778      	movs	r7, #120	@ 0x78
 8003b2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	6831      	ldr	r1, [r6, #0]
 8003b34:	061f      	lsls	r7, r3, #24
 8003b36:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b3a:	d402      	bmi.n	8003b42 <_printf_i+0x186>
 8003b3c:	065f      	lsls	r7, r3, #25
 8003b3e:	bf48      	it	mi
 8003b40:	b2ad      	uxthmi	r5, r5
 8003b42:	6031      	str	r1, [r6, #0]
 8003b44:	07d9      	lsls	r1, r3, #31
 8003b46:	bf44      	itt	mi
 8003b48:	f043 0320 	orrmi.w	r3, r3, #32
 8003b4c:	6023      	strmi	r3, [r4, #0]
 8003b4e:	b11d      	cbz	r5, 8003b58 <_printf_i+0x19c>
 8003b50:	2310      	movs	r3, #16
 8003b52:	e7ad      	b.n	8003ab0 <_printf_i+0xf4>
 8003b54:	4826      	ldr	r0, [pc, #152]	@ (8003bf0 <_printf_i+0x234>)
 8003b56:	e7e9      	b.n	8003b2c <_printf_i+0x170>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	e7f6      	b.n	8003b50 <_printf_i+0x194>
 8003b62:	4616      	mov	r6, r2
 8003b64:	e7bd      	b.n	8003ae2 <_printf_i+0x126>
 8003b66:	6833      	ldr	r3, [r6, #0]
 8003b68:	6825      	ldr	r5, [r4, #0]
 8003b6a:	6961      	ldr	r1, [r4, #20]
 8003b6c:	1d18      	adds	r0, r3, #4
 8003b6e:	6030      	str	r0, [r6, #0]
 8003b70:	062e      	lsls	r6, r5, #24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	d501      	bpl.n	8003b7a <_printf_i+0x1be>
 8003b76:	6019      	str	r1, [r3, #0]
 8003b78:	e002      	b.n	8003b80 <_printf_i+0x1c4>
 8003b7a:	0668      	lsls	r0, r5, #25
 8003b7c:	d5fb      	bpl.n	8003b76 <_printf_i+0x1ba>
 8003b7e:	8019      	strh	r1, [r3, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	6123      	str	r3, [r4, #16]
 8003b84:	4616      	mov	r6, r2
 8003b86:	e7bc      	b.n	8003b02 <_printf_i+0x146>
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	6032      	str	r2, [r6, #0]
 8003b8e:	681e      	ldr	r6, [r3, #0]
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	2100      	movs	r1, #0
 8003b94:	4630      	mov	r0, r6
 8003b96:	f7fc fb23 	bl	80001e0 <memchr>
 8003b9a:	b108      	cbz	r0, 8003ba0 <_printf_i+0x1e4>
 8003b9c:	1b80      	subs	r0, r0, r6
 8003b9e:	6060      	str	r0, [r4, #4]
 8003ba0:	6863      	ldr	r3, [r4, #4]
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003baa:	e7aa      	b.n	8003b02 <_printf_i+0x146>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	4632      	mov	r2, r6
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	47d0      	blx	sl
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0ad      	beq.n	8003b16 <_printf_i+0x15a>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	079b      	lsls	r3, r3, #30
 8003bbe:	d413      	bmi.n	8003be8 <_printf_i+0x22c>
 8003bc0:	68e0      	ldr	r0, [r4, #12]
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	4298      	cmp	r0, r3
 8003bc6:	bfb8      	it	lt
 8003bc8:	4618      	movlt	r0, r3
 8003bca:	e7a6      	b.n	8003b1a <_printf_i+0x15e>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4632      	mov	r2, r6
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	47d0      	blx	sl
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d09d      	beq.n	8003b16 <_printf_i+0x15a>
 8003bda:	3501      	adds	r5, #1
 8003bdc:	68e3      	ldr	r3, [r4, #12]
 8003bde:	9903      	ldr	r1, [sp, #12]
 8003be0:	1a5b      	subs	r3, r3, r1
 8003be2:	42ab      	cmp	r3, r5
 8003be4:	dcf2      	bgt.n	8003bcc <_printf_i+0x210>
 8003be6:	e7eb      	b.n	8003bc0 <_printf_i+0x204>
 8003be8:	2500      	movs	r5, #0
 8003bea:	f104 0619 	add.w	r6, r4, #25
 8003bee:	e7f5      	b.n	8003bdc <_printf_i+0x220>
 8003bf0:	08006bd8 	.word	0x08006bd8
 8003bf4:	08006be9 	.word	0x08006be9

08003bf8 <std>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c06:	6083      	str	r3, [r0, #8]
 8003c08:	8181      	strh	r1, [r0, #12]
 8003c0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c0c:	81c2      	strh	r2, [r0, #14]
 8003c0e:	6183      	str	r3, [r0, #24]
 8003c10:	4619      	mov	r1, r3
 8003c12:	2208      	movs	r2, #8
 8003c14:	305c      	adds	r0, #92	@ 0x5c
 8003c16:	f000 f906 	bl	8003e26 <memset>
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <std+0x58>)
 8003c1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <std+0x5c>)
 8003c20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <std+0x60>)
 8003c24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <std+0x64>)
 8003c28:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <std+0x68>)
 8003c2c:	6224      	str	r4, [r4, #32]
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d006      	beq.n	8003c40 <std+0x48>
 8003c32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c36:	4294      	cmp	r4, r2
 8003c38:	d002      	beq.n	8003c40 <std+0x48>
 8003c3a:	33d0      	adds	r3, #208	@ 0xd0
 8003c3c:	429c      	cmp	r4, r3
 8003c3e:	d105      	bne.n	8003c4c <std+0x54>
 8003c40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c48:	f000 b96a 	b.w	8003f20 <__retarget_lock_init_recursive>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	08003da1 	.word	0x08003da1
 8003c54:	08003dc3 	.word	0x08003dc3
 8003c58:	08003dfb 	.word	0x08003dfb
 8003c5c:	08003e1f 	.word	0x08003e1f
 8003c60:	200002f4 	.word	0x200002f4

08003c64 <stdio_exit_handler>:
 8003c64:	4a02      	ldr	r2, [pc, #8]	@ (8003c70 <stdio_exit_handler+0xc>)
 8003c66:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <stdio_exit_handler+0x10>)
 8003c68:	4803      	ldr	r0, [pc, #12]	@ (8003c78 <stdio_exit_handler+0x14>)
 8003c6a:	f000 b869 	b.w	8003d40 <_fwalk_sglue>
 8003c6e:	bf00      	nop
 8003c70:	20000014 	.word	0x20000014
 8003c74:	08005859 	.word	0x08005859
 8003c78:	20000024 	.word	0x20000024

08003c7c <cleanup_stdio>:
 8003c7c:	6841      	ldr	r1, [r0, #4]
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <cleanup_stdio+0x34>)
 8003c80:	4299      	cmp	r1, r3
 8003c82:	b510      	push	{r4, lr}
 8003c84:	4604      	mov	r4, r0
 8003c86:	d001      	beq.n	8003c8c <cleanup_stdio+0x10>
 8003c88:	f001 fde6 	bl	8005858 <_fflush_r>
 8003c8c:	68a1      	ldr	r1, [r4, #8]
 8003c8e:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <cleanup_stdio+0x38>)
 8003c90:	4299      	cmp	r1, r3
 8003c92:	d002      	beq.n	8003c9a <cleanup_stdio+0x1e>
 8003c94:	4620      	mov	r0, r4
 8003c96:	f001 fddf 	bl	8005858 <_fflush_r>
 8003c9a:	68e1      	ldr	r1, [r4, #12]
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <cleanup_stdio+0x3c>)
 8003c9e:	4299      	cmp	r1, r3
 8003ca0:	d004      	beq.n	8003cac <cleanup_stdio+0x30>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca8:	f001 bdd6 	b.w	8005858 <_fflush_r>
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	bf00      	nop
 8003cb0:	200002f4 	.word	0x200002f4
 8003cb4:	2000035c 	.word	0x2000035c
 8003cb8:	200003c4 	.word	0x200003c4

08003cbc <global_stdio_init.part.0>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <global_stdio_init.part.0+0x30>)
 8003cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8003cf0 <global_stdio_init.part.0+0x34>)
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf4 <global_stdio_init.part.0+0x38>)
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2104      	movs	r1, #4
 8003ccc:	f7ff ff94 	bl	8003bf8 <std>
 8003cd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2109      	movs	r1, #9
 8003cd8:	f7ff ff8e 	bl	8003bf8 <std>
 8003cdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce6:	2112      	movs	r1, #18
 8003ce8:	f7ff bf86 	b.w	8003bf8 <std>
 8003cec:	2000042c 	.word	0x2000042c
 8003cf0:	200002f4 	.word	0x200002f4
 8003cf4:	08003c65 	.word	0x08003c65

08003cf8 <__sfp_lock_acquire>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	@ (8003d00 <__sfp_lock_acquire+0x8>)
 8003cfa:	f000 b912 	b.w	8003f22 <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	20000435 	.word	0x20000435

08003d04 <__sfp_lock_release>:
 8003d04:	4801      	ldr	r0, [pc, #4]	@ (8003d0c <__sfp_lock_release+0x8>)
 8003d06:	f000 b90d 	b.w	8003f24 <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	20000435 	.word	0x20000435

08003d10 <__sinit>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	4604      	mov	r4, r0
 8003d14:	f7ff fff0 	bl	8003cf8 <__sfp_lock_acquire>
 8003d18:	6a23      	ldr	r3, [r4, #32]
 8003d1a:	b11b      	cbz	r3, 8003d24 <__sinit+0x14>
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	f7ff bff0 	b.w	8003d04 <__sfp_lock_release>
 8003d24:	4b04      	ldr	r3, [pc, #16]	@ (8003d38 <__sinit+0x28>)
 8003d26:	6223      	str	r3, [r4, #32]
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <__sinit+0x2c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f5      	bne.n	8003d1c <__sinit+0xc>
 8003d30:	f7ff ffc4 	bl	8003cbc <global_stdio_init.part.0>
 8003d34:	e7f2      	b.n	8003d1c <__sinit+0xc>
 8003d36:	bf00      	nop
 8003d38:	08003c7d 	.word	0x08003c7d
 8003d3c:	2000042c 	.word	0x2000042c

08003d40 <_fwalk_sglue>:
 8003d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	4607      	mov	r7, r0
 8003d46:	4688      	mov	r8, r1
 8003d48:	4614      	mov	r4, r2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d50:	f1b9 0901 	subs.w	r9, r9, #1
 8003d54:	d505      	bpl.n	8003d62 <_fwalk_sglue+0x22>
 8003d56:	6824      	ldr	r4, [r4, #0]
 8003d58:	2c00      	cmp	r4, #0
 8003d5a:	d1f7      	bne.n	8003d4c <_fwalk_sglue+0xc>
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d907      	bls.n	8003d78 <_fwalk_sglue+0x38>
 8003d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	d003      	beq.n	8003d78 <_fwalk_sglue+0x38>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	47c0      	blx	r8
 8003d76:	4306      	orrs	r6, r0
 8003d78:	3568      	adds	r5, #104	@ 0x68
 8003d7a:	e7e9      	b.n	8003d50 <_fwalk_sglue+0x10>

08003d7c <iprintf>:
 8003d7c:	b40f      	push	{r0, r1, r2, r3}
 8003d7e:	b507      	push	{r0, r1, r2, lr}
 8003d80:	4906      	ldr	r1, [pc, #24]	@ (8003d9c <iprintf+0x20>)
 8003d82:	ab04      	add	r3, sp, #16
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d8a:	6881      	ldr	r1, [r0, #8]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	f001 fbc7 	bl	8005520 <_vfiprintf_r>
 8003d92:	b003      	add	sp, #12
 8003d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d98:	b004      	add	sp, #16
 8003d9a:	4770      	bx	lr
 8003d9c:	20000020 	.word	0x20000020

08003da0 <__sread>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	460c      	mov	r4, r1
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	f000 f86c 	bl	8003e84 <_read_r>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	bfab      	itete	ge
 8003db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003db2:	89a3      	ldrhlt	r3, [r4, #12]
 8003db4:	181b      	addge	r3, r3, r0
 8003db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dba:	bfac      	ite	ge
 8003dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dbe:	81a3      	strhlt	r3, [r4, #12]
 8003dc0:	bd10      	pop	{r4, pc}

08003dc2 <__swrite>:
 8003dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	898b      	ldrh	r3, [r1, #12]
 8003dca:	05db      	lsls	r3, r3, #23
 8003dcc:	4605      	mov	r5, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	d505      	bpl.n	8003de0 <__swrite+0x1e>
 8003dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd8:	2302      	movs	r3, #2
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f000 f840 	bl	8003e60 <_lseek_r>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003de6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	4632      	mov	r2, r6
 8003dee:	463b      	mov	r3, r7
 8003df0:	4628      	mov	r0, r5
 8003df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df6:	f000 b857 	b.w	8003ea8 <_write_r>

08003dfa <__sseek>:
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e02:	f000 f82d 	bl	8003e60 <_lseek_r>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	bf15      	itete	ne
 8003e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e16:	81a3      	strheq	r3, [r4, #12]
 8003e18:	bf18      	it	ne
 8003e1a:	81a3      	strhne	r3, [r4, #12]
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <__sclose>:
 8003e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e22:	f000 b80d 	b.w	8003e40 <_close_r>

08003e26 <memset>:
 8003e26:	4402      	add	r2, r0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <memset+0xa>
 8003e2e:	4770      	bx	lr
 8003e30:	f803 1b01 	strb.w	r1, [r3], #1
 8003e34:	e7f9      	b.n	8003e2a <memset+0x4>
	...

08003e38 <_localeconv_r>:
 8003e38:	4800      	ldr	r0, [pc, #0]	@ (8003e3c <_localeconv_r+0x4>)
 8003e3a:	4770      	bx	lr
 8003e3c:	20000160 	.word	0x20000160

08003e40 <_close_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d06      	ldr	r5, [pc, #24]	@ (8003e5c <_close_r+0x1c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	602b      	str	r3, [r5, #0]
 8003e4c:	f7ff f8b4 	bl	8002fb8 <_close>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_close_r+0x1a>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_close_r+0x1a>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20000430 	.word	0x20000430

08003e60 <_lseek_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	@ (8003e80 <_lseek_r+0x20>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	4608      	mov	r0, r1
 8003e68:	4611      	mov	r1, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7ff f863 	bl	8002f3a <_lseek>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_lseek_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_lseek_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000430 	.word	0x20000430

08003e84 <_read_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d07      	ldr	r5, [pc, #28]	@ (8003ea4 <_read_r+0x20>)
 8003e88:	4604      	mov	r4, r0
 8003e8a:	4608      	mov	r0, r1
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	602a      	str	r2, [r5, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fe fffb 	bl	8002e8e <_read>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_read_r+0x1e>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_read_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000430 	.word	0x20000430

08003ea8 <_write_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ec8 <_write_r+0x20>)
 8003eac:	4604      	mov	r4, r0
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	602a      	str	r2, [r5, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7ff f851 	bl	8002f5e <_write>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_write_r+0x1e>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_write_r+0x1e>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20000430 	.word	0x20000430

08003ecc <__errno>:
 8003ecc:	4b01      	ldr	r3, [pc, #4]	@ (8003ed4 <__errno+0x8>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000020 	.word	0x20000020

08003ed8 <__libc_init_array>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	4d0d      	ldr	r5, [pc, #52]	@ (8003f10 <__libc_init_array+0x38>)
 8003edc:	4c0d      	ldr	r4, [pc, #52]	@ (8003f14 <__libc_init_array+0x3c>)
 8003ede:	1b64      	subs	r4, r4, r5
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	42a6      	cmp	r6, r4
 8003ee6:	d109      	bne.n	8003efc <__libc_init_array+0x24>
 8003ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8003f18 <__libc_init_array+0x40>)
 8003eea:	4c0c      	ldr	r4, [pc, #48]	@ (8003f1c <__libc_init_array+0x44>)
 8003eec:	f002 fe2c 	bl	8006b48 <_init>
 8003ef0:	1b64      	subs	r4, r4, r5
 8003ef2:	10a4      	asrs	r4, r4, #2
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	42a6      	cmp	r6, r4
 8003ef8:	d105      	bne.n	8003f06 <__libc_init_array+0x2e>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f00:	4798      	blx	r3
 8003f02:	3601      	adds	r6, #1
 8003f04:	e7ee      	b.n	8003ee4 <__libc_init_array+0xc>
 8003f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0a:	4798      	blx	r3
 8003f0c:	3601      	adds	r6, #1
 8003f0e:	e7f2      	b.n	8003ef6 <__libc_init_array+0x1e>
 8003f10:	08006f88 	.word	0x08006f88
 8003f14:	08006f88 	.word	0x08006f88
 8003f18:	08006f88 	.word	0x08006f88
 8003f1c:	08006f8c 	.word	0x08006f8c

08003f20 <__retarget_lock_init_recursive>:
 8003f20:	4770      	bx	lr

08003f22 <__retarget_lock_acquire_recursive>:
 8003f22:	4770      	bx	lr

08003f24 <__retarget_lock_release_recursive>:
 8003f24:	4770      	bx	lr

08003f26 <quorem>:
 8003f26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	6903      	ldr	r3, [r0, #16]
 8003f2c:	690c      	ldr	r4, [r1, #16]
 8003f2e:	42a3      	cmp	r3, r4
 8003f30:	4607      	mov	r7, r0
 8003f32:	db7e      	blt.n	8004032 <quorem+0x10c>
 8003f34:	3c01      	subs	r4, #1
 8003f36:	f101 0814 	add.w	r8, r1, #20
 8003f3a:	00a3      	lsls	r3, r4, #2
 8003f3c:	f100 0514 	add.w	r5, r0, #20
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f50:	3301      	adds	r3, #1
 8003f52:	429a      	cmp	r2, r3
 8003f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f5c:	d32e      	bcc.n	8003fbc <quorem+0x96>
 8003f5e:	f04f 0a00 	mov.w	sl, #0
 8003f62:	46c4      	mov	ip, r8
 8003f64:	46ae      	mov	lr, r5
 8003f66:	46d3      	mov	fp, sl
 8003f68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f6c:	b298      	uxth	r0, r3
 8003f6e:	fb06 a000 	mla	r0, r6, r0, sl
 8003f72:	0c02      	lsrs	r2, r0, #16
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	fb06 2303 	mla	r3, r6, r3, r2
 8003f7a:	f8de 2000 	ldr.w	r2, [lr]
 8003f7e:	b280      	uxth	r0, r0
 8003f80:	b292      	uxth	r2, r2
 8003f82:	1a12      	subs	r2, r2, r0
 8003f84:	445a      	add	r2, fp
 8003f86:	f8de 0000 	ldr.w	r0, [lr]
 8003f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f9e:	45e1      	cmp	r9, ip
 8003fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8003fa4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003fa8:	d2de      	bcs.n	8003f68 <quorem+0x42>
 8003faa:	9b00      	ldr	r3, [sp, #0]
 8003fac:	58eb      	ldr	r3, [r5, r3]
 8003fae:	b92b      	cbnz	r3, 8003fbc <quorem+0x96>
 8003fb0:	9b01      	ldr	r3, [sp, #4]
 8003fb2:	3b04      	subs	r3, #4
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	d32f      	bcc.n	800401a <quorem+0xf4>
 8003fba:	613c      	str	r4, [r7, #16]
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f001 f97d 	bl	80052bc <__mcmp>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	db25      	blt.n	8004012 <quorem+0xec>
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fce:	f8d1 c000 	ldr.w	ip, [r1]
 8003fd2:	fa1f fe82 	uxth.w	lr, r2
 8003fd6:	fa1f f38c 	uxth.w	r3, ip
 8003fda:	eba3 030e 	sub.w	r3, r3, lr
 8003fde:	4403      	add	r3, r0
 8003fe0:	0c12      	lsrs	r2, r2, #16
 8003fe2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fe6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ff0:	45c1      	cmp	r9, r8
 8003ff2:	f841 3b04 	str.w	r3, [r1], #4
 8003ff6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003ffa:	d2e6      	bcs.n	8003fca <quorem+0xa4>
 8003ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004004:	b922      	cbnz	r2, 8004010 <quorem+0xea>
 8004006:	3b04      	subs	r3, #4
 8004008:	429d      	cmp	r5, r3
 800400a:	461a      	mov	r2, r3
 800400c:	d30b      	bcc.n	8004026 <quorem+0x100>
 800400e:	613c      	str	r4, [r7, #16]
 8004010:	3601      	adds	r6, #1
 8004012:	4630      	mov	r0, r6
 8004014:	b003      	add	sp, #12
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	3b04      	subs	r3, #4
 800401e:	2a00      	cmp	r2, #0
 8004020:	d1cb      	bne.n	8003fba <quorem+0x94>
 8004022:	3c01      	subs	r4, #1
 8004024:	e7c6      	b.n	8003fb4 <quorem+0x8e>
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	3b04      	subs	r3, #4
 800402a:	2a00      	cmp	r2, #0
 800402c:	d1ef      	bne.n	800400e <quorem+0xe8>
 800402e:	3c01      	subs	r4, #1
 8004030:	e7ea      	b.n	8004008 <quorem+0xe2>
 8004032:	2000      	movs	r0, #0
 8004034:	e7ee      	b.n	8004014 <quorem+0xee>
	...

08004038 <_dtoa_r>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	69c7      	ldr	r7, [r0, #28]
 800403e:	b097      	sub	sp, #92	@ 0x5c
 8004040:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004044:	ec55 4b10 	vmov	r4, r5, d0
 8004048:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800404a:	9107      	str	r1, [sp, #28]
 800404c:	4681      	mov	r9, r0
 800404e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004050:	9311      	str	r3, [sp, #68]	@ 0x44
 8004052:	b97f      	cbnz	r7, 8004074 <_dtoa_r+0x3c>
 8004054:	2010      	movs	r0, #16
 8004056:	f000 fe09 	bl	8004c6c <malloc>
 800405a:	4602      	mov	r2, r0
 800405c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004060:	b920      	cbnz	r0, 800406c <_dtoa_r+0x34>
 8004062:	4ba9      	ldr	r3, [pc, #676]	@ (8004308 <_dtoa_r+0x2d0>)
 8004064:	21ef      	movs	r1, #239	@ 0xef
 8004066:	48a9      	ldr	r0, [pc, #676]	@ (800430c <_dtoa_r+0x2d4>)
 8004068:	f001 fcd0 	bl	8005a0c <__assert_func>
 800406c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004070:	6007      	str	r7, [r0, #0]
 8004072:	60c7      	str	r7, [r0, #12]
 8004074:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	b159      	cbz	r1, 8004094 <_dtoa_r+0x5c>
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	604a      	str	r2, [r1, #4]
 8004080:	2301      	movs	r3, #1
 8004082:	4093      	lsls	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
 8004086:	4648      	mov	r0, r9
 8004088:	f000 fee6 	bl	8004e58 <_Bfree>
 800408c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	1e2b      	subs	r3, r5, #0
 8004096:	bfb9      	ittee	lt
 8004098:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800409c:	9305      	strlt	r3, [sp, #20]
 800409e:	2300      	movge	r3, #0
 80040a0:	6033      	strge	r3, [r6, #0]
 80040a2:	9f05      	ldr	r7, [sp, #20]
 80040a4:	4b9a      	ldr	r3, [pc, #616]	@ (8004310 <_dtoa_r+0x2d8>)
 80040a6:	bfbc      	itt	lt
 80040a8:	2201      	movlt	r2, #1
 80040aa:	6032      	strlt	r2, [r6, #0]
 80040ac:	43bb      	bics	r3, r7
 80040ae:	d112      	bne.n	80040d6 <_dtoa_r+0x9e>
 80040b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80040b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040bc:	4323      	orrs	r3, r4
 80040be:	f000 855a 	beq.w	8004b76 <_dtoa_r+0xb3e>
 80040c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004324 <_dtoa_r+0x2ec>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 855c 	beq.w	8004b86 <_dtoa_r+0xb4e>
 80040ce:	f10a 0303 	add.w	r3, sl, #3
 80040d2:	f000 bd56 	b.w	8004b82 <_dtoa_r+0xb4a>
 80040d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80040da:	2200      	movs	r2, #0
 80040dc:	ec51 0b17 	vmov	r0, r1, d7
 80040e0:	2300      	movs	r3, #0
 80040e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80040e6:	f7fc fcf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80040ea:	4680      	mov	r8, r0
 80040ec:	b158      	cbz	r0, 8004106 <_dtoa_r+0xce>
 80040ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80040f0:	2301      	movs	r3, #1
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040f6:	b113      	cbz	r3, 80040fe <_dtoa_r+0xc6>
 80040f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80040fa:	4b86      	ldr	r3, [pc, #536]	@ (8004314 <_dtoa_r+0x2dc>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004328 <_dtoa_r+0x2f0>
 8004102:	f000 bd40 	b.w	8004b86 <_dtoa_r+0xb4e>
 8004106:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800410a:	aa14      	add	r2, sp, #80	@ 0x50
 800410c:	a915      	add	r1, sp, #84	@ 0x54
 800410e:	4648      	mov	r0, r9
 8004110:	f001 f984 	bl	800541c <__d2b>
 8004114:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	2e00      	cmp	r6, #0
 800411c:	d078      	beq.n	8004210 <_dtoa_r+0x1d8>
 800411e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004120:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800412c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004130:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004134:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004138:	4619      	mov	r1, r3
 800413a:	2200      	movs	r2, #0
 800413c:	4b76      	ldr	r3, [pc, #472]	@ (8004318 <_dtoa_r+0x2e0>)
 800413e:	f7fc f8ab 	bl	8000298 <__aeabi_dsub>
 8004142:	a36b      	add	r3, pc, #428	@ (adr r3, 80042f0 <_dtoa_r+0x2b8>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc fa5e 	bl	8000608 <__aeabi_dmul>
 800414c:	a36a      	add	r3, pc, #424	@ (adr r3, 80042f8 <_dtoa_r+0x2c0>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc f8a3 	bl	800029c <__adddf3>
 8004156:	4604      	mov	r4, r0
 8004158:	4630      	mov	r0, r6
 800415a:	460d      	mov	r5, r1
 800415c:	f7fc f9ea 	bl	8000534 <__aeabi_i2d>
 8004160:	a367      	add	r3, pc, #412	@ (adr r3, 8004300 <_dtoa_r+0x2c8>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc fa4f 	bl	8000608 <__aeabi_dmul>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4620      	mov	r0, r4
 8004170:	4629      	mov	r1, r5
 8004172:	f7fc f893 	bl	800029c <__adddf3>
 8004176:	4604      	mov	r4, r0
 8004178:	460d      	mov	r5, r1
 800417a:	f7fc fcf5 	bl	8000b68 <__aeabi_d2iz>
 800417e:	2200      	movs	r2, #0
 8004180:	4607      	mov	r7, r0
 8004182:	2300      	movs	r3, #0
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc fcb0 	bl	8000aec <__aeabi_dcmplt>
 800418c:	b140      	cbz	r0, 80041a0 <_dtoa_r+0x168>
 800418e:	4638      	mov	r0, r7
 8004190:	f7fc f9d0 	bl	8000534 <__aeabi_i2d>
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	f7fc fc9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800419c:	b900      	cbnz	r0, 80041a0 <_dtoa_r+0x168>
 800419e:	3f01      	subs	r7, #1
 80041a0:	2f16      	cmp	r7, #22
 80041a2:	d852      	bhi.n	800424a <_dtoa_r+0x212>
 80041a4:	4b5d      	ldr	r3, [pc, #372]	@ (800431c <_dtoa_r+0x2e4>)
 80041a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041b2:	f7fc fc9b 	bl	8000aec <__aeabi_dcmplt>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d049      	beq.n	800424e <_dtoa_r+0x216>
 80041ba:	3f01      	subs	r7, #1
 80041bc:	2300      	movs	r3, #0
 80041be:	9310      	str	r3, [sp, #64]	@ 0x40
 80041c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041c2:	1b9b      	subs	r3, r3, r6
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	bf45      	ittet	mi
 80041c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80041cc:	9300      	strmi	r3, [sp, #0]
 80041ce:	2300      	movpl	r3, #0
 80041d0:	2300      	movmi	r3, #0
 80041d2:	9206      	str	r2, [sp, #24]
 80041d4:	bf54      	ite	pl
 80041d6:	9300      	strpl	r3, [sp, #0]
 80041d8:	9306      	strmi	r3, [sp, #24]
 80041da:	2f00      	cmp	r7, #0
 80041dc:	db39      	blt.n	8004252 <_dtoa_r+0x21a>
 80041de:	9b06      	ldr	r3, [sp, #24]
 80041e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80041e2:	443b      	add	r3, r7
 80041e4:	9306      	str	r3, [sp, #24]
 80041e6:	2300      	movs	r3, #0
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	9b07      	ldr	r3, [sp, #28]
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d863      	bhi.n	80042b8 <_dtoa_r+0x280>
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	bfc4      	itt	gt
 80041f4:	3b04      	subgt	r3, #4
 80041f6:	9307      	strgt	r3, [sp, #28]
 80041f8:	9b07      	ldr	r3, [sp, #28]
 80041fa:	f1a3 0302 	sub.w	r3, r3, #2
 80041fe:	bfcc      	ite	gt
 8004200:	2400      	movgt	r4, #0
 8004202:	2401      	movle	r4, #1
 8004204:	2b03      	cmp	r3, #3
 8004206:	d863      	bhi.n	80042d0 <_dtoa_r+0x298>
 8004208:	e8df f003 	tbb	[pc, r3]
 800420c:	2b375452 	.word	0x2b375452
 8004210:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004214:	441e      	add	r6, r3
 8004216:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800421a:	2b20      	cmp	r3, #32
 800421c:	bfc1      	itttt	gt
 800421e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004222:	409f      	lslgt	r7, r3
 8004224:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004228:	fa24 f303 	lsrgt.w	r3, r4, r3
 800422c:	bfd6      	itet	le
 800422e:	f1c3 0320 	rsble	r3, r3, #32
 8004232:	ea47 0003 	orrgt.w	r0, r7, r3
 8004236:	fa04 f003 	lslle.w	r0, r4, r3
 800423a:	f7fc f96b 	bl	8000514 <__aeabi_ui2d>
 800423e:	2201      	movs	r2, #1
 8004240:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004244:	3e01      	subs	r6, #1
 8004246:	9212      	str	r2, [sp, #72]	@ 0x48
 8004248:	e776      	b.n	8004138 <_dtoa_r+0x100>
 800424a:	2301      	movs	r3, #1
 800424c:	e7b7      	b.n	80041be <_dtoa_r+0x186>
 800424e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004250:	e7b6      	b.n	80041c0 <_dtoa_r+0x188>
 8004252:	9b00      	ldr	r3, [sp, #0]
 8004254:	1bdb      	subs	r3, r3, r7
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	427b      	negs	r3, r7
 800425a:	9308      	str	r3, [sp, #32]
 800425c:	2300      	movs	r3, #0
 800425e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004260:	e7c3      	b.n	80041ea <_dtoa_r+0x1b2>
 8004262:	2301      	movs	r3, #1
 8004264:	9309      	str	r3, [sp, #36]	@ 0x24
 8004266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004268:	eb07 0b03 	add.w	fp, r7, r3
 800426c:	f10b 0301 	add.w	r3, fp, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	bfb8      	it	lt
 8004276:	2301      	movlt	r3, #1
 8004278:	e006      	b.n	8004288 <_dtoa_r+0x250>
 800427a:	2301      	movs	r3, #1
 800427c:	9309      	str	r3, [sp, #36]	@ 0x24
 800427e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	dd28      	ble.n	80042d6 <_dtoa_r+0x29e>
 8004284:	469b      	mov	fp, r3
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800428c:	2100      	movs	r1, #0
 800428e:	2204      	movs	r2, #4
 8004290:	f102 0514 	add.w	r5, r2, #20
 8004294:	429d      	cmp	r5, r3
 8004296:	d926      	bls.n	80042e6 <_dtoa_r+0x2ae>
 8004298:	6041      	str	r1, [r0, #4]
 800429a:	4648      	mov	r0, r9
 800429c:	f000 fd9c 	bl	8004dd8 <_Balloc>
 80042a0:	4682      	mov	sl, r0
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d142      	bne.n	800432c <_dtoa_r+0x2f4>
 80042a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <_dtoa_r+0x2e8>)
 80042a8:	4602      	mov	r2, r0
 80042aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80042ae:	e6da      	b.n	8004066 <_dtoa_r+0x2e>
 80042b0:	2300      	movs	r3, #0
 80042b2:	e7e3      	b.n	800427c <_dtoa_r+0x244>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e7d5      	b.n	8004264 <_dtoa_r+0x22c>
 80042b8:	2401      	movs	r4, #1
 80042ba:	2300      	movs	r3, #0
 80042bc:	9307      	str	r3, [sp, #28]
 80042be:	9409      	str	r4, [sp, #36]	@ 0x24
 80042c0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80042ca:	2312      	movs	r3, #18
 80042cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80042ce:	e7db      	b.n	8004288 <_dtoa_r+0x250>
 80042d0:	2301      	movs	r3, #1
 80042d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d4:	e7f4      	b.n	80042c0 <_dtoa_r+0x288>
 80042d6:	f04f 0b01 	mov.w	fp, #1
 80042da:	f8cd b00c 	str.w	fp, [sp, #12]
 80042de:	465b      	mov	r3, fp
 80042e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80042e4:	e7d0      	b.n	8004288 <_dtoa_r+0x250>
 80042e6:	3101      	adds	r1, #1
 80042e8:	0052      	lsls	r2, r2, #1
 80042ea:	e7d1      	b.n	8004290 <_dtoa_r+0x258>
 80042ec:	f3af 8000 	nop.w
 80042f0:	636f4361 	.word	0x636f4361
 80042f4:	3fd287a7 	.word	0x3fd287a7
 80042f8:	8b60c8b3 	.word	0x8b60c8b3
 80042fc:	3fc68a28 	.word	0x3fc68a28
 8004300:	509f79fb 	.word	0x509f79fb
 8004304:	3fd34413 	.word	0x3fd34413
 8004308:	08006c07 	.word	0x08006c07
 800430c:	08006c1e 	.word	0x08006c1e
 8004310:	7ff00000 	.word	0x7ff00000
 8004314:	08006bd7 	.word	0x08006bd7
 8004318:	3ff80000 	.word	0x3ff80000
 800431c:	08006d70 	.word	0x08006d70
 8004320:	08006c76 	.word	0x08006c76
 8004324:	08006c03 	.word	0x08006c03
 8004328:	08006bd6 	.word	0x08006bd6
 800432c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004330:	6018      	str	r0, [r3, #0]
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	2b0e      	cmp	r3, #14
 8004336:	f200 80a1 	bhi.w	800447c <_dtoa_r+0x444>
 800433a:	2c00      	cmp	r4, #0
 800433c:	f000 809e 	beq.w	800447c <_dtoa_r+0x444>
 8004340:	2f00      	cmp	r7, #0
 8004342:	dd33      	ble.n	80043ac <_dtoa_r+0x374>
 8004344:	4b9c      	ldr	r3, [pc, #624]	@ (80045b8 <_dtoa_r+0x580>)
 8004346:	f007 020f 	and.w	r2, r7, #15
 800434a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800434e:	ed93 7b00 	vldr	d7, [r3]
 8004352:	05f8      	lsls	r0, r7, #23
 8004354:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800435c:	d516      	bpl.n	800438c <_dtoa_r+0x354>
 800435e:	4b97      	ldr	r3, [pc, #604]	@ (80045bc <_dtoa_r+0x584>)
 8004360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004368:	f7fc fa78 	bl	800085c <__aeabi_ddiv>
 800436c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004370:	f004 040f 	and.w	r4, r4, #15
 8004374:	2603      	movs	r6, #3
 8004376:	4d91      	ldr	r5, [pc, #580]	@ (80045bc <_dtoa_r+0x584>)
 8004378:	b954      	cbnz	r4, 8004390 <_dtoa_r+0x358>
 800437a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800437e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004382:	f7fc fa6b 	bl	800085c <__aeabi_ddiv>
 8004386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800438a:	e028      	b.n	80043de <_dtoa_r+0x3a6>
 800438c:	2602      	movs	r6, #2
 800438e:	e7f2      	b.n	8004376 <_dtoa_r+0x33e>
 8004390:	07e1      	lsls	r1, r4, #31
 8004392:	d508      	bpl.n	80043a6 <_dtoa_r+0x36e>
 8004394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800439c:	f7fc f934 	bl	8000608 <__aeabi_dmul>
 80043a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80043a4:	3601      	adds	r6, #1
 80043a6:	1064      	asrs	r4, r4, #1
 80043a8:	3508      	adds	r5, #8
 80043aa:	e7e5      	b.n	8004378 <_dtoa_r+0x340>
 80043ac:	f000 80af 	beq.w	800450e <_dtoa_r+0x4d6>
 80043b0:	427c      	negs	r4, r7
 80043b2:	4b81      	ldr	r3, [pc, #516]	@ (80045b8 <_dtoa_r+0x580>)
 80043b4:	4d81      	ldr	r5, [pc, #516]	@ (80045bc <_dtoa_r+0x584>)
 80043b6:	f004 020f 	and.w	r2, r4, #15
 80043ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043c6:	f7fc f91f 	bl	8000608 <__aeabi_dmul>
 80043ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043ce:	1124      	asrs	r4, r4, #4
 80043d0:	2300      	movs	r3, #0
 80043d2:	2602      	movs	r6, #2
 80043d4:	2c00      	cmp	r4, #0
 80043d6:	f040 808f 	bne.w	80044f8 <_dtoa_r+0x4c0>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1d3      	bne.n	8004386 <_dtoa_r+0x34e>
 80043de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8094 	beq.w	8004512 <_dtoa_r+0x4da>
 80043ea:	4b75      	ldr	r3, [pc, #468]	@ (80045c0 <_dtoa_r+0x588>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fb7b 	bl	8000aec <__aeabi_dcmplt>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	f000 808b 	beq.w	8004512 <_dtoa_r+0x4da>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8087 	beq.w	8004512 <_dtoa_r+0x4da>
 8004404:	f1bb 0f00 	cmp.w	fp, #0
 8004408:	dd34      	ble.n	8004474 <_dtoa_r+0x43c>
 800440a:	4620      	mov	r0, r4
 800440c:	4b6d      	ldr	r3, [pc, #436]	@ (80045c4 <_dtoa_r+0x58c>)
 800440e:	2200      	movs	r2, #0
 8004410:	4629      	mov	r1, r5
 8004412:	f7fc f8f9 	bl	8000608 <__aeabi_dmul>
 8004416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800441a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800441e:	3601      	adds	r6, #1
 8004420:	465c      	mov	r4, fp
 8004422:	4630      	mov	r0, r6
 8004424:	f7fc f886 	bl	8000534 <__aeabi_i2d>
 8004428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800442c:	f7fc f8ec 	bl	8000608 <__aeabi_dmul>
 8004430:	4b65      	ldr	r3, [pc, #404]	@ (80045c8 <_dtoa_r+0x590>)
 8004432:	2200      	movs	r2, #0
 8004434:	f7fb ff32 	bl	800029c <__adddf3>
 8004438:	4605      	mov	r5, r0
 800443a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800443e:	2c00      	cmp	r4, #0
 8004440:	d16a      	bne.n	8004518 <_dtoa_r+0x4e0>
 8004442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004446:	4b61      	ldr	r3, [pc, #388]	@ (80045cc <_dtoa_r+0x594>)
 8004448:	2200      	movs	r2, #0
 800444a:	f7fb ff25 	bl	8000298 <__aeabi_dsub>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004456:	462a      	mov	r2, r5
 8004458:	4633      	mov	r3, r6
 800445a:	f7fc fb65 	bl	8000b28 <__aeabi_dcmpgt>
 800445e:	2800      	cmp	r0, #0
 8004460:	f040 8298 	bne.w	8004994 <_dtoa_r+0x95c>
 8004464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004468:	462a      	mov	r2, r5
 800446a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800446e:	f7fc fb3d 	bl	8000aec <__aeabi_dcmplt>
 8004472:	bb38      	cbnz	r0, 80044c4 <_dtoa_r+0x48c>
 8004474:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004478:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800447c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800447e:	2b00      	cmp	r3, #0
 8004480:	f2c0 8157 	blt.w	8004732 <_dtoa_r+0x6fa>
 8004484:	2f0e      	cmp	r7, #14
 8004486:	f300 8154 	bgt.w	8004732 <_dtoa_r+0x6fa>
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <_dtoa_r+0x580>)
 800448c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004490:	ed93 7b00 	vldr	d7, [r3]
 8004494:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	ed8d 7b00 	vstr	d7, [sp]
 800449c:	f280 80e5 	bge.w	800466a <_dtoa_r+0x632>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f300 80e1 	bgt.w	800466a <_dtoa_r+0x632>
 80044a8:	d10c      	bne.n	80044c4 <_dtoa_r+0x48c>
 80044aa:	4b48      	ldr	r3, [pc, #288]	@ (80045cc <_dtoa_r+0x594>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	ec51 0b17 	vmov	r0, r1, d7
 80044b2:	f7fc f8a9 	bl	8000608 <__aeabi_dmul>
 80044b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044ba:	f7fc fb2b 	bl	8000b14 <__aeabi_dcmpge>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f000 8266 	beq.w	8004990 <_dtoa_r+0x958>
 80044c4:	2400      	movs	r4, #0
 80044c6:	4625      	mov	r5, r4
 80044c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80044ca:	4656      	mov	r6, sl
 80044cc:	ea6f 0803 	mvn.w	r8, r3
 80044d0:	2700      	movs	r7, #0
 80044d2:	4621      	mov	r1, r4
 80044d4:	4648      	mov	r0, r9
 80044d6:	f000 fcbf 	bl	8004e58 <_Bfree>
 80044da:	2d00      	cmp	r5, #0
 80044dc:	f000 80bd 	beq.w	800465a <_dtoa_r+0x622>
 80044e0:	b12f      	cbz	r7, 80044ee <_dtoa_r+0x4b6>
 80044e2:	42af      	cmp	r7, r5
 80044e4:	d003      	beq.n	80044ee <_dtoa_r+0x4b6>
 80044e6:	4639      	mov	r1, r7
 80044e8:	4648      	mov	r0, r9
 80044ea:	f000 fcb5 	bl	8004e58 <_Bfree>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4648      	mov	r0, r9
 80044f2:	f000 fcb1 	bl	8004e58 <_Bfree>
 80044f6:	e0b0      	b.n	800465a <_dtoa_r+0x622>
 80044f8:	07e2      	lsls	r2, r4, #31
 80044fa:	d505      	bpl.n	8004508 <_dtoa_r+0x4d0>
 80044fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004500:	f7fc f882 	bl	8000608 <__aeabi_dmul>
 8004504:	3601      	adds	r6, #1
 8004506:	2301      	movs	r3, #1
 8004508:	1064      	asrs	r4, r4, #1
 800450a:	3508      	adds	r5, #8
 800450c:	e762      	b.n	80043d4 <_dtoa_r+0x39c>
 800450e:	2602      	movs	r6, #2
 8004510:	e765      	b.n	80043de <_dtoa_r+0x3a6>
 8004512:	9c03      	ldr	r4, [sp, #12]
 8004514:	46b8      	mov	r8, r7
 8004516:	e784      	b.n	8004422 <_dtoa_r+0x3ea>
 8004518:	4b27      	ldr	r3, [pc, #156]	@ (80045b8 <_dtoa_r+0x580>)
 800451a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800451c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004524:	4454      	add	r4, sl
 8004526:	2900      	cmp	r1, #0
 8004528:	d054      	beq.n	80045d4 <_dtoa_r+0x59c>
 800452a:	4929      	ldr	r1, [pc, #164]	@ (80045d0 <_dtoa_r+0x598>)
 800452c:	2000      	movs	r0, #0
 800452e:	f7fc f995 	bl	800085c <__aeabi_ddiv>
 8004532:	4633      	mov	r3, r6
 8004534:	462a      	mov	r2, r5
 8004536:	f7fb feaf 	bl	8000298 <__aeabi_dsub>
 800453a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800453e:	4656      	mov	r6, sl
 8004540:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004544:	f7fc fb10 	bl	8000b68 <__aeabi_d2iz>
 8004548:	4605      	mov	r5, r0
 800454a:	f7fb fff3 	bl	8000534 <__aeabi_i2d>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004556:	f7fb fe9f 	bl	8000298 <__aeabi_dsub>
 800455a:	3530      	adds	r5, #48	@ 0x30
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004564:	f806 5b01 	strb.w	r5, [r6], #1
 8004568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800456c:	f7fc fabe 	bl	8000aec <__aeabi_dcmplt>
 8004570:	2800      	cmp	r0, #0
 8004572:	d172      	bne.n	800465a <_dtoa_r+0x622>
 8004574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004578:	4911      	ldr	r1, [pc, #68]	@ (80045c0 <_dtoa_r+0x588>)
 800457a:	2000      	movs	r0, #0
 800457c:	f7fb fe8c 	bl	8000298 <__aeabi_dsub>
 8004580:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004584:	f7fc fab2 	bl	8000aec <__aeabi_dcmplt>
 8004588:	2800      	cmp	r0, #0
 800458a:	f040 80b4 	bne.w	80046f6 <_dtoa_r+0x6be>
 800458e:	42a6      	cmp	r6, r4
 8004590:	f43f af70 	beq.w	8004474 <_dtoa_r+0x43c>
 8004594:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <_dtoa_r+0x58c>)
 800459a:	2200      	movs	r2, #0
 800459c:	f7fc f834 	bl	8000608 <__aeabi_dmul>
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <_dtoa_r+0x58c>)
 80045a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80045a6:	2200      	movs	r2, #0
 80045a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ac:	f7fc f82c 	bl	8000608 <__aeabi_dmul>
 80045b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045b4:	e7c4      	b.n	8004540 <_dtoa_r+0x508>
 80045b6:	bf00      	nop
 80045b8:	08006d70 	.word	0x08006d70
 80045bc:	08006d48 	.word	0x08006d48
 80045c0:	3ff00000 	.word	0x3ff00000
 80045c4:	40240000 	.word	0x40240000
 80045c8:	401c0000 	.word	0x401c0000
 80045cc:	40140000 	.word	0x40140000
 80045d0:	3fe00000 	.word	0x3fe00000
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fc f816 	bl	8000608 <__aeabi_dmul>
 80045dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80045e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80045e2:	4656      	mov	r6, sl
 80045e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045e8:	f7fc fabe 	bl	8000b68 <__aeabi_d2iz>
 80045ec:	4605      	mov	r5, r0
 80045ee:	f7fb ffa1 	bl	8000534 <__aeabi_i2d>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045fa:	f7fb fe4d 	bl	8000298 <__aeabi_dsub>
 80045fe:	3530      	adds	r5, #48	@ 0x30
 8004600:	f806 5b01 	strb.w	r5, [r6], #1
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	42a6      	cmp	r6, r4
 800460a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	d124      	bne.n	800465e <_dtoa_r+0x626>
 8004614:	4baf      	ldr	r3, [pc, #700]	@ (80048d4 <_dtoa_r+0x89c>)
 8004616:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800461a:	f7fb fe3f 	bl	800029c <__adddf3>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004626:	f7fc fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 800462a:	2800      	cmp	r0, #0
 800462c:	d163      	bne.n	80046f6 <_dtoa_r+0x6be>
 800462e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004632:	49a8      	ldr	r1, [pc, #672]	@ (80048d4 <_dtoa_r+0x89c>)
 8004634:	2000      	movs	r0, #0
 8004636:	f7fb fe2f 	bl	8000298 <__aeabi_dsub>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004642:	f7fc fa53 	bl	8000aec <__aeabi_dcmplt>
 8004646:	2800      	cmp	r0, #0
 8004648:	f43f af14 	beq.w	8004474 <_dtoa_r+0x43c>
 800464c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800464e:	1e73      	subs	r3, r6, #1
 8004650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004652:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004656:	2b30      	cmp	r3, #48	@ 0x30
 8004658:	d0f8      	beq.n	800464c <_dtoa_r+0x614>
 800465a:	4647      	mov	r7, r8
 800465c:	e03b      	b.n	80046d6 <_dtoa_r+0x69e>
 800465e:	4b9e      	ldr	r3, [pc, #632]	@ (80048d8 <_dtoa_r+0x8a0>)
 8004660:	f7fb ffd2 	bl	8000608 <__aeabi_dmul>
 8004664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004668:	e7bc      	b.n	80045e4 <_dtoa_r+0x5ac>
 800466a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800466e:	4656      	mov	r6, sl
 8004670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fc f8f0 	bl	800085c <__aeabi_ddiv>
 800467c:	f7fc fa74 	bl	8000b68 <__aeabi_d2iz>
 8004680:	4680      	mov	r8, r0
 8004682:	f7fb ff57 	bl	8000534 <__aeabi_i2d>
 8004686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800468a:	f7fb ffbd 	bl	8000608 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800469a:	f7fb fdfd 	bl	8000298 <__aeabi_dsub>
 800469e:	f806 4b01 	strb.w	r4, [r6], #1
 80046a2:	9d03      	ldr	r5, [sp, #12]
 80046a4:	eba6 040a 	sub.w	r4, r6, sl
 80046a8:	42a5      	cmp	r5, r4
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	d133      	bne.n	8004718 <_dtoa_r+0x6e0>
 80046b0:	f7fb fdf4 	bl	800029c <__adddf3>
 80046b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	f7fc fa34 	bl	8000b28 <__aeabi_dcmpgt>
 80046c0:	b9c0      	cbnz	r0, 80046f4 <_dtoa_r+0x6bc>
 80046c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fc fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80046ce:	b110      	cbz	r0, 80046d6 <_dtoa_r+0x69e>
 80046d0:	f018 0f01 	tst.w	r8, #1
 80046d4:	d10e      	bne.n	80046f4 <_dtoa_r+0x6bc>
 80046d6:	9902      	ldr	r1, [sp, #8]
 80046d8:	4648      	mov	r0, r9
 80046da:	f000 fbbd 	bl	8004e58 <_Bfree>
 80046de:	2300      	movs	r3, #0
 80046e0:	7033      	strb	r3, [r6, #0]
 80046e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80046e4:	3701      	adds	r7, #1
 80046e6:	601f      	str	r7, [r3, #0]
 80046e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 824b 	beq.w	8004b86 <_dtoa_r+0xb4e>
 80046f0:	601e      	str	r6, [r3, #0]
 80046f2:	e248      	b.n	8004b86 <_dtoa_r+0xb4e>
 80046f4:	46b8      	mov	r8, r7
 80046f6:	4633      	mov	r3, r6
 80046f8:	461e      	mov	r6, r3
 80046fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046fe:	2a39      	cmp	r2, #57	@ 0x39
 8004700:	d106      	bne.n	8004710 <_dtoa_r+0x6d8>
 8004702:	459a      	cmp	sl, r3
 8004704:	d1f8      	bne.n	80046f8 <_dtoa_r+0x6c0>
 8004706:	2230      	movs	r2, #48	@ 0x30
 8004708:	f108 0801 	add.w	r8, r8, #1
 800470c:	f88a 2000 	strb.w	r2, [sl]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	3201      	adds	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e7a0      	b.n	800465a <_dtoa_r+0x622>
 8004718:	4b6f      	ldr	r3, [pc, #444]	@ (80048d8 <_dtoa_r+0x8a0>)
 800471a:	2200      	movs	r2, #0
 800471c:	f7fb ff74 	bl	8000608 <__aeabi_dmul>
 8004720:	2200      	movs	r2, #0
 8004722:	2300      	movs	r3, #0
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	f7fc f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800472c:	2800      	cmp	r0, #0
 800472e:	d09f      	beq.n	8004670 <_dtoa_r+0x638>
 8004730:	e7d1      	b.n	80046d6 <_dtoa_r+0x69e>
 8004732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004734:	2a00      	cmp	r2, #0
 8004736:	f000 80ea 	beq.w	800490e <_dtoa_r+0x8d6>
 800473a:	9a07      	ldr	r2, [sp, #28]
 800473c:	2a01      	cmp	r2, #1
 800473e:	f300 80cd 	bgt.w	80048dc <_dtoa_r+0x8a4>
 8004742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004744:	2a00      	cmp	r2, #0
 8004746:	f000 80c1 	beq.w	80048cc <_dtoa_r+0x894>
 800474a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800474e:	9c08      	ldr	r4, [sp, #32]
 8004750:	9e00      	ldr	r6, [sp, #0]
 8004752:	9a00      	ldr	r2, [sp, #0]
 8004754:	441a      	add	r2, r3
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	9a06      	ldr	r2, [sp, #24]
 800475a:	2101      	movs	r1, #1
 800475c:	441a      	add	r2, r3
 800475e:	4648      	mov	r0, r9
 8004760:	9206      	str	r2, [sp, #24]
 8004762:	f000 fc2d 	bl	8004fc0 <__i2b>
 8004766:	4605      	mov	r5, r0
 8004768:	b166      	cbz	r6, 8004784 <_dtoa_r+0x74c>
 800476a:	9b06      	ldr	r3, [sp, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	dd09      	ble.n	8004784 <_dtoa_r+0x74c>
 8004770:	42b3      	cmp	r3, r6
 8004772:	9a00      	ldr	r2, [sp, #0]
 8004774:	bfa8      	it	ge
 8004776:	4633      	movge	r3, r6
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	9200      	str	r2, [sp, #0]
 800477c:	9a06      	ldr	r2, [sp, #24]
 800477e:	1af6      	subs	r6, r6, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	9306      	str	r3, [sp, #24]
 8004784:	9b08      	ldr	r3, [sp, #32]
 8004786:	b30b      	cbz	r3, 80047cc <_dtoa_r+0x794>
 8004788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80c6 	beq.w	800491c <_dtoa_r+0x8e4>
 8004790:	2c00      	cmp	r4, #0
 8004792:	f000 80c0 	beq.w	8004916 <_dtoa_r+0x8de>
 8004796:	4629      	mov	r1, r5
 8004798:	4622      	mov	r2, r4
 800479a:	4648      	mov	r0, r9
 800479c:	f000 fcc8 	bl	8005130 <__pow5mult>
 80047a0:	9a02      	ldr	r2, [sp, #8]
 80047a2:	4601      	mov	r1, r0
 80047a4:	4605      	mov	r5, r0
 80047a6:	4648      	mov	r0, r9
 80047a8:	f000 fc20 	bl	8004fec <__multiply>
 80047ac:	9902      	ldr	r1, [sp, #8]
 80047ae:	4680      	mov	r8, r0
 80047b0:	4648      	mov	r0, r9
 80047b2:	f000 fb51 	bl	8004e58 <_Bfree>
 80047b6:	9b08      	ldr	r3, [sp, #32]
 80047b8:	1b1b      	subs	r3, r3, r4
 80047ba:	9308      	str	r3, [sp, #32]
 80047bc:	f000 80b1 	beq.w	8004922 <_dtoa_r+0x8ea>
 80047c0:	9a08      	ldr	r2, [sp, #32]
 80047c2:	4641      	mov	r1, r8
 80047c4:	4648      	mov	r0, r9
 80047c6:	f000 fcb3 	bl	8005130 <__pow5mult>
 80047ca:	9002      	str	r0, [sp, #8]
 80047cc:	2101      	movs	r1, #1
 80047ce:	4648      	mov	r0, r9
 80047d0:	f000 fbf6 	bl	8004fc0 <__i2b>
 80047d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047d6:	4604      	mov	r4, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 81d8 	beq.w	8004b8e <_dtoa_r+0xb56>
 80047de:	461a      	mov	r2, r3
 80047e0:	4601      	mov	r1, r0
 80047e2:	4648      	mov	r0, r9
 80047e4:	f000 fca4 	bl	8005130 <__pow5mult>
 80047e8:	9b07      	ldr	r3, [sp, #28]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	4604      	mov	r4, r0
 80047ee:	f300 809f 	bgt.w	8004930 <_dtoa_r+0x8f8>
 80047f2:	9b04      	ldr	r3, [sp, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 8097 	bne.w	8004928 <_dtoa_r+0x8f0>
 80047fa:	9b05      	ldr	r3, [sp, #20]
 80047fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004800:	2b00      	cmp	r3, #0
 8004802:	f040 8093 	bne.w	800492c <_dtoa_r+0x8f4>
 8004806:	9b05      	ldr	r3, [sp, #20]
 8004808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	051b      	lsls	r3, r3, #20
 8004810:	b133      	cbz	r3, 8004820 <_dtoa_r+0x7e8>
 8004812:	9b00      	ldr	r3, [sp, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	9b06      	ldr	r3, [sp, #24]
 800481a:	3301      	adds	r3, #1
 800481c:	9306      	str	r3, [sp, #24]
 800481e:	2301      	movs	r3, #1
 8004820:	9308      	str	r3, [sp, #32]
 8004822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 81b8 	beq.w	8004b9a <_dtoa_r+0xb62>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004830:	6918      	ldr	r0, [r3, #16]
 8004832:	f000 fb79 	bl	8004f28 <__hi0bits>
 8004836:	f1c0 0020 	rsb	r0, r0, #32
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	4418      	add	r0, r3
 800483e:	f010 001f 	ands.w	r0, r0, #31
 8004842:	f000 8082 	beq.w	800494a <_dtoa_r+0x912>
 8004846:	f1c0 0320 	rsb	r3, r0, #32
 800484a:	2b04      	cmp	r3, #4
 800484c:	dd73      	ble.n	8004936 <_dtoa_r+0x8fe>
 800484e:	9b00      	ldr	r3, [sp, #0]
 8004850:	f1c0 001c 	rsb	r0, r0, #28
 8004854:	4403      	add	r3, r0
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	9b06      	ldr	r3, [sp, #24]
 800485a:	4403      	add	r3, r0
 800485c:	4406      	add	r6, r0
 800485e:	9306      	str	r3, [sp, #24]
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dd05      	ble.n	8004872 <_dtoa_r+0x83a>
 8004866:	9902      	ldr	r1, [sp, #8]
 8004868:	461a      	mov	r2, r3
 800486a:	4648      	mov	r0, r9
 800486c:	f000 fcba 	bl	80051e4 <__lshift>
 8004870:	9002      	str	r0, [sp, #8]
 8004872:	9b06      	ldr	r3, [sp, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	dd05      	ble.n	8004884 <_dtoa_r+0x84c>
 8004878:	4621      	mov	r1, r4
 800487a:	461a      	mov	r2, r3
 800487c:	4648      	mov	r0, r9
 800487e:	f000 fcb1 	bl	80051e4 <__lshift>
 8004882:	4604      	mov	r4, r0
 8004884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d061      	beq.n	800494e <_dtoa_r+0x916>
 800488a:	9802      	ldr	r0, [sp, #8]
 800488c:	4621      	mov	r1, r4
 800488e:	f000 fd15 	bl	80052bc <__mcmp>
 8004892:	2800      	cmp	r0, #0
 8004894:	da5b      	bge.n	800494e <_dtoa_r+0x916>
 8004896:	2300      	movs	r3, #0
 8004898:	9902      	ldr	r1, [sp, #8]
 800489a:	220a      	movs	r2, #10
 800489c:	4648      	mov	r0, r9
 800489e:	f000 fafd 	bl	8004e9c <__multadd>
 80048a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8177 	beq.w	8004b9e <_dtoa_r+0xb66>
 80048b0:	4629      	mov	r1, r5
 80048b2:	2300      	movs	r3, #0
 80048b4:	220a      	movs	r2, #10
 80048b6:	4648      	mov	r0, r9
 80048b8:	f000 faf0 	bl	8004e9c <__multadd>
 80048bc:	f1bb 0f00 	cmp.w	fp, #0
 80048c0:	4605      	mov	r5, r0
 80048c2:	dc6f      	bgt.n	80049a4 <_dtoa_r+0x96c>
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	dc49      	bgt.n	800495e <_dtoa_r+0x926>
 80048ca:	e06b      	b.n	80049a4 <_dtoa_r+0x96c>
 80048cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80048d2:	e73c      	b.n	800474e <_dtoa_r+0x716>
 80048d4:	3fe00000 	.word	0x3fe00000
 80048d8:	40240000 	.word	0x40240000
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	1e5c      	subs	r4, r3, #1
 80048e0:	9b08      	ldr	r3, [sp, #32]
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	db09      	blt.n	80048fa <_dtoa_r+0x8c2>
 80048e6:	1b1c      	subs	r4, r3, r4
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f6bf af30 	bge.w	8004750 <_dtoa_r+0x718>
 80048f0:	9b00      	ldr	r3, [sp, #0]
 80048f2:	9a03      	ldr	r2, [sp, #12]
 80048f4:	1a9e      	subs	r6, r3, r2
 80048f6:	2300      	movs	r3, #0
 80048f8:	e72b      	b.n	8004752 <_dtoa_r+0x71a>
 80048fa:	9b08      	ldr	r3, [sp, #32]
 80048fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80048fe:	9408      	str	r4, [sp, #32]
 8004900:	1ae3      	subs	r3, r4, r3
 8004902:	441a      	add	r2, r3
 8004904:	9e00      	ldr	r6, [sp, #0]
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	920d      	str	r2, [sp, #52]	@ 0x34
 800490a:	2400      	movs	r4, #0
 800490c:	e721      	b.n	8004752 <_dtoa_r+0x71a>
 800490e:	9c08      	ldr	r4, [sp, #32]
 8004910:	9e00      	ldr	r6, [sp, #0]
 8004912:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004914:	e728      	b.n	8004768 <_dtoa_r+0x730>
 8004916:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800491a:	e751      	b.n	80047c0 <_dtoa_r+0x788>
 800491c:	9a08      	ldr	r2, [sp, #32]
 800491e:	9902      	ldr	r1, [sp, #8]
 8004920:	e750      	b.n	80047c4 <_dtoa_r+0x78c>
 8004922:	f8cd 8008 	str.w	r8, [sp, #8]
 8004926:	e751      	b.n	80047cc <_dtoa_r+0x794>
 8004928:	2300      	movs	r3, #0
 800492a:	e779      	b.n	8004820 <_dtoa_r+0x7e8>
 800492c:	9b04      	ldr	r3, [sp, #16]
 800492e:	e777      	b.n	8004820 <_dtoa_r+0x7e8>
 8004930:	2300      	movs	r3, #0
 8004932:	9308      	str	r3, [sp, #32]
 8004934:	e779      	b.n	800482a <_dtoa_r+0x7f2>
 8004936:	d093      	beq.n	8004860 <_dtoa_r+0x828>
 8004938:	9a00      	ldr	r2, [sp, #0]
 800493a:	331c      	adds	r3, #28
 800493c:	441a      	add	r2, r3
 800493e:	9200      	str	r2, [sp, #0]
 8004940:	9a06      	ldr	r2, [sp, #24]
 8004942:	441a      	add	r2, r3
 8004944:	441e      	add	r6, r3
 8004946:	9206      	str	r2, [sp, #24]
 8004948:	e78a      	b.n	8004860 <_dtoa_r+0x828>
 800494a:	4603      	mov	r3, r0
 800494c:	e7f4      	b.n	8004938 <_dtoa_r+0x900>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	46b8      	mov	r8, r7
 8004954:	dc20      	bgt.n	8004998 <_dtoa_r+0x960>
 8004956:	469b      	mov	fp, r3
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	2b02      	cmp	r3, #2
 800495c:	dd1e      	ble.n	800499c <_dtoa_r+0x964>
 800495e:	f1bb 0f00 	cmp.w	fp, #0
 8004962:	f47f adb1 	bne.w	80044c8 <_dtoa_r+0x490>
 8004966:	4621      	mov	r1, r4
 8004968:	465b      	mov	r3, fp
 800496a:	2205      	movs	r2, #5
 800496c:	4648      	mov	r0, r9
 800496e:	f000 fa95 	bl	8004e9c <__multadd>
 8004972:	4601      	mov	r1, r0
 8004974:	4604      	mov	r4, r0
 8004976:	9802      	ldr	r0, [sp, #8]
 8004978:	f000 fca0 	bl	80052bc <__mcmp>
 800497c:	2800      	cmp	r0, #0
 800497e:	f77f ada3 	ble.w	80044c8 <_dtoa_r+0x490>
 8004982:	4656      	mov	r6, sl
 8004984:	2331      	movs	r3, #49	@ 0x31
 8004986:	f806 3b01 	strb.w	r3, [r6], #1
 800498a:	f108 0801 	add.w	r8, r8, #1
 800498e:	e59f      	b.n	80044d0 <_dtoa_r+0x498>
 8004990:	9c03      	ldr	r4, [sp, #12]
 8004992:	46b8      	mov	r8, r7
 8004994:	4625      	mov	r5, r4
 8004996:	e7f4      	b.n	8004982 <_dtoa_r+0x94a>
 8004998:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800499c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8101 	beq.w	8004ba6 <_dtoa_r+0xb6e>
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	dd05      	ble.n	80049b4 <_dtoa_r+0x97c>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4632      	mov	r2, r6
 80049ac:	4648      	mov	r0, r9
 80049ae:	f000 fc19 	bl	80051e4 <__lshift>
 80049b2:	4605      	mov	r5, r0
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d05c      	beq.n	8004a74 <_dtoa_r+0xa3c>
 80049ba:	6869      	ldr	r1, [r5, #4]
 80049bc:	4648      	mov	r0, r9
 80049be:	f000 fa0b 	bl	8004dd8 <_Balloc>
 80049c2:	4606      	mov	r6, r0
 80049c4:	b928      	cbnz	r0, 80049d2 <_dtoa_r+0x99a>
 80049c6:	4b82      	ldr	r3, [pc, #520]	@ (8004bd0 <_dtoa_r+0xb98>)
 80049c8:	4602      	mov	r2, r0
 80049ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80049ce:	f7ff bb4a 	b.w	8004066 <_dtoa_r+0x2e>
 80049d2:	692a      	ldr	r2, [r5, #16]
 80049d4:	3202      	adds	r2, #2
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	f105 010c 	add.w	r1, r5, #12
 80049dc:	300c      	adds	r0, #12
 80049de:	f001 f807 	bl	80059f0 <memcpy>
 80049e2:	2201      	movs	r2, #1
 80049e4:	4631      	mov	r1, r6
 80049e6:	4648      	mov	r0, r9
 80049e8:	f000 fbfc 	bl	80051e4 <__lshift>
 80049ec:	f10a 0301 	add.w	r3, sl, #1
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	eb0a 030b 	add.w	r3, sl, fp
 80049f6:	9308      	str	r3, [sp, #32]
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	462f      	mov	r7, r5
 8004a00:	9306      	str	r3, [sp, #24]
 8004a02:	4605      	mov	r5, r0
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	9802      	ldr	r0, [sp, #8]
 8004a08:	4621      	mov	r1, r4
 8004a0a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004a0e:	f7ff fa8a 	bl	8003f26 <quorem>
 8004a12:	4603      	mov	r3, r0
 8004a14:	3330      	adds	r3, #48	@ 0x30
 8004a16:	9003      	str	r0, [sp, #12]
 8004a18:	4639      	mov	r1, r7
 8004a1a:	9802      	ldr	r0, [sp, #8]
 8004a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a1e:	f000 fc4d 	bl	80052bc <__mcmp>
 8004a22:	462a      	mov	r2, r5
 8004a24:	9004      	str	r0, [sp, #16]
 8004a26:	4621      	mov	r1, r4
 8004a28:	4648      	mov	r0, r9
 8004a2a:	f000 fc63 	bl	80052f4 <__mdiff>
 8004a2e:	68c2      	ldr	r2, [r0, #12]
 8004a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a32:	4606      	mov	r6, r0
 8004a34:	bb02      	cbnz	r2, 8004a78 <_dtoa_r+0xa40>
 8004a36:	4601      	mov	r1, r0
 8004a38:	9802      	ldr	r0, [sp, #8]
 8004a3a:	f000 fc3f 	bl	80052bc <__mcmp>
 8004a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a40:	4602      	mov	r2, r0
 8004a42:	4631      	mov	r1, r6
 8004a44:	4648      	mov	r0, r9
 8004a46:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a4a:	f000 fa05 	bl	8004e58 <_Bfree>
 8004a4e:	9b07      	ldr	r3, [sp, #28]
 8004a50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a52:	9e00      	ldr	r6, [sp, #0]
 8004a54:	ea42 0103 	orr.w	r1, r2, r3
 8004a58:	9b06      	ldr	r3, [sp, #24]
 8004a5a:	4319      	orrs	r1, r3
 8004a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5e:	d10d      	bne.n	8004a7c <_dtoa_r+0xa44>
 8004a60:	2b39      	cmp	r3, #57	@ 0x39
 8004a62:	d027      	beq.n	8004ab4 <_dtoa_r+0xa7c>
 8004a64:	9a04      	ldr	r2, [sp, #16]
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	dd01      	ble.n	8004a6e <_dtoa_r+0xa36>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	3331      	adds	r3, #49	@ 0x31
 8004a6e:	f88b 3000 	strb.w	r3, [fp]
 8004a72:	e52e      	b.n	80044d2 <_dtoa_r+0x49a>
 8004a74:	4628      	mov	r0, r5
 8004a76:	e7b9      	b.n	80049ec <_dtoa_r+0x9b4>
 8004a78:	2201      	movs	r2, #1
 8004a7a:	e7e2      	b.n	8004a42 <_dtoa_r+0xa0a>
 8004a7c:	9904      	ldr	r1, [sp, #16]
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	db04      	blt.n	8004a8c <_dtoa_r+0xa54>
 8004a82:	9807      	ldr	r0, [sp, #28]
 8004a84:	4301      	orrs	r1, r0
 8004a86:	9806      	ldr	r0, [sp, #24]
 8004a88:	4301      	orrs	r1, r0
 8004a8a:	d120      	bne.n	8004ace <_dtoa_r+0xa96>
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	ddee      	ble.n	8004a6e <_dtoa_r+0xa36>
 8004a90:	9902      	ldr	r1, [sp, #8]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2201      	movs	r2, #1
 8004a96:	4648      	mov	r0, r9
 8004a98:	f000 fba4 	bl	80051e4 <__lshift>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	9002      	str	r0, [sp, #8]
 8004aa0:	f000 fc0c 	bl	80052bc <__mcmp>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	9b00      	ldr	r3, [sp, #0]
 8004aa8:	dc02      	bgt.n	8004ab0 <_dtoa_r+0xa78>
 8004aaa:	d1e0      	bne.n	8004a6e <_dtoa_r+0xa36>
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	d5de      	bpl.n	8004a6e <_dtoa_r+0xa36>
 8004ab0:	2b39      	cmp	r3, #57	@ 0x39
 8004ab2:	d1da      	bne.n	8004a6a <_dtoa_r+0xa32>
 8004ab4:	2339      	movs	r3, #57	@ 0x39
 8004ab6:	f88b 3000 	strb.w	r3, [fp]
 8004aba:	4633      	mov	r3, r6
 8004abc:	461e      	mov	r6, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ac4:	2a39      	cmp	r2, #57	@ 0x39
 8004ac6:	d04e      	beq.n	8004b66 <_dtoa_r+0xb2e>
 8004ac8:	3201      	adds	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e501      	b.n	80044d2 <_dtoa_r+0x49a>
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	dd03      	ble.n	8004ada <_dtoa_r+0xaa2>
 8004ad2:	2b39      	cmp	r3, #57	@ 0x39
 8004ad4:	d0ee      	beq.n	8004ab4 <_dtoa_r+0xa7c>
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	e7c9      	b.n	8004a6e <_dtoa_r+0xa36>
 8004ada:	9a00      	ldr	r2, [sp, #0]
 8004adc:	9908      	ldr	r1, [sp, #32]
 8004ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ae2:	428a      	cmp	r2, r1
 8004ae4:	d028      	beq.n	8004b38 <_dtoa_r+0xb00>
 8004ae6:	9902      	ldr	r1, [sp, #8]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	220a      	movs	r2, #10
 8004aec:	4648      	mov	r0, r9
 8004aee:	f000 f9d5 	bl	8004e9c <__multadd>
 8004af2:	42af      	cmp	r7, r5
 8004af4:	9002      	str	r0, [sp, #8]
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	f04f 020a 	mov.w	r2, #10
 8004afe:	4639      	mov	r1, r7
 8004b00:	4648      	mov	r0, r9
 8004b02:	d107      	bne.n	8004b14 <_dtoa_r+0xadc>
 8004b04:	f000 f9ca 	bl	8004e9c <__multadd>
 8004b08:	4607      	mov	r7, r0
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	9b00      	ldr	r3, [sp, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	e777      	b.n	8004a04 <_dtoa_r+0x9cc>
 8004b14:	f000 f9c2 	bl	8004e9c <__multadd>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	220a      	movs	r2, #10
 8004b20:	4648      	mov	r0, r9
 8004b22:	f000 f9bb 	bl	8004e9c <__multadd>
 8004b26:	4605      	mov	r5, r0
 8004b28:	e7f0      	b.n	8004b0c <_dtoa_r+0xad4>
 8004b2a:	f1bb 0f00 	cmp.w	fp, #0
 8004b2e:	bfcc      	ite	gt
 8004b30:	465e      	movgt	r6, fp
 8004b32:	2601      	movle	r6, #1
 8004b34:	4456      	add	r6, sl
 8004b36:	2700      	movs	r7, #0
 8004b38:	9902      	ldr	r1, [sp, #8]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4648      	mov	r0, r9
 8004b40:	f000 fb50 	bl	80051e4 <__lshift>
 8004b44:	4621      	mov	r1, r4
 8004b46:	9002      	str	r0, [sp, #8]
 8004b48:	f000 fbb8 	bl	80052bc <__mcmp>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	dcb4      	bgt.n	8004aba <_dtoa_r+0xa82>
 8004b50:	d102      	bne.n	8004b58 <_dtoa_r+0xb20>
 8004b52:	9b00      	ldr	r3, [sp, #0]
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d4b0      	bmi.n	8004aba <_dtoa_r+0xa82>
 8004b58:	4633      	mov	r3, r6
 8004b5a:	461e      	mov	r6, r3
 8004b5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b60:	2a30      	cmp	r2, #48	@ 0x30
 8004b62:	d0fa      	beq.n	8004b5a <_dtoa_r+0xb22>
 8004b64:	e4b5      	b.n	80044d2 <_dtoa_r+0x49a>
 8004b66:	459a      	cmp	sl, r3
 8004b68:	d1a8      	bne.n	8004abc <_dtoa_r+0xa84>
 8004b6a:	2331      	movs	r3, #49	@ 0x31
 8004b6c:	f108 0801 	add.w	r8, r8, #1
 8004b70:	f88a 3000 	strb.w	r3, [sl]
 8004b74:	e4ad      	b.n	80044d2 <_dtoa_r+0x49a>
 8004b76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004bd4 <_dtoa_r+0xb9c>
 8004b7c:	b11b      	cbz	r3, 8004b86 <_dtoa_r+0xb4e>
 8004b7e:	f10a 0308 	add.w	r3, sl, #8
 8004b82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4650      	mov	r0, sl
 8004b88:	b017      	add	sp, #92	@ 0x5c
 8004b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8e:	9b07      	ldr	r3, [sp, #28]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f77f ae2e 	ble.w	80047f2 <_dtoa_r+0x7ba>
 8004b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b98:	9308      	str	r3, [sp, #32]
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	e64d      	b.n	800483a <_dtoa_r+0x802>
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	f77f aed9 	ble.w	8004958 <_dtoa_r+0x920>
 8004ba6:	4656      	mov	r6, sl
 8004ba8:	9802      	ldr	r0, [sp, #8]
 8004baa:	4621      	mov	r1, r4
 8004bac:	f7ff f9bb 	bl	8003f26 <quorem>
 8004bb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8004bb8:	eba6 020a 	sub.w	r2, r6, sl
 8004bbc:	4593      	cmp	fp, r2
 8004bbe:	ddb4      	ble.n	8004b2a <_dtoa_r+0xaf2>
 8004bc0:	9902      	ldr	r1, [sp, #8]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	220a      	movs	r2, #10
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f000 f968 	bl	8004e9c <__multadd>
 8004bcc:	9002      	str	r0, [sp, #8]
 8004bce:	e7eb      	b.n	8004ba8 <_dtoa_r+0xb70>
 8004bd0:	08006c76 	.word	0x08006c76
 8004bd4:	08006bfa 	.word	0x08006bfa

08004bd8 <_free_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4605      	mov	r5, r0
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d041      	beq.n	8004c64 <_free_r+0x8c>
 8004be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be4:	1f0c      	subs	r4, r1, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfb8      	it	lt
 8004bea:	18e4      	addlt	r4, r4, r3
 8004bec:	f000 f8e8 	bl	8004dc0 <__malloc_lock>
 8004bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <_free_r+0x90>)
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	b933      	cbnz	r3, 8004c04 <_free_r+0x2c>
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c00:	f000 b8e4 	b.w	8004dcc <__malloc_unlock>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d908      	bls.n	8004c1a <_free_r+0x42>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	1821      	adds	r1, r4, r0
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1809      	addeq	r1, r1, r0
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	e7ed      	b.n	8004bf6 <_free_r+0x1e>
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b10b      	cbz	r3, 8004c24 <_free_r+0x4c>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d9fa      	bls.n	8004c1a <_free_r+0x42>
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	1850      	adds	r0, r2, r1
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d10b      	bne.n	8004c44 <_free_r+0x6c>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	4401      	add	r1, r0
 8004c30:	1850      	adds	r0, r2, r1
 8004c32:	4283      	cmp	r3, r0
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	d1e0      	bne.n	8004bfa <_free_r+0x22>
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	6053      	str	r3, [r2, #4]
 8004c3e:	4408      	add	r0, r1
 8004c40:	6010      	str	r0, [r2, #0]
 8004c42:	e7da      	b.n	8004bfa <_free_r+0x22>
 8004c44:	d902      	bls.n	8004c4c <_free_r+0x74>
 8004c46:	230c      	movs	r3, #12
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	e7d6      	b.n	8004bfa <_free_r+0x22>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	1821      	adds	r1, r4, r0
 8004c50:	428b      	cmp	r3, r1
 8004c52:	bf04      	itt	eq
 8004c54:	6819      	ldreq	r1, [r3, #0]
 8004c56:	685b      	ldreq	r3, [r3, #4]
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	bf04      	itt	eq
 8004c5c:	1809      	addeq	r1, r1, r0
 8004c5e:	6021      	streq	r1, [r4, #0]
 8004c60:	6054      	str	r4, [r2, #4]
 8004c62:	e7ca      	b.n	8004bfa <_free_r+0x22>
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	2000043c 	.word	0x2000043c

08004c6c <malloc>:
 8004c6c:	4b02      	ldr	r3, [pc, #8]	@ (8004c78 <malloc+0xc>)
 8004c6e:	4601      	mov	r1, r0
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f000 b825 	b.w	8004cc0 <_malloc_r>
 8004c76:	bf00      	nop
 8004c78:	20000020 	.word	0x20000020

08004c7c <sbrk_aligned>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8004cbc <sbrk_aligned+0x40>)
 8004c80:	460c      	mov	r4, r1
 8004c82:	6831      	ldr	r1, [r6, #0]
 8004c84:	4605      	mov	r5, r0
 8004c86:	b911      	cbnz	r1, 8004c8e <sbrk_aligned+0x12>
 8004c88:	f000 fea2 	bl	80059d0 <_sbrk_r>
 8004c8c:	6030      	str	r0, [r6, #0]
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fe9d 	bl	80059d0 <_sbrk_r>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d103      	bne.n	8004ca2 <sbrk_aligned+0x26>
 8004c9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	1cc4      	adds	r4, r0, #3
 8004ca4:	f024 0403 	bic.w	r4, r4, #3
 8004ca8:	42a0      	cmp	r0, r4
 8004caa:	d0f8      	beq.n	8004c9e <sbrk_aligned+0x22>
 8004cac:	1a21      	subs	r1, r4, r0
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 fe8e 	bl	80059d0 <_sbrk_r>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d1f2      	bne.n	8004c9e <sbrk_aligned+0x22>
 8004cb8:	e7ef      	b.n	8004c9a <sbrk_aligned+0x1e>
 8004cba:	bf00      	nop
 8004cbc:	20000438 	.word	0x20000438

08004cc0 <_malloc_r>:
 8004cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	1ccd      	adds	r5, r1, #3
 8004cc6:	f025 0503 	bic.w	r5, r5, #3
 8004cca:	3508      	adds	r5, #8
 8004ccc:	2d0c      	cmp	r5, #12
 8004cce:	bf38      	it	cc
 8004cd0:	250c      	movcc	r5, #12
 8004cd2:	2d00      	cmp	r5, #0
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	db01      	blt.n	8004cdc <_malloc_r+0x1c>
 8004cd8:	42a9      	cmp	r1, r5
 8004cda:	d904      	bls.n	8004ce6 <_malloc_r+0x26>
 8004cdc:	230c      	movs	r3, #12
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dbc <_malloc_r+0xfc>
 8004cea:	f000 f869 	bl	8004dc0 <__malloc_lock>
 8004cee:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf2:	461c      	mov	r4, r3
 8004cf4:	bb44      	cbnz	r4, 8004d48 <_malloc_r+0x88>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7ff ffbf 	bl	8004c7c <sbrk_aligned>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	4604      	mov	r4, r0
 8004d02:	d158      	bne.n	8004db6 <_malloc_r+0xf6>
 8004d04:	f8d8 4000 	ldr.w	r4, [r8]
 8004d08:	4627      	mov	r7, r4
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	d143      	bne.n	8004d96 <_malloc_r+0xd6>
 8004d0e:	2c00      	cmp	r4, #0
 8004d10:	d04b      	beq.n	8004daa <_malloc_r+0xea>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	4639      	mov	r1, r7
 8004d16:	4630      	mov	r0, r6
 8004d18:	eb04 0903 	add.w	r9, r4, r3
 8004d1c:	f000 fe58 	bl	80059d0 <_sbrk_r>
 8004d20:	4581      	cmp	r9, r0
 8004d22:	d142      	bne.n	8004daa <_malloc_r+0xea>
 8004d24:	6821      	ldr	r1, [r4, #0]
 8004d26:	1a6d      	subs	r5, r5, r1
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ffa6 	bl	8004c7c <sbrk_aligned>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d03a      	beq.n	8004daa <_malloc_r+0xea>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	442b      	add	r3, r5
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	bb62      	cbnz	r2, 8004d9c <_malloc_r+0xdc>
 8004d42:	f8c8 7000 	str.w	r7, [r8]
 8004d46:	e00f      	b.n	8004d68 <_malloc_r+0xa8>
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	1b52      	subs	r2, r2, r5
 8004d4c:	d420      	bmi.n	8004d90 <_malloc_r+0xd0>
 8004d4e:	2a0b      	cmp	r2, #11
 8004d50:	d917      	bls.n	8004d82 <_malloc_r+0xc2>
 8004d52:	1961      	adds	r1, r4, r5
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	6025      	str	r5, [r4, #0]
 8004d58:	bf18      	it	ne
 8004d5a:	6059      	strne	r1, [r3, #4]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	bf08      	it	eq
 8004d60:	f8c8 1000 	streq.w	r1, [r8]
 8004d64:	5162      	str	r2, [r4, r5]
 8004d66:	604b      	str	r3, [r1, #4]
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f82f 	bl	8004dcc <__malloc_unlock>
 8004d6e:	f104 000b 	add.w	r0, r4, #11
 8004d72:	1d23      	adds	r3, r4, #4
 8004d74:	f020 0007 	bic.w	r0, r0, #7
 8004d78:	1ac2      	subs	r2, r0, r3
 8004d7a:	bf1c      	itt	ne
 8004d7c:	1a1b      	subne	r3, r3, r0
 8004d7e:	50a3      	strne	r3, [r4, r2]
 8004d80:	e7af      	b.n	8004ce2 <_malloc_r+0x22>
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	bf0c      	ite	eq
 8004d88:	f8c8 2000 	streq.w	r2, [r8]
 8004d8c:	605a      	strne	r2, [r3, #4]
 8004d8e:	e7eb      	b.n	8004d68 <_malloc_r+0xa8>
 8004d90:	4623      	mov	r3, r4
 8004d92:	6864      	ldr	r4, [r4, #4]
 8004d94:	e7ae      	b.n	8004cf4 <_malloc_r+0x34>
 8004d96:	463c      	mov	r4, r7
 8004d98:	687f      	ldr	r7, [r7, #4]
 8004d9a:	e7b6      	b.n	8004d0a <_malloc_r+0x4a>
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	d1fb      	bne.n	8004d9c <_malloc_r+0xdc>
 8004da4:	2300      	movs	r3, #0
 8004da6:	6053      	str	r3, [r2, #4]
 8004da8:	e7de      	b.n	8004d68 <_malloc_r+0xa8>
 8004daa:	230c      	movs	r3, #12
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f80c 	bl	8004dcc <__malloc_unlock>
 8004db4:	e794      	b.n	8004ce0 <_malloc_r+0x20>
 8004db6:	6005      	str	r5, [r0, #0]
 8004db8:	e7d6      	b.n	8004d68 <_malloc_r+0xa8>
 8004dba:	bf00      	nop
 8004dbc:	2000043c 	.word	0x2000043c

08004dc0 <__malloc_lock>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	@ (8004dc8 <__malloc_lock+0x8>)
 8004dc2:	f7ff b8ae 	b.w	8003f22 <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	20000434 	.word	0x20000434

08004dcc <__malloc_unlock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	@ (8004dd4 <__malloc_unlock+0x8>)
 8004dce:	f7ff b8a9 	b.w	8003f24 <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000434 	.word	0x20000434

08004dd8 <_Balloc>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	69c6      	ldr	r6, [r0, #28]
 8004ddc:	4604      	mov	r4, r0
 8004dde:	460d      	mov	r5, r1
 8004de0:	b976      	cbnz	r6, 8004e00 <_Balloc+0x28>
 8004de2:	2010      	movs	r0, #16
 8004de4:	f7ff ff42 	bl	8004c6c <malloc>
 8004de8:	4602      	mov	r2, r0
 8004dea:	61e0      	str	r0, [r4, #28]
 8004dec:	b920      	cbnz	r0, 8004df8 <_Balloc+0x20>
 8004dee:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <_Balloc+0x78>)
 8004df0:	4818      	ldr	r0, [pc, #96]	@ (8004e54 <_Balloc+0x7c>)
 8004df2:	216b      	movs	r1, #107	@ 0x6b
 8004df4:	f000 fe0a 	bl	8005a0c <__assert_func>
 8004df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dfc:	6006      	str	r6, [r0, #0]
 8004dfe:	60c6      	str	r6, [r0, #12]
 8004e00:	69e6      	ldr	r6, [r4, #28]
 8004e02:	68f3      	ldr	r3, [r6, #12]
 8004e04:	b183      	cbz	r3, 8004e28 <_Balloc+0x50>
 8004e06:	69e3      	ldr	r3, [r4, #28]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e0e:	b9b8      	cbnz	r0, 8004e40 <_Balloc+0x68>
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f605 	lsl.w	r6, r1, r5
 8004e16:	1d72      	adds	r2, r6, #5
 8004e18:	0092      	lsls	r2, r2, #2
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fe14 	bl	8005a48 <_calloc_r>
 8004e20:	b160      	cbz	r0, 8004e3c <_Balloc+0x64>
 8004e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e26:	e00e      	b.n	8004e46 <_Balloc+0x6e>
 8004e28:	2221      	movs	r2, #33	@ 0x21
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 fe0b 	bl	8005a48 <_calloc_r>
 8004e32:	69e3      	ldr	r3, [r4, #28]
 8004e34:	60f0      	str	r0, [r6, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e4      	bne.n	8004e06 <_Balloc+0x2e>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	6802      	ldr	r2, [r0, #0]
 8004e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e46:	2300      	movs	r3, #0
 8004e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e4c:	e7f7      	b.n	8004e3e <_Balloc+0x66>
 8004e4e:	bf00      	nop
 8004e50:	08006c07 	.word	0x08006c07
 8004e54:	08006c87 	.word	0x08006c87

08004e58 <_Bfree>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	69c6      	ldr	r6, [r0, #28]
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	b976      	cbnz	r6, 8004e80 <_Bfree+0x28>
 8004e62:	2010      	movs	r0, #16
 8004e64:	f7ff ff02 	bl	8004c6c <malloc>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	61e8      	str	r0, [r5, #28]
 8004e6c:	b920      	cbnz	r0, 8004e78 <_Bfree+0x20>
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <_Bfree+0x3c>)
 8004e70:	4809      	ldr	r0, [pc, #36]	@ (8004e98 <_Bfree+0x40>)
 8004e72:	218f      	movs	r1, #143	@ 0x8f
 8004e74:	f000 fdca 	bl	8005a0c <__assert_func>
 8004e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e7c:	6006      	str	r6, [r0, #0]
 8004e7e:	60c6      	str	r6, [r0, #12]
 8004e80:	b13c      	cbz	r4, 8004e92 <_Bfree+0x3a>
 8004e82:	69eb      	ldr	r3, [r5, #28]
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e8c:	6021      	str	r1, [r4, #0]
 8004e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	08006c07 	.word	0x08006c07
 8004e98:	08006c87 	.word	0x08006c87

08004e9c <__multadd>:
 8004e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	690d      	ldr	r5, [r1, #16]
 8004ea2:	4607      	mov	r7, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	461e      	mov	r6, r3
 8004ea8:	f101 0c14 	add.w	ip, r1, #20
 8004eac:	2000      	movs	r0, #0
 8004eae:	f8dc 3000 	ldr.w	r3, [ip]
 8004eb2:	b299      	uxth	r1, r3
 8004eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8004eb8:	0c1e      	lsrs	r6, r3, #16
 8004eba:	0c0b      	lsrs	r3, r1, #16
 8004ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8004ec0:	b289      	uxth	r1, r1
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ec8:	4285      	cmp	r5, r0
 8004eca:	f84c 1b04 	str.w	r1, [ip], #4
 8004ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ed2:	dcec      	bgt.n	8004eae <__multadd+0x12>
 8004ed4:	b30e      	cbz	r6, 8004f1a <__multadd+0x7e>
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	dc19      	bgt.n	8004f10 <__multadd+0x74>
 8004edc:	6861      	ldr	r1, [r4, #4]
 8004ede:	4638      	mov	r0, r7
 8004ee0:	3101      	adds	r1, #1
 8004ee2:	f7ff ff79 	bl	8004dd8 <_Balloc>
 8004ee6:	4680      	mov	r8, r0
 8004ee8:	b928      	cbnz	r0, 8004ef6 <__multadd+0x5a>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <__multadd+0x84>)
 8004eee:	480d      	ldr	r0, [pc, #52]	@ (8004f24 <__multadd+0x88>)
 8004ef0:	21ba      	movs	r1, #186	@ 0xba
 8004ef2:	f000 fd8b 	bl	8005a0c <__assert_func>
 8004ef6:	6922      	ldr	r2, [r4, #16]
 8004ef8:	3202      	adds	r2, #2
 8004efa:	f104 010c 	add.w	r1, r4, #12
 8004efe:	0092      	lsls	r2, r2, #2
 8004f00:	300c      	adds	r0, #12
 8004f02:	f000 fd75 	bl	80059f0 <memcpy>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ffa5 	bl	8004e58 <_Bfree>
 8004f0e:	4644      	mov	r4, r8
 8004f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f14:	3501      	adds	r5, #1
 8004f16:	615e      	str	r6, [r3, #20]
 8004f18:	6125      	str	r5, [r4, #16]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	08006c76 	.word	0x08006c76
 8004f24:	08006c87 	.word	0x08006c87

08004f28 <__hi0bits>:
 8004f28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	bf36      	itet	cc
 8004f30:	0403      	lslcc	r3, r0, #16
 8004f32:	2000      	movcs	r0, #0
 8004f34:	2010      	movcc	r0, #16
 8004f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f3a:	bf3c      	itt	cc
 8004f3c:	021b      	lslcc	r3, r3, #8
 8004f3e:	3008      	addcc	r0, #8
 8004f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f44:	bf3c      	itt	cc
 8004f46:	011b      	lslcc	r3, r3, #4
 8004f48:	3004      	addcc	r0, #4
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4e:	bf3c      	itt	cc
 8004f50:	009b      	lslcc	r3, r3, #2
 8004f52:	3002      	addcc	r0, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	db05      	blt.n	8004f64 <__hi0bits+0x3c>
 8004f58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004f5c:	f100 0001 	add.w	r0, r0, #1
 8004f60:	bf08      	it	eq
 8004f62:	2020      	moveq	r0, #32
 8004f64:	4770      	bx	lr

08004f66 <__lo0bits>:
 8004f66:	6803      	ldr	r3, [r0, #0]
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f013 0007 	ands.w	r0, r3, #7
 8004f6e:	d00b      	beq.n	8004f88 <__lo0bits+0x22>
 8004f70:	07d9      	lsls	r1, r3, #31
 8004f72:	d421      	bmi.n	8004fb8 <__lo0bits+0x52>
 8004f74:	0798      	lsls	r0, r3, #30
 8004f76:	bf49      	itett	mi
 8004f78:	085b      	lsrmi	r3, r3, #1
 8004f7a:	089b      	lsrpl	r3, r3, #2
 8004f7c:	2001      	movmi	r0, #1
 8004f7e:	6013      	strmi	r3, [r2, #0]
 8004f80:	bf5c      	itt	pl
 8004f82:	6013      	strpl	r3, [r2, #0]
 8004f84:	2002      	movpl	r0, #2
 8004f86:	4770      	bx	lr
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	b909      	cbnz	r1, 8004f90 <__lo0bits+0x2a>
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	2010      	movs	r0, #16
 8004f90:	b2d9      	uxtb	r1, r3
 8004f92:	b909      	cbnz	r1, 8004f98 <__lo0bits+0x32>
 8004f94:	3008      	adds	r0, #8
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	0719      	lsls	r1, r3, #28
 8004f9a:	bf04      	itt	eq
 8004f9c:	091b      	lsreq	r3, r3, #4
 8004f9e:	3004      	addeq	r0, #4
 8004fa0:	0799      	lsls	r1, r3, #30
 8004fa2:	bf04      	itt	eq
 8004fa4:	089b      	lsreq	r3, r3, #2
 8004fa6:	3002      	addeq	r0, #2
 8004fa8:	07d9      	lsls	r1, r3, #31
 8004faa:	d403      	bmi.n	8004fb4 <__lo0bits+0x4e>
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	f100 0001 	add.w	r0, r0, #1
 8004fb2:	d003      	beq.n	8004fbc <__lo0bits+0x56>
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4770      	bx	lr
 8004fb8:	2000      	movs	r0, #0
 8004fba:	4770      	bx	lr
 8004fbc:	2020      	movs	r0, #32
 8004fbe:	4770      	bx	lr

08004fc0 <__i2b>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	f7ff ff07 	bl	8004dd8 <_Balloc>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	b928      	cbnz	r0, 8004fda <__i2b+0x1a>
 8004fce:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <__i2b+0x24>)
 8004fd0:	4805      	ldr	r0, [pc, #20]	@ (8004fe8 <__i2b+0x28>)
 8004fd2:	f240 1145 	movw	r1, #325	@ 0x145
 8004fd6:	f000 fd19 	bl	8005a0c <__assert_func>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	6144      	str	r4, [r0, #20]
 8004fde:	6103      	str	r3, [r0, #16]
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08006c76 	.word	0x08006c76
 8004fe8:	08006c87 	.word	0x08006c87

08004fec <__multiply>:
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	4617      	mov	r7, r2
 8004ff2:	690a      	ldr	r2, [r1, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bfa8      	it	ge
 8004ffa:	463b      	movge	r3, r7
 8004ffc:	4689      	mov	r9, r1
 8004ffe:	bfa4      	itt	ge
 8005000:	460f      	movge	r7, r1
 8005002:	4699      	movge	r9, r3
 8005004:	693d      	ldr	r5, [r7, #16]
 8005006:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	eb05 060a 	add.w	r6, r5, sl
 8005012:	42b3      	cmp	r3, r6
 8005014:	b085      	sub	sp, #20
 8005016:	bfb8      	it	lt
 8005018:	3101      	addlt	r1, #1
 800501a:	f7ff fedd 	bl	8004dd8 <_Balloc>
 800501e:	b930      	cbnz	r0, 800502e <__multiply+0x42>
 8005020:	4602      	mov	r2, r0
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <__multiply+0x13c>)
 8005024:	4841      	ldr	r0, [pc, #260]	@ (800512c <__multiply+0x140>)
 8005026:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800502a:	f000 fcef 	bl	8005a0c <__assert_func>
 800502e:	f100 0414 	add.w	r4, r0, #20
 8005032:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005036:	4623      	mov	r3, r4
 8005038:	2200      	movs	r2, #0
 800503a:	4573      	cmp	r3, lr
 800503c:	d320      	bcc.n	8005080 <__multiply+0x94>
 800503e:	f107 0814 	add.w	r8, r7, #20
 8005042:	f109 0114 	add.w	r1, r9, #20
 8005046:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800504a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800504e:	9302      	str	r3, [sp, #8]
 8005050:	1beb      	subs	r3, r5, r7
 8005052:	3b15      	subs	r3, #21
 8005054:	f023 0303 	bic.w	r3, r3, #3
 8005058:	3304      	adds	r3, #4
 800505a:	3715      	adds	r7, #21
 800505c:	42bd      	cmp	r5, r7
 800505e:	bf38      	it	cc
 8005060:	2304      	movcc	r3, #4
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	9b02      	ldr	r3, [sp, #8]
 8005066:	9103      	str	r1, [sp, #12]
 8005068:	428b      	cmp	r3, r1
 800506a:	d80c      	bhi.n	8005086 <__multiply+0x9a>
 800506c:	2e00      	cmp	r6, #0
 800506e:	dd03      	ble.n	8005078 <__multiply+0x8c>
 8005070:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005074:	2b00      	cmp	r3, #0
 8005076:	d055      	beq.n	8005124 <__multiply+0x138>
 8005078:	6106      	str	r6, [r0, #16]
 800507a:	b005      	add	sp, #20
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005080:	f843 2b04 	str.w	r2, [r3], #4
 8005084:	e7d9      	b.n	800503a <__multiply+0x4e>
 8005086:	f8b1 a000 	ldrh.w	sl, [r1]
 800508a:	f1ba 0f00 	cmp.w	sl, #0
 800508e:	d01f      	beq.n	80050d0 <__multiply+0xe4>
 8005090:	46c4      	mov	ip, r8
 8005092:	46a1      	mov	r9, r4
 8005094:	2700      	movs	r7, #0
 8005096:	f85c 2b04 	ldr.w	r2, [ip], #4
 800509a:	f8d9 3000 	ldr.w	r3, [r9]
 800509e:	fa1f fb82 	uxth.w	fp, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80050a8:	443b      	add	r3, r7
 80050aa:	f8d9 7000 	ldr.w	r7, [r9]
 80050ae:	0c12      	lsrs	r2, r2, #16
 80050b0:	0c3f      	lsrs	r7, r7, #16
 80050b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80050b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	4565      	cmp	r5, ip
 80050c2:	f849 3b04 	str.w	r3, [r9], #4
 80050c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80050ca:	d8e4      	bhi.n	8005096 <__multiply+0xaa>
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	50e7      	str	r7, [r4, r3]
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80050d6:	3104      	adds	r1, #4
 80050d8:	f1b9 0f00 	cmp.w	r9, #0
 80050dc:	d020      	beq.n	8005120 <__multiply+0x134>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4647      	mov	r7, r8
 80050e2:	46a4      	mov	ip, r4
 80050e4:	f04f 0a00 	mov.w	sl, #0
 80050e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80050ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80050f0:	fb09 220b 	mla	r2, r9, fp, r2
 80050f4:	4452      	add	r2, sl
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005100:	f857 3b04 	ldr.w	r3, [r7], #4
 8005104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005108:	f8bc 3000 	ldrh.w	r3, [ip]
 800510c:	fb09 330a 	mla	r3, r9, sl, r3
 8005110:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005114:	42bd      	cmp	r5, r7
 8005116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800511a:	d8e5      	bhi.n	80050e8 <__multiply+0xfc>
 800511c:	9a01      	ldr	r2, [sp, #4]
 800511e:	50a3      	str	r3, [r4, r2]
 8005120:	3404      	adds	r4, #4
 8005122:	e79f      	b.n	8005064 <__multiply+0x78>
 8005124:	3e01      	subs	r6, #1
 8005126:	e7a1      	b.n	800506c <__multiply+0x80>
 8005128:	08006c76 	.word	0x08006c76
 800512c:	08006c87 	.word	0x08006c87

08005130 <__pow5mult>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	4615      	mov	r5, r2
 8005136:	f012 0203 	ands.w	r2, r2, #3
 800513a:	4607      	mov	r7, r0
 800513c:	460e      	mov	r6, r1
 800513e:	d007      	beq.n	8005150 <__pow5mult+0x20>
 8005140:	4c25      	ldr	r4, [pc, #148]	@ (80051d8 <__pow5mult+0xa8>)
 8005142:	3a01      	subs	r2, #1
 8005144:	2300      	movs	r3, #0
 8005146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800514a:	f7ff fea7 	bl	8004e9c <__multadd>
 800514e:	4606      	mov	r6, r0
 8005150:	10ad      	asrs	r5, r5, #2
 8005152:	d03d      	beq.n	80051d0 <__pow5mult+0xa0>
 8005154:	69fc      	ldr	r4, [r7, #28]
 8005156:	b97c      	cbnz	r4, 8005178 <__pow5mult+0x48>
 8005158:	2010      	movs	r0, #16
 800515a:	f7ff fd87 	bl	8004c6c <malloc>
 800515e:	4602      	mov	r2, r0
 8005160:	61f8      	str	r0, [r7, #28]
 8005162:	b928      	cbnz	r0, 8005170 <__pow5mult+0x40>
 8005164:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <__pow5mult+0xac>)
 8005166:	481e      	ldr	r0, [pc, #120]	@ (80051e0 <__pow5mult+0xb0>)
 8005168:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800516c:	f000 fc4e 	bl	8005a0c <__assert_func>
 8005170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005174:	6004      	str	r4, [r0, #0]
 8005176:	60c4      	str	r4, [r0, #12]
 8005178:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800517c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005180:	b94c      	cbnz	r4, 8005196 <__pow5mult+0x66>
 8005182:	f240 2171 	movw	r1, #625	@ 0x271
 8005186:	4638      	mov	r0, r7
 8005188:	f7ff ff1a 	bl	8004fc0 <__i2b>
 800518c:	2300      	movs	r3, #0
 800518e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005192:	4604      	mov	r4, r0
 8005194:	6003      	str	r3, [r0, #0]
 8005196:	f04f 0900 	mov.w	r9, #0
 800519a:	07eb      	lsls	r3, r5, #31
 800519c:	d50a      	bpl.n	80051b4 <__pow5mult+0x84>
 800519e:	4631      	mov	r1, r6
 80051a0:	4622      	mov	r2, r4
 80051a2:	4638      	mov	r0, r7
 80051a4:	f7ff ff22 	bl	8004fec <__multiply>
 80051a8:	4631      	mov	r1, r6
 80051aa:	4680      	mov	r8, r0
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7ff fe53 	bl	8004e58 <_Bfree>
 80051b2:	4646      	mov	r6, r8
 80051b4:	106d      	asrs	r5, r5, #1
 80051b6:	d00b      	beq.n	80051d0 <__pow5mult+0xa0>
 80051b8:	6820      	ldr	r0, [r4, #0]
 80051ba:	b938      	cbnz	r0, 80051cc <__pow5mult+0x9c>
 80051bc:	4622      	mov	r2, r4
 80051be:	4621      	mov	r1, r4
 80051c0:	4638      	mov	r0, r7
 80051c2:	f7ff ff13 	bl	8004fec <__multiply>
 80051c6:	6020      	str	r0, [r4, #0]
 80051c8:	f8c0 9000 	str.w	r9, [r0]
 80051cc:	4604      	mov	r4, r0
 80051ce:	e7e4      	b.n	800519a <__pow5mult+0x6a>
 80051d0:	4630      	mov	r0, r6
 80051d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d6:	bf00      	nop
 80051d8:	08006d38 	.word	0x08006d38
 80051dc:	08006c07 	.word	0x08006c07
 80051e0:	08006c87 	.word	0x08006c87

080051e4 <__lshift>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	460c      	mov	r4, r1
 80051ea:	6849      	ldr	r1, [r1, #4]
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	4607      	mov	r7, r0
 80051f6:	4691      	mov	r9, r2
 80051f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051fc:	f108 0601 	add.w	r6, r8, #1
 8005200:	42b3      	cmp	r3, r6
 8005202:	db0b      	blt.n	800521c <__lshift+0x38>
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff fde7 	bl	8004dd8 <_Balloc>
 800520a:	4605      	mov	r5, r0
 800520c:	b948      	cbnz	r0, 8005222 <__lshift+0x3e>
 800520e:	4602      	mov	r2, r0
 8005210:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <__lshift+0xd0>)
 8005212:	4829      	ldr	r0, [pc, #164]	@ (80052b8 <__lshift+0xd4>)
 8005214:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005218:	f000 fbf8 	bl	8005a0c <__assert_func>
 800521c:	3101      	adds	r1, #1
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	e7ee      	b.n	8005200 <__lshift+0x1c>
 8005222:	2300      	movs	r3, #0
 8005224:	f100 0114 	add.w	r1, r0, #20
 8005228:	f100 0210 	add.w	r2, r0, #16
 800522c:	4618      	mov	r0, r3
 800522e:	4553      	cmp	r3, sl
 8005230:	db33      	blt.n	800529a <__lshift+0xb6>
 8005232:	6920      	ldr	r0, [r4, #16]
 8005234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005238:	f104 0314 	add.w	r3, r4, #20
 800523c:	f019 091f 	ands.w	r9, r9, #31
 8005240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005248:	d02b      	beq.n	80052a2 <__lshift+0xbe>
 800524a:	f1c9 0e20 	rsb	lr, r9, #32
 800524e:	468a      	mov	sl, r1
 8005250:	2200      	movs	r2, #0
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	fa00 f009 	lsl.w	r0, r0, r9
 8005258:	4310      	orrs	r0, r2
 800525a:	f84a 0b04 	str.w	r0, [sl], #4
 800525e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005262:	459c      	cmp	ip, r3
 8005264:	fa22 f20e 	lsr.w	r2, r2, lr
 8005268:	d8f3      	bhi.n	8005252 <__lshift+0x6e>
 800526a:	ebac 0304 	sub.w	r3, ip, r4
 800526e:	3b15      	subs	r3, #21
 8005270:	f023 0303 	bic.w	r3, r3, #3
 8005274:	3304      	adds	r3, #4
 8005276:	f104 0015 	add.w	r0, r4, #21
 800527a:	4560      	cmp	r0, ip
 800527c:	bf88      	it	hi
 800527e:	2304      	movhi	r3, #4
 8005280:	50ca      	str	r2, [r1, r3]
 8005282:	b10a      	cbz	r2, 8005288 <__lshift+0xa4>
 8005284:	f108 0602 	add.w	r6, r8, #2
 8005288:	3e01      	subs	r6, #1
 800528a:	4638      	mov	r0, r7
 800528c:	612e      	str	r6, [r5, #16]
 800528e:	4621      	mov	r1, r4
 8005290:	f7ff fde2 	bl	8004e58 <_Bfree>
 8005294:	4628      	mov	r0, r5
 8005296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529a:	f842 0f04 	str.w	r0, [r2, #4]!
 800529e:	3301      	adds	r3, #1
 80052a0:	e7c5      	b.n	800522e <__lshift+0x4a>
 80052a2:	3904      	subs	r1, #4
 80052a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80052ac:	459c      	cmp	ip, r3
 80052ae:	d8f9      	bhi.n	80052a4 <__lshift+0xc0>
 80052b0:	e7ea      	b.n	8005288 <__lshift+0xa4>
 80052b2:	bf00      	nop
 80052b4:	08006c76 	.word	0x08006c76
 80052b8:	08006c87 	.word	0x08006c87

080052bc <__mcmp>:
 80052bc:	690a      	ldr	r2, [r1, #16]
 80052be:	4603      	mov	r3, r0
 80052c0:	6900      	ldr	r0, [r0, #16]
 80052c2:	1a80      	subs	r0, r0, r2
 80052c4:	b530      	push	{r4, r5, lr}
 80052c6:	d10e      	bne.n	80052e6 <__mcmp+0x2a>
 80052c8:	3314      	adds	r3, #20
 80052ca:	3114      	adds	r1, #20
 80052cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052dc:	4295      	cmp	r5, r2
 80052de:	d003      	beq.n	80052e8 <__mcmp+0x2c>
 80052e0:	d205      	bcs.n	80052ee <__mcmp+0x32>
 80052e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052e6:	bd30      	pop	{r4, r5, pc}
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d3f3      	bcc.n	80052d4 <__mcmp+0x18>
 80052ec:	e7fb      	b.n	80052e6 <__mcmp+0x2a>
 80052ee:	2001      	movs	r0, #1
 80052f0:	e7f9      	b.n	80052e6 <__mcmp+0x2a>
	...

080052f4 <__mdiff>:
 80052f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	4689      	mov	r9, r1
 80052fa:	4606      	mov	r6, r0
 80052fc:	4611      	mov	r1, r2
 80052fe:	4648      	mov	r0, r9
 8005300:	4614      	mov	r4, r2
 8005302:	f7ff ffdb 	bl	80052bc <__mcmp>
 8005306:	1e05      	subs	r5, r0, #0
 8005308:	d112      	bne.n	8005330 <__mdiff+0x3c>
 800530a:	4629      	mov	r1, r5
 800530c:	4630      	mov	r0, r6
 800530e:	f7ff fd63 	bl	8004dd8 <_Balloc>
 8005312:	4602      	mov	r2, r0
 8005314:	b928      	cbnz	r0, 8005322 <__mdiff+0x2e>
 8005316:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <__mdiff+0x120>)
 8005318:	f240 2137 	movw	r1, #567	@ 0x237
 800531c:	483e      	ldr	r0, [pc, #248]	@ (8005418 <__mdiff+0x124>)
 800531e:	f000 fb75 	bl	8005a0c <__assert_func>
 8005322:	2301      	movs	r3, #1
 8005324:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005328:	4610      	mov	r0, r2
 800532a:	b003      	add	sp, #12
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005330:	bfbc      	itt	lt
 8005332:	464b      	movlt	r3, r9
 8005334:	46a1      	movlt	r9, r4
 8005336:	4630      	mov	r0, r6
 8005338:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800533c:	bfba      	itte	lt
 800533e:	461c      	movlt	r4, r3
 8005340:	2501      	movlt	r5, #1
 8005342:	2500      	movge	r5, #0
 8005344:	f7ff fd48 	bl	8004dd8 <_Balloc>
 8005348:	4602      	mov	r2, r0
 800534a:	b918      	cbnz	r0, 8005354 <__mdiff+0x60>
 800534c:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <__mdiff+0x120>)
 800534e:	f240 2145 	movw	r1, #581	@ 0x245
 8005352:	e7e3      	b.n	800531c <__mdiff+0x28>
 8005354:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005358:	6926      	ldr	r6, [r4, #16]
 800535a:	60c5      	str	r5, [r0, #12]
 800535c:	f109 0310 	add.w	r3, r9, #16
 8005360:	f109 0514 	add.w	r5, r9, #20
 8005364:	f104 0e14 	add.w	lr, r4, #20
 8005368:	f100 0b14 	add.w	fp, r0, #20
 800536c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005370:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	46d9      	mov	r9, fp
 8005378:	f04f 0c00 	mov.w	ip, #0
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005382:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	fa1f f38a 	uxth.w	r3, sl
 800538c:	4619      	mov	r1, r3
 800538e:	b283      	uxth	r3, r0
 8005390:	1acb      	subs	r3, r1, r3
 8005392:	0c00      	lsrs	r0, r0, #16
 8005394:	4463      	add	r3, ip
 8005396:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800539a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800539e:	b29b      	uxth	r3, r3
 80053a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053a4:	4576      	cmp	r6, lr
 80053a6:	f849 3b04 	str.w	r3, [r9], #4
 80053aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053ae:	d8e5      	bhi.n	800537c <__mdiff+0x88>
 80053b0:	1b33      	subs	r3, r6, r4
 80053b2:	3b15      	subs	r3, #21
 80053b4:	f023 0303 	bic.w	r3, r3, #3
 80053b8:	3415      	adds	r4, #21
 80053ba:	3304      	adds	r3, #4
 80053bc:	42a6      	cmp	r6, r4
 80053be:	bf38      	it	cc
 80053c0:	2304      	movcc	r3, #4
 80053c2:	441d      	add	r5, r3
 80053c4:	445b      	add	r3, fp
 80053c6:	461e      	mov	r6, r3
 80053c8:	462c      	mov	r4, r5
 80053ca:	4544      	cmp	r4, r8
 80053cc:	d30e      	bcc.n	80053ec <__mdiff+0xf8>
 80053ce:	f108 0103 	add.w	r1, r8, #3
 80053d2:	1b49      	subs	r1, r1, r5
 80053d4:	f021 0103 	bic.w	r1, r1, #3
 80053d8:	3d03      	subs	r5, #3
 80053da:	45a8      	cmp	r8, r5
 80053dc:	bf38      	it	cc
 80053de:	2100      	movcc	r1, #0
 80053e0:	440b      	add	r3, r1
 80053e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80053e6:	b191      	cbz	r1, 800540e <__mdiff+0x11a>
 80053e8:	6117      	str	r7, [r2, #16]
 80053ea:	e79d      	b.n	8005328 <__mdiff+0x34>
 80053ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80053f0:	46e6      	mov	lr, ip
 80053f2:	0c08      	lsrs	r0, r1, #16
 80053f4:	fa1c fc81 	uxtah	ip, ip, r1
 80053f8:	4471      	add	r1, lr
 80053fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80053fe:	b289      	uxth	r1, r1
 8005400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005404:	f846 1b04 	str.w	r1, [r6], #4
 8005408:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800540c:	e7dd      	b.n	80053ca <__mdiff+0xd6>
 800540e:	3f01      	subs	r7, #1
 8005410:	e7e7      	b.n	80053e2 <__mdiff+0xee>
 8005412:	bf00      	nop
 8005414:	08006c76 	.word	0x08006c76
 8005418:	08006c87 	.word	0x08006c87

0800541c <__d2b>:
 800541c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005420:	460f      	mov	r7, r1
 8005422:	2101      	movs	r1, #1
 8005424:	ec59 8b10 	vmov	r8, r9, d0
 8005428:	4616      	mov	r6, r2
 800542a:	f7ff fcd5 	bl	8004dd8 <_Balloc>
 800542e:	4604      	mov	r4, r0
 8005430:	b930      	cbnz	r0, 8005440 <__d2b+0x24>
 8005432:	4602      	mov	r2, r0
 8005434:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <__d2b+0xa8>)
 8005436:	4824      	ldr	r0, [pc, #144]	@ (80054c8 <__d2b+0xac>)
 8005438:	f240 310f 	movw	r1, #783	@ 0x30f
 800543c:	f000 fae6 	bl	8005a0c <__assert_func>
 8005440:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005448:	b10d      	cbz	r5, 800544e <__d2b+0x32>
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	f1b8 0300 	subs.w	r3, r8, #0
 8005454:	d023      	beq.n	800549e <__d2b+0x82>
 8005456:	4668      	mov	r0, sp
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	f7ff fd84 	bl	8004f66 <__lo0bits>
 800545e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005462:	b1d0      	cbz	r0, 800549a <__d2b+0x7e>
 8005464:	f1c0 0320 	rsb	r3, r0, #32
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	430b      	orrs	r3, r1
 800546e:	40c2      	lsrs	r2, r0
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	9201      	str	r2, [sp, #4]
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	61a3      	str	r3, [r4, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf0c      	ite	eq
 800547c:	2201      	moveq	r2, #1
 800547e:	2202      	movne	r2, #2
 8005480:	6122      	str	r2, [r4, #16]
 8005482:	b1a5      	cbz	r5, 80054ae <__d2b+0x92>
 8005484:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005488:	4405      	add	r5, r0
 800548a:	603d      	str	r5, [r7, #0]
 800548c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	4620      	mov	r0, r4
 8005494:	b003      	add	sp, #12
 8005496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800549a:	6161      	str	r1, [r4, #20]
 800549c:	e7ea      	b.n	8005474 <__d2b+0x58>
 800549e:	a801      	add	r0, sp, #4
 80054a0:	f7ff fd61 	bl	8004f66 <__lo0bits>
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	6163      	str	r3, [r4, #20]
 80054a8:	3020      	adds	r0, #32
 80054aa:	2201      	movs	r2, #1
 80054ac:	e7e8      	b.n	8005480 <__d2b+0x64>
 80054ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80054b6:	6038      	str	r0, [r7, #0]
 80054b8:	6918      	ldr	r0, [r3, #16]
 80054ba:	f7ff fd35 	bl	8004f28 <__hi0bits>
 80054be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054c2:	e7e5      	b.n	8005490 <__d2b+0x74>
 80054c4:	08006c76 	.word	0x08006c76
 80054c8:	08006c87 	.word	0x08006c87

080054cc <__sfputc_r>:
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	b410      	push	{r4}
 80054d4:	6093      	str	r3, [r2, #8]
 80054d6:	da08      	bge.n	80054ea <__sfputc_r+0x1e>
 80054d8:	6994      	ldr	r4, [r2, #24]
 80054da:	42a3      	cmp	r3, r4
 80054dc:	db01      	blt.n	80054e2 <__sfputc_r+0x16>
 80054de:	290a      	cmp	r1, #10
 80054e0:	d103      	bne.n	80054ea <__sfputc_r+0x1e>
 80054e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054e6:	f000 b9df 	b.w	80058a8 <__swbuf_r>
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	1c58      	adds	r0, r3, #1
 80054ee:	6010      	str	r0, [r2, #0]
 80054f0:	7019      	strb	r1, [r3, #0]
 80054f2:	4608      	mov	r0, r1
 80054f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <__sfputs_r>:
 80054fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fc:	4606      	mov	r6, r0
 80054fe:	460f      	mov	r7, r1
 8005500:	4614      	mov	r4, r2
 8005502:	18d5      	adds	r5, r2, r3
 8005504:	42ac      	cmp	r4, r5
 8005506:	d101      	bne.n	800550c <__sfputs_r+0x12>
 8005508:	2000      	movs	r0, #0
 800550a:	e007      	b.n	800551c <__sfputs_r+0x22>
 800550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005510:	463a      	mov	r2, r7
 8005512:	4630      	mov	r0, r6
 8005514:	f7ff ffda 	bl	80054cc <__sfputc_r>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d1f3      	bne.n	8005504 <__sfputs_r+0xa>
 800551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005520 <_vfiprintf_r>:
 8005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	460d      	mov	r5, r1
 8005526:	b09d      	sub	sp, #116	@ 0x74
 8005528:	4614      	mov	r4, r2
 800552a:	4698      	mov	r8, r3
 800552c:	4606      	mov	r6, r0
 800552e:	b118      	cbz	r0, 8005538 <_vfiprintf_r+0x18>
 8005530:	6a03      	ldr	r3, [r0, #32]
 8005532:	b90b      	cbnz	r3, 8005538 <_vfiprintf_r+0x18>
 8005534:	f7fe fbec 	bl	8003d10 <__sinit>
 8005538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800553a:	07d9      	lsls	r1, r3, #31
 800553c:	d405      	bmi.n	800554a <_vfiprintf_r+0x2a>
 800553e:	89ab      	ldrh	r3, [r5, #12]
 8005540:	059a      	lsls	r2, r3, #22
 8005542:	d402      	bmi.n	800554a <_vfiprintf_r+0x2a>
 8005544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005546:	f7fe fcec 	bl	8003f22 <__retarget_lock_acquire_recursive>
 800554a:	89ab      	ldrh	r3, [r5, #12]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	d501      	bpl.n	8005554 <_vfiprintf_r+0x34>
 8005550:	692b      	ldr	r3, [r5, #16]
 8005552:	b99b      	cbnz	r3, 800557c <_vfiprintf_r+0x5c>
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f000 f9e4 	bl	8005924 <__swsetup_r>
 800555c:	b170      	cbz	r0, 800557c <_vfiprintf_r+0x5c>
 800555e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005560:	07dc      	lsls	r4, r3, #31
 8005562:	d504      	bpl.n	800556e <_vfiprintf_r+0x4e>
 8005564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005568:	b01d      	add	sp, #116	@ 0x74
 800556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	0598      	lsls	r0, r3, #22
 8005572:	d4f7      	bmi.n	8005564 <_vfiprintf_r+0x44>
 8005574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005576:	f7fe fcd5 	bl	8003f24 <__retarget_lock_release_recursive>
 800557a:	e7f3      	b.n	8005564 <_vfiprintf_r+0x44>
 800557c:	2300      	movs	r3, #0
 800557e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005580:	2320      	movs	r3, #32
 8005582:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005586:	f8cd 800c 	str.w	r8, [sp, #12]
 800558a:	2330      	movs	r3, #48	@ 0x30
 800558c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800573c <_vfiprintf_r+0x21c>
 8005590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005594:	f04f 0901 	mov.w	r9, #1
 8005598:	4623      	mov	r3, r4
 800559a:	469a      	mov	sl, r3
 800559c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a0:	b10a      	cbz	r2, 80055a6 <_vfiprintf_r+0x86>
 80055a2:	2a25      	cmp	r2, #37	@ 0x25
 80055a4:	d1f9      	bne.n	800559a <_vfiprintf_r+0x7a>
 80055a6:	ebba 0b04 	subs.w	fp, sl, r4
 80055aa:	d00b      	beq.n	80055c4 <_vfiprintf_r+0xa4>
 80055ac:	465b      	mov	r3, fp
 80055ae:	4622      	mov	r2, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff ffa1 	bl	80054fa <__sfputs_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	f000 80a7 	beq.w	800570c <_vfiprintf_r+0x1ec>
 80055be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c0:	445a      	add	r2, fp
 80055c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c4:	f89a 3000 	ldrb.w	r3, [sl]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 809f 	beq.w	800570c <_vfiprintf_r+0x1ec>
 80055ce:	2300      	movs	r3, #0
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d8:	f10a 0a01 	add.w	sl, sl, #1
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	9307      	str	r3, [sp, #28]
 80055e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e6:	4654      	mov	r4, sl
 80055e8:	2205      	movs	r2, #5
 80055ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ee:	4853      	ldr	r0, [pc, #332]	@ (800573c <_vfiprintf_r+0x21c>)
 80055f0:	f7fa fdf6 	bl	80001e0 <memchr>
 80055f4:	9a04      	ldr	r2, [sp, #16]
 80055f6:	b9d8      	cbnz	r0, 8005630 <_vfiprintf_r+0x110>
 80055f8:	06d1      	lsls	r1, r2, #27
 80055fa:	bf44      	itt	mi
 80055fc:	2320      	movmi	r3, #32
 80055fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005602:	0713      	lsls	r3, r2, #28
 8005604:	bf44      	itt	mi
 8005606:	232b      	movmi	r3, #43	@ 0x2b
 8005608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560c:	f89a 3000 	ldrb.w	r3, [sl]
 8005610:	2b2a      	cmp	r3, #42	@ 0x2a
 8005612:	d015      	beq.n	8005640 <_vfiprintf_r+0x120>
 8005614:	9a07      	ldr	r2, [sp, #28]
 8005616:	4654      	mov	r4, sl
 8005618:	2000      	movs	r0, #0
 800561a:	f04f 0c0a 	mov.w	ip, #10
 800561e:	4621      	mov	r1, r4
 8005620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005624:	3b30      	subs	r3, #48	@ 0x30
 8005626:	2b09      	cmp	r3, #9
 8005628:	d94b      	bls.n	80056c2 <_vfiprintf_r+0x1a2>
 800562a:	b1b0      	cbz	r0, 800565a <_vfiprintf_r+0x13a>
 800562c:	9207      	str	r2, [sp, #28]
 800562e:	e014      	b.n	800565a <_vfiprintf_r+0x13a>
 8005630:	eba0 0308 	sub.w	r3, r0, r8
 8005634:	fa09 f303 	lsl.w	r3, r9, r3
 8005638:	4313      	orrs	r3, r2
 800563a:	9304      	str	r3, [sp, #16]
 800563c:	46a2      	mov	sl, r4
 800563e:	e7d2      	b.n	80055e6 <_vfiprintf_r+0xc6>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	1d19      	adds	r1, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	9103      	str	r1, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	bfbb      	ittet	lt
 800564c:	425b      	neglt	r3, r3
 800564e:	f042 0202 	orrlt.w	r2, r2, #2
 8005652:	9307      	strge	r3, [sp, #28]
 8005654:	9307      	strlt	r3, [sp, #28]
 8005656:	bfb8      	it	lt
 8005658:	9204      	strlt	r2, [sp, #16]
 800565a:	7823      	ldrb	r3, [r4, #0]
 800565c:	2b2e      	cmp	r3, #46	@ 0x2e
 800565e:	d10a      	bne.n	8005676 <_vfiprintf_r+0x156>
 8005660:	7863      	ldrb	r3, [r4, #1]
 8005662:	2b2a      	cmp	r3, #42	@ 0x2a
 8005664:	d132      	bne.n	80056cc <_vfiprintf_r+0x1ac>
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	9203      	str	r2, [sp, #12]
 800566e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005672:	3402      	adds	r4, #2
 8005674:	9305      	str	r3, [sp, #20]
 8005676:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800574c <_vfiprintf_r+0x22c>
 800567a:	7821      	ldrb	r1, [r4, #0]
 800567c:	2203      	movs	r2, #3
 800567e:	4650      	mov	r0, sl
 8005680:	f7fa fdae 	bl	80001e0 <memchr>
 8005684:	b138      	cbz	r0, 8005696 <_vfiprintf_r+0x176>
 8005686:	9b04      	ldr	r3, [sp, #16]
 8005688:	eba0 000a 	sub.w	r0, r0, sl
 800568c:	2240      	movs	r2, #64	@ 0x40
 800568e:	4082      	lsls	r2, r0
 8005690:	4313      	orrs	r3, r2
 8005692:	3401      	adds	r4, #1
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569a:	4829      	ldr	r0, [pc, #164]	@ (8005740 <_vfiprintf_r+0x220>)
 800569c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a0:	2206      	movs	r2, #6
 80056a2:	f7fa fd9d 	bl	80001e0 <memchr>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d03f      	beq.n	800572a <_vfiprintf_r+0x20a>
 80056aa:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <_vfiprintf_r+0x224>)
 80056ac:	bb1b      	cbnz	r3, 80056f6 <_vfiprintf_r+0x1d6>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	3307      	adds	r3, #7
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	3308      	adds	r3, #8
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056bc:	443b      	add	r3, r7
 80056be:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c0:	e76a      	b.n	8005598 <_vfiprintf_r+0x78>
 80056c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c6:	460c      	mov	r4, r1
 80056c8:	2001      	movs	r0, #1
 80056ca:	e7a8      	b.n	800561e <_vfiprintf_r+0xfe>
 80056cc:	2300      	movs	r3, #0
 80056ce:	3401      	adds	r4, #1
 80056d0:	9305      	str	r3, [sp, #20]
 80056d2:	4619      	mov	r1, r3
 80056d4:	f04f 0c0a 	mov.w	ip, #10
 80056d8:	4620      	mov	r0, r4
 80056da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056de:	3a30      	subs	r2, #48	@ 0x30
 80056e0:	2a09      	cmp	r2, #9
 80056e2:	d903      	bls.n	80056ec <_vfiprintf_r+0x1cc>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0c6      	beq.n	8005676 <_vfiprintf_r+0x156>
 80056e8:	9105      	str	r1, [sp, #20]
 80056ea:	e7c4      	b.n	8005676 <_vfiprintf_r+0x156>
 80056ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f0:	4604      	mov	r4, r0
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7f0      	b.n	80056d8 <_vfiprintf_r+0x1b8>
 80056f6:	ab03      	add	r3, sp, #12
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	462a      	mov	r2, r5
 80056fc:	4b12      	ldr	r3, [pc, #72]	@ (8005748 <_vfiprintf_r+0x228>)
 80056fe:	a904      	add	r1, sp, #16
 8005700:	4630      	mov	r0, r6
 8005702:	f7fd fec3 	bl	800348c <_printf_float>
 8005706:	4607      	mov	r7, r0
 8005708:	1c78      	adds	r0, r7, #1
 800570a:	d1d6      	bne.n	80056ba <_vfiprintf_r+0x19a>
 800570c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800570e:	07d9      	lsls	r1, r3, #31
 8005710:	d405      	bmi.n	800571e <_vfiprintf_r+0x1fe>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	059a      	lsls	r2, r3, #22
 8005716:	d402      	bmi.n	800571e <_vfiprintf_r+0x1fe>
 8005718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800571a:	f7fe fc03 	bl	8003f24 <__retarget_lock_release_recursive>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	065b      	lsls	r3, r3, #25
 8005722:	f53f af1f 	bmi.w	8005564 <_vfiprintf_r+0x44>
 8005726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005728:	e71e      	b.n	8005568 <_vfiprintf_r+0x48>
 800572a:	ab03      	add	r3, sp, #12
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	462a      	mov	r2, r5
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <_vfiprintf_r+0x228>)
 8005732:	a904      	add	r1, sp, #16
 8005734:	4630      	mov	r0, r6
 8005736:	f7fe f941 	bl	80039bc <_printf_i>
 800573a:	e7e4      	b.n	8005706 <_vfiprintf_r+0x1e6>
 800573c:	08006ce0 	.word	0x08006ce0
 8005740:	08006cea 	.word	0x08006cea
 8005744:	0800348d 	.word	0x0800348d
 8005748:	080054fb 	.word	0x080054fb
 800574c:	08006ce6 	.word	0x08006ce6

08005750 <__sflush_r>:
 8005750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	0716      	lsls	r6, r2, #28
 800575a:	4605      	mov	r5, r0
 800575c:	460c      	mov	r4, r1
 800575e:	d454      	bmi.n	800580a <__sflush_r+0xba>
 8005760:	684b      	ldr	r3, [r1, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	dc02      	bgt.n	800576c <__sflush_r+0x1c>
 8005766:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	dd48      	ble.n	80057fe <__sflush_r+0xae>
 800576c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800576e:	2e00      	cmp	r6, #0
 8005770:	d045      	beq.n	80057fe <__sflush_r+0xae>
 8005772:	2300      	movs	r3, #0
 8005774:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005778:	682f      	ldr	r7, [r5, #0]
 800577a:	6a21      	ldr	r1, [r4, #32]
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	d030      	beq.n	80057e2 <__sflush_r+0x92>
 8005780:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	0759      	lsls	r1, r3, #29
 8005786:	d505      	bpl.n	8005794 <__sflush_r+0x44>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800578e:	b10b      	cbz	r3, 8005794 <__sflush_r+0x44>
 8005790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	4628      	mov	r0, r5
 800579c:	47b0      	blx	r6
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	d106      	bne.n	80057b2 <__sflush_r+0x62>
 80057a4:	6829      	ldr	r1, [r5, #0]
 80057a6:	291d      	cmp	r1, #29
 80057a8:	d82b      	bhi.n	8005802 <__sflush_r+0xb2>
 80057aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005854 <__sflush_r+0x104>)
 80057ac:	40ca      	lsrs	r2, r1
 80057ae:	07d6      	lsls	r6, r2, #31
 80057b0:	d527      	bpl.n	8005802 <__sflush_r+0xb2>
 80057b2:	2200      	movs	r2, #0
 80057b4:	6062      	str	r2, [r4, #4]
 80057b6:	04d9      	lsls	r1, r3, #19
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	6022      	str	r2, [r4, #0]
 80057bc:	d504      	bpl.n	80057c8 <__sflush_r+0x78>
 80057be:	1c42      	adds	r2, r0, #1
 80057c0:	d101      	bne.n	80057c6 <__sflush_r+0x76>
 80057c2:	682b      	ldr	r3, [r5, #0]
 80057c4:	b903      	cbnz	r3, 80057c8 <__sflush_r+0x78>
 80057c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80057c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	b1b9      	cbz	r1, 80057fe <__sflush_r+0xae>
 80057ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d2:	4299      	cmp	r1, r3
 80057d4:	d002      	beq.n	80057dc <__sflush_r+0x8c>
 80057d6:	4628      	mov	r0, r5
 80057d8:	f7ff f9fe 	bl	8004bd8 <_free_r>
 80057dc:	2300      	movs	r3, #0
 80057de:	6363      	str	r3, [r4, #52]	@ 0x34
 80057e0:	e00d      	b.n	80057fe <__sflush_r+0xae>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b0      	blx	r6
 80057e8:	4602      	mov	r2, r0
 80057ea:	1c50      	adds	r0, r2, #1
 80057ec:	d1c9      	bne.n	8005782 <__sflush_r+0x32>
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0c6      	beq.n	8005782 <__sflush_r+0x32>
 80057f4:	2b1d      	cmp	r3, #29
 80057f6:	d001      	beq.n	80057fc <__sflush_r+0xac>
 80057f8:	2b16      	cmp	r3, #22
 80057fa:	d11e      	bne.n	800583a <__sflush_r+0xea>
 80057fc:	602f      	str	r7, [r5, #0]
 80057fe:	2000      	movs	r0, #0
 8005800:	e022      	b.n	8005848 <__sflush_r+0xf8>
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	b21b      	sxth	r3, r3
 8005808:	e01b      	b.n	8005842 <__sflush_r+0xf2>
 800580a:	690f      	ldr	r7, [r1, #16]
 800580c:	2f00      	cmp	r7, #0
 800580e:	d0f6      	beq.n	80057fe <__sflush_r+0xae>
 8005810:	0793      	lsls	r3, r2, #30
 8005812:	680e      	ldr	r6, [r1, #0]
 8005814:	bf08      	it	eq
 8005816:	694b      	ldreq	r3, [r1, #20]
 8005818:	600f      	str	r7, [r1, #0]
 800581a:	bf18      	it	ne
 800581c:	2300      	movne	r3, #0
 800581e:	eba6 0807 	sub.w	r8, r6, r7
 8005822:	608b      	str	r3, [r1, #8]
 8005824:	f1b8 0f00 	cmp.w	r8, #0
 8005828:	dde9      	ble.n	80057fe <__sflush_r+0xae>
 800582a:	6a21      	ldr	r1, [r4, #32]
 800582c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800582e:	4643      	mov	r3, r8
 8005830:	463a      	mov	r2, r7
 8005832:	4628      	mov	r0, r5
 8005834:	47b0      	blx	r6
 8005836:	2800      	cmp	r0, #0
 8005838:	dc08      	bgt.n	800584c <__sflush_r+0xfc>
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	4407      	add	r7, r0
 800584e:	eba8 0800 	sub.w	r8, r8, r0
 8005852:	e7e7      	b.n	8005824 <__sflush_r+0xd4>
 8005854:	20400001 	.word	0x20400001

08005858 <_fflush_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b913      	cbnz	r3, 8005868 <_fflush_r+0x10>
 8005862:	2500      	movs	r5, #0
 8005864:	4628      	mov	r0, r5
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	b118      	cbz	r0, 8005872 <_fflush_r+0x1a>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <_fflush_r+0x1a>
 800586e:	f7fe fa4f 	bl	8003d10 <__sinit>
 8005872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f3      	beq.n	8005862 <_fflush_r+0xa>
 800587a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800587c:	07d0      	lsls	r0, r2, #31
 800587e:	d404      	bmi.n	800588a <_fflush_r+0x32>
 8005880:	0599      	lsls	r1, r3, #22
 8005882:	d402      	bmi.n	800588a <_fflush_r+0x32>
 8005884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005886:	f7fe fb4c 	bl	8003f22 <__retarget_lock_acquire_recursive>
 800588a:	4628      	mov	r0, r5
 800588c:	4621      	mov	r1, r4
 800588e:	f7ff ff5f 	bl	8005750 <__sflush_r>
 8005892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005894:	07da      	lsls	r2, r3, #31
 8005896:	4605      	mov	r5, r0
 8005898:	d4e4      	bmi.n	8005864 <_fflush_r+0xc>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	d4e1      	bmi.n	8005864 <_fflush_r+0xc>
 80058a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a2:	f7fe fb3f 	bl	8003f24 <__retarget_lock_release_recursive>
 80058a6:	e7dd      	b.n	8005864 <_fflush_r+0xc>

080058a8 <__swbuf_r>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	460e      	mov	r6, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	4605      	mov	r5, r0
 80058b0:	b118      	cbz	r0, 80058ba <__swbuf_r+0x12>
 80058b2:	6a03      	ldr	r3, [r0, #32]
 80058b4:	b90b      	cbnz	r3, 80058ba <__swbuf_r+0x12>
 80058b6:	f7fe fa2b 	bl	8003d10 <__sinit>
 80058ba:	69a3      	ldr	r3, [r4, #24]
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	071a      	lsls	r2, r3, #28
 80058c2:	d501      	bpl.n	80058c8 <__swbuf_r+0x20>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	b943      	cbnz	r3, 80058da <__swbuf_r+0x32>
 80058c8:	4621      	mov	r1, r4
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f82a 	bl	8005924 <__swsetup_r>
 80058d0:	b118      	cbz	r0, 80058da <__swbuf_r+0x32>
 80058d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80058d6:	4638      	mov	r0, r7
 80058d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	6922      	ldr	r2, [r4, #16]
 80058de:	1a98      	subs	r0, r3, r2
 80058e0:	6963      	ldr	r3, [r4, #20]
 80058e2:	b2f6      	uxtb	r6, r6
 80058e4:	4283      	cmp	r3, r0
 80058e6:	4637      	mov	r7, r6
 80058e8:	dc05      	bgt.n	80058f6 <__swbuf_r+0x4e>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4628      	mov	r0, r5
 80058ee:	f7ff ffb3 	bl	8005858 <_fflush_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d1ed      	bne.n	80058d2 <__swbuf_r+0x2a>
 80058f6:	68a3      	ldr	r3, [r4, #8]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	60a3      	str	r3, [r4, #8]
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	6022      	str	r2, [r4, #0]
 8005902:	701e      	strb	r6, [r3, #0]
 8005904:	6962      	ldr	r2, [r4, #20]
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	429a      	cmp	r2, r3
 800590a:	d004      	beq.n	8005916 <__swbuf_r+0x6e>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	07db      	lsls	r3, r3, #31
 8005910:	d5e1      	bpl.n	80058d6 <__swbuf_r+0x2e>
 8005912:	2e0a      	cmp	r6, #10
 8005914:	d1df      	bne.n	80058d6 <__swbuf_r+0x2e>
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f7ff ff9d 	bl	8005858 <_fflush_r>
 800591e:	2800      	cmp	r0, #0
 8005920:	d0d9      	beq.n	80058d6 <__swbuf_r+0x2e>
 8005922:	e7d6      	b.n	80058d2 <__swbuf_r+0x2a>

08005924 <__swsetup_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4b29      	ldr	r3, [pc, #164]	@ (80059cc <__swsetup_r+0xa8>)
 8005928:	4605      	mov	r5, r0
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	460c      	mov	r4, r1
 800592e:	b118      	cbz	r0, 8005938 <__swsetup_r+0x14>
 8005930:	6a03      	ldr	r3, [r0, #32]
 8005932:	b90b      	cbnz	r3, 8005938 <__swsetup_r+0x14>
 8005934:	f7fe f9ec 	bl	8003d10 <__sinit>
 8005938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593c:	0719      	lsls	r1, r3, #28
 800593e:	d422      	bmi.n	8005986 <__swsetup_r+0x62>
 8005940:	06da      	lsls	r2, r3, #27
 8005942:	d407      	bmi.n	8005954 <__swsetup_r+0x30>
 8005944:	2209      	movs	r2, #9
 8005946:	602a      	str	r2, [r5, #0]
 8005948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005952:	e033      	b.n	80059bc <__swsetup_r+0x98>
 8005954:	0758      	lsls	r0, r3, #29
 8005956:	d512      	bpl.n	800597e <__swsetup_r+0x5a>
 8005958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800595a:	b141      	cbz	r1, 800596e <__swsetup_r+0x4a>
 800595c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005960:	4299      	cmp	r1, r3
 8005962:	d002      	beq.n	800596a <__swsetup_r+0x46>
 8005964:	4628      	mov	r0, r5
 8005966:	f7ff f937 	bl	8004bd8 <_free_r>
 800596a:	2300      	movs	r3, #0
 800596c:	6363      	str	r3, [r4, #52]	@ 0x34
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	2300      	movs	r3, #0
 8005978:	6063      	str	r3, [r4, #4]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f043 0308 	orr.w	r3, r3, #8
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	b94b      	cbnz	r3, 800599e <__swsetup_r+0x7a>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005994:	d003      	beq.n	800599e <__swsetup_r+0x7a>
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 f8c1 	bl	8005b20 <__smakebuf_r>
 800599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a2:	f013 0201 	ands.w	r2, r3, #1
 80059a6:	d00a      	beq.n	80059be <__swsetup_r+0x9a>
 80059a8:	2200      	movs	r2, #0
 80059aa:	60a2      	str	r2, [r4, #8]
 80059ac:	6962      	ldr	r2, [r4, #20]
 80059ae:	4252      	negs	r2, r2
 80059b0:	61a2      	str	r2, [r4, #24]
 80059b2:	6922      	ldr	r2, [r4, #16]
 80059b4:	b942      	cbnz	r2, 80059c8 <__swsetup_r+0xa4>
 80059b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059ba:	d1c5      	bne.n	8005948 <__swsetup_r+0x24>
 80059bc:	bd38      	pop	{r3, r4, r5, pc}
 80059be:	0799      	lsls	r1, r3, #30
 80059c0:	bf58      	it	pl
 80059c2:	6962      	ldrpl	r2, [r4, #20]
 80059c4:	60a2      	str	r2, [r4, #8]
 80059c6:	e7f4      	b.n	80059b2 <__swsetup_r+0x8e>
 80059c8:	2000      	movs	r0, #0
 80059ca:	e7f7      	b.n	80059bc <__swsetup_r+0x98>
 80059cc:	20000020 	.word	0x20000020

080059d0 <_sbrk_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	@ (80059ec <_sbrk_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fe38 	bl	8001650 <_sbrk>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_sbrk_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_sbrk_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20000430 	.word	0x20000430

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a06:	4291      	cmp	r1, r2
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <__assert_func>:
 8005a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a0e:	4614      	mov	r4, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <__assert_func+0x2c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4605      	mov	r5, r0
 8005a18:	68d8      	ldr	r0, [r3, #12]
 8005a1a:	b14c      	cbz	r4, 8005a30 <__assert_func+0x24>
 8005a1c:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <__assert_func+0x30>)
 8005a1e:	9100      	str	r1, [sp, #0]
 8005a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a24:	4906      	ldr	r1, [pc, #24]	@ (8005a40 <__assert_func+0x34>)
 8005a26:	462b      	mov	r3, r5
 8005a28:	f000 f842 	bl	8005ab0 <fiprintf>
 8005a2c:	f000 f8d6 	bl	8005bdc <abort>
 8005a30:	4b04      	ldr	r3, [pc, #16]	@ (8005a44 <__assert_func+0x38>)
 8005a32:	461c      	mov	r4, r3
 8005a34:	e7f3      	b.n	8005a1e <__assert_func+0x12>
 8005a36:	bf00      	nop
 8005a38:	20000020 	.word	0x20000020
 8005a3c:	08006cfb 	.word	0x08006cfb
 8005a40:	08006d08 	.word	0x08006d08
 8005a44:	08006d36 	.word	0x08006d36

08005a48 <_calloc_r>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	fba1 5402 	umull	r5, r4, r1, r2
 8005a4e:	b934      	cbnz	r4, 8005a5e <_calloc_r+0x16>
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7ff f935 	bl	8004cc0 <_malloc_r>
 8005a56:	4606      	mov	r6, r0
 8005a58:	b928      	cbnz	r0, 8005a66 <_calloc_r+0x1e>
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	220c      	movs	r2, #12
 8005a60:	6002      	str	r2, [r0, #0]
 8005a62:	2600      	movs	r6, #0
 8005a64:	e7f9      	b.n	8005a5a <_calloc_r+0x12>
 8005a66:	462a      	mov	r2, r5
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f7fe f9dc 	bl	8003e26 <memset>
 8005a6e:	e7f4      	b.n	8005a5a <_calloc_r+0x12>

08005a70 <__ascii_mbtowc>:
 8005a70:	b082      	sub	sp, #8
 8005a72:	b901      	cbnz	r1, 8005a76 <__ascii_mbtowc+0x6>
 8005a74:	a901      	add	r1, sp, #4
 8005a76:	b142      	cbz	r2, 8005a8a <__ascii_mbtowc+0x1a>
 8005a78:	b14b      	cbz	r3, 8005a8e <__ascii_mbtowc+0x1e>
 8005a7a:	7813      	ldrb	r3, [r2, #0]
 8005a7c:	600b      	str	r3, [r1, #0]
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	1e10      	subs	r0, r2, #0
 8005a82:	bf18      	it	ne
 8005a84:	2001      	movne	r0, #1
 8005a86:	b002      	add	sp, #8
 8005a88:	4770      	bx	lr
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	e7fb      	b.n	8005a86 <__ascii_mbtowc+0x16>
 8005a8e:	f06f 0001 	mvn.w	r0, #1
 8005a92:	e7f8      	b.n	8005a86 <__ascii_mbtowc+0x16>

08005a94 <__ascii_wctomb>:
 8005a94:	4603      	mov	r3, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	b141      	cbz	r1, 8005aac <__ascii_wctomb+0x18>
 8005a9a:	2aff      	cmp	r2, #255	@ 0xff
 8005a9c:	d904      	bls.n	8005aa8 <__ascii_wctomb+0x14>
 8005a9e:	228a      	movs	r2, #138	@ 0x8a
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aa6:	4770      	bx	lr
 8005aa8:	700a      	strb	r2, [r1, #0]
 8005aaa:	2001      	movs	r0, #1
 8005aac:	4770      	bx	lr
	...

08005ab0 <fiprintf>:
 8005ab0:	b40e      	push	{r1, r2, r3}
 8005ab2:	b503      	push	{r0, r1, lr}
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	ab03      	add	r3, sp, #12
 8005ab8:	4805      	ldr	r0, [pc, #20]	@ (8005ad0 <fiprintf+0x20>)
 8005aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	f7ff fd2d 	bl	8005520 <_vfiprintf_r>
 8005ac6:	b002      	add	sp, #8
 8005ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005acc:	b003      	add	sp, #12
 8005ace:	4770      	bx	lr
 8005ad0:	20000020 	.word	0x20000020

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	2900      	cmp	r1, #0
 8005ade:	b096      	sub	sp, #88	@ 0x58
 8005ae0:	4615      	mov	r5, r2
 8005ae2:	461e      	mov	r6, r3
 8005ae4:	da0d      	bge.n	8005b02 <__swhatbuf_r+0x2e>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2340      	movne	r3, #64	@ 0x40
 8005af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005af8:	2000      	movs	r0, #0
 8005afa:	6031      	str	r1, [r6, #0]
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	b016      	add	sp, #88	@ 0x58
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	466a      	mov	r2, sp
 8005b04:	f000 f848 	bl	8005b98 <_fstat_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	dbec      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b0c:	9901      	ldr	r1, [sp, #4]
 8005b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b16:	4259      	negs	r1, r3
 8005b18:	4159      	adcs	r1, r3
 8005b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b1e:	e7eb      	b.n	8005af8 <__swhatbuf_r+0x24>

08005b20 <__smakebuf_r>:
 8005b20:	898b      	ldrh	r3, [r1, #12]
 8005b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b24:	079d      	lsls	r5, r3, #30
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	d507      	bpl.n	8005b3c <__smakebuf_r+0x1c>
 8005b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2301      	movs	r3, #1
 8005b36:	6163      	str	r3, [r4, #20]
 8005b38:	b003      	add	sp, #12
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b3c:	ab01      	add	r3, sp, #4
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f7ff ffc8 	bl	8005ad4 <__swhatbuf_r>
 8005b44:	9f00      	ldr	r7, [sp, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff f8b8 	bl	8004cc0 <_malloc_r>
 8005b50:	b948      	cbnz	r0, 8005b66 <__smakebuf_r+0x46>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	059a      	lsls	r2, r3, #22
 8005b58:	d4ee      	bmi.n	8005b38 <__smakebuf_r+0x18>
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	e7e2      	b.n	8005b2c <__smakebuf_r+0xc>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	6020      	str	r0, [r4, #0]
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b76:	b15b      	cbz	r3, 8005b90 <__smakebuf_r+0x70>
 8005b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 f81d 	bl	8005bbc <_isatty_r>
 8005b82:	b128      	cbz	r0, 8005b90 <__smakebuf_r+0x70>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	431d      	orrs	r5, r3
 8005b94:	81a5      	strh	r5, [r4, #12]
 8005b96:	e7cf      	b.n	8005b38 <__smakebuf_r+0x18>

08005b98 <_fstat_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d07      	ldr	r5, [pc, #28]	@ (8005bb8 <_fstat_r+0x20>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fd fa50 	bl	800304a <_fstat>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_fstat_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_fstat_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000430 	.word	0x20000430

08005bbc <_isatty_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d06      	ldr	r5, [pc, #24]	@ (8005bd8 <_isatty_r+0x1c>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fd fba4 	bl	8003314 <_isatty>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_isatty_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_isatty_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20000430 	.word	0x20000430

08005bdc <abort>:
 8005bdc:	b508      	push	{r3, lr}
 8005bde:	2006      	movs	r0, #6
 8005be0:	f000 f82c 	bl	8005c3c <raise>
 8005be4:	2001      	movs	r0, #1
 8005be6:	f000 ffad 	bl	8006b44 <_exit>

08005bea <_raise_r>:
 8005bea:	291f      	cmp	r1, #31
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4605      	mov	r5, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	d904      	bls.n	8005bfe <_raise_r+0x14>
 8005bf4:	2316      	movs	r3, #22
 8005bf6:	6003      	str	r3, [r0, #0]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c00:	b112      	cbz	r2, 8005c08 <_raise_r+0x1e>
 8005c02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c06:	b94b      	cbnz	r3, 8005c1c <_raise_r+0x32>
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 f831 	bl	8005c70 <_getpid_r>
 8005c0e:	4622      	mov	r2, r4
 8005c10:	4601      	mov	r1, r0
 8005c12:	4628      	mov	r0, r5
 8005c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c18:	f000 b818 	b.w	8005c4c <_kill_r>
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d00a      	beq.n	8005c36 <_raise_r+0x4c>
 8005c20:	1c59      	adds	r1, r3, #1
 8005c22:	d103      	bne.n	8005c2c <_raise_r+0x42>
 8005c24:	2316      	movs	r3, #22
 8005c26:	6003      	str	r3, [r0, #0]
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e7e7      	b.n	8005bfc <_raise_r+0x12>
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c32:	4620      	mov	r0, r4
 8005c34:	4798      	blx	r3
 8005c36:	2000      	movs	r0, #0
 8005c38:	e7e0      	b.n	8005bfc <_raise_r+0x12>
	...

08005c3c <raise>:
 8005c3c:	4b02      	ldr	r3, [pc, #8]	@ (8005c48 <raise+0xc>)
 8005c3e:	4601      	mov	r1, r0
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f7ff bfd2 	b.w	8005bea <_raise_r>
 8005c46:	bf00      	nop
 8005c48:	20000020 	.word	0x20000020

08005c4c <_kill_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d07      	ldr	r5, [pc, #28]	@ (8005c6c <_kill_r+0x20>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	f000 ff6b 	bl	8006b34 <_kill>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d102      	bne.n	8005c68 <_kill_r+0x1c>
 8005c62:	682b      	ldr	r3, [r5, #0]
 8005c64:	b103      	cbz	r3, 8005c68 <_kill_r+0x1c>
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	bd38      	pop	{r3, r4, r5, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000430 	.word	0x20000430

08005c70 <_getpid_r>:
 8005c70:	f7fd b9c8 	b.w	8003004 <_getpid>

08005c74 <pow>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	ed2d 8b02 	vpush	{d8}
 8005c7a:	eeb0 8a40 	vmov.f32	s16, s0
 8005c7e:	eef0 8a60 	vmov.f32	s17, s1
 8005c82:	ec55 4b11 	vmov	r4, r5, d1
 8005c86:	f000 f873 	bl	8005d70 <__ieee754_pow>
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	ec57 6b10 	vmov	r6, r7, d0
 8005c96:	f7fa ff51 	bl	8000b3c <__aeabi_dcmpun>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d13b      	bne.n	8005d16 <pow+0xa2>
 8005c9e:	ec51 0b18 	vmov	r0, r1, d8
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f7fa ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8005caa:	b1b8      	cbz	r0, 8005cdc <pow+0x68>
 8005cac:	2200      	movs	r2, #0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	f7fa ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d146      	bne.n	8005d4a <pow+0xd6>
 8005cbc:	ec45 4b10 	vmov	d0, r4, r5
 8005cc0:	f000 f848 	bl	8005d54 <finite>
 8005cc4:	b338      	cbz	r0, 8005d16 <pow+0xa2>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f7fa ff0d 	bl	8000aec <__aeabi_dcmplt>
 8005cd2:	b300      	cbz	r0, 8005d16 <pow+0xa2>
 8005cd4:	f7fe f8fa 	bl	8003ecc <__errno>
 8005cd8:	2322      	movs	r3, #34	@ 0x22
 8005cda:	e01b      	b.n	8005d14 <pow+0xa0>
 8005cdc:	ec47 6b10 	vmov	d0, r6, r7
 8005ce0:	f000 f838 	bl	8005d54 <finite>
 8005ce4:	b9e0      	cbnz	r0, 8005d20 <pow+0xac>
 8005ce6:	eeb0 0a48 	vmov.f32	s0, s16
 8005cea:	eef0 0a68 	vmov.f32	s1, s17
 8005cee:	f000 f831 	bl	8005d54 <finite>
 8005cf2:	b1a8      	cbz	r0, 8005d20 <pow+0xac>
 8005cf4:	ec45 4b10 	vmov	d0, r4, r5
 8005cf8:	f000 f82c 	bl	8005d54 <finite>
 8005cfc:	b180      	cbz	r0, 8005d20 <pow+0xac>
 8005cfe:	4632      	mov	r2, r6
 8005d00:	463b      	mov	r3, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	4639      	mov	r1, r7
 8005d06:	f7fa ff19 	bl	8000b3c <__aeabi_dcmpun>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0e2      	beq.n	8005cd4 <pow+0x60>
 8005d0e:	f7fe f8dd 	bl	8003ecc <__errno>
 8005d12:	2321      	movs	r3, #33	@ 0x21
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	ecbd 8b02 	vpop	{d8}
 8005d1a:	ec47 6b10 	vmov	d0, r6, r7
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d0f2      	beq.n	8005d16 <pow+0xa2>
 8005d30:	eeb0 0a48 	vmov.f32	s0, s16
 8005d34:	eef0 0a68 	vmov.f32	s1, s17
 8005d38:	f000 f80c 	bl	8005d54 <finite>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d0ea      	beq.n	8005d16 <pow+0xa2>
 8005d40:	ec45 4b10 	vmov	d0, r4, r5
 8005d44:	f000 f806 	bl	8005d54 <finite>
 8005d48:	e7c3      	b.n	8005cd2 <pow+0x5e>
 8005d4a:	4f01      	ldr	r7, [pc, #4]	@ (8005d50 <pow+0xdc>)
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	e7e2      	b.n	8005d16 <pow+0xa2>
 8005d50:	3ff00000 	.word	0x3ff00000

08005d54 <finite>:
 8005d54:	b082      	sub	sp, #8
 8005d56:	ed8d 0b00 	vstr	d0, [sp]
 8005d5a:	9801      	ldr	r0, [sp, #4]
 8005d5c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005d60:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005d64:	0fc0      	lsrs	r0, r0, #31
 8005d66:	b002      	add	sp, #8
 8005d68:	4770      	bx	lr
 8005d6a:	0000      	movs	r0, r0
 8005d6c:	0000      	movs	r0, r0
	...

08005d70 <__ieee754_pow>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	b091      	sub	sp, #68	@ 0x44
 8005d76:	ed8d 1b00 	vstr	d1, [sp]
 8005d7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005d7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005d82:	ea5a 0001 	orrs.w	r0, sl, r1
 8005d86:	ec57 6b10 	vmov	r6, r7, d0
 8005d8a:	d113      	bne.n	8005db4 <__ieee754_pow+0x44>
 8005d8c:	19b3      	adds	r3, r6, r6
 8005d8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005d92:	4152      	adcs	r2, r2
 8005d94:	4298      	cmp	r0, r3
 8005d96:	4b9a      	ldr	r3, [pc, #616]	@ (8006000 <__ieee754_pow+0x290>)
 8005d98:	4193      	sbcs	r3, r2
 8005d9a:	f080 84ee 	bcs.w	800677a <__ieee754_pow+0xa0a>
 8005d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fa79 	bl	800029c <__adddf3>
 8005daa:	ec41 0b10 	vmov	d0, r0, r1
 8005dae:	b011      	add	sp, #68	@ 0x44
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	4a93      	ldr	r2, [pc, #588]	@ (8006004 <__ieee754_pow+0x294>)
 8005db6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8005dba:	4295      	cmp	r5, r2
 8005dbc:	46b8      	mov	r8, r7
 8005dbe:	4633      	mov	r3, r6
 8005dc0:	d80a      	bhi.n	8005dd8 <__ieee754_pow+0x68>
 8005dc2:	d104      	bne.n	8005dce <__ieee754_pow+0x5e>
 8005dc4:	2e00      	cmp	r6, #0
 8005dc6:	d1ea      	bne.n	8005d9e <__ieee754_pow+0x2e>
 8005dc8:	45aa      	cmp	sl, r5
 8005dca:	d8e8      	bhi.n	8005d9e <__ieee754_pow+0x2e>
 8005dcc:	e001      	b.n	8005dd2 <__ieee754_pow+0x62>
 8005dce:	4592      	cmp	sl, r2
 8005dd0:	d802      	bhi.n	8005dd8 <__ieee754_pow+0x68>
 8005dd2:	4592      	cmp	sl, r2
 8005dd4:	d10f      	bne.n	8005df6 <__ieee754_pow+0x86>
 8005dd6:	b171      	cbz	r1, 8005df6 <__ieee754_pow+0x86>
 8005dd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005ddc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005de0:	ea58 0803 	orrs.w	r8, r8, r3
 8005de4:	d1db      	bne.n	8005d9e <__ieee754_pow+0x2e>
 8005de6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005dea:	18db      	adds	r3, r3, r3
 8005dec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005df0:	4152      	adcs	r2, r2
 8005df2:	4598      	cmp	r8, r3
 8005df4:	e7cf      	b.n	8005d96 <__ieee754_pow+0x26>
 8005df6:	f1b8 0f00 	cmp.w	r8, #0
 8005dfa:	46ab      	mov	fp, r5
 8005dfc:	da43      	bge.n	8005e86 <__ieee754_pow+0x116>
 8005dfe:	4a82      	ldr	r2, [pc, #520]	@ (8006008 <__ieee754_pow+0x298>)
 8005e00:	4592      	cmp	sl, r2
 8005e02:	d856      	bhi.n	8005eb2 <__ieee754_pow+0x142>
 8005e04:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005e08:	4592      	cmp	sl, r2
 8005e0a:	f240 84c5 	bls.w	8006798 <__ieee754_pow+0xa28>
 8005e0e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005e12:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005e16:	2a14      	cmp	r2, #20
 8005e18:	dd18      	ble.n	8005e4c <__ieee754_pow+0xdc>
 8005e1a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005e1e:	fa21 f402 	lsr.w	r4, r1, r2
 8005e22:	fa04 f202 	lsl.w	r2, r4, r2
 8005e26:	428a      	cmp	r2, r1
 8005e28:	f040 84b6 	bne.w	8006798 <__ieee754_pow+0xa28>
 8005e2c:	f004 0401 	and.w	r4, r4, #1
 8005e30:	f1c4 0402 	rsb	r4, r4, #2
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d159      	bne.n	8005eec <__ieee754_pow+0x17c>
 8005e38:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005e3c:	d148      	bne.n	8005ed0 <__ieee754_pow+0x160>
 8005e3e:	4632      	mov	r2, r6
 8005e40:	463b      	mov	r3, r7
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa fbdf 	bl	8000608 <__aeabi_dmul>
 8005e4a:	e7ae      	b.n	8005daa <__ieee754_pow+0x3a>
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d14c      	bne.n	8005eea <__ieee754_pow+0x17a>
 8005e50:	f1c2 0214 	rsb	r2, r2, #20
 8005e54:	fa4a f402 	asr.w	r4, sl, r2
 8005e58:	fa04 f202 	lsl.w	r2, r4, r2
 8005e5c:	4552      	cmp	r2, sl
 8005e5e:	f040 8498 	bne.w	8006792 <__ieee754_pow+0xa22>
 8005e62:	f004 0401 	and.w	r4, r4, #1
 8005e66:	f1c4 0402 	rsb	r4, r4, #2
 8005e6a:	4a68      	ldr	r2, [pc, #416]	@ (800600c <__ieee754_pow+0x29c>)
 8005e6c:	4592      	cmp	sl, r2
 8005e6e:	d1e3      	bne.n	8005e38 <__ieee754_pow+0xc8>
 8005e70:	f1b9 0f00 	cmp.w	r9, #0
 8005e74:	f280 8489 	bge.w	800678a <__ieee754_pow+0xa1a>
 8005e78:	4964      	ldr	r1, [pc, #400]	@ (800600c <__ieee754_pow+0x29c>)
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7fa fcec 	bl	800085c <__aeabi_ddiv>
 8005e84:	e791      	b.n	8005daa <__ieee754_pow+0x3a>
 8005e86:	2400      	movs	r4, #0
 8005e88:	bb81      	cbnz	r1, 8005eec <__ieee754_pow+0x17c>
 8005e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006004 <__ieee754_pow+0x294>)
 8005e8c:	4592      	cmp	sl, r2
 8005e8e:	d1ec      	bne.n	8005e6a <__ieee754_pow+0xfa>
 8005e90:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8005e94:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	f000 846e 	beq.w	800677a <__ieee754_pow+0xa0a>
 8005e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8006010 <__ieee754_pow+0x2a0>)
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	d908      	bls.n	8005eb6 <__ieee754_pow+0x146>
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	f280 846b 	bge.w	8006782 <__ieee754_pow+0xa12>
 8005eac:	2000      	movs	r0, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	e77b      	b.n	8005daa <__ieee754_pow+0x3a>
 8005eb2:	2402      	movs	r4, #2
 8005eb4:	e7e8      	b.n	8005e88 <__ieee754_pow+0x118>
 8005eb6:	f1b9 0f00 	cmp.w	r9, #0
 8005eba:	f04f 0000 	mov.w	r0, #0
 8005ebe:	f04f 0100 	mov.w	r1, #0
 8005ec2:	f6bf af72 	bge.w	8005daa <__ieee754_pow+0x3a>
 8005ec6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005eca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005ece:	e76c      	b.n	8005daa <__ieee754_pow+0x3a>
 8005ed0:	4a50      	ldr	r2, [pc, #320]	@ (8006014 <__ieee754_pow+0x2a4>)
 8005ed2:	4591      	cmp	r9, r2
 8005ed4:	d10a      	bne.n	8005eec <__ieee754_pow+0x17c>
 8005ed6:	f1b8 0f00 	cmp.w	r8, #0
 8005eda:	db07      	blt.n	8005eec <__ieee754_pow+0x17c>
 8005edc:	ec47 6b10 	vmov	d0, r6, r7
 8005ee0:	b011      	add	sp, #68	@ 0x44
 8005ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	f000 bd4f 	b.w	8006988 <__ieee754_sqrt>
 8005eea:	2400      	movs	r4, #0
 8005eec:	ec47 6b10 	vmov	d0, r6, r7
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	f000 fc87 	bl	8006804 <fabs>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	ec51 0b10 	vmov	r0, r1, d0
 8005efc:	bb43      	cbnz	r3, 8005f50 <__ieee754_pow+0x1e0>
 8005efe:	4b43      	ldr	r3, [pc, #268]	@ (800600c <__ieee754_pow+0x29c>)
 8005f00:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d000      	beq.n	8005f0a <__ieee754_pow+0x19a>
 8005f08:	bb15      	cbnz	r5, 8005f50 <__ieee754_pow+0x1e0>
 8005f0a:	f1b9 0f00 	cmp.w	r9, #0
 8005f0e:	da05      	bge.n	8005f1c <__ieee754_pow+0x1ac>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	2000      	movs	r0, #0
 8005f16:	493d      	ldr	r1, [pc, #244]	@ (800600c <__ieee754_pow+0x29c>)
 8005f18:	f7fa fca0 	bl	800085c <__aeabi_ddiv>
 8005f1c:	f1b8 0f00 	cmp.w	r8, #0
 8005f20:	f6bf af43 	bge.w	8005daa <__ieee754_pow+0x3a>
 8005f24:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005f28:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005f2c:	4325      	orrs	r5, r4
 8005f2e:	d108      	bne.n	8005f42 <__ieee754_pow+0x1d2>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	f7fa f9ae 	bl	8000298 <__aeabi_dsub>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	e79e      	b.n	8005e80 <__ieee754_pow+0x110>
 8005f42:	2c01      	cmp	r4, #1
 8005f44:	f47f af31 	bne.w	8005daa <__ieee754_pow+0x3a>
 8005f48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	e72c      	b.n	8005daa <__ieee754_pow+0x3a>
 8005f50:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8005f54:	3b01      	subs	r3, #1
 8005f56:	ea53 0204 	orrs.w	r2, r3, r4
 8005f5a:	d102      	bne.n	8005f62 <__ieee754_pow+0x1f2>
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	463b      	mov	r3, r7
 8005f60:	e7e8      	b.n	8005f34 <__ieee754_pow+0x1c4>
 8005f62:	3c01      	subs	r4, #1
 8005f64:	431c      	orrs	r4, r3
 8005f66:	d016      	beq.n	8005f96 <__ieee754_pow+0x226>
 8005f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005ff0 <__ieee754_pow+0x280>
 8005f6c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f74:	f240 8110 	bls.w	8006198 <__ieee754_pow+0x428>
 8005f78:	4b27      	ldr	r3, [pc, #156]	@ (8006018 <__ieee754_pow+0x2a8>)
 8005f7a:	459a      	cmp	sl, r3
 8005f7c:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <__ieee754_pow+0x2a0>)
 8005f7e:	d916      	bls.n	8005fae <__ieee754_pow+0x23e>
 8005f80:	429d      	cmp	r5, r3
 8005f82:	d80b      	bhi.n	8005f9c <__ieee754_pow+0x22c>
 8005f84:	f1b9 0f00 	cmp.w	r9, #0
 8005f88:	da0b      	bge.n	8005fa2 <__ieee754_pow+0x232>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	b011      	add	sp, #68	@ 0x44
 8005f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f92:	f000 bcf1 	b.w	8006978 <__math_oflow>
 8005f96:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8005ff8 <__ieee754_pow+0x288>
 8005f9a:	e7e7      	b.n	8005f6c <__ieee754_pow+0x1fc>
 8005f9c:	f1b9 0f00 	cmp.w	r9, #0
 8005fa0:	dcf3      	bgt.n	8005f8a <__ieee754_pow+0x21a>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	b011      	add	sp, #68	@ 0x44
 8005fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f000 bcdd 	b.w	8006968 <__math_uflow>
 8005fae:	429d      	cmp	r5, r3
 8005fb0:	d20c      	bcs.n	8005fcc <__ieee754_pow+0x25c>
 8005fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f7fa fd97 	bl	8000aec <__aeabi_dcmplt>
 8005fbe:	3800      	subs	r0, #0
 8005fc0:	bf18      	it	ne
 8005fc2:	2001      	movne	r0, #1
 8005fc4:	f1b9 0f00 	cmp.w	r9, #0
 8005fc8:	daec      	bge.n	8005fa4 <__ieee754_pow+0x234>
 8005fca:	e7df      	b.n	8005f8c <__ieee754_pow+0x21c>
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <__ieee754_pow+0x29c>)
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	d922      	bls.n	800601c <__ieee754_pow+0x2ac>
 8005fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f7fa fd86 	bl	8000aec <__aeabi_dcmplt>
 8005fe0:	3800      	subs	r0, #0
 8005fe2:	bf18      	it	ne
 8005fe4:	2001      	movne	r0, #1
 8005fe6:	f1b9 0f00 	cmp.w	r9, #0
 8005fea:	dccf      	bgt.n	8005f8c <__ieee754_pow+0x21c>
 8005fec:	e7da      	b.n	8005fa4 <__ieee754_pow+0x234>
 8005fee:	bf00      	nop
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	3ff00000 	.word	0x3ff00000
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	bff00000 	.word	0xbff00000
 8006000:	fff00000 	.word	0xfff00000
 8006004:	7ff00000 	.word	0x7ff00000
 8006008:	433fffff 	.word	0x433fffff
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	3fefffff 	.word	0x3fefffff
 8006014:	3fe00000 	.word	0x3fe00000
 8006018:	43f00000 	.word	0x43f00000
 800601c:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <__ieee754_pow+0x418>)
 800601e:	f7fa f93b 	bl	8000298 <__aeabi_dsub>
 8006022:	a351      	add	r3, pc, #324	@ (adr r3, 8006168 <__ieee754_pow+0x3f8>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	4604      	mov	r4, r0
 800602a:	460d      	mov	r5, r1
 800602c:	f7fa faec 	bl	8000608 <__aeabi_dmul>
 8006030:	a34f      	add	r3, pc, #316	@ (adr r3, 8006170 <__ieee754_pow+0x400>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	4606      	mov	r6, r0
 8006038:	460f      	mov	r7, r1
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fa fae3 	bl	8000608 <__aeabi_dmul>
 8006042:	4b52      	ldr	r3, [pc, #328]	@ (800618c <__ieee754_pow+0x41c>)
 8006044:	4682      	mov	sl, r0
 8006046:	468b      	mov	fp, r1
 8006048:	2200      	movs	r2, #0
 800604a:	4620      	mov	r0, r4
 800604c:	4629      	mov	r1, r5
 800604e:	f7fa fadb 	bl	8000608 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	a148      	add	r1, pc, #288	@ (adr r1, 8006178 <__ieee754_pow+0x408>)
 8006058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800605c:	f7fa f91c 	bl	8000298 <__aeabi_dsub>
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	f7fa fad0 	bl	8000608 <__aeabi_dmul>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	2000      	movs	r0, #0
 800606e:	4948      	ldr	r1, [pc, #288]	@ (8006190 <__ieee754_pow+0x420>)
 8006070:	f7fa f912 	bl	8000298 <__aeabi_dsub>
 8006074:	4622      	mov	r2, r4
 8006076:	4680      	mov	r8, r0
 8006078:	4689      	mov	r9, r1
 800607a:	462b      	mov	r3, r5
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa fac2 	bl	8000608 <__aeabi_dmul>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa fabc 	bl	8000608 <__aeabi_dmul>
 8006090:	a33b      	add	r3, pc, #236	@ (adr r3, 8006180 <__ieee754_pow+0x410>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa fab7 	bl	8000608 <__aeabi_dmul>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4650      	mov	r0, sl
 80060a0:	4659      	mov	r1, fp
 80060a2:	f7fa f8f9 	bl	8000298 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4680      	mov	r8, r0
 80060ac:	4689      	mov	r9, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f8f3 	bl	800029c <__adddf3>
 80060b6:	2400      	movs	r4, #0
 80060b8:	4632      	mov	r2, r6
 80060ba:	463b      	mov	r3, r7
 80060bc:	4620      	mov	r0, r4
 80060be:	460d      	mov	r5, r1
 80060c0:	f7fa f8ea 	bl	8000298 <__aeabi_dsub>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa f8e4 	bl	8000298 <__aeabi_dsub>
 80060d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060d8:	2300      	movs	r3, #0
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80060e0:	4606      	mov	r6, r0
 80060e2:	460f      	mov	r7, r1
 80060e4:	465b      	mov	r3, fp
 80060e6:	4652      	mov	r2, sl
 80060e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ec:	f7fa f8d4 	bl	8000298 <__aeabi_dsub>
 80060f0:	4622      	mov	r2, r4
 80060f2:	462b      	mov	r3, r5
 80060f4:	f7fa fa88 	bl	8000608 <__aeabi_dmul>
 80060f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fa80 	bl	8000608 <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa f8c4 	bl	800029c <__adddf3>
 8006114:	465b      	mov	r3, fp
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	4652      	mov	r2, sl
 800611c:	4620      	mov	r0, r4
 800611e:	4629      	mov	r1, r5
 8006120:	f7fa fa72 	bl	8000608 <__aeabi_dmul>
 8006124:	460b      	mov	r3, r1
 8006126:	4602      	mov	r2, r0
 8006128:	4680      	mov	r8, r0
 800612a:	4689      	mov	r9, r1
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa f8b4 	bl	800029c <__adddf3>
 8006134:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <__ieee754_pow+0x424>)
 8006136:	4299      	cmp	r1, r3
 8006138:	4604      	mov	r4, r0
 800613a:	460d      	mov	r5, r1
 800613c:	468b      	mov	fp, r1
 800613e:	f340 820b 	ble.w	8006558 <__ieee754_pow+0x7e8>
 8006142:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006146:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800614a:	4303      	orrs	r3, r0
 800614c:	f000 81ea 	beq.w	8006524 <__ieee754_pow+0x7b4>
 8006150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	2300      	movs	r3, #0
 8006158:	f7fa fcc8 	bl	8000aec <__aeabi_dcmplt>
 800615c:	3800      	subs	r0, #0
 800615e:	bf18      	it	ne
 8006160:	2001      	movne	r0, #1
 8006162:	e713      	b.n	8005f8c <__ieee754_pow+0x21c>
 8006164:	f3af 8000 	nop.w
 8006168:	60000000 	.word	0x60000000
 800616c:	3ff71547 	.word	0x3ff71547
 8006170:	f85ddf44 	.word	0xf85ddf44
 8006174:	3e54ae0b 	.word	0x3e54ae0b
 8006178:	55555555 	.word	0x55555555
 800617c:	3fd55555 	.word	0x3fd55555
 8006180:	652b82fe 	.word	0x652b82fe
 8006184:	3ff71547 	.word	0x3ff71547
 8006188:	3ff00000 	.word	0x3ff00000
 800618c:	3fd00000 	.word	0x3fd00000
 8006190:	3fe00000 	.word	0x3fe00000
 8006194:	408fffff 	.word	0x408fffff
 8006198:	4bd5      	ldr	r3, [pc, #852]	@ (80064f0 <__ieee754_pow+0x780>)
 800619a:	ea08 0303 	and.w	r3, r8, r3
 800619e:	2200      	movs	r2, #0
 80061a0:	b92b      	cbnz	r3, 80061ae <__ieee754_pow+0x43e>
 80061a2:	4bd4      	ldr	r3, [pc, #848]	@ (80064f4 <__ieee754_pow+0x784>)
 80061a4:	f7fa fa30 	bl	8000608 <__aeabi_dmul>
 80061a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80061ac:	468b      	mov	fp, r1
 80061ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 80061b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80061b6:	4413      	add	r3, r2
 80061b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ba:	4bcf      	ldr	r3, [pc, #828]	@ (80064f8 <__ieee754_pow+0x788>)
 80061bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80061c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80061c4:	459b      	cmp	fp, r3
 80061c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80061ca:	dd08      	ble.n	80061de <__ieee754_pow+0x46e>
 80061cc:	4bcb      	ldr	r3, [pc, #812]	@ (80064fc <__ieee754_pow+0x78c>)
 80061ce:	459b      	cmp	fp, r3
 80061d0:	f340 81a5 	ble.w	800651e <__ieee754_pow+0x7ae>
 80061d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061d6:	3301      	adds	r3, #1
 80061d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80061de:	f04f 0a00 	mov.w	sl, #0
 80061e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80061e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e8:	4bc5      	ldr	r3, [pc, #788]	@ (8006500 <__ieee754_pow+0x790>)
 80061ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061ee:	ed93 7b00 	vldr	d7, [r3]
 80061f2:	4629      	mov	r1, r5
 80061f4:	ec53 2b17 	vmov	r2, r3, d7
 80061f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80061fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006200:	f7fa f84a 	bl	8000298 <__aeabi_dsub>
 8006204:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006208:	4606      	mov	r6, r0
 800620a:	460f      	mov	r7, r1
 800620c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006210:	f7fa f844 	bl	800029c <__adddf3>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	2000      	movs	r0, #0
 800621a:	49ba      	ldr	r1, [pc, #744]	@ (8006504 <__ieee754_pow+0x794>)
 800621c:	f7fa fb1e 	bl	800085c <__aeabi_ddiv>
 8006220:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006234:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006238:	106d      	asrs	r5, r5, #1
 800623a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800623e:	f04f 0b00 	mov.w	fp, #0
 8006242:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006246:	4661      	mov	r1, ip
 8006248:	2200      	movs	r2, #0
 800624a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800624e:	4658      	mov	r0, fp
 8006250:	46e1      	mov	r9, ip
 8006252:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006256:	4614      	mov	r4, r2
 8006258:	461d      	mov	r5, r3
 800625a:	f7fa f9d5 	bl	8000608 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa f817 	bl	8000298 <__aeabi_dsub>
 800626a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	4620      	mov	r0, r4
 8006274:	4629      	mov	r1, r5
 8006276:	f7fa f80f 	bl	8000298 <__aeabi_dsub>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006282:	f7fa f809 	bl	8000298 <__aeabi_dsub>
 8006286:	465a      	mov	r2, fp
 8006288:	464b      	mov	r3, r9
 800628a:	f7fa f9bd 	bl	8000608 <__aeabi_dmul>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	f7f9 ffff 	bl	8000298 <__aeabi_dsub>
 800629a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800629e:	f7fa f9b3 	bl	8000608 <__aeabi_dmul>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7fa f9ab 	bl	8000608 <__aeabi_dmul>
 80062b2:	a37d      	add	r3, pc, #500	@ (adr r3, 80064a8 <__ieee754_pow+0x738>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	f7fa f9a4 	bl	8000608 <__aeabi_dmul>
 80062c0:	a37b      	add	r3, pc, #492	@ (adr r3, 80064b0 <__ieee754_pow+0x740>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7f9 ffe9 	bl	800029c <__adddf3>
 80062ca:	4622      	mov	r2, r4
 80062cc:	462b      	mov	r3, r5
 80062ce:	f7fa f99b 	bl	8000608 <__aeabi_dmul>
 80062d2:	a379      	add	r3, pc, #484	@ (adr r3, 80064b8 <__ieee754_pow+0x748>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7f9 ffe0 	bl	800029c <__adddf3>
 80062dc:	4622      	mov	r2, r4
 80062de:	462b      	mov	r3, r5
 80062e0:	f7fa f992 	bl	8000608 <__aeabi_dmul>
 80062e4:	a376      	add	r3, pc, #472	@ (adr r3, 80064c0 <__ieee754_pow+0x750>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ffd7 	bl	800029c <__adddf3>
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	f7fa f989 	bl	8000608 <__aeabi_dmul>
 80062f6:	a374      	add	r3, pc, #464	@ (adr r3, 80064c8 <__ieee754_pow+0x758>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ffce 	bl	800029c <__adddf3>
 8006300:	4622      	mov	r2, r4
 8006302:	462b      	mov	r3, r5
 8006304:	f7fa f980 	bl	8000608 <__aeabi_dmul>
 8006308:	a371      	add	r3, pc, #452	@ (adr r3, 80064d0 <__ieee754_pow+0x760>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7f9 ffc5 	bl	800029c <__adddf3>
 8006312:	4622      	mov	r2, r4
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	462b      	mov	r3, r5
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa f973 	bl	8000608 <__aeabi_dmul>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4630      	mov	r0, r6
 8006328:	4639      	mov	r1, r7
 800632a:	f7fa f96d 	bl	8000608 <__aeabi_dmul>
 800632e:	465a      	mov	r2, fp
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	464b      	mov	r3, r9
 8006336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800633a:	f7f9 ffaf 	bl	800029c <__adddf3>
 800633e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006342:	f7fa f961 	bl	8000608 <__aeabi_dmul>
 8006346:	4622      	mov	r2, r4
 8006348:	462b      	mov	r3, r5
 800634a:	f7f9 ffa7 	bl	800029c <__adddf3>
 800634e:	465a      	mov	r2, fp
 8006350:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006354:	464b      	mov	r3, r9
 8006356:	4658      	mov	r0, fp
 8006358:	4649      	mov	r1, r9
 800635a:	f7fa f955 	bl	8000608 <__aeabi_dmul>
 800635e:	4b6a      	ldr	r3, [pc, #424]	@ (8006508 <__ieee754_pow+0x798>)
 8006360:	2200      	movs	r2, #0
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	f7f9 ff99 	bl	800029c <__adddf3>
 800636a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800636e:	f7f9 ff95 	bl	800029c <__adddf3>
 8006372:	46d8      	mov	r8, fp
 8006374:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006378:	460d      	mov	r5, r1
 800637a:	465a      	mov	r2, fp
 800637c:	460b      	mov	r3, r1
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006386:	f7fa f93f 	bl	8000608 <__aeabi_dmul>
 800638a:	465c      	mov	r4, fp
 800638c:	4680      	mov	r8, r0
 800638e:	4689      	mov	r9, r1
 8006390:	4b5d      	ldr	r3, [pc, #372]	@ (8006508 <__ieee754_pow+0x798>)
 8006392:	2200      	movs	r2, #0
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 ff7e 	bl	8000298 <__aeabi_dsub>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	f7f9 ff7a 	bl	8000298 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063ac:	f7f9 ff74 	bl	8000298 <__aeabi_dsub>
 80063b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b4:	f7fa f928 	bl	8000608 <__aeabi_dmul>
 80063b8:	4622      	mov	r2, r4
 80063ba:	4606      	mov	r6, r0
 80063bc:	460f      	mov	r7, r1
 80063be:	462b      	mov	r3, r5
 80063c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c4:	f7fa f920 	bl	8000608 <__aeabi_dmul>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7f9 ff64 	bl	800029c <__adddf3>
 80063d4:	4606      	mov	r6, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4640      	mov	r0, r8
 80063de:	4649      	mov	r1, r9
 80063e0:	f7f9 ff5c 	bl	800029c <__adddf3>
 80063e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80063e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80064d8 <__ieee754_pow+0x768>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	4658      	mov	r0, fp
 80063f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80063f4:	460d      	mov	r5, r1
 80063f6:	f7fa f907 	bl	8000608 <__aeabi_dmul>
 80063fa:	465c      	mov	r4, fp
 80063fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7f9 ff46 	bl	8000298 <__aeabi_dsub>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7f9 ff40 	bl	8000298 <__aeabi_dsub>
 8006418:	a331      	add	r3, pc, #196	@ (adr r3, 80064e0 <__ieee754_pow+0x770>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7fa f8f3 	bl	8000608 <__aeabi_dmul>
 8006422:	a331      	add	r3, pc, #196	@ (adr r3, 80064e8 <__ieee754_pow+0x778>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7fa f8ea 	bl	8000608 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7f9 ff2e 	bl	800029c <__adddf3>
 8006440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006442:	4b32      	ldr	r3, [pc, #200]	@ (800650c <__ieee754_pow+0x79c>)
 8006444:	4413      	add	r3, r2
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 ff27 	bl	800029c <__adddf3>
 800644e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006452:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006454:	f7fa f86e 	bl	8000534 <__aeabi_i2d>
 8006458:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800645a:	4b2d      	ldr	r3, [pc, #180]	@ (8006510 <__ieee754_pow+0x7a0>)
 800645c:	4413      	add	r3, r2
 800645e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006462:	4606      	mov	r6, r0
 8006464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006468:	460f      	mov	r7, r1
 800646a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800646e:	f7f9 ff15 	bl	800029c <__adddf3>
 8006472:	4642      	mov	r2, r8
 8006474:	464b      	mov	r3, r9
 8006476:	f7f9 ff11 	bl	800029c <__adddf3>
 800647a:	4632      	mov	r2, r6
 800647c:	463b      	mov	r3, r7
 800647e:	f7f9 ff0d 	bl	800029c <__adddf3>
 8006482:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006486:	4632      	mov	r2, r6
 8006488:	463b      	mov	r3, r7
 800648a:	4658      	mov	r0, fp
 800648c:	460d      	mov	r5, r1
 800648e:	f7f9 ff03 	bl	8000298 <__aeabi_dsub>
 8006492:	4642      	mov	r2, r8
 8006494:	464b      	mov	r3, r9
 8006496:	f7f9 feff 	bl	8000298 <__aeabi_dsub>
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	f7f9 fefb 	bl	8000298 <__aeabi_dsub>
 80064a2:	465c      	mov	r4, fp
 80064a4:	e036      	b.n	8006514 <__ieee754_pow+0x7a4>
 80064a6:	bf00      	nop
 80064a8:	4a454eef 	.word	0x4a454eef
 80064ac:	3fca7e28 	.word	0x3fca7e28
 80064b0:	93c9db65 	.word	0x93c9db65
 80064b4:	3fcd864a 	.word	0x3fcd864a
 80064b8:	a91d4101 	.word	0xa91d4101
 80064bc:	3fd17460 	.word	0x3fd17460
 80064c0:	518f264d 	.word	0x518f264d
 80064c4:	3fd55555 	.word	0x3fd55555
 80064c8:	db6fabff 	.word	0xdb6fabff
 80064cc:	3fdb6db6 	.word	0x3fdb6db6
 80064d0:	33333303 	.word	0x33333303
 80064d4:	3fe33333 	.word	0x3fe33333
 80064d8:	e0000000 	.word	0xe0000000
 80064dc:	3feec709 	.word	0x3feec709
 80064e0:	dc3a03fd 	.word	0xdc3a03fd
 80064e4:	3feec709 	.word	0x3feec709
 80064e8:	145b01f5 	.word	0x145b01f5
 80064ec:	be3e2fe0 	.word	0xbe3e2fe0
 80064f0:	7ff00000 	.word	0x7ff00000
 80064f4:	43400000 	.word	0x43400000
 80064f8:	0003988e 	.word	0x0003988e
 80064fc:	000bb679 	.word	0x000bb679
 8006500:	08006f60 	.word	0x08006f60
 8006504:	3ff00000 	.word	0x3ff00000
 8006508:	40080000 	.word	0x40080000
 800650c:	08006f40 	.word	0x08006f40
 8006510:	08006f50 	.word	0x08006f50
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651c:	e5d6      	b.n	80060cc <__ieee754_pow+0x35c>
 800651e:	f04f 0a01 	mov.w	sl, #1
 8006522:	e65e      	b.n	80061e2 <__ieee754_pow+0x472>
 8006524:	a3b5      	add	r3, pc, #724	@ (adr r3, 80067fc <__ieee754_pow+0xa8c>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	f7f9 feb5 	bl	800029c <__adddf3>
 8006532:	4642      	mov	r2, r8
 8006534:	e9cd 0100 	strd	r0, r1, [sp]
 8006538:	464b      	mov	r3, r9
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7f9 feab 	bl	8000298 <__aeabi_dsub>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800654a:	f7fa faed 	bl	8000b28 <__aeabi_dcmpgt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f47f adfe 	bne.w	8006150 <__ieee754_pow+0x3e0>
 8006554:	4ba2      	ldr	r3, [pc, #648]	@ (80067e0 <__ieee754_pow+0xa70>)
 8006556:	e022      	b.n	800659e <__ieee754_pow+0x82e>
 8006558:	4ca2      	ldr	r4, [pc, #648]	@ (80067e4 <__ieee754_pow+0xa74>)
 800655a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800655e:	42a3      	cmp	r3, r4
 8006560:	d919      	bls.n	8006596 <__ieee754_pow+0x826>
 8006562:	4ba1      	ldr	r3, [pc, #644]	@ (80067e8 <__ieee754_pow+0xa78>)
 8006564:	440b      	add	r3, r1
 8006566:	4303      	orrs	r3, r0
 8006568:	d009      	beq.n	800657e <__ieee754_pow+0x80e>
 800656a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	f7fa fabb 	bl	8000aec <__aeabi_dcmplt>
 8006576:	3800      	subs	r0, #0
 8006578:	bf18      	it	ne
 800657a:	2001      	movne	r0, #1
 800657c:	e512      	b.n	8005fa4 <__ieee754_pow+0x234>
 800657e:	4642      	mov	r2, r8
 8006580:	464b      	mov	r3, r9
 8006582:	f7f9 fe89 	bl	8000298 <__aeabi_dsub>
 8006586:	4632      	mov	r2, r6
 8006588:	463b      	mov	r3, r7
 800658a:	f7fa fac3 	bl	8000b14 <__aeabi_dcmpge>
 800658e:	2800      	cmp	r0, #0
 8006590:	d1eb      	bne.n	800656a <__ieee754_pow+0x7fa>
 8006592:	4b96      	ldr	r3, [pc, #600]	@ (80067ec <__ieee754_pow+0xa7c>)
 8006594:	e003      	b.n	800659e <__ieee754_pow+0x82e>
 8006596:	4a96      	ldr	r2, [pc, #600]	@ (80067f0 <__ieee754_pow+0xa80>)
 8006598:	4293      	cmp	r3, r2
 800659a:	f240 80e7 	bls.w	800676c <__ieee754_pow+0x9fc>
 800659e:	151b      	asrs	r3, r3, #20
 80065a0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80065a4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80065a8:	fa4a fa03 	asr.w	sl, sl, r3
 80065ac:	44da      	add	sl, fp
 80065ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80065b2:	4890      	ldr	r0, [pc, #576]	@ (80067f4 <__ieee754_pow+0xa84>)
 80065b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80065b8:	4108      	asrs	r0, r1
 80065ba:	ea00 030a 	and.w	r3, r0, sl
 80065be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80065c2:	f1c1 0114 	rsb	r1, r1, #20
 80065c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80065ca:	fa4a fa01 	asr.w	sl, sl, r1
 80065ce:	f1bb 0f00 	cmp.w	fp, #0
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	bfb8      	it	lt
 80065dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80065e0:	f7f9 fe5a 	bl	8000298 <__aeabi_dsub>
 80065e4:	4680      	mov	r8, r0
 80065e6:	4689      	mov	r9, r1
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	4640      	mov	r0, r8
 80065ee:	4649      	mov	r1, r9
 80065f0:	f7f9 fe54 	bl	800029c <__adddf3>
 80065f4:	2400      	movs	r4, #0
 80065f6:	a36a      	add	r3, pc, #424	@ (adr r3, 80067a0 <__ieee754_pow+0xa30>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	4620      	mov	r0, r4
 80065fe:	460d      	mov	r5, r1
 8006600:	f7fa f802 	bl	8000608 <__aeabi_dmul>
 8006604:	4642      	mov	r2, r8
 8006606:	e9cd 0100 	strd	r0, r1, [sp]
 800660a:	464b      	mov	r3, r9
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7f9 fe42 	bl	8000298 <__aeabi_dsub>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7f9 fe3c 	bl	8000298 <__aeabi_dsub>
 8006620:	a361      	add	r3, pc, #388	@ (adr r3, 80067a8 <__ieee754_pow+0xa38>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffef 	bl	8000608 <__aeabi_dmul>
 800662a:	a361      	add	r3, pc, #388	@ (adr r3, 80067b0 <__ieee754_pow+0xa40>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	4680      	mov	r8, r0
 8006632:	4689      	mov	r9, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fe2a 	bl	800029c <__adddf3>
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006654:	f7f9 fe22 	bl	800029c <__adddf3>
 8006658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	f7f9 fe1a 	bl	8000298 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7f9 fe14 	bl	8000298 <__aeabi_dsub>
 8006670:	4642      	mov	r2, r8
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	464b      	mov	r3, r9
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	f7f9 ffc4 	bl	8000608 <__aeabi_dmul>
 8006680:	a34d      	add	r3, pc, #308	@ (adr r3, 80067b8 <__ieee754_pow+0xa48>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7f9 ffbd 	bl	8000608 <__aeabi_dmul>
 800668e:	a34c      	add	r3, pc, #304	@ (adr r3, 80067c0 <__ieee754_pow+0xa50>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fe00 	bl	8000298 <__aeabi_dsub>
 8006698:	4622      	mov	r2, r4
 800669a:	462b      	mov	r3, r5
 800669c:	f7f9 ffb4 	bl	8000608 <__aeabi_dmul>
 80066a0:	a349      	add	r3, pc, #292	@ (adr r3, 80067c8 <__ieee754_pow+0xa58>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 fdf9 	bl	800029c <__adddf3>
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f7f9 ffab 	bl	8000608 <__aeabi_dmul>
 80066b2:	a347      	add	r3, pc, #284	@ (adr r3, 80067d0 <__ieee754_pow+0xa60>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 fdee 	bl	8000298 <__aeabi_dsub>
 80066bc:	4622      	mov	r2, r4
 80066be:	462b      	mov	r3, r5
 80066c0:	f7f9 ffa2 	bl	8000608 <__aeabi_dmul>
 80066c4:	a344      	add	r3, pc, #272	@ (adr r3, 80067d8 <__ieee754_pow+0xa68>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fde7 	bl	800029c <__adddf3>
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	f7f9 ff99 	bl	8000608 <__aeabi_dmul>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fddb 	bl	8000298 <__aeabi_dsub>
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7f9 ff8b 	bl	8000608 <__aeabi_dmul>
 80066f2:	2200      	movs	r2, #0
 80066f4:	e9cd 0100 	strd	r0, r1, [sp]
 80066f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	f7f9 fdca 	bl	8000298 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800670c:	f7fa f8a6 	bl	800085c <__aeabi_ddiv>
 8006710:	4632      	mov	r2, r6
 8006712:	4604      	mov	r4, r0
 8006714:	460d      	mov	r5, r1
 8006716:	463b      	mov	r3, r7
 8006718:	4640      	mov	r0, r8
 800671a:	4649      	mov	r1, r9
 800671c:	f7f9 ff74 	bl	8000608 <__aeabi_dmul>
 8006720:	4632      	mov	r2, r6
 8006722:	463b      	mov	r3, r7
 8006724:	f7f9 fdba 	bl	800029c <__adddf3>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7f9 fdb2 	bl	8000298 <__aeabi_dsub>
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	f7f9 fdae 	bl	8000298 <__aeabi_dsub>
 800673c:	460b      	mov	r3, r1
 800673e:	4602      	mov	r2, r0
 8006740:	492d      	ldr	r1, [pc, #180]	@ (80067f8 <__ieee754_pow+0xa88>)
 8006742:	2000      	movs	r0, #0
 8006744:	f7f9 fda8 	bl	8000298 <__aeabi_dsub>
 8006748:	ec41 0b10 	vmov	d0, r0, r1
 800674c:	ee10 3a90 	vmov	r3, s1
 8006750:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006758:	da0b      	bge.n	8006772 <__ieee754_pow+0xa02>
 800675a:	4650      	mov	r0, sl
 800675c:	f000 f85c 	bl	8006818 <scalbn>
 8006760:	ec51 0b10 	vmov	r0, r1, d0
 8006764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006768:	f7ff bb6d 	b.w	8005e46 <__ieee754_pow+0xd6>
 800676c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006770:	e73a      	b.n	80065e8 <__ieee754_pow+0x878>
 8006772:	ec51 0b10 	vmov	r0, r1, d0
 8006776:	4619      	mov	r1, r3
 8006778:	e7f4      	b.n	8006764 <__ieee754_pow+0x9f4>
 800677a:	491f      	ldr	r1, [pc, #124]	@ (80067f8 <__ieee754_pow+0xa88>)
 800677c:	2000      	movs	r0, #0
 800677e:	f7ff bb14 	b.w	8005daa <__ieee754_pow+0x3a>
 8006782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006786:	f7ff bb10 	b.w	8005daa <__ieee754_pow+0x3a>
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7ff bb0c 	b.w	8005daa <__ieee754_pow+0x3a>
 8006792:	460c      	mov	r4, r1
 8006794:	f7ff bb69 	b.w	8005e6a <__ieee754_pow+0xfa>
 8006798:	2400      	movs	r4, #0
 800679a:	f7ff bb4b 	b.w	8005e34 <__ieee754_pow+0xc4>
 800679e:	bf00      	nop
 80067a0:	00000000 	.word	0x00000000
 80067a4:	3fe62e43 	.word	0x3fe62e43
 80067a8:	fefa39ef 	.word	0xfefa39ef
 80067ac:	3fe62e42 	.word	0x3fe62e42
 80067b0:	0ca86c39 	.word	0x0ca86c39
 80067b4:	be205c61 	.word	0xbe205c61
 80067b8:	72bea4d0 	.word	0x72bea4d0
 80067bc:	3e663769 	.word	0x3e663769
 80067c0:	c5d26bf1 	.word	0xc5d26bf1
 80067c4:	3ebbbd41 	.word	0x3ebbbd41
 80067c8:	af25de2c 	.word	0xaf25de2c
 80067cc:	3f11566a 	.word	0x3f11566a
 80067d0:	16bebd93 	.word	0x16bebd93
 80067d4:	3f66c16c 	.word	0x3f66c16c
 80067d8:	5555553e 	.word	0x5555553e
 80067dc:	3fc55555 	.word	0x3fc55555
 80067e0:	40900000 	.word	0x40900000
 80067e4:	4090cbff 	.word	0x4090cbff
 80067e8:	3f6f3400 	.word	0x3f6f3400
 80067ec:	4090cc00 	.word	0x4090cc00
 80067f0:	3fe00000 	.word	0x3fe00000
 80067f4:	fff00000 	.word	0xfff00000
 80067f8:	3ff00000 	.word	0x3ff00000
 80067fc:	652b82fe 	.word	0x652b82fe
 8006800:	3c971547 	.word	0x3c971547

08006804 <fabs>:
 8006804:	ec51 0b10 	vmov	r0, r1, d0
 8006808:	4602      	mov	r2, r0
 800680a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800680e:	ec43 2b10 	vmov	d0, r2, r3
 8006812:	4770      	bx	lr
 8006814:	0000      	movs	r0, r0
	...

08006818 <scalbn>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	ec55 4b10 	vmov	r4, r5, d0
 800681e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006822:	4606      	mov	r6, r0
 8006824:	462b      	mov	r3, r5
 8006826:	b991      	cbnz	r1, 800684e <scalbn+0x36>
 8006828:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800682c:	4323      	orrs	r3, r4
 800682e:	d03b      	beq.n	80068a8 <scalbn+0x90>
 8006830:	4b33      	ldr	r3, [pc, #204]	@ (8006900 <scalbn+0xe8>)
 8006832:	4620      	mov	r0, r4
 8006834:	4629      	mov	r1, r5
 8006836:	2200      	movs	r2, #0
 8006838:	f7f9 fee6 	bl	8000608 <__aeabi_dmul>
 800683c:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <scalbn+0xec>)
 800683e:	429e      	cmp	r6, r3
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	da0f      	bge.n	8006866 <scalbn+0x4e>
 8006846:	a326      	add	r3, pc, #152	@ (adr r3, 80068e0 <scalbn+0xc8>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	e01e      	b.n	800688c <scalbn+0x74>
 800684e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006852:	4291      	cmp	r1, r2
 8006854:	d10b      	bne.n	800686e <scalbn+0x56>
 8006856:	4622      	mov	r2, r4
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fd1e 	bl	800029c <__adddf3>
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	e020      	b.n	80068a8 <scalbn+0x90>
 8006866:	460b      	mov	r3, r1
 8006868:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800686c:	3936      	subs	r1, #54	@ 0x36
 800686e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006872:	4296      	cmp	r6, r2
 8006874:	dd0d      	ble.n	8006892 <scalbn+0x7a>
 8006876:	2d00      	cmp	r5, #0
 8006878:	a11b      	add	r1, pc, #108	@ (adr r1, 80068e8 <scalbn+0xd0>)
 800687a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687e:	da02      	bge.n	8006886 <scalbn+0x6e>
 8006880:	a11b      	add	r1, pc, #108	@ (adr r1, 80068f0 <scalbn+0xd8>)
 8006882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006886:	a318      	add	r3, pc, #96	@ (adr r3, 80068e8 <scalbn+0xd0>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 febc 	bl	8000608 <__aeabi_dmul>
 8006890:	e7e6      	b.n	8006860 <scalbn+0x48>
 8006892:	1872      	adds	r2, r6, r1
 8006894:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006898:	428a      	cmp	r2, r1
 800689a:	dcec      	bgt.n	8006876 <scalbn+0x5e>
 800689c:	2a00      	cmp	r2, #0
 800689e:	dd06      	ble.n	80068ae <scalbn+0x96>
 80068a0:	f36f 531e 	bfc	r3, #20, #11
 80068a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068a8:	ec45 4b10 	vmov	d0, r4, r5
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80068b2:	da08      	bge.n	80068c6 <scalbn+0xae>
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80068e0 <scalbn+0xc8>)
 80068b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068bc:	dac3      	bge.n	8006846 <scalbn+0x2e>
 80068be:	a10e      	add	r1, pc, #56	@ (adr r1, 80068f8 <scalbn+0xe0>)
 80068c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c4:	e7bf      	b.n	8006846 <scalbn+0x2e>
 80068c6:	3236      	adds	r2, #54	@ 0x36
 80068c8:	f36f 531e 	bfc	r3, #20, #11
 80068cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068d0:	4620      	mov	r0, r4
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <scalbn+0xf0>)
 80068d4:	4629      	mov	r1, r5
 80068d6:	2200      	movs	r2, #0
 80068d8:	e7d8      	b.n	800688c <scalbn+0x74>
 80068da:	bf00      	nop
 80068dc:	f3af 8000 	nop.w
 80068e0:	c2f8f359 	.word	0xc2f8f359
 80068e4:	01a56e1f 	.word	0x01a56e1f
 80068e8:	8800759c 	.word	0x8800759c
 80068ec:	7e37e43c 	.word	0x7e37e43c
 80068f0:	8800759c 	.word	0x8800759c
 80068f4:	fe37e43c 	.word	0xfe37e43c
 80068f8:	c2f8f359 	.word	0xc2f8f359
 80068fc:	81a56e1f 	.word	0x81a56e1f
 8006900:	43500000 	.word	0x43500000
 8006904:	ffff3cb0 	.word	0xffff3cb0
 8006908:	3c900000 	.word	0x3c900000

0800690c <with_errno>:
 800690c:	b510      	push	{r4, lr}
 800690e:	ed2d 8b02 	vpush	{d8}
 8006912:	eeb0 8a40 	vmov.f32	s16, s0
 8006916:	eef0 8a60 	vmov.f32	s17, s1
 800691a:	4604      	mov	r4, r0
 800691c:	f7fd fad6 	bl	8003ecc <__errno>
 8006920:	eeb0 0a48 	vmov.f32	s0, s16
 8006924:	eef0 0a68 	vmov.f32	s1, s17
 8006928:	ecbd 8b02 	vpop	{d8}
 800692c:	6004      	str	r4, [r0, #0]
 800692e:	bd10      	pop	{r4, pc}

08006930 <xflow>:
 8006930:	4603      	mov	r3, r0
 8006932:	b507      	push	{r0, r1, r2, lr}
 8006934:	ec51 0b10 	vmov	r0, r1, d0
 8006938:	b183      	cbz	r3, 800695c <xflow+0x2c>
 800693a:	4602      	mov	r2, r0
 800693c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006940:	e9cd 2300 	strd	r2, r3, [sp]
 8006944:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006948:	f7f9 fe5e 	bl	8000608 <__aeabi_dmul>
 800694c:	ec41 0b10 	vmov	d0, r0, r1
 8006950:	2022      	movs	r0, #34	@ 0x22
 8006952:	b003      	add	sp, #12
 8006954:	f85d eb04 	ldr.w	lr, [sp], #4
 8006958:	f7ff bfd8 	b.w	800690c <with_errno>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	e7ee      	b.n	8006940 <xflow+0x10>
 8006962:	0000      	movs	r0, r0
 8006964:	0000      	movs	r0, r0
	...

08006968 <__math_uflow>:
 8006968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006970 <__math_uflow+0x8>
 800696c:	f7ff bfe0 	b.w	8006930 <xflow>
 8006970:	00000000 	.word	0x00000000
 8006974:	10000000 	.word	0x10000000

08006978 <__math_oflow>:
 8006978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006980 <__math_oflow+0x8>
 800697c:	f7ff bfd8 	b.w	8006930 <xflow>
 8006980:	00000000 	.word	0x00000000
 8006984:	70000000 	.word	0x70000000

08006988 <__ieee754_sqrt>:
 8006988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	4a66      	ldr	r2, [pc, #408]	@ (8006b28 <__ieee754_sqrt+0x1a0>)
 800698e:	ec55 4b10 	vmov	r4, r5, d0
 8006992:	43aa      	bics	r2, r5
 8006994:	462b      	mov	r3, r5
 8006996:	4621      	mov	r1, r4
 8006998:	d110      	bne.n	80069bc <__ieee754_sqrt+0x34>
 800699a:	4622      	mov	r2, r4
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fe32 	bl	8000608 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7f9 fc76 	bl	800029c <__adddf3>
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	ec45 4b10 	vmov	d0, r4, r5
 80069b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	2d00      	cmp	r5, #0
 80069be:	dc0e      	bgt.n	80069de <__ieee754_sqrt+0x56>
 80069c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80069c4:	4322      	orrs	r2, r4
 80069c6:	d0f5      	beq.n	80069b4 <__ieee754_sqrt+0x2c>
 80069c8:	b19d      	cbz	r5, 80069f2 <__ieee754_sqrt+0x6a>
 80069ca:	4622      	mov	r2, r4
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7f9 fc62 	bl	8000298 <__aeabi_dsub>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	f7f9 ff40 	bl	800085c <__aeabi_ddiv>
 80069dc:	e7e8      	b.n	80069b0 <__ieee754_sqrt+0x28>
 80069de:	152a      	asrs	r2, r5, #20
 80069e0:	d115      	bne.n	8006a0e <__ieee754_sqrt+0x86>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e009      	b.n	80069fa <__ieee754_sqrt+0x72>
 80069e6:	0acb      	lsrs	r3, r1, #11
 80069e8:	3a15      	subs	r2, #21
 80069ea:	0549      	lsls	r1, r1, #21
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0fa      	beq.n	80069e6 <__ieee754_sqrt+0x5e>
 80069f0:	e7f7      	b.n	80069e2 <__ieee754_sqrt+0x5a>
 80069f2:	462a      	mov	r2, r5
 80069f4:	e7fa      	b.n	80069ec <__ieee754_sqrt+0x64>
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	3001      	adds	r0, #1
 80069fa:	02dc      	lsls	r4, r3, #11
 80069fc:	d5fb      	bpl.n	80069f6 <__ieee754_sqrt+0x6e>
 80069fe:	1e44      	subs	r4, r0, #1
 8006a00:	1b12      	subs	r2, r2, r4
 8006a02:	f1c0 0420 	rsb	r4, r0, #32
 8006a06:	fa21 f404 	lsr.w	r4, r1, r4
 8006a0a:	4323      	orrs	r3, r4
 8006a0c:	4081      	lsls	r1, r0
 8006a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	07d2      	lsls	r2, r2, #31
 8006a1c:	bf5c      	itt	pl
 8006a1e:	005b      	lslpl	r3, r3, #1
 8006a20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006a24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a28:	bf58      	it	pl
 8006a2a:	0049      	lslpl	r1, r1, #1
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006a32:	107f      	asrs	r7, r7, #1
 8006a34:	0049      	lsls	r1, r1, #1
 8006a36:	2016      	movs	r0, #22
 8006a38:	4632      	mov	r2, r6
 8006a3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006a3e:	1915      	adds	r5, r2, r4
 8006a40:	429d      	cmp	r5, r3
 8006a42:	bfde      	ittt	le
 8006a44:	192a      	addle	r2, r5, r4
 8006a46:	1b5b      	suble	r3, r3, r5
 8006a48:	1936      	addle	r6, r6, r4
 8006a4a:	0fcd      	lsrs	r5, r1, #31
 8006a4c:	3801      	subs	r0, #1
 8006a4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006a52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006a56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006a5a:	d1f0      	bne.n	8006a3e <__ieee754_sqrt+0xb6>
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	2420      	movs	r4, #32
 8006a60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006a64:	4293      	cmp	r3, r2
 8006a66:	eb0c 0e00 	add.w	lr, ip, r0
 8006a6a:	dc02      	bgt.n	8006a72 <__ieee754_sqrt+0xea>
 8006a6c:	d113      	bne.n	8006a96 <__ieee754_sqrt+0x10e>
 8006a6e:	458e      	cmp	lr, r1
 8006a70:	d811      	bhi.n	8006a96 <__ieee754_sqrt+0x10e>
 8006a72:	f1be 0f00 	cmp.w	lr, #0
 8006a76:	eb0e 000c 	add.w	r0, lr, ip
 8006a7a:	da3f      	bge.n	8006afc <__ieee754_sqrt+0x174>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	db3d      	blt.n	8006afc <__ieee754_sqrt+0x174>
 8006a80:	f102 0801 	add.w	r8, r2, #1
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	458e      	cmp	lr, r1
 8006a88:	bf88      	it	hi
 8006a8a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8006a8e:	eba1 010e 	sub.w	r1, r1, lr
 8006a92:	4465      	add	r5, ip
 8006a94:	4642      	mov	r2, r8
 8006a96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006a9a:	3c01      	subs	r4, #1
 8006a9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006aa0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006aa4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006aa8:	d1dc      	bne.n	8006a64 <__ieee754_sqrt+0xdc>
 8006aaa:	4319      	orrs	r1, r3
 8006aac:	d01b      	beq.n	8006ae6 <__ieee754_sqrt+0x15e>
 8006aae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006b2c <__ieee754_sqrt+0x1a4>
 8006ab2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006b30 <__ieee754_sqrt+0x1a8>
 8006ab6:	e9da 0100 	ldrd	r0, r1, [sl]
 8006aba:	e9db 2300 	ldrd	r2, r3, [fp]
 8006abe:	f7f9 fbeb 	bl	8000298 <__aeabi_dsub>
 8006ac2:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7fa f817 	bl	8000b00 <__aeabi_dcmple>
 8006ad2:	b140      	cbz	r0, 8006ae6 <__ieee754_sqrt+0x15e>
 8006ad4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8006ad8:	e9da 0100 	ldrd	r0, r1, [sl]
 8006adc:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ae0:	d10e      	bne.n	8006b00 <__ieee754_sqrt+0x178>
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	4625      	mov	r5, r4
 8006ae6:	1073      	asrs	r3, r6, #1
 8006ae8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006aec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006af0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006af4:	086b      	lsrs	r3, r5, #1
 8006af6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006afa:	e759      	b.n	80069b0 <__ieee754_sqrt+0x28>
 8006afc:	4690      	mov	r8, r2
 8006afe:	e7c1      	b.n	8006a84 <__ieee754_sqrt+0xfc>
 8006b00:	f7f9 fbcc 	bl	800029c <__adddf3>
 8006b04:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 ffec 	bl	8000aec <__aeabi_dcmplt>
 8006b14:	b120      	cbz	r0, 8006b20 <__ieee754_sqrt+0x198>
 8006b16:	1cab      	adds	r3, r5, #2
 8006b18:	bf08      	it	eq
 8006b1a:	3601      	addeq	r6, #1
 8006b1c:	3502      	adds	r5, #2
 8006b1e:	e7e2      	b.n	8006ae6 <__ieee754_sqrt+0x15e>
 8006b20:	1c6b      	adds	r3, r5, #1
 8006b22:	f023 0501 	bic.w	r5, r3, #1
 8006b26:	e7de      	b.n	8006ae6 <__ieee754_sqrt+0x15e>
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08006f78 	.word	0x08006f78
 8006b30:	08006f70 	.word	0x08006f70

08006b34 <_kill>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	@ (8006b40 <_kill+0xc>)
 8006b36:	2258      	movs	r2, #88	@ 0x58
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b3e:	4770      	bx	lr
 8006b40:	20000430 	.word	0x20000430

08006b44 <_exit>:
 8006b44:	e7fe      	b.n	8006b44 <_exit>
	...

08006b48 <_init>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr

08006b54 <_fini>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr
