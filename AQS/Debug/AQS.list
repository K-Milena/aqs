
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008388  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008528  08008528  00009528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008984  08008984  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008984  08008984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800898c  0800898c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800898c  0800898c  0000998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008994  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001d4  08008b68  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08008b68  0000a4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdd8  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef9  00000000  00000000  00016fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00018ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  000199f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017813  00000000  00000000  0001a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de47  00000000  00000000  00031aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f16  00000000  00000000  0003f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d480c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  000d4850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d8dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008510 	.word	0x08008510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008510 	.word	0x08008510

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f001 ff47 	bl	8002dc4 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000023c 	.word	0x2000023c

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	214e      	movs	r1, #78	@ 0x4e
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f001 ff17 	bl	8002dc4 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000023c 	.word	0x2000023c

08000fa4 <lcd_clear>:

void lcd_clear (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff9a 	bl	8000ee4 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e005      	b.n	8000fc2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fb6:	2020      	movs	r0, #32
 8000fb8:	f7ff ffc4 	bl	8000f44 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b63      	cmp	r3, #99	@ 0x63
 8000fc6:	ddf6      	ble.n	8000fb6 <lcd_clear+0x12>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <lcd_init>:

void lcd_init (void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fd6:	2032      	movs	r0, #50	@ 0x32
 8000fd8:	f000 fe40 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fdc:	2030      	movs	r0, #48	@ 0x30
 8000fde:	f7ff ff81 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f000 fe3a 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fe8:	2030      	movs	r0, #48	@ 0x30
 8000fea:	f7ff ff7b 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fe34 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff4:	2030      	movs	r0, #48	@ 0x30
 8000ff6:	f7ff ff75 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f000 fe2e 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001000:	2020      	movs	r0, #32
 8001002:	f7ff ff6f 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f000 fe28 	bl	8001c5c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800100c:	2028      	movs	r0, #40	@ 0x28
 800100e:	f7ff ff69 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 fe22 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff ff63 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 fe1c 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff ff5d 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f000 fe16 	bl	8001c5c <HAL_Delay>
	HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f000 fe13 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001036:	2006      	movs	r0, #6
 8001038:	f7ff ff54 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 fe0d 	bl	8001c5c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001042:	200c      	movs	r0, #12
 8001044:	f7ff ff4e 	bl	8000ee4 <lcd_send_cmd>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001054:	e006      	b.n	8001064 <lcd_send_string+0x18>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff70 	bl	8000f44 <lcd_send_data>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f4      	bne.n	8001056 <lcd_send_string+0xa>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <Read_MQ135>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t Read_MQ135() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001082:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <Read_MQ135+0x38>)
 8001084:	f000 fe52 	bl	8001d2c <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001088:	210a      	movs	r1, #10
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <Read_MQ135+0x38>)
 800108c:	f000 ff35 	bl	8001efa <HAL_ADC_PollForConversion>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <Read_MQ135+0x38>)
 8001098:	f000 ffba 	bl	8002010 <HAL_ADC_GetValue>
 800109c:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <Read_MQ135+0x38>)
 80010a0:	f000 fef8 	bl	8001e94 <HAL_ADC_Stop>
    return adc_value;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f4 	.word	0x200001f4

080010b4 <update_measurement>:

void update_measurement(MQ135_Data *data) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    data->voltage = (Read_MQ135() * 2.97f) / 4095.0f;	// obliczenie napięcia 2.97 V VrefADC - voltomierz
 80010bc:	f7ff ffdc 	bl	8001078 <Read_MQ135>
 80010c0:	ee07 0a90 	vmov	s15, r0
 80010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80011ac <update_measurement+0xf8>
 80010cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80011b0 <update_measurement+0xfc>
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    data->Rs = ((5.0f - data->voltage) / data->voltage) * 10.0f;  // R_load = 10 kΩ - zmierzone omomierzem, 5V - Vcc
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edc3 7a01 	vstr	s15, [r3, #4]
    data->ppm = 116.602f * powf((data->Rs / R0), -2.769f);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edd3 7a01 	vldr	s15, [r3, #4]
 800110a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80011b4 <update_measurement+0x100>
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	eddf 0a29 	vldr	s1, [pc, #164]	@ 80011b8 <update_measurement+0x104>
 8001116:	eeb0 0a47 	vmov.f32	s0, s14
 800111a:	f003 ff8d 	bl	8005038 <powf>
 800111e:	eef0 7a40 	vmov.f32	s15, s0
 8001122:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80011bc <update_measurement+0x108>
 8001126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	edc3 7a02 	vstr	s15, [r3, #8]

    // ograniczenie GCI do 20000
    if (data->ppm > 20000) data->ppm = 20000;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a02 	vldr	s15, [r3, #8]
 8001136:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80011c0 <update_measurement+0x10c>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	dd02      	ble.n	800114a <update_measurement+0x96>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <update_measurement+0x110>)
 8001148:	609a      	str	r2, [r3, #8]

    // klasyfikacja jakosci powietrza
    if (data->ppm < 700) data->air_quality_level = 0;       // :D Great
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001150:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80011c8 <update_measurement+0x114>
 8001154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d503      	bpl.n	8001166 <update_measurement+0xb2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	731a      	strb	r2, [r3, #12]
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
    else data->air_quality_level = 3;                       // :(	Bad
}
 8001164:	e01e      	b.n	80011a4 <update_measurement+0xf0>
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edd3 7a02 	vldr	s15, [r3, #8]
 800116c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80011cc <update_measurement+0x118>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d503      	bpl.n	8001182 <update_measurement+0xce>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	731a      	strb	r2, [r3, #12]
}
 8001180:	e010      	b.n	80011a4 <update_measurement+0xf0>
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a02 	vldr	s15, [r3, #8]
 8001188:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011d0 <update_measurement+0x11c>
 800118c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d503      	bpl.n	800119e <update_measurement+0xea>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2202      	movs	r2, #2
 800119a:	731a      	strb	r2, [r3, #12]
}
 800119c:	e002      	b.n	80011a4 <update_measurement+0xf0>
    else data->air_quality_level = 3;                       // :(	Bad
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	731a      	strb	r2, [r3, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	403e147b 	.word	0x403e147b
 80011b0:	457ff000 	.word	0x457ff000
 80011b4:	4285051f 	.word	0x4285051f
 80011b8:	c031374c 	.word	0xc031374c
 80011bc:	42e93439 	.word	0x42e93439
 80011c0:	469c4000 	.word	0x469c4000
 80011c4:	469c4000 	.word	0x469c4000
 80011c8:	442f0000 	.word	0x442f0000
 80011cc:	44fa0000 	.word	0x44fa0000
 80011d0:	459c4000 	.word	0x459c4000

080011d4 <lcd_printf>:
            printf("Found device at 0x%02X\r\n", addr << 1);
        }
    }
}

void lcd_printf(const char *fmt, ...) {
 80011d4:	b40f      	push	{r0, r1, r2, r3}
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b092      	sub	sp, #72	@ 0x48
 80011da:	af00      	add	r7, sp, #0
    char buffer[64]; // zwiększ jeśli masz długie ciągi znakow
    va_list args;
    va_start(args, fmt);
 80011dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011e2:	f107 0008 	add.w	r0, r7, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011ea:	2140      	movs	r1, #64	@ 0x40
 80011ec:	f005 f8aa 	bl	8006344 <vsniprintf>
    va_end(args);
    lcd_send_string(buffer);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff29 	bl	800104c <lcd_send_string>
}
 80011fa:	bf00      	nop
 80011fc:	3748      	adds	r7, #72	@ 0x48
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <run_heating_sequence>:
            DELAY_US(1000); \
        } \
    } while (0)

void run_heating_sequence(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	@ 0x50
 800120c:	af02      	add	r7, sp, #8
    uint32_t total_seconds = 300; // 5 minut = 300 sekund
 800120e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34

    lcd_clear();
 8001214:	f7ff fec6 	bl	8000fa4 <lcd_clear>
    lcd_send_cmd(0x80);
 8001218:	2080      	movs	r0, #128	@ 0x80
 800121a:	f7ff fe63 	bl	8000ee4 <lcd_send_cmd>
    lcd_send_string("Nagrzewanie...");
 800121e:	485c      	ldr	r0, [pc, #368]	@ (8001390 <run_heating_sequence+0x188>)
 8001220:	f7ff ff14 	bl	800104c <lcd_send_string>
    lcd_send_cmd(0xC0);
 8001224:	20c0      	movs	r0, #192	@ 0xc0
 8001226:	f7ff fe5d 	bl	8000ee4 <lcd_send_cmd>

    for (uint32_t remaining = total_seconds; remaining > 0; --remaining)
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
 800122e:	e07b      	b.n	8001328 <run_heating_sequence+0x120>
    {
        if (heating_skipped) {
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <run_heating_sequence+0x18c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d02c      	beq.n	8001294 <run_heating_sequence+0x8c>
            lcd_clear();
 800123a:	f7ff feb3 	bl	8000fa4 <lcd_clear>
            lcd_send_string("Pominieto...");
 800123e:	4856      	ldr	r0, [pc, #344]	@ (8001398 <run_heating_sequence+0x190>)
 8001240:	f7ff ff04 	bl	800104c <lcd_send_string>
            DELAY_MS(1000);
 8001244:	2300      	movs	r3, #0
 8001246:	643b      	str	r3, [r7, #64]	@ 0x40
 8001248:	e01f      	b.n	800128a <run_heating_sequence+0x82>
 800124a:	4b54      	ldr	r3, [pc, #336]	@ (800139c <run_heating_sequence+0x194>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <run_heating_sequence+0x198>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <run_heating_sequence+0x19c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001260:	fb03 f202 	mul.w	r2, r3, r2
 8001264:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <run_heating_sequence+0x198>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	494e      	ldr	r1, [pc, #312]	@ (80013a4 <run_heating_sequence+0x19c>)
 800126a:	fba1 1303 	umull	r1, r3, r1, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b49      	ldr	r3, [pc, #292]	@ (800139c <run_heating_sequence+0x194>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	6a3a      	ldr	r2, [r7, #32]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f8      	bhi.n	8001276 <run_heating_sequence+0x6e>
 8001284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001286:	3301      	adds	r3, #1
 8001288:	643b      	str	r3, [r7, #64]	@ 0x40
 800128a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800128c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001290:	d3db      	bcc.n	800124a <run_heating_sequence+0x42>
            break;
 8001292:	e04c      	b.n	800132e <run_heating_sequence+0x126>
        }

        uint32_t min = remaining / 60;
 8001294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001296:	4a44      	ldr	r2, [pc, #272]	@ (80013a8 <run_heating_sequence+0x1a0>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	095b      	lsrs	r3, r3, #5
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t sec = remaining % 60;
 80012a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012a2:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <run_heating_sequence+0x1a0>)
 80012a4:	fba3 1302 	umull	r1, r3, r3, r2
 80012a8:	0959      	lsrs	r1, r3, #5
 80012aa:	460b      	mov	r3, r1
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        char line2[16];
        snprintf(line2, sizeof(line2), "Czas: %02lu:%02lu", min, sec);
 80012b6:	1d38      	adds	r0, r7, #4
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012be:	4a3b      	ldr	r2, [pc, #236]	@ (80013ac <run_heating_sequence+0x1a4>)
 80012c0:	2110      	movs	r1, #16
 80012c2:	f004 ff97 	bl	80061f4 <sniprintf>
        lcd_send_cmd(0xC0);
 80012c6:	20c0      	movs	r0, #192	@ 0xc0
 80012c8:	f7ff fe0c 	bl	8000ee4 <lcd_send_cmd>
        lcd_send_string(line2);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff febc 	bl	800104c <lcd_send_string>

        DELAY_MS(1000);
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d8:	e01f      	b.n	800131a <run_heating_sequence+0x112>
 80012da:	4b30      	ldr	r3, [pc, #192]	@ (800139c <run_heating_sequence+0x194>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <run_heating_sequence+0x198>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <run_heating_sequence+0x19c>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f0:	fb03 f202 	mul.w	r2, r3, r2
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <run_heating_sequence+0x198>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	492a      	ldr	r1, [pc, #168]	@ (80013a4 <run_heating_sequence+0x19c>)
 80012fa:	fba1 1303 	umull	r1, r3, r1, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <run_heating_sequence+0x194>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f8      	bhi.n	8001306 <run_heating_sequence+0xfe>
 8001314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001316:	3301      	adds	r3, #1
 8001318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800131c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001320:	d3db      	bcc.n	80012da <run_heating_sequence+0xd2>
    for (uint32_t remaining = total_seconds; remaining > 0; --remaining)
 8001322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001324:	3b01      	subs	r3, #1
 8001326:	647b      	str	r3, [r7, #68]	@ 0x44
 8001328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800132a:	2b00      	cmp	r3, #0
 800132c:	d180      	bne.n	8001230 <run_heating_sequence+0x28>
    }

    lcd_clear();
 800132e:	f7ff fe39 	bl	8000fa4 <lcd_clear>
    lcd_send_string("Gotowe!");
 8001332:	481f      	ldr	r0, [pc, #124]	@ (80013b0 <run_heating_sequence+0x1a8>)
 8001334:	f7ff fe8a 	bl	800104c <lcd_send_string>
    DELAY_MS(1000);
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800133c:	e01f      	b.n	800137e <run_heating_sequence+0x176>
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <run_heating_sequence+0x194>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <run_heating_sequence+0x198>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <run_heating_sequence+0x19c>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	fb03 f202 	mul.w	r2, r3, r2
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <run_heating_sequence+0x198>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4911      	ldr	r1, [pc, #68]	@ (80013a4 <run_heating_sequence+0x19c>)
 800135e:	fba1 1303 	umull	r1, r3, r1, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <run_heating_sequence+0x194>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f8      	bhi.n	800136a <run_heating_sequence+0x162>
 8001378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137a:	3301      	adds	r3, #1
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800137e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001384:	d3db      	bcc.n	800133e <run_heating_sequence+0x136>
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3748      	adds	r7, #72	@ 0x48
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	0800855c 	.word	0x0800855c
 8001394:	200001f0 	.word	0x200001f0
 8001398:	0800856c 	.word	0x0800856c
 800139c:	e000e010 	.word	0xe000e010
 80013a0:	20000000 	.word	0x20000000
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	88888889 	.word	0x88888889
 80013ac:	0800857c 	.word	0x0800857c
 80013b0:	08008590 	.word	0x08008590

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 fbdd 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */
  // initialise_monitor_handles();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f88d 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 f99f 	bl	8001704 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013c6:	f000 f8f3 	bl	80015b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013ca:	f000 f943 	bl	8001654 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013ce:	f000 f96f 	bl	80016b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Inicjalizacja struktury MQ
  MQ135_Data data;
  // inicjalizacja ekranu
  lcd_init();
 80013d2:	f7ff fdfe 	bl	8000fd2 <lcd_init>
  run_heating_sequence();
 80013d6:	f7ff ff17 	bl	8001208 <run_heating_sequence>

  char msg[] = "Hello from STM32!\r\n";
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <main+0x104>)
 80013dc:	463c      	mov	r4, r7
 80013de:	461d      	mov	r5, r3
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	6023      	str	r3, [r4, #0]

  // ustawianie HC-06
  char *cmd = "AT\r\n";
 80013e8:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <main+0x108>)
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80013ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013ee:	f7fe ff47 	bl	8000280 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013fc:	4830      	ldr	r0, [pc, #192]	@ (80014c0 <main+0x10c>)
 80013fe:	f002 fd23 	bl	8003e48 <HAL_UART_Transmit>
  char* cmd1 = "AT+BAUD4\r\n";  // "4" oznacza 9600 bps - to jest poprawnie ustawiony baudrate, zaórwno w cube, nie działa :(
 8001402:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <main+0x110>)
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_UART_Transmit(&huart1, (uint8_t*)cmd1, strlen(cmd1), HAL_MAX_DELAY);
 8001406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001408:	f7fe ff3a 	bl	8000280 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001416:	482a      	ldr	r0, [pc, #168]	@ (80014c0 <main+0x10c>)
 8001418:	f002 fd16 	bl	8003e48 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800141c:	463b      	mov	r3, r7
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ff2e 	bl	8000280 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	4639      	mov	r1, r7
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	4824      	ldr	r0, [pc, #144]	@ (80014c0 <main+0x10c>)
 8001430:	f002 fd0a 	bl	8003e48 <HAL_UART_Transmit>

	  update_measurement(&data);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe3b 	bl	80010b4 <update_measurement>
	  lcd_send_cmd (0x80|0x00);
 800143e:	2080      	movs	r0, #128	@ 0x80
 8001440:	f7ff fd50 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("PPM: %.2f ", data.ppm);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f886 	bl	8000558 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	481d      	ldr	r0, [pc, #116]	@ (80014c8 <main+0x114>)
 8001452:	f7ff febf 	bl	80011d4 <lcd_printf>

	  lcd_send_cmd(0x80 | 0x40);  // linia 2, kol
 8001456:	20c0      	movs	r0, #192	@ 0xc0
 8001458:	f7ff fd44 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("Air Quality: %d ", data.air_quality_level);
 800145c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001460:	4619      	mov	r1, r3
 8001462:	481a      	ldr	r0, [pc, #104]	@ (80014cc <main+0x118>)
 8001464:	f7ff feb6 	bl	80011d4 <lcd_printf>

	  DELAY_MS(1000);
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
 800146c:	e01f      	b.n	80014ae <main+0xfa>
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <main+0x11c>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <main+0x120>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <main+0x124>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001484:	fb03 f202 	mul.w	r2, r3, r2
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <main+0x120>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <main+0x124>)
 800148e:	fba1 1303 	umull	r1, r3, r1, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <main+0x11c>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f8      	bhi.n	800149a <main+0xe6>
 80014a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014aa:	3301      	adds	r3, #1
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80014ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014b4:	d3db      	bcc.n	800146e <main+0xba>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014b6:	e7b1      	b.n	800141c <main+0x68>
 80014b8:	080085cc 	.word	0x080085cc
 80014bc:	08008598 	.word	0x08008598
 80014c0:	20000290 	.word	0x20000290
 80014c4:	080085a0 	.word	0x080085a0
 80014c8:	080085ac 	.word	0x080085ac
 80014cc:	080085b8 	.word	0x080085b8
 80014d0:	e000e010 	.word	0xe000e010
 80014d4:	20000000 	.word	0x20000000
 80014d8:	431bde83 	.word	0x431bde83

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	@ 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 ffcc 	bl	8006488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <SystemClock_Config+0xcc>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <SystemClock_Config+0xd0>)
 8001526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	2310      	movs	r3, #16
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800154c:	2308      	movs	r3, #8
 800154e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001554:	2304      	movs	r3, #4
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001558:	2308      	movs	r3, #8
 800155a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f001 ff89 	bl	8003478 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800156c:	f000 f948 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	2302      	movs	r3, #2
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800157c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2103      	movs	r1, #3
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f9ea 	bl	8003968 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800159a:	f000 f931 	bl	8001800 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	@ 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <MX_ADC1_Init+0x9c>)
 80015c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <MX_ADC1_Init+0xa0>)
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015fa:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <MX_ADC1_Init+0x98>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_ADC1_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_ADC1_Init+0x98>)
 800160a:	2201      	movs	r2, #1
 800160c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	@ (8001648 <MX_ADC1_Init+0x98>)
 8001610:	f000 fb48 	bl	8001ca4 <HAL_ADC_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 f8f1 	bl	8001800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800161e:	2301      	movs	r3, #1
 8001620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	@ (8001648 <MX_ADC1_Init+0x98>)
 8001630:	f000 fcfc 	bl	800202c <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800163a:	f000 f8e1 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001f4 	.word	0x200001f4
 800164c:	40012000 	.word	0x40012000
 8001650:	0f000001 	.word	0x0f000001

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <MX_I2C1_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_I2C1_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001692:	f001 fa53 	bl	8002b3c <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 f8b0 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000023c 	.word	0x2000023c
 80016a8:	40005400 	.word	0x40005400
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <MX_USART1_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016bc:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80016c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_USART1_UART_Init+0x4c>)
 80016e8:	f002 fb5e 	bl	8003da8 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f000 f885 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000290 	.word	0x20000290
 8001700:	40011000 	.word	0x40011000

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a2a      	ldr	r2, [pc, #168]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <MX_GPIO_Init+0xc8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <MX_GPIO_Init+0xc8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a23      	ldr	r2, [pc, #140]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <MX_GPIO_Init+0xc8>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_GPIO_Init+0xc8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001774:	4816      	ldr	r0, [pc, #88]	@ (80017d0 <MX_GPIO_Init+0xcc>)
 8001776:	f001 f9af 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 800177a:	2301      	movs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	4811      	ldr	r0, [pc, #68]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 8001790:	f001 f81e 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001794:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <MX_GPIO_Init+0xcc>)
 80017ae:	f001 f80f 	bl	80027d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2006      	movs	r0, #6
 80017b8:	f000 ff41 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017bc:	2006      	movs	r0, #6
 80017be:	f000 ff5a 	bl	8002676 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40020000 	.word	0x40020000

080017d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B_BUTTON_Pin) // PA0 przerwanie
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_GPIO_EXTI_Callback+0x16>
    {
        heating_skipped = true;
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x24>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
    }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200001f0 	.word	0x200001f0

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800184a:	2007      	movs	r0, #7
 800184c:	f000 feec 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_ADC_MspInit+0x7c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d127      	bne.n	80018ce <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_ADC_MspInit+0x80>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 80018b6:	2302      	movs	r3, #2
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <HAL_ADC_MspInit+0x84>)
 80018ca:	f000 ff81 	bl	80027d0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40012000 	.word	0x40012000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <HAL_I2C_MspInit+0x84>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12b      	bne.n	800195e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_I2C_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a17      	ldr	r2, [pc, #92]	@ (800196c <HAL_I2C_MspInit+0x88>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_I2C_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23c0      	movs	r3, #192	@ 0xc0
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001926:	2312      	movs	r3, #18
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <HAL_I2C_MspInit+0x8c>)
 800193e:	f000 ff47 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_I2C_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_I2C_MspInit+0x88>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_I2C_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_UART_MspInit+0x94>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d134      	bne.n	8001a00 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e0:	2307      	movs	r3, #7
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <HAL_UART_MspInit+0x9c>)
 80019ec:	f000 fef0 	bl	80027d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2025      	movs	r0, #37	@ 0x25
 80019f6:	f000 fe22 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019fa:	2025      	movs	r0, #37	@ 0x25
 80019fc:	f000 fe3b 	bl	8002676 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f8d7 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f001 f848 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f002 fa6b 	bl	8003f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000290 	.word	0x20000290

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f004 fd32 	bl	800652c <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	200002d8 	.word	0x200002d8
 8001afc:	200004d0 	.word	0x200004d0

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f004 fcf1 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fc2d 	bl	80013b4 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b68:	08008994 	.word	0x08008994
  ldr r2, =_sbss
 8001b6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b70:	200004cc 	.word	0x200004cc

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 fd41 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe2e 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fd59 	bl	8002692 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bf8:	f000 fd21 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	200002dc 	.word	0x200002dc

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200002dc 	.word	0x200002dc

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e033      	b.n	8001d22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fdca 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cea:	f023 0302 	bic.w	r3, r3, #2
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 faca 	bl	8002290 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Start+0x1a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e097      	b.n	8001e76 <HAL_ADC_Start+0x14a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d018      	beq.n	8001d8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6c:	4b45      	ldr	r3, [pc, #276]	@ (8001e84 <HAL_ADC_Start+0x158>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a45      	ldr	r2, [pc, #276]	@ (8001e88 <HAL_ADC_Start+0x15c>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9a      	lsrs	r2, r3, #18
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d15f      	bne.n	8001e5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dda:	d106      	bne.n	8001dea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	f023 0206 	bic.w	r2, r3, #6
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df8:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_ADC_Start+0x160>)
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d129      	bne.n	8001e74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e020      	b.n	8001e74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a16      	ldr	r2, [pc, #88]	@ (8001e90 <HAL_ADC_Start+0x164>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d11b      	bne.n	8001e74 <HAL_ADC_Start+0x148>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d114      	bne.n	8001e74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	e00b      	b.n	8001e74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	40012000 	.word	0x40012000

08001e94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Stop+0x16>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e021      	b.n	8001eee <HAL_ADC_Stop+0x5a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f16:	d113      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e063      	b.n	8002008 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f40:	f7ff fe80 	bl	8001c44 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f46:	e021      	b.n	8001f8c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f4e:	d01d      	beq.n	8001f8c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x6c>
 8001f56:	f7ff fe75 	bl	8001c44 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d212      	bcs.n	8001f8c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d00b      	beq.n	8001f8c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f043 0204 	orr.w	r2, r3, #4
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e03d      	b.n	8002008 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d1d6      	bne.n	8001f48 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0212 	mvn.w	r2, #18
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d123      	bne.n	8002006 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11f      	bne.n	8002006 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d111      	bne.n	8002006 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1c>
 8002044:	2302      	movs	r3, #2
 8002046:	e113      	b.n	8002270 <HAL_ADC_ConfigChannel+0x244>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b09      	cmp	r3, #9
 8002056:	d925      	bls.n	80020a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3b1e      	subs	r3, #30
 800206e:	2207      	movs	r2, #7
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68d9      	ldr	r1, [r3, #12]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	4618      	mov	r0, r3
 8002090:	4603      	mov	r3, r0
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4403      	add	r3, r0
 8002096:	3b1e      	subs	r3, #30
 8002098:	409a      	lsls	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	e022      	b.n	80020ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6919      	ldr	r1, [r3, #16]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	2207      	movs	r2, #7
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4403      	add	r3, r0
 80020e0:	409a      	lsls	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d824      	bhi.n	800213c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3b05      	subs	r3, #5
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	400a      	ands	r2, r1
 8002112:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b05      	subs	r3, #5
 800212e:	fa00 f203 	lsl.w	r2, r0, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34
 800213a:	e04c      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d824      	bhi.n	800218e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b23      	subs	r3, #35	@ 0x23
 8002156:	221f      	movs	r2, #31
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43da      	mvns	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	400a      	ands	r2, r1
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	3b23      	subs	r3, #35	@ 0x23
 8002180:	fa00 f203 	lsl.w	r2, r0, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30
 800218c:	e023      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b41      	subs	r3, #65	@ 0x41
 80021a0:	221f      	movs	r2, #31
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	400a      	ands	r2, r1
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b41      	subs	r3, #65	@ 0x41
 80021ca:	fa00 f203 	lsl.w	r2, r0, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d6:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_ADC_ConfigChannel+0x250>)
 80021d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a28      	ldr	r2, [pc, #160]	@ (8002280 <HAL_ADC_ConfigChannel+0x254>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d10f      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1d8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d10b      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_ADC_ConfigChannel+0x254>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12b      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x23a>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <HAL_ADC_ConfigChannel+0x258>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x1f4>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b11      	cmp	r3, #17
 800221e:	d122      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <HAL_ADC_ConfigChannel+0x258>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d111      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <HAL_ADC_ConfigChannel+0x25c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_ADC_ConfigChannel+0x260>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9a      	lsrs	r2, r3, #18
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002258:	e002      	b.n	8002260 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3b01      	subs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	40012000 	.word	0x40012000
 8002284:	10000012 	.word	0x10000012
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83

08002290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002298:	4b79      	ldr	r3, [pc, #484]	@ (8002480 <ADC_Init+0x1f0>)
 800229a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	4a58      	ldr	r2, [pc, #352]	@ (8002484 <ADC_Init+0x1f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	e00f      	b.n	800238e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800238c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0202 	bic.w	r2, r2, #2
 800239c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6899      	ldr	r1, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e1b      	ldrb	r3, [r3, #24]
 80023a8:	005a      	lsls	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	3b01      	subs	r3, #1
 80023e8:	035a      	lsls	r2, r3, #13
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	e007      	b.n	8002404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002402:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	3b01      	subs	r3, #1
 8002420:	051a      	lsls	r2, r3, #20
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002446:	025a      	lsls	r2, r3, #9
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	029a      	lsls	r2, r3, #10
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40012300 	.word	0x40012300
 8002484:	0f000001 	.word	0x0f000001

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	@ (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	@ (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fac4 	bl	8001c44 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d008      	beq.n	80026dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e052      	b.n	8002782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0216 	bic.w	r2, r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_DMA_Abort+0x62>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e013      	b.n	8002756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff fa89 	bl	8001c44 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d90c      	bls.n	8002756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e015      	b.n	8002782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e4      	bne.n	800272e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	223f      	movs	r2, #63	@ 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00c      	b.n	80027c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e159      	b.n	8002aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8148 	bne.w	8002a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281e:	2b02      	cmp	r3, #2
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b03      	cmp	r3, #3
 800288e:	d017      	beq.n	80028c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d123      	bne.n	8002914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a2 	beq.w	8002a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_GPIO_Init+0x2e8>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	4a56      	ldr	r2, [pc, #344]	@ (8002ab8 <HAL_GPIO_Init+0x2e8>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002964:	6453      	str	r3, [r2, #68]	@ 0x44
 8002966:	4b54      	ldr	r3, [pc, #336]	@ (8002ab8 <HAL_GPIO_Init+0x2e8>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002972:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <HAL_GPIO_Init+0x2ec>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a49      	ldr	r2, [pc, #292]	@ (8002ac0 <HAL_GPIO_Init+0x2f0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x202>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a48      	ldr	r2, [pc, #288]	@ (8002ac4 <HAL_GPIO_Init+0x2f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x1fe>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a47      	ldr	r2, [pc, #284]	@ (8002ac8 <HAL_GPIO_Init+0x2f8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a46      	ldr	r2, [pc, #280]	@ (8002acc <HAL_GPIO_Init+0x2fc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x1f6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a45      	ldr	r2, [pc, #276]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x1f2>
 80029be:	2304      	movs	r3, #4
 80029c0:	e008      	b.n	80029d4 <HAL_GPIO_Init+0x204>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x204>
 80029c6:	2303      	movs	r3, #3
 80029c8:	e004      	b.n	80029d4 <HAL_GPIO_Init+0x204>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_Init+0x204>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_GPIO_Init+0x204>
 80029d2:	2300      	movs	r3, #0
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f002 0203 	and.w	r2, r2, #3
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	4093      	lsls	r3, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e4:	4935      	ldr	r1, [pc, #212]	@ (8002abc <HAL_GPIO_Init+0x2ec>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a16:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a40:	4a24      	ldr	r2, [pc, #144]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a46:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a94:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	f67f aea2 	bls.w	80027ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3724      	adds	r7, #36	@ 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fe54 	bl	80017d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e12b      	b.n	8002da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe febe 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f001 f8da 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a81      	ldr	r2, [pc, #516]	@ (8002db0 <HAL_I2C_Init+0x274>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d807      	bhi.n	8002bc0 <HAL_I2C_Init+0x84>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a80      	ldr	r2, [pc, #512]	@ (8002db4 <HAL_I2C_Init+0x278>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e006      	b.n	8002bce <HAL_I2C_Init+0x92>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a7d      	ldr	r2, [pc, #500]	@ (8002db8 <HAL_I2C_Init+0x27c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0e7      	b.n	8002da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a78      	ldr	r2, [pc, #480]	@ (8002dbc <HAL_I2C_Init+0x280>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	0c9b      	lsrs	r3, r3, #18
 8002be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a6a      	ldr	r2, [pc, #424]	@ (8002db0 <HAL_I2C_Init+0x274>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d802      	bhi.n	8002c10 <HAL_I2C_Init+0xd4>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	e009      	b.n	8002c24 <HAL_I2C_Init+0xe8>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	4a69      	ldr	r2, [pc, #420]	@ (8002dc0 <HAL_I2C_Init+0x284>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	3301      	adds	r3, #1
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	495c      	ldr	r1, [pc, #368]	@ (8002db0 <HAL_I2C_Init+0x274>)
 8002c40:	428b      	cmp	r3, r1
 8002c42:	d819      	bhi.n	8002c78 <HAL_I2C_Init+0x13c>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e59      	subs	r1, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c58:	400b      	ands	r3, r1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_I2C_Init+0x138>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e59      	subs	r1, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c72:	e051      	b.n	8002d18 <HAL_I2C_Init+0x1dc>
 8002c74:	2304      	movs	r3, #4
 8002c76:	e04f      	b.n	8002d18 <HAL_I2C_Init+0x1dc>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d111      	bne.n	8002ca4 <HAL_I2C_Init+0x168>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e58      	subs	r0, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e012      	b.n	8002cca <HAL_I2C_Init+0x18e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	0099      	lsls	r1, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x196>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e022      	b.n	8002d18 <HAL_I2C_Init+0x1dc>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_I2C_Init+0x1bc>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1e58      	subs	r0, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	440b      	add	r3, r1
 8002ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Init+0x1dc>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	0099      	lsls	r1, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	6809      	ldr	r1, [r1, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6911      	ldr	r1, [r2, #16]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	000186a0 	.word	0x000186a0
 8002db4:	001e847f 	.word	0x001e847f
 8002db8:	003d08ff 	.word	0x003d08ff
 8002dbc:	431bde83 	.word	0x431bde83
 8002dc0:	10624dd3 	.word	0x10624dd3

08002dc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7fe ff34 	bl	8001c44 <HAL_GetTick>
 8002ddc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	f040 80e0 	bne.w	8002fac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2319      	movs	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	4970      	ldr	r1, [pc, #448]	@ (8002fb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f964 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0d3      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2C_Master_Transmit+0x50>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0cc      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d007      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2221      	movs	r2, #33	@ 0x21
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2210      	movs	r2, #16
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	893a      	ldrh	r2, [r7, #8]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a50      	ldr	r2, [pc, #320]	@ (8002fbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f89c 	bl	8002fc0 <I2C_MasterRequestWrite>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e08d      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ea8:	e066      	b.n	8002f78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa22 	bl	80032f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e06b      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11b      	bne.n	8002f4c <HAL_I2C_Master_Transmit+0x188>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fa19 	bl	8003388 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d107      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01a      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d194      	bne.n	8002eaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	00100002 	.word	0x00100002
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d006      	beq.n	8002fea <I2C_MasterRequestWrite+0x2a>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d003      	beq.n	8002fea <I2C_MasterRequestWrite+0x2a>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fe8:	d108      	bne.n	8002ffc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e00b      	b.n	8003014 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	2b12      	cmp	r3, #18
 8003002:	d107      	bne.n	8003014 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003012:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f84f 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d103      	bne.n	8003044 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e035      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003050:	d108      	bne.n	8003064 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	e01b      	b.n	800309c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	11db      	asrs	r3, r3, #7
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0306 	and.w	r3, r3, #6
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f063 030f 	orn	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	490e      	ldr	r1, [pc, #56]	@ (80030bc <I2C_MasterRequestWrite+0xfc>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f898 	bl	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e010      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4907      	ldr	r1, [pc, #28]	@ (80030c0 <I2C_MasterRequestWrite+0x100>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f888 	bl	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	00010008 	.word	0x00010008
 80030c0:	00010002 	.word	0x00010002

080030c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	e048      	b.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030dc:	d044      	beq.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fdb1 	bl	8001c44 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d139      	bne.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10d      	bne.n	800311a <I2C_WaitOnFlagUntilTimeout+0x56>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	e00c      	b.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x70>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	43da      	mvns	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	429a      	cmp	r2, r3
 8003138:	d116      	bne.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e023      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10d      	bne.n	800318e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	43da      	mvns	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	e00c      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	43da      	mvns	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d093      	beq.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c6:	e071      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d6:	d123      	bne.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e067      	b.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003226:	d041      	beq.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003228:	f7fe fd0c 	bl	8001c44 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d302      	bcc.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d136      	bne.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10c      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e00b      	b.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	43da      	mvns	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e021      	b.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10c      	bne.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e00b      	b.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4013      	ands	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f af6d 	bne.w	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003304:	e034      	b.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f886 	bl	8003418 <I2C_IsAcknowledgeFailed>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e034      	b.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800331c:	d028      	beq.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe fc91 	bl	8001c44 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11d      	bne.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b80      	cmp	r3, #128	@ 0x80
 8003340:	d016      	beq.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e007      	b.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337a:	2b80      	cmp	r3, #128	@ 0x80
 800337c:	d1c3      	bne.n	8003306 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003394:	e034      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f83e 	bl	8003418 <I2C_IsAcknowledgeFailed>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ac:	d028      	beq.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe fc49 	bl	8001c44 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11d      	bne.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d016      	beq.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e007      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d1c3      	bne.n	8003396 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342e:	d11b      	bne.n	8003468 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003438:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e267      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003496:	4b88      	ldr	r3, [pc, #544]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d00c      	beq.n	80034bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4b85      	ldr	r3, [pc, #532]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4b82      	ldr	r3, [pc, #520]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4b7e      	ldr	r3, [pc, #504]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05b      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d157      	bne.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e242      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d106      	bne.n	80034ec <HAL_RCC_OscConfig+0x74>
 80034de:	4b76      	ldr	r3, [pc, #472]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a75      	ldr	r2, [pc, #468]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e01d      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b70      	ldr	r3, [pc, #448]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6f      	ldr	r2, [pc, #444]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b6d      	ldr	r3, [pc, #436]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6c      	ldr	r2, [pc, #432]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 8003510:	4b69      	ldr	r3, [pc, #420]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a68      	ldr	r2, [pc, #416]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b66      	ldr	r3, [pc, #408]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fb88 	bl	8001c44 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fb84 	bl	8001c44 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e207      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b5b      	ldr	r3, [pc, #364]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0xc0>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fb74 	bl	8001c44 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fb70 	bl	8001c44 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	@ 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1f3      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	4b51      	ldr	r3, [pc, #324]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800358e:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d11c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b44      	ldr	r3, [pc, #272]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	4b41      	ldr	r3, [pc, #260]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1c7      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4937      	ldr	r1, [pc, #220]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	e03a      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b34      	ldr	r3, [pc, #208]	@ (80036bc <HAL_RCC_OscConfig+0x244>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe fb29 	bl	8001c44 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f6:	f7fe fb25 	bl	8001c44 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1a8      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4925      	ldr	r1, [pc, #148]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
 8003628:	e015      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCC_OscConfig+0x244>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fb08 	bl	8001c44 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003638:	f7fe fb04 	bl	8001c44 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e187      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d036      	beq.n	80036d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCC_OscConfig+0x248>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fae8 	bl	8001c44 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003678:	f7fe fae4 	bl	8001c44 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e167      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_OscConfig+0x240>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x200>
 8003696:	e01b      	b.n	80036d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCC_OscConfig+0x248>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fad1 	bl	8001c44 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	e00e      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fe facd 	bl	8001c44 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d907      	bls.n	80036c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e150      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	42470000 	.word	0x42470000
 80036c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	4b88      	ldr	r3, [pc, #544]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ea      	bne.n	80036a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8097 	beq.w	800380c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b81      	ldr	r3, [pc, #516]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b7d      	ldr	r3, [pc, #500]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	4a7c      	ldr	r2, [pc, #496]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fe:	4b7a      	ldr	r3, [pc, #488]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b77      	ldr	r3, [pc, #476]	@ (80038ec <HAL_RCC_OscConfig+0x474>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b74      	ldr	r3, [pc, #464]	@ (80038ec <HAL_RCC_OscConfig+0x474>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a73      	ldr	r2, [pc, #460]	@ (80038ec <HAL_RCC_OscConfig+0x474>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fe fa8d 	bl	8001c44 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fe fa89 	bl	8001c44 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e10c      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b6a      	ldr	r3, [pc, #424]	@ (80038ec <HAL_RCC_OscConfig+0x474>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x2ea>
 8003754:	4b64      	ldr	r3, [pc, #400]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003758:	4a63      	ldr	r2, [pc, #396]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003760:	e01c      	b.n	800379c <HAL_RCC_OscConfig+0x324>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x30c>
 800376a:	4b5f      	ldr	r3, [pc, #380]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	4a5e      	ldr	r2, [pc, #376]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	6713      	str	r3, [r2, #112]	@ 0x70
 8003776:	4b5c      	ldr	r3, [pc, #368]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	4a5b      	ldr	r2, [pc, #364]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	@ 0x70
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0x324>
 8003784:	4b58      	ldr	r3, [pc, #352]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4a57      	ldr	r2, [pc, #348]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003790:	4b55      	ldr	r3, [pc, #340]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	4a54      	ldr	r2, [pc, #336]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003796:	f023 0304 	bic.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fa4e 	bl	8001c44 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe fa4a 	bl	8001c44 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0cb      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	4b49      	ldr	r3, [pc, #292]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ee      	beq.n	80037ac <HAL_RCC_OscConfig+0x334>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fa38 	bl	8001c44 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fe fa34 	bl	8001c44 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0b5      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ee:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ee      	bne.n	80037d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b39      	ldr	r3, [pc, #228]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	4a38      	ldr	r2, [pc, #224]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80a1 	beq.w	8003958 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003816:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d05c      	beq.n	80038dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d141      	bne.n	80038ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fa08 	bl	8001c44 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fa04 	bl	8001c44 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e087      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	491b      	ldr	r1, [pc, #108]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_RCC_OscConfig+0x478>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe f9dd 	bl	8001c44 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe f9d9 	bl	8001c44 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e05c      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x416>
 80038ac:	e054      	b.n	8003958 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <HAL_RCC_OscConfig+0x478>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe f9c6 	bl	8001c44 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe f9c2 	bl	8001c44 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e045      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x444>
 80038da:	e03d      	b.n	8003958 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e038      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x4ec>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d028      	beq.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d121      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d11a      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800392a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	4293      	cmp	r3, r2
 800392e:	d111      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	3b01      	subs	r3, #1
 800393e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0cc      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b68      	ldr	r3, [pc, #416]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d90c      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b65      	ldr	r3, [pc, #404]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b63      	ldr	r3, [pc, #396]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b8      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039bc:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a58      	ldr	r2, [pc, #352]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d4:	4b53      	ldr	r3, [pc, #332]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a52      	ldr	r2, [pc, #328]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b50      	ldr	r3, [pc, #320]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	494d      	ldr	r1, [pc, #308]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d044      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b47      	ldr	r3, [pc, #284]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d119      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b3f      	ldr	r3, [pc, #252]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e067      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4934      	ldr	r1, [pc, #208]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fe f8f4 	bl	8001c44 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe f8f0 	bl	8001c44 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d20c      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	@ (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4916      	ldr	r1, [pc, #88]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490e      	ldr	r1, [pc, #56]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aee:	f000 f821 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	490a      	ldr	r1, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f854 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00
 8003b24:	40023800 	.word	0x40023800
 8003b28:	080085e0 	.word	0x080085e0
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	20000004 	.word	0x20000004

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b094      	sub	sp, #80	@ 0x50
 8003b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	4b79      	ldr	r3, [pc, #484]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d00d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	f200 80e1 	bhi.w	8003d20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b66:	e0db      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b73      	ldr	r3, [pc, #460]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b6c:	e0db      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6e:	4b73      	ldr	r3, [pc, #460]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b72:	e0d8      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	2200      	movs	r2, #0
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	0159      	lsls	r1, r3, #5
 8003bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb8:	0150      	lsls	r0, r2, #5
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	1a51      	subs	r1, r2, r1
 8003bc2:	6139      	str	r1, [r7, #16]
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd8:	4659      	mov	r1, fp
 8003bda:	018b      	lsls	r3, r1, #6
 8003bdc:	4651      	mov	r1, sl
 8003bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be2:	4651      	mov	r1, sl
 8003be4:	018a      	lsls	r2, r1, #6
 8003be6:	4651      	mov	r1, sl
 8003be8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bec:	4659      	mov	r1, fp
 8003bee:	eb63 0901 	sbc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	462b      	mov	r3, r5
 8003c14:	eb49 0303 	adc.w	r3, r9, r3
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c26:	4629      	mov	r1, r5
 8003c28:	024b      	lsls	r3, r1, #9
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c30:	4621      	mov	r1, r4
 8003c32:	024a      	lsls	r2, r1, #9
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c44:	f7fc ffb8 	bl	8000bb8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c50:	e058      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4641      	mov	r1, r8
 8003c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb45 0303 	adc.w	r3, r5, r3
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	028a      	lsls	r2, r1, #10
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	61fa      	str	r2, [r7, #28]
 8003cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf8:	f7fc ff5e 	bl	8000bb8 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3750      	adds	r7, #80	@ 0x50
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	007a1200 	.word	0x007a1200

08003d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000000 	.word	0x20000000

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d5c:	f7ff fff0 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	080085f0 	.word	0x080085f0

08003d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d84:	f7ff ffdc 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0b5b      	lsrs	r3, r3, #13
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	080085f0 	.word	0x080085f0

08003da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fdd0 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fd69 	bl	80048c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d175      	bne.n	8003f54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x2c>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e06e      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	@ 0x21
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fedd 	bl	8001c44 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e003      	b.n	8003ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ebc:	e02e      	b.n	8003f1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	@ 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fb05 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03a      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e007      	b.n	8003f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cb      	bne.n	8003ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fad1 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0ba      	sub	sp, #232	@ 0xe8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fbc2 	bl	8004748 <UART_Receive_IT>
      return;
 8003fc4:	e25b      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80de 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
 8003fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80d1 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
 800401a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
 800403e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d011      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f043 0208 	orr.w	r2, r3, #8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 81f2 	beq.w	8004474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb4d 	bl	8004748 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_UART_IRQHandler+0x17a>
 80040d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04f      	beq.n	800417a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa55 	bl	800458a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d141      	bne.n	8004172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800411a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1d9      	bne.n	80040ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <HAL_UART_IRQHandler+0x3e0>)
 8004148:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fb1b 	bl	800278a <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00e      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f99e 	bl	80044ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e00a      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f99a 	bl	80044ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	e006      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f996 	bl	80044ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004186:	e175      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	bf00      	nop
    return;
 800418a:	e173      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 814f 	bne.w	8004434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8148 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8141 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	f040 80b6 	bne.w	8004344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8145 	beq.w	8004478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f080 813e 	bcs.w	8004478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420e:	f000 8088 	beq.w	8004322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800422c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800423e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800424a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1d9      	bne.n	8004212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800426e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800428a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e1      	bne.n	800425e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e3      	bne.n	800429a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004306:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800430a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe f9c4 	bl	80026aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8c1 	bl	80044c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800433e:	e09b      	b.n	8004478 <HAL_UART_IRQHandler+0x518>
 8004340:	08004651 	.word	0x08004651
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808e 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8089 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800438e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	623b      	str	r3, [r7, #32]
   return(result);
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e3      	bne.n	80043e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f847 	bl	80044c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004432:	e023      	b.n	800447c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f913 	bl	8004678 <UART_Transmit_IT>
    return;
 8004452:	e014      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f953 	bl	8004718 <UART_EndTransmit_IT>
    return;
 8004472:	e004      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
    return;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
      return;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
      return;
 800447c:	bf00      	nop
  }
}
 800447e:	37e8      	adds	r7, #232	@ 0xe8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e8:	e03b      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f0:	d037      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fd fba7 	bl	8001c44 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <UART_WaitOnFlagUntilTimeout+0x30>
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e03a      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d023      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d020      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b40      	cmp	r3, #64	@ 0x40
 8004524:	d01d      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d116      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f81d 	bl	800458a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2208      	movs	r2, #8
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	429a      	cmp	r2, r3
 800457e:	d0b4      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b095      	sub	sp, #84	@ 0x54
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e5      	bne.n	8004592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d119      	bne.n	8004636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	60bb      	str	r3, [r7, #8]
   return(result);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	647b      	str	r3, [r7, #68]	@ 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004622:	61ba      	str	r2, [r7, #24]
 8004624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004644:	bf00      	nop
 8004646:	3754      	adds	r7, #84	@ 0x54
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff1e 	bl	80044ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b21      	cmp	r3, #33	@ 0x21
 800468a:	d13e      	bne.n	800470a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004694:	d114      	bne.n	80046c0 <UART_Transmit_IT+0x48>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d110      	bne.n	80046c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]
 80046be:	e008      	b.n	80046d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	1c59      	adds	r1, r3, #1
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6211      	str	r1, [r2, #32]
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4619      	mov	r1, r3
 80046e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10f      	bne.n	8004706 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004704:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800472e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fea3 	bl	8004484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	@ 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b22      	cmp	r3, #34	@ 0x22
 800475a:	f040 80ae 	bne.w	80048ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004766:	d117      	bne.n	8004798 <UART_Receive_IT+0x50>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	b29a      	uxth	r2, r3
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	1c9a      	adds	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	629a      	str	r2, [r3, #40]	@ 0x28
 8004796:	e026      	b.n	80047e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d007      	beq.n	80047bc <UART_Receive_IT+0x74>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <UART_Receive_IT+0x82>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e008      	b.n	80047dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4619      	mov	r1, r3
 80047f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d15d      	bne.n	80048b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0220 	bic.w	r2, r2, #32
 8004808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	2b01      	cmp	r3, #1
 800483e:	d135      	bne.n	80048ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	613b      	str	r3, [r7, #16]
   return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f023 0310 	bic.w	r3, r3, #16
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004866:	623a      	str	r2, [r7, #32]
 8004868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	69f9      	ldr	r1, [r7, #28]
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	61bb      	str	r3, [r7, #24]
   return(result);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d10a      	bne.n	800489e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fe0b 	bl	80044c0 <HAL_UARTEx_RxEventCallback>
 80048aa:	e002      	b.n	80048b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fdf3 	bl	8004498 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e002      	b.n	80048bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3730      	adds	r7, #48	@ 0x30
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b0c0      	sub	sp, #256	@ 0x100
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	68d9      	ldr	r1, [r3, #12]
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	ea40 0301 	orr.w	r3, r0, r1
 80048ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	431a      	orrs	r2, r3
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800491c:	f021 010c 	bic.w	r1, r1, #12
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800492a:	430b      	orrs	r3, r1
 800492c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493e:	6999      	ldr	r1, [r3, #24]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	ea40 0301 	orr.w	r3, r0, r1
 800494a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8f      	ldr	r3, [pc, #572]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d005      	beq.n	8004964 <UART_SetConfig+0xa0>
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b94 <UART_SetConfig+0x2d0>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d104      	bne.n	800496e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7ff fa0c 	bl	8003d80 <HAL_RCC_GetPCLK2Freq>
 8004968:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800496c:	e003      	b.n	8004976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800496e:	f7ff f9f3 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8004972:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004980:	f040 810c 	bne.w	8004b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800498e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	1891      	adds	r1, r2, r2
 800499c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800499e:	415b      	adcs	r3, r3
 80049a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049a6:	4621      	mov	r1, r4
 80049a8:	eb12 0801 	adds.w	r8, r2, r1
 80049ac:	4629      	mov	r1, r5
 80049ae:	eb43 0901 	adc.w	r9, r3, r1
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c6:	4690      	mov	r8, r2
 80049c8:	4699      	mov	r9, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	eb18 0303 	adds.w	r3, r8, r3
 80049d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049d4:	462b      	mov	r3, r5
 80049d6:	eb49 0303 	adc.w	r3, r9, r3
 80049da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049f2:	460b      	mov	r3, r1
 80049f4:	18db      	adds	r3, r3, r3
 80049f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f8:	4613      	mov	r3, r2
 80049fa:	eb42 0303 	adc.w	r3, r2, r3
 80049fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a08:	f7fc f8d6 	bl	8000bb8 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004a12:	fba3 2302 	umull	r2, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	011c      	lsls	r4, r3, #4
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a34:	415b      	adcs	r3, r3
 8004a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0b01 	adc.w	fp, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a5c:	4692      	mov	sl, r2
 8004a5e:	469b      	mov	fp, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	eb1a 0303 	adds.w	r3, sl, r3
 8004a66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	18db      	adds	r3, r3, r3
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8e:	4613      	mov	r3, r2
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a9e:	f7fc f88b 	bl	8000bb8 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2264      	movs	r2, #100	@ 0x64
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	1acb      	subs	r3, r1, r3
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004abe:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004acc:	441c      	add	r4, r3
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b24:	464b      	mov	r3, r9
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b44:	460b      	mov	r3, r1
 8004b46:	18db      	adds	r3, r3, r3
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b5a:	f7fc f82d 	bl	8000bb8 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004b64:	fba3 1302 	umull	r1, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2164      	movs	r1, #100	@ 0x64
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	3332      	adds	r3, #50	@ 0x32
 8004b76:	4a08      	ldr	r2, [pc, #32]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4422      	add	r2, r4
 8004b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b8c:	e106      	b.n	8004d9c <UART_SetConfig+0x4d8>
 8004b8e:	bf00      	nop
 8004b90:	40011000 	.word	0x40011000
 8004b94:	40011400 	.word	0x40011400
 8004b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bae:	4642      	mov	r2, r8
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	6239      	str	r1, [r7, #32]
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	1854      	adds	r4, r2, r1
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	eb43 0501 	adc.w	r5, r3, r1
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	00eb      	lsls	r3, r5, #3
 8004bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd6:	00e2      	lsls	r2, r4, #3
 8004bd8:	4614      	mov	r4, r2
 8004bda:	461d      	mov	r5, r3
 8004bdc:	4643      	mov	r3, r8
 8004bde:	18e3      	adds	r3, r4, r3
 8004be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004be4:	464b      	mov	r3, r9
 8004be6:	eb45 0303 	adc.w	r3, r5, r3
 8004bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	008b      	lsls	r3, r1, #2
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c14:	4621      	mov	r1, r4
 8004c16:	008a      	lsls	r2, r1, #2
 8004c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c1c:	f7fb ffcc 	bl	8000bb8 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b60      	ldr	r3, [pc, #384]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	61b9      	str	r1, [r7, #24]
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6139      	str	r1, [r7, #16]
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c84:	464b      	mov	r3, r9
 8004c86:	460a      	mov	r2, r1
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ca8:	4649      	mov	r1, r9
 8004caa:	008b      	lsls	r3, r1, #2
 8004cac:	4641      	mov	r1, r8
 8004cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	008a      	lsls	r2, r1, #2
 8004cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cba:	f7fb ff7d 	bl	8000bb8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b38      	ldr	r3, [pc, #224]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	@ 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	@ 0x32
 8004cd8:	4a33      	ldr	r2, [pc, #204]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6039      	str	r1, [r7, #0]
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d36:	464b      	mov	r3, r9
 8004d38:	460a      	mov	r2, r1
 8004d3a:	eb42 0303 	adc.w	r3, r2, r3
 8004d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d58:	4649      	mov	r1, r9
 8004d5a:	008b      	lsls	r3, r1, #2
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d62:	4641      	mov	r1, r8
 8004d64:	008a      	lsls	r2, r1, #2
 8004d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d6a:	f7fb ff25 	bl	8000bb8 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	@ 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	3332      	adds	r3, #50	@ 0x32
 8004d86:	4a08      	ldr	r2, [pc, #32]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004da2:	46bd      	mov	sp, r7
 8004da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da8:	51eb851f 	.word	0x51eb851f

08004dac <findslot>:
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <findslot+0x2c>)
 8004dae:	b510      	push	{r4, lr}
 8004db0:	4604      	mov	r4, r0
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	b118      	cbz	r0, 8004dbe <findslot+0x12>
 8004db6:	6a03      	ldr	r3, [r0, #32]
 8004db8:	b90b      	cbnz	r3, 8004dbe <findslot+0x12>
 8004dba:	f001 f9e5 	bl	8006188 <__sinit>
 8004dbe:	2c13      	cmp	r4, #19
 8004dc0:	d807      	bhi.n	8004dd2 <findslot+0x26>
 8004dc2:	4806      	ldr	r0, [pc, #24]	@ (8004ddc <findslot+0x30>)
 8004dc4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004dc8:	3201      	adds	r2, #1
 8004dca:	d002      	beq.n	8004dd2 <findslot+0x26>
 8004dcc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e7fc      	b.n	8004dd0 <findslot+0x24>
 8004dd6:	bf00      	nop
 8004dd8:	20000018 	.word	0x20000018
 8004ddc:	200002e0 	.word	0x200002e0

08004de0 <error>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	f001 fba2 	bl	800652c <__errno>
 8004de8:	2613      	movs	r6, #19
 8004dea:	4605      	mov	r5, r0
 8004dec:	2700      	movs	r7, #0
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	beab      	bkpt	0x00ab
 8004df4:	4606      	mov	r6, r0
 8004df6:	602e      	str	r6, [r5, #0]
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dfc <checkerror>:
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d101      	bne.n	8004e04 <checkerror+0x8>
 8004e00:	f7ff bfee 	b.w	8004de0 <error>
 8004e04:	4770      	bx	lr

08004e06 <_swiread>:
 8004e06:	b530      	push	{r4, r5, lr}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004e0e:	9203      	str	r2, [sp, #12]
 8004e10:	2406      	movs	r4, #6
 8004e12:	ad01      	add	r5, sp, #4
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	beab      	bkpt	0x00ab
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff ffed 	bl	8004dfc <checkerror>
 8004e22:	b005      	add	sp, #20
 8004e24:	bd30      	pop	{r4, r5, pc}

08004e26 <_read>:
 8004e26:	b570      	push	{r4, r5, r6, lr}
 8004e28:	460e      	mov	r6, r1
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	f7ff ffbe 	bl	8004dac <findslot>
 8004e30:	4605      	mov	r5, r0
 8004e32:	b930      	cbnz	r0, 8004e42 <_read+0x1c>
 8004e34:	f001 fb7a 	bl	800652c <__errno>
 8004e38:	2309      	movs	r3, #9
 8004e3a:	6003      	str	r3, [r0, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	4622      	mov	r2, r4
 8004e46:	4631      	mov	r1, r6
 8004e48:	f7ff ffdd 	bl	8004e06 <_swiread>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d0f5      	beq.n	8004e3c <_read+0x16>
 8004e50:	686b      	ldr	r3, [r5, #4]
 8004e52:	1a20      	subs	r0, r4, r0
 8004e54:	4403      	add	r3, r0
 8004e56:	606b      	str	r3, [r5, #4]
 8004e58:	e7f2      	b.n	8004e40 <_read+0x1a>

08004e5a <_swilseek>:
 8004e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4616      	mov	r6, r2
 8004e60:	f7ff ffa4 	bl	8004dac <findslot>
 8004e64:	4605      	mov	r5, r0
 8004e66:	b940      	cbnz	r0, 8004e7a <_swilseek+0x20>
 8004e68:	f001 fb60 	bl	800652c <__errno>
 8004e6c:	2309      	movs	r3, #9
 8004e6e:	6003      	str	r3, [r0, #0]
 8004e70:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e74:	4620      	mov	r0, r4
 8004e76:	b003      	add	sp, #12
 8004e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e7a:	2e02      	cmp	r6, #2
 8004e7c:	d903      	bls.n	8004e86 <_swilseek+0x2c>
 8004e7e:	f001 fb55 	bl	800652c <__errno>
 8004e82:	2316      	movs	r3, #22
 8004e84:	e7f3      	b.n	8004e6e <_swilseek+0x14>
 8004e86:	2e01      	cmp	r6, #1
 8004e88:	d112      	bne.n	8004eb0 <_swilseek+0x56>
 8004e8a:	6843      	ldr	r3, [r0, #4]
 8004e8c:	18e4      	adds	r4, r4, r3
 8004e8e:	d4f6      	bmi.n	8004e7e <_swilseek+0x24>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	260a      	movs	r6, #10
 8004e94:	e9cd 3400 	strd	r3, r4, [sp]
 8004e98:	466f      	mov	r7, sp
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	beab      	bkpt	0x00ab
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ffaa 	bl	8004dfc <checkerror>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	dbe1      	blt.n	8004e70 <_swilseek+0x16>
 8004eac:	606c      	str	r4, [r5, #4]
 8004eae:	e7e1      	b.n	8004e74 <_swilseek+0x1a>
 8004eb0:	2e02      	cmp	r6, #2
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	d1ec      	bne.n	8004e90 <_swilseek+0x36>
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	260c      	movs	r6, #12
 8004eba:	466f      	mov	r7, sp
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	beab      	bkpt	0x00ab
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f7ff ff99 	bl	8004dfc <checkerror>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d0d0      	beq.n	8004e70 <_swilseek+0x16>
 8004ece:	4404      	add	r4, r0
 8004ed0:	e7de      	b.n	8004e90 <_swilseek+0x36>

08004ed2 <_lseek>:
 8004ed2:	f7ff bfc2 	b.w	8004e5a <_swilseek>

08004ed6 <_swiwrite>:
 8004ed6:	b530      	push	{r4, r5, lr}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004ede:	9203      	str	r2, [sp, #12]
 8004ee0:	2405      	movs	r4, #5
 8004ee2:	ad01      	add	r5, sp, #4
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	beab      	bkpt	0x00ab
 8004eea:	4604      	mov	r4, r0
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ff85 	bl	8004dfc <checkerror>
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bd30      	pop	{r4, r5, pc}

08004ef6 <_write>:
 8004ef6:	b570      	push	{r4, r5, r6, lr}
 8004ef8:	460e      	mov	r6, r1
 8004efa:	4615      	mov	r5, r2
 8004efc:	f7ff ff56 	bl	8004dac <findslot>
 8004f00:	4604      	mov	r4, r0
 8004f02:	b930      	cbnz	r0, 8004f12 <_write+0x1c>
 8004f04:	f001 fb12 	bl	800652c <__errno>
 8004f08:	2309      	movs	r3, #9
 8004f0a:	6003      	str	r3, [r0, #0]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	462a      	mov	r2, r5
 8004f16:	4631      	mov	r1, r6
 8004f18:	f7ff ffdd 	bl	8004ed6 <_swiwrite>
 8004f1c:	1e03      	subs	r3, r0, #0
 8004f1e:	dbf5      	blt.n	8004f0c <_write+0x16>
 8004f20:	6862      	ldr	r2, [r4, #4]
 8004f22:	1ae8      	subs	r0, r5, r3
 8004f24:	4402      	add	r2, r0
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	6062      	str	r2, [r4, #4]
 8004f2a:	d1f1      	bne.n	8004f10 <_write+0x1a>
 8004f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f30:	2000      	movs	r0, #0
 8004f32:	f7ff bf55 	b.w	8004de0 <error>

08004f36 <_swiclose>:
 8004f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f38:	2402      	movs	r4, #2
 8004f3a:	9001      	str	r0, [sp, #4]
 8004f3c:	ad01      	add	r5, sp, #4
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	beab      	bkpt	0x00ab
 8004f44:	4604      	mov	r4, r0
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7ff ff58 	bl	8004dfc <checkerror>
 8004f4c:	b003      	add	sp, #12
 8004f4e:	bd30      	pop	{r4, r5, pc}

08004f50 <_close>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4605      	mov	r5, r0
 8004f54:	f7ff ff2a 	bl	8004dac <findslot>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	b930      	cbnz	r0, 8004f6a <_close+0x1a>
 8004f5c:	f001 fae6 	bl	800652c <__errno>
 8004f60:	2309      	movs	r3, #9
 8004f62:	6003      	str	r3, [r0, #0]
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
 8004f6a:	3d01      	subs	r5, #1
 8004f6c:	2d01      	cmp	r5, #1
 8004f6e:	d809      	bhi.n	8004f84 <_close+0x34>
 8004f70:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <_close+0x48>)
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d104      	bne.n	8004f84 <_close+0x34>
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	2000      	movs	r0, #0
 8004f82:	e7f1      	b.n	8004f68 <_close+0x18>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	f7ff ffd6 	bl	8004f36 <_swiclose>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d1ec      	bne.n	8004f68 <_close+0x18>
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	e7e8      	b.n	8004f68 <_close+0x18>
 8004f96:	bf00      	nop
 8004f98:	200002e0 	.word	0x200002e0

08004f9c <_getpid>:
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	4770      	bx	lr

08004fa0 <_swistat>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	f7ff ff02 	bl	8004dac <findslot>
 8004fa8:	4605      	mov	r5, r0
 8004faa:	b930      	cbnz	r0, 8004fba <_swistat+0x1a>
 8004fac:	f001 fabe 	bl	800652c <__errno>
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	6003      	str	r3, [r0, #0]
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fc6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004fc8:	260c      	movs	r6, #12
 8004fca:	4630      	mov	r0, r6
 8004fcc:	4629      	mov	r1, r5
 8004fce:	beab      	bkpt	0x00ab
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7ff ff12 	bl	8004dfc <checkerror>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d0eb      	beq.n	8004fb4 <_swistat+0x14>
 8004fdc:	6120      	str	r0, [r4, #16]
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e7ea      	b.n	8004fb8 <_swistat+0x18>

08004fe2 <_fstat>:
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4604      	mov	r4, r0
 8004fea:	2258      	movs	r2, #88	@ 0x58
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 fa4b 	bl	8006488 <memset>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffa:	f7ff bfd1 	b.w	8004fa0 <_swistat>

08004ffe <_isatty>:
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	f7ff fed4 	bl	8004dac <findslot>
 8005004:	2409      	movs	r4, #9
 8005006:	4605      	mov	r5, r0
 8005008:	b920      	cbnz	r0, 8005014 <_isatty+0x16>
 800500a:	f001 fa8f 	bl	800652c <__errno>
 800500e:	6004      	str	r4, [r0, #0]
 8005010:	2000      	movs	r0, #0
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	4620      	mov	r0, r4
 8005016:	4629      	mov	r1, r5
 8005018:	beab      	bkpt	0x00ab
 800501a:	4604      	mov	r4, r0
 800501c:	2c01      	cmp	r4, #1
 800501e:	4620      	mov	r0, r4
 8005020:	d0f7      	beq.n	8005012 <_isatty+0x14>
 8005022:	f001 fa83 	bl	800652c <__errno>
 8005026:	2513      	movs	r5, #19
 8005028:	4604      	mov	r4, r0
 800502a:	2600      	movs	r6, #0
 800502c:	4628      	mov	r0, r5
 800502e:	4631      	mov	r1, r6
 8005030:	beab      	bkpt	0x00ab
 8005032:	4605      	mov	r5, r0
 8005034:	6025      	str	r5, [r4, #0]
 8005036:	e7eb      	b.n	8005010 <_isatty+0x12>

08005038 <powf>:
 8005038:	b508      	push	{r3, lr}
 800503a:	ed2d 8b04 	vpush	{d8-d9}
 800503e:	eeb0 8a60 	vmov.f32	s16, s1
 8005042:	eeb0 9a40 	vmov.f32	s18, s0
 8005046:	f000 f859 	bl	80050fc <__ieee754_powf>
 800504a:	eeb4 8a48 	vcmp.f32	s16, s16
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	eef0 8a40 	vmov.f32	s17, s0
 8005056:	d63e      	bvs.n	80050d6 <powf+0x9e>
 8005058:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d112      	bne.n	8005088 <powf+0x50>
 8005062:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	d039      	beq.n	80050e0 <powf+0xa8>
 800506c:	eeb0 0a48 	vmov.f32	s0, s16
 8005070:	f000 f839 	bl	80050e6 <finitef>
 8005074:	b378      	cbz	r0, 80050d6 <powf+0x9e>
 8005076:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	d52a      	bpl.n	80050d6 <powf+0x9e>
 8005080:	f001 fa54 	bl	800652c <__errno>
 8005084:	2322      	movs	r3, #34	@ 0x22
 8005086:	e014      	b.n	80050b2 <powf+0x7a>
 8005088:	f000 f82d 	bl	80050e6 <finitef>
 800508c:	b998      	cbnz	r0, 80050b6 <powf+0x7e>
 800508e:	eeb0 0a49 	vmov.f32	s0, s18
 8005092:	f000 f828 	bl	80050e6 <finitef>
 8005096:	b170      	cbz	r0, 80050b6 <powf+0x7e>
 8005098:	eeb0 0a48 	vmov.f32	s0, s16
 800509c:	f000 f823 	bl	80050e6 <finitef>
 80050a0:	b148      	cbz	r0, 80050b6 <powf+0x7e>
 80050a2:	eef4 8a68 	vcmp.f32	s17, s17
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	d7e9      	bvc.n	8005080 <powf+0x48>
 80050ac:	f001 fa3e 	bl	800652c <__errno>
 80050b0:	2321      	movs	r3, #33	@ 0x21
 80050b2:	6003      	str	r3, [r0, #0]
 80050b4:	e00f      	b.n	80050d6 <powf+0x9e>
 80050b6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	d10a      	bne.n	80050d6 <powf+0x9e>
 80050c0:	eeb0 0a49 	vmov.f32	s0, s18
 80050c4:	f000 f80f 	bl	80050e6 <finitef>
 80050c8:	b128      	cbz	r0, 80050d6 <powf+0x9e>
 80050ca:	eeb0 0a48 	vmov.f32	s0, s16
 80050ce:	f000 f80a 	bl	80050e6 <finitef>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d1d4      	bne.n	8005080 <powf+0x48>
 80050d6:	eeb0 0a68 	vmov.f32	s0, s17
 80050da:	ecbd 8b04 	vpop	{d8-d9}
 80050de:	bd08      	pop	{r3, pc}
 80050e0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80050e4:	e7f7      	b.n	80050d6 <powf+0x9e>

080050e6 <finitef>:
 80050e6:	ee10 3a10 	vmov	r3, s0
 80050ea:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80050ee:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80050f2:	bfac      	ite	ge
 80050f4:	2000      	movge	r0, #0
 80050f6:	2001      	movlt	r0, #1
 80050f8:	4770      	bx	lr
	...

080050fc <__ieee754_powf>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	ee10 4a90 	vmov	r4, s1
 8005104:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005108:	ed2d 8b02 	vpush	{d8}
 800510c:	ee10 6a10 	vmov	r6, s0
 8005110:	eeb0 8a40 	vmov.f32	s16, s0
 8005114:	eef0 8a60 	vmov.f32	s17, s1
 8005118:	d10c      	bne.n	8005134 <__ieee754_powf+0x38>
 800511a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800511e:	0076      	lsls	r6, r6, #1
 8005120:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005124:	f240 8274 	bls.w	8005610 <__ieee754_powf+0x514>
 8005128:	ee38 0a28 	vadd.f32	s0, s16, s17
 800512c:	ecbd 8b02 	vpop	{d8}
 8005130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005134:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005138:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800513c:	d802      	bhi.n	8005144 <__ieee754_powf+0x48>
 800513e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005142:	d908      	bls.n	8005156 <__ieee754_powf+0x5a>
 8005144:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005148:	d1ee      	bne.n	8005128 <__ieee754_powf+0x2c>
 800514a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800514e:	0064      	lsls	r4, r4, #1
 8005150:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005154:	e7e6      	b.n	8005124 <__ieee754_powf+0x28>
 8005156:	2e00      	cmp	r6, #0
 8005158:	da1f      	bge.n	800519a <__ieee754_powf+0x9e>
 800515a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800515e:	f080 8260 	bcs.w	8005622 <__ieee754_powf+0x526>
 8005162:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005166:	d32f      	bcc.n	80051c8 <__ieee754_powf+0xcc>
 8005168:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800516c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005170:	fa49 f503 	asr.w	r5, r9, r3
 8005174:	fa05 f303 	lsl.w	r3, r5, r3
 8005178:	454b      	cmp	r3, r9
 800517a:	d123      	bne.n	80051c4 <__ieee754_powf+0xc8>
 800517c:	f005 0501 	and.w	r5, r5, #1
 8005180:	f1c5 0502 	rsb	r5, r5, #2
 8005184:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005188:	d11f      	bne.n	80051ca <__ieee754_powf+0xce>
 800518a:	2c00      	cmp	r4, #0
 800518c:	f280 8246 	bge.w	800561c <__ieee754_powf+0x520>
 8005190:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005194:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005198:	e7c8      	b.n	800512c <__ieee754_powf+0x30>
 800519a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800519e:	d111      	bne.n	80051c4 <__ieee754_powf+0xc8>
 80051a0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80051a4:	f000 8234 	beq.w	8005610 <__ieee754_powf+0x514>
 80051a8:	d906      	bls.n	80051b8 <__ieee754_powf+0xbc>
 80051aa:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80054c0 <__ieee754_powf+0x3c4>
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	bfa8      	it	ge
 80051b2:	eeb0 0a68 	vmovge.f32	s0, s17
 80051b6:	e7b9      	b.n	800512c <__ieee754_powf+0x30>
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	f280 822c 	bge.w	8005616 <__ieee754_powf+0x51a>
 80051be:	eeb1 0a68 	vneg.f32	s0, s17
 80051c2:	e7b3      	b.n	800512c <__ieee754_powf+0x30>
 80051c4:	2500      	movs	r5, #0
 80051c6:	e7dd      	b.n	8005184 <__ieee754_powf+0x88>
 80051c8:	2500      	movs	r5, #0
 80051ca:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80051ce:	d102      	bne.n	80051d6 <__ieee754_powf+0xda>
 80051d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80051d4:	e7aa      	b.n	800512c <__ieee754_powf+0x30>
 80051d6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80051da:	f040 8227 	bne.w	800562c <__ieee754_powf+0x530>
 80051de:	2e00      	cmp	r6, #0
 80051e0:	f2c0 8224 	blt.w	800562c <__ieee754_powf+0x530>
 80051e4:	eeb0 0a48 	vmov.f32	s0, s16
 80051e8:	ecbd 8b02 	vpop	{d8}
 80051ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f0:	f000 bae6 	b.w	80057c0 <__ieee754_sqrtf>
 80051f4:	2d01      	cmp	r5, #1
 80051f6:	d199      	bne.n	800512c <__ieee754_powf+0x30>
 80051f8:	eeb1 0a40 	vneg.f32	s0, s0
 80051fc:	e796      	b.n	800512c <__ieee754_powf+0x30>
 80051fe:	0ff0      	lsrs	r0, r6, #31
 8005200:	3801      	subs	r0, #1
 8005202:	ea55 0300 	orrs.w	r3, r5, r0
 8005206:	d104      	bne.n	8005212 <__ieee754_powf+0x116>
 8005208:	ee38 8a48 	vsub.f32	s16, s16, s16
 800520c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005210:	e78c      	b.n	800512c <__ieee754_powf+0x30>
 8005212:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005216:	d96d      	bls.n	80052f4 <__ieee754_powf+0x1f8>
 8005218:	4baa      	ldr	r3, [pc, #680]	@ (80054c4 <__ieee754_powf+0x3c8>)
 800521a:	4598      	cmp	r8, r3
 800521c:	d808      	bhi.n	8005230 <__ieee754_powf+0x134>
 800521e:	2c00      	cmp	r4, #0
 8005220:	da0b      	bge.n	800523a <__ieee754_powf+0x13e>
 8005222:	2000      	movs	r0, #0
 8005224:	ecbd 8b02 	vpop	{d8}
 8005228:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800522c:	f000 bac2 	b.w	80057b4 <__math_oflowf>
 8005230:	4ba5      	ldr	r3, [pc, #660]	@ (80054c8 <__ieee754_powf+0x3cc>)
 8005232:	4598      	cmp	r8, r3
 8005234:	d908      	bls.n	8005248 <__ieee754_powf+0x14c>
 8005236:	2c00      	cmp	r4, #0
 8005238:	dcf3      	bgt.n	8005222 <__ieee754_powf+0x126>
 800523a:	2000      	movs	r0, #0
 800523c:	ecbd 8b02 	vpop	{d8}
 8005240:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	f000 bab0 	b.w	80057a8 <__math_uflowf>
 8005248:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800524c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005250:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80054cc <__ieee754_powf+0x3d0>
 8005254:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005258:	eee0 6a67 	vfms.f32	s13, s0, s15
 800525c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005260:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005264:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005268:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80054d0 <__ieee754_powf+0x3d4>
 800526c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005270:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80054d4 <__ieee754_powf+0x3d8>
 8005274:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005278:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80054d8 <__ieee754_powf+0x3dc>
 800527c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005280:	eeb0 7a67 	vmov.f32	s14, s15
 8005284:	eea0 7a26 	vfma.f32	s14, s0, s13
 8005288:	ee17 3a10 	vmov	r3, s14
 800528c:	f36f 030b 	bfc	r3, #0, #12
 8005290:	ee07 3a10 	vmov	s14, r3
 8005294:	eeb0 6a47 	vmov.f32	s12, s14
 8005298:	eea0 6a66 	vfms.f32	s12, s0, s13
 800529c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80052a0:	3d01      	subs	r5, #1
 80052a2:	4305      	orrs	r5, r0
 80052a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80052ac:	f36f 040b 	bfc	r4, #0, #12
 80052b0:	bf18      	it	ne
 80052b2:	eeb0 8a66 	vmovne.f32	s16, s13
 80052b6:	ee06 4a90 	vmov	s13, r4
 80052ba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80052be:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80052c2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80052c6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80052ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80052ce:	ee17 1a10 	vmov	r1, s14
 80052d2:	2900      	cmp	r1, #0
 80052d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052d8:	f340 80dd 	ble.w	8005496 <__ieee754_powf+0x39a>
 80052dc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80052e0:	f240 80ca 	bls.w	8005478 <__ieee754_powf+0x37c>
 80052e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80052e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ec:	bf4c      	ite	mi
 80052ee:	2001      	movmi	r0, #1
 80052f0:	2000      	movpl	r0, #0
 80052f2:	e797      	b.n	8005224 <__ieee754_powf+0x128>
 80052f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80052f8:	bf01      	itttt	eq
 80052fa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80054dc <__ieee754_powf+0x3e0>
 80052fe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005302:	f06f 0317 	mvneq.w	r3, #23
 8005306:	ee17 7a90 	vmoveq	r7, s15
 800530a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800530e:	bf18      	it	ne
 8005310:	2300      	movne	r3, #0
 8005312:	3a7f      	subs	r2, #127	@ 0x7f
 8005314:	441a      	add	r2, r3
 8005316:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <__ieee754_powf+0x3e4>)
 8005318:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800531c:	429f      	cmp	r7, r3
 800531e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005322:	dd06      	ble.n	8005332 <__ieee754_powf+0x236>
 8005324:	4b6f      	ldr	r3, [pc, #444]	@ (80054e4 <__ieee754_powf+0x3e8>)
 8005326:	429f      	cmp	r7, r3
 8005328:	f340 80a4 	ble.w	8005474 <__ieee754_powf+0x378>
 800532c:	3201      	adds	r2, #1
 800532e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8005332:	2600      	movs	r6, #0
 8005334:	4b6c      	ldr	r3, [pc, #432]	@ (80054e8 <__ieee754_powf+0x3ec>)
 8005336:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800533a:	ee07 1a10 	vmov	s14, r1
 800533e:	edd3 5a00 	vldr	s11, [r3]
 8005342:	4b6a      	ldr	r3, [pc, #424]	@ (80054ec <__ieee754_powf+0x3f0>)
 8005344:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800534c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005350:	1049      	asrs	r1, r1, #1
 8005352:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005356:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800535a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800535e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005362:	ee07 1a90 	vmov	s15, r1
 8005366:	ee26 5a24 	vmul.f32	s10, s12, s9
 800536a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800536e:	ee15 7a10 	vmov	r7, s10
 8005372:	401f      	ands	r7, r3
 8005374:	ee06 7a90 	vmov	s13, r7
 8005378:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800537c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005380:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005384:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005388:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80054f0 <__ieee754_powf+0x3f4>
 800538c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80054f4 <__ieee754_powf+0x3f8>
 8005390:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005394:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80054f8 <__ieee754_powf+0x3fc>
 8005398:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800539c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80054cc <__ieee754_powf+0x3d0>
 80053a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80053a4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80054fc <__ieee754_powf+0x400>
 80053a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80053ac:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005500 <__ieee754_powf+0x404>
 80053b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80053b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80053b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80053bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80053c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80053c4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80053c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80053cc:	eef0 5a67 	vmov.f32	s11, s15
 80053d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80053d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80053d8:	ee15 1a90 	vmov	r1, s11
 80053dc:	4019      	ands	r1, r3
 80053de:	ee05 1a90 	vmov	s11, r1
 80053e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80053e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80053ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80053f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80053f6:	eeb0 6a67 	vmov.f32	s12, s15
 80053fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80053fe:	ee16 1a10 	vmov	r1, s12
 8005402:	4019      	ands	r1, r3
 8005404:	ee06 1a10 	vmov	s12, r1
 8005408:	eeb0 7a46 	vmov.f32	s14, s12
 800540c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005410:	493c      	ldr	r1, [pc, #240]	@ (8005504 <__ieee754_powf+0x408>)
 8005412:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800541a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005508 <__ieee754_powf+0x40c>
 800541e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800550c <__ieee754_powf+0x410>
 8005422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005426:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005510 <__ieee754_powf+0x414>
 800542a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800542e:	ed91 7a00 	vldr	s14, [r1]
 8005432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005436:	ee07 2a10 	vmov	s14, r2
 800543a:	4a36      	ldr	r2, [pc, #216]	@ (8005514 <__ieee754_powf+0x418>)
 800543c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005440:	eeb0 7a67 	vmov.f32	s14, s15
 8005444:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005448:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800544c:	ed92 5a00 	vldr	s10, [r2]
 8005450:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005454:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005458:	ee17 2a10 	vmov	r2, s14
 800545c:	401a      	ands	r2, r3
 800545e:	ee07 2a10 	vmov	s14, r2
 8005462:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005466:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800546a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800546e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005472:	e715      	b.n	80052a0 <__ieee754_powf+0x1a4>
 8005474:	2601      	movs	r6, #1
 8005476:	e75d      	b.n	8005334 <__ieee754_powf+0x238>
 8005478:	d152      	bne.n	8005520 <__ieee754_powf+0x424>
 800547a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005518 <__ieee754_powf+0x41c>
 800547e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005482:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005486:	eef4 6ac7 	vcmpe.f32	s13, s14
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	f73f af29 	bgt.w	80052e4 <__ieee754_powf+0x1e8>
 8005492:	2386      	movs	r3, #134	@ 0x86
 8005494:	e048      	b.n	8005528 <__ieee754_powf+0x42c>
 8005496:	4a21      	ldr	r2, [pc, #132]	@ (800551c <__ieee754_powf+0x420>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d907      	bls.n	80054ac <__ieee754_powf+0x3b0>
 800549c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	bf4c      	ite	mi
 80054a6:	2001      	movmi	r0, #1
 80054a8:	2000      	movpl	r0, #0
 80054aa:	e6c7      	b.n	800523c <__ieee754_powf+0x140>
 80054ac:	d138      	bne.n	8005520 <__ieee754_powf+0x424>
 80054ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054b2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80054b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ba:	dbea      	blt.n	8005492 <__ieee754_powf+0x396>
 80054bc:	e7ee      	b.n	800549c <__ieee754_powf+0x3a0>
 80054be:	bf00      	nop
 80054c0:	00000000 	.word	0x00000000
 80054c4:	3f7ffff3 	.word	0x3f7ffff3
 80054c8:	3f800007 	.word	0x3f800007
 80054cc:	3eaaaaab 	.word	0x3eaaaaab
 80054d0:	3fb8aa00 	.word	0x3fb8aa00
 80054d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80054d8:	36eca570 	.word	0x36eca570
 80054dc:	4b800000 	.word	0x4b800000
 80054e0:	001cc471 	.word	0x001cc471
 80054e4:	005db3d6 	.word	0x005db3d6
 80054e8:	08008608 	.word	0x08008608
 80054ec:	fffff000 	.word	0xfffff000
 80054f0:	3e6c3255 	.word	0x3e6c3255
 80054f4:	3e53f142 	.word	0x3e53f142
 80054f8:	3e8ba305 	.word	0x3e8ba305
 80054fc:	3edb6db7 	.word	0x3edb6db7
 8005500:	3f19999a 	.word	0x3f19999a
 8005504:	080085f8 	.word	0x080085f8
 8005508:	3f76384f 	.word	0x3f76384f
 800550c:	3f763800 	.word	0x3f763800
 8005510:	369dc3a0 	.word	0x369dc3a0
 8005514:	08008600 	.word	0x08008600
 8005518:	3338aa3c 	.word	0x3338aa3c
 800551c:	43160000 	.word	0x43160000
 8005520:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005524:	d96f      	bls.n	8005606 <__ieee754_powf+0x50a>
 8005526:	15db      	asrs	r3, r3, #23
 8005528:	3b7e      	subs	r3, #126	@ 0x7e
 800552a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800552e:	4118      	asrs	r0, r3
 8005530:	4408      	add	r0, r1
 8005532:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005536:	4a4e      	ldr	r2, [pc, #312]	@ (8005670 <__ieee754_powf+0x574>)
 8005538:	3b7f      	subs	r3, #127	@ 0x7f
 800553a:	411a      	asrs	r2, r3
 800553c:	4002      	ands	r2, r0
 800553e:	ee07 2a10 	vmov	s14, r2
 8005542:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8005546:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800554a:	f1c3 0317 	rsb	r3, r3, #23
 800554e:	4118      	asrs	r0, r3
 8005550:	2900      	cmp	r1, #0
 8005552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005556:	bfb8      	it	lt
 8005558:	4240      	neglt	r0, r0
 800555a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800555e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005674 <__ieee754_powf+0x578>
 8005562:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8005678 <__ieee754_powf+0x57c>
 8005566:	ee16 3a90 	vmov	r3, s13
 800556a:	f36f 030b 	bfc	r3, #0, #12
 800556e:	ee06 3a90 	vmov	s13, r3
 8005572:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005576:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800557a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800557e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800567c <__ieee754_powf+0x580>
 8005582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005586:	eee0 7a87 	vfma.f32	s15, s1, s14
 800558a:	eeb0 7a67 	vmov.f32	s14, s15
 800558e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8005592:	eef0 5a47 	vmov.f32	s11, s14
 8005596:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800559a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800559e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80055a2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8005680 <__ieee754_powf+0x584>
 80055a6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8005684 <__ieee754_powf+0x588>
 80055aa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80055ae:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8005688 <__ieee754_powf+0x58c>
 80055b2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80055b6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800568c <__ieee754_powf+0x590>
 80055ba:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80055be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005690 <__ieee754_powf+0x594>
 80055c2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80055c6:	eeb0 6a47 	vmov.f32	s12, s14
 80055ca:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80055ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80055d2:	ee67 5a06 	vmul.f32	s11, s14, s12
 80055d6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80055da:	eee7 7a27 	vfma.f32	s15, s14, s15
 80055de:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80055e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80055e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055ee:	ee10 3a10 	vmov	r3, s0
 80055f2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80055f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055fa:	da06      	bge.n	800560a <__ieee754_powf+0x50e>
 80055fc:	f000 f854 	bl	80056a8 <scalbnf>
 8005600:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005604:	e592      	b.n	800512c <__ieee754_powf+0x30>
 8005606:	2000      	movs	r0, #0
 8005608:	e7a7      	b.n	800555a <__ieee754_powf+0x45e>
 800560a:	ee00 3a10 	vmov	s0, r3
 800560e:	e7f7      	b.n	8005600 <__ieee754_powf+0x504>
 8005610:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005614:	e58a      	b.n	800512c <__ieee754_powf+0x30>
 8005616:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8005694 <__ieee754_powf+0x598>
 800561a:	e587      	b.n	800512c <__ieee754_powf+0x30>
 800561c:	eeb0 0a48 	vmov.f32	s0, s16
 8005620:	e584      	b.n	800512c <__ieee754_powf+0x30>
 8005622:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005626:	f43f adbb 	beq.w	80051a0 <__ieee754_powf+0xa4>
 800562a:	2502      	movs	r5, #2
 800562c:	eeb0 0a48 	vmov.f32	s0, s16
 8005630:	f000 f832 	bl	8005698 <fabsf>
 8005634:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005638:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800563c:	4647      	mov	r7, r8
 800563e:	d003      	beq.n	8005648 <__ieee754_powf+0x54c>
 8005640:	f1b8 0f00 	cmp.w	r8, #0
 8005644:	f47f addb 	bne.w	80051fe <__ieee754_powf+0x102>
 8005648:	2c00      	cmp	r4, #0
 800564a:	bfbc      	itt	lt
 800564c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005650:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005654:	2e00      	cmp	r6, #0
 8005656:	f6bf ad69 	bge.w	800512c <__ieee754_powf+0x30>
 800565a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800565e:	ea58 0805 	orrs.w	r8, r8, r5
 8005662:	f47f adc7 	bne.w	80051f4 <__ieee754_powf+0xf8>
 8005666:	ee70 7a40 	vsub.f32	s15, s0, s0
 800566a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800566e:	e55d      	b.n	800512c <__ieee754_powf+0x30>
 8005670:	ff800000 	.word	0xff800000
 8005674:	3f317218 	.word	0x3f317218
 8005678:	3f317200 	.word	0x3f317200
 800567c:	35bfbe8c 	.word	0x35bfbe8c
 8005680:	b5ddea0e 	.word	0xb5ddea0e
 8005684:	3331bb4c 	.word	0x3331bb4c
 8005688:	388ab355 	.word	0x388ab355
 800568c:	bb360b61 	.word	0xbb360b61
 8005690:	3e2aaaab 	.word	0x3e2aaaab
 8005694:	00000000 	.word	0x00000000

08005698 <fabsf>:
 8005698:	ee10 3a10 	vmov	r3, s0
 800569c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056a0:	ee00 3a10 	vmov	s0, r3
 80056a4:	4770      	bx	lr
	...

080056a8 <scalbnf>:
 80056a8:	ee10 3a10 	vmov	r3, s0
 80056ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80056b0:	d02b      	beq.n	800570a <scalbnf+0x62>
 80056b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80056b6:	d302      	bcc.n	80056be <scalbnf+0x16>
 80056b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80056bc:	4770      	bx	lr
 80056be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80056c2:	d123      	bne.n	800570c <scalbnf+0x64>
 80056c4:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <scalbnf+0xb0>)
 80056c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800575c <scalbnf+0xb4>
 80056ca:	4298      	cmp	r0, r3
 80056cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80056d0:	db17      	blt.n	8005702 <scalbnf+0x5a>
 80056d2:	ee10 3a10 	vmov	r3, s0
 80056d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80056da:	3a19      	subs	r2, #25
 80056dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80056e0:	4288      	cmp	r0, r1
 80056e2:	dd15      	ble.n	8005710 <scalbnf+0x68>
 80056e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005760 <scalbnf+0xb8>
 80056e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005764 <scalbnf+0xbc>
 80056ec:	ee10 3a10 	vmov	r3, s0
 80056f0:	eeb0 7a67 	vmov.f32	s14, s15
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bfb8      	it	lt
 80056f8:	eef0 7a66 	vmovlt.f32	s15, s13
 80056fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005700:	4770      	bx	lr
 8005702:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005768 <scalbnf+0xc0>
 8005706:	ee27 0a80 	vmul.f32	s0, s15, s0
 800570a:	4770      	bx	lr
 800570c:	0dd2      	lsrs	r2, r2, #23
 800570e:	e7e5      	b.n	80056dc <scalbnf+0x34>
 8005710:	4410      	add	r0, r2
 8005712:	28fe      	cmp	r0, #254	@ 0xfe
 8005714:	dce6      	bgt.n	80056e4 <scalbnf+0x3c>
 8005716:	2800      	cmp	r0, #0
 8005718:	dd06      	ble.n	8005728 <scalbnf+0x80>
 800571a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800571e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005722:	ee00 3a10 	vmov	s0, r3
 8005726:	4770      	bx	lr
 8005728:	f110 0f16 	cmn.w	r0, #22
 800572c:	da09      	bge.n	8005742 <scalbnf+0x9a>
 800572e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005768 <scalbnf+0xc0>
 8005732:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800576c <scalbnf+0xc4>
 8005736:	ee10 3a10 	vmov	r3, s0
 800573a:	eeb0 7a67 	vmov.f32	s14, s15
 800573e:	2b00      	cmp	r3, #0
 8005740:	e7d9      	b.n	80056f6 <scalbnf+0x4e>
 8005742:	3019      	adds	r0, #25
 8005744:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005748:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800574c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005770 <scalbnf+0xc8>
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	e7d7      	b.n	8005706 <scalbnf+0x5e>
 8005756:	bf00      	nop
 8005758:	ffff3cb0 	.word	0xffff3cb0
 800575c:	4c000000 	.word	0x4c000000
 8005760:	7149f2ca 	.word	0x7149f2ca
 8005764:	f149f2ca 	.word	0xf149f2ca
 8005768:	0da24260 	.word	0x0da24260
 800576c:	8da24260 	.word	0x8da24260
 8005770:	33000000 	.word	0x33000000

08005774 <with_errnof>:
 8005774:	b510      	push	{r4, lr}
 8005776:	ed2d 8b02 	vpush	{d8}
 800577a:	eeb0 8a40 	vmov.f32	s16, s0
 800577e:	4604      	mov	r4, r0
 8005780:	f000 fed4 	bl	800652c <__errno>
 8005784:	eeb0 0a48 	vmov.f32	s0, s16
 8005788:	ecbd 8b02 	vpop	{d8}
 800578c:	6004      	str	r4, [r0, #0]
 800578e:	bd10      	pop	{r4, pc}

08005790 <xflowf>:
 8005790:	b130      	cbz	r0, 80057a0 <xflowf+0x10>
 8005792:	eef1 7a40 	vneg.f32	s15, s0
 8005796:	ee27 0a80 	vmul.f32	s0, s15, s0
 800579a:	2022      	movs	r0, #34	@ 0x22
 800579c:	f7ff bfea 	b.w	8005774 <with_errnof>
 80057a0:	eef0 7a40 	vmov.f32	s15, s0
 80057a4:	e7f7      	b.n	8005796 <xflowf+0x6>
	...

080057a8 <__math_uflowf>:
 80057a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80057b0 <__math_uflowf+0x8>
 80057ac:	f7ff bff0 	b.w	8005790 <xflowf>
 80057b0:	10000000 	.word	0x10000000

080057b4 <__math_oflowf>:
 80057b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80057bc <__math_oflowf+0x8>
 80057b8:	f7ff bfea 	b.w	8005790 <xflowf>
 80057bc:	70000000 	.word	0x70000000

080057c0 <__ieee754_sqrtf>:
 80057c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80057c4:	4770      	bx	lr

080057c6 <__cvt>:
 80057c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ca:	ec57 6b10 	vmov	r6, r7, d0
 80057ce:	2f00      	cmp	r7, #0
 80057d0:	460c      	mov	r4, r1
 80057d2:	4619      	mov	r1, r3
 80057d4:	463b      	mov	r3, r7
 80057d6:	bfbb      	ittet	lt
 80057d8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057dc:	461f      	movlt	r7, r3
 80057de:	2300      	movge	r3, #0
 80057e0:	232d      	movlt	r3, #45	@ 0x2d
 80057e2:	700b      	strb	r3, [r1, #0]
 80057e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057e6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057ea:	4691      	mov	r9, r2
 80057ec:	f023 0820 	bic.w	r8, r3, #32
 80057f0:	bfbc      	itt	lt
 80057f2:	4632      	movlt	r2, r6
 80057f4:	4616      	movlt	r6, r2
 80057f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057fa:	d005      	beq.n	8005808 <__cvt+0x42>
 80057fc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005800:	d100      	bne.n	8005804 <__cvt+0x3e>
 8005802:	3401      	adds	r4, #1
 8005804:	2102      	movs	r1, #2
 8005806:	e000      	b.n	800580a <__cvt+0x44>
 8005808:	2103      	movs	r1, #3
 800580a:	ab03      	add	r3, sp, #12
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	ab02      	add	r3, sp, #8
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	ec47 6b10 	vmov	d0, r6, r7
 8005816:	4653      	mov	r3, sl
 8005818:	4622      	mov	r2, r4
 800581a:	f000 ff3d 	bl	8006698 <_dtoa_r>
 800581e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005822:	4605      	mov	r5, r0
 8005824:	d119      	bne.n	800585a <__cvt+0x94>
 8005826:	f019 0f01 	tst.w	r9, #1
 800582a:	d00e      	beq.n	800584a <__cvt+0x84>
 800582c:	eb00 0904 	add.w	r9, r0, r4
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fb f94e 	bl	8000ad8 <__aeabi_dcmpeq>
 800583c:	b108      	cbz	r0, 8005842 <__cvt+0x7c>
 800583e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005842:	2230      	movs	r2, #48	@ 0x30
 8005844:	9b03      	ldr	r3, [sp, #12]
 8005846:	454b      	cmp	r3, r9
 8005848:	d31e      	bcc.n	8005888 <__cvt+0xc2>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800584e:	1b5b      	subs	r3, r3, r5
 8005850:	4628      	mov	r0, r5
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	b004      	add	sp, #16
 8005856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800585e:	eb00 0904 	add.w	r9, r0, r4
 8005862:	d1e5      	bne.n	8005830 <__cvt+0x6a>
 8005864:	7803      	ldrb	r3, [r0, #0]
 8005866:	2b30      	cmp	r3, #48	@ 0x30
 8005868:	d10a      	bne.n	8005880 <__cvt+0xba>
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fb f931 	bl	8000ad8 <__aeabi_dcmpeq>
 8005876:	b918      	cbnz	r0, 8005880 <__cvt+0xba>
 8005878:	f1c4 0401 	rsb	r4, r4, #1
 800587c:	f8ca 4000 	str.w	r4, [sl]
 8005880:	f8da 3000 	ldr.w	r3, [sl]
 8005884:	4499      	add	r9, r3
 8005886:	e7d3      	b.n	8005830 <__cvt+0x6a>
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	9103      	str	r1, [sp, #12]
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e7d9      	b.n	8005844 <__cvt+0x7e>

08005890 <__exponent>:
 8005890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005892:	2900      	cmp	r1, #0
 8005894:	bfba      	itte	lt
 8005896:	4249      	neglt	r1, r1
 8005898:	232d      	movlt	r3, #45	@ 0x2d
 800589a:	232b      	movge	r3, #43	@ 0x2b
 800589c:	2909      	cmp	r1, #9
 800589e:	7002      	strb	r2, [r0, #0]
 80058a0:	7043      	strb	r3, [r0, #1]
 80058a2:	dd29      	ble.n	80058f8 <__exponent+0x68>
 80058a4:	f10d 0307 	add.w	r3, sp, #7
 80058a8:	461d      	mov	r5, r3
 80058aa:	270a      	movs	r7, #10
 80058ac:	461a      	mov	r2, r3
 80058ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80058b2:	fb07 1416 	mls	r4, r7, r6, r1
 80058b6:	3430      	adds	r4, #48	@ 0x30
 80058b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058bc:	460c      	mov	r4, r1
 80058be:	2c63      	cmp	r4, #99	@ 0x63
 80058c0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80058c4:	4631      	mov	r1, r6
 80058c6:	dcf1      	bgt.n	80058ac <__exponent+0x1c>
 80058c8:	3130      	adds	r1, #48	@ 0x30
 80058ca:	1e94      	subs	r4, r2, #2
 80058cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058d0:	1c41      	adds	r1, r0, #1
 80058d2:	4623      	mov	r3, r4
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	d30a      	bcc.n	80058ee <__exponent+0x5e>
 80058d8:	f10d 0309 	add.w	r3, sp, #9
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	42ac      	cmp	r4, r5
 80058e0:	bf88      	it	hi
 80058e2:	2300      	movhi	r3, #0
 80058e4:	3302      	adds	r3, #2
 80058e6:	4403      	add	r3, r0
 80058e8:	1a18      	subs	r0, r3, r0
 80058ea:	b003      	add	sp, #12
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058f6:	e7ed      	b.n	80058d4 <__exponent+0x44>
 80058f8:	2330      	movs	r3, #48	@ 0x30
 80058fa:	3130      	adds	r1, #48	@ 0x30
 80058fc:	7083      	strb	r3, [r0, #2]
 80058fe:	70c1      	strb	r1, [r0, #3]
 8005900:	1d03      	adds	r3, r0, #4
 8005902:	e7f1      	b.n	80058e8 <__exponent+0x58>

08005904 <_printf_float>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	b08d      	sub	sp, #52	@ 0x34
 800590a:	460c      	mov	r4, r1
 800590c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005910:	4616      	mov	r6, r2
 8005912:	461f      	mov	r7, r3
 8005914:	4605      	mov	r5, r0
 8005916:	f000 fdbf 	bl	8006498 <_localeconv_r>
 800591a:	6803      	ldr	r3, [r0, #0]
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fa fcae 	bl	8000280 <strlen>
 8005924:	2300      	movs	r3, #0
 8005926:	930a      	str	r3, [sp, #40]	@ 0x28
 8005928:	f8d8 3000 	ldr.w	r3, [r8]
 800592c:	9005      	str	r0, [sp, #20]
 800592e:	3307      	adds	r3, #7
 8005930:	f023 0307 	bic.w	r3, r3, #7
 8005934:	f103 0208 	add.w	r2, r3, #8
 8005938:	f894 a018 	ldrb.w	sl, [r4, #24]
 800593c:	f8d4 b000 	ldr.w	fp, [r4]
 8005940:	f8c8 2000 	str.w	r2, [r8]
 8005944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005948:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005952:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800595a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bcc <_printf_float+0x2c8>)
 800595c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005960:	f7fb f8ec 	bl	8000b3c <__aeabi_dcmpun>
 8005964:	bb70      	cbnz	r0, 80059c4 <_printf_float+0xc0>
 8005966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596a:	4b98      	ldr	r3, [pc, #608]	@ (8005bcc <_printf_float+0x2c8>)
 800596c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005970:	f7fb f8c6 	bl	8000b00 <__aeabi_dcmple>
 8005974:	bb30      	cbnz	r0, 80059c4 <_printf_float+0xc0>
 8005976:	2200      	movs	r2, #0
 8005978:	2300      	movs	r3, #0
 800597a:	4640      	mov	r0, r8
 800597c:	4649      	mov	r1, r9
 800597e:	f7fb f8b5 	bl	8000aec <__aeabi_dcmplt>
 8005982:	b110      	cbz	r0, 800598a <_printf_float+0x86>
 8005984:	232d      	movs	r3, #45	@ 0x2d
 8005986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598a:	4a91      	ldr	r2, [pc, #580]	@ (8005bd0 <_printf_float+0x2cc>)
 800598c:	4b91      	ldr	r3, [pc, #580]	@ (8005bd4 <_printf_float+0x2d0>)
 800598e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005992:	bf8c      	ite	hi
 8005994:	4690      	movhi	r8, r2
 8005996:	4698      	movls	r8, r3
 8005998:	2303      	movs	r3, #3
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	f02b 0304 	bic.w	r3, fp, #4
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	9700      	str	r7, [sp, #0]
 80059a8:	4633      	mov	r3, r6
 80059aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059ac:	4621      	mov	r1, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f9d2 	bl	8005d58 <_printf_common>
 80059b4:	3001      	adds	r0, #1
 80059b6:	f040 808d 	bne.w	8005ad4 <_printf_float+0x1d0>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059be:	b00d      	add	sp, #52	@ 0x34
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fb f8b6 	bl	8000b3c <__aeabi_dcmpun>
 80059d0:	b140      	cbz	r0, 80059e4 <_printf_float+0xe0>
 80059d2:	464b      	mov	r3, r9
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bfbc      	itt	lt
 80059d8:	232d      	movlt	r3, #45	@ 0x2d
 80059da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059de:	4a7e      	ldr	r2, [pc, #504]	@ (8005bd8 <_printf_float+0x2d4>)
 80059e0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bdc <_printf_float+0x2d8>)
 80059e2:	e7d4      	b.n	800598e <_printf_float+0x8a>
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059ea:	9206      	str	r2, [sp, #24]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	d13b      	bne.n	8005a68 <_printf_float+0x164>
 80059f0:	2306      	movs	r3, #6
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059f8:	2300      	movs	r3, #0
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a04:	ab09      	add	r3, sp, #36	@ 0x24
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6861      	ldr	r1, [r4, #4]
 8005a0a:	ec49 8b10 	vmov	d0, r8, r9
 8005a0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff fed7 	bl	80057c6 <__cvt>
 8005a18:	9b06      	ldr	r3, [sp, #24]
 8005a1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a1c:	2b47      	cmp	r3, #71	@ 0x47
 8005a1e:	4680      	mov	r8, r0
 8005a20:	d129      	bne.n	8005a76 <_printf_float+0x172>
 8005a22:	1cc8      	adds	r0, r1, #3
 8005a24:	db02      	blt.n	8005a2c <_printf_float+0x128>
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	dd41      	ble.n	8005ab0 <_printf_float+0x1ac>
 8005a2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a30:	fa5f fa8a 	uxtb.w	sl, sl
 8005a34:	3901      	subs	r1, #1
 8005a36:	4652      	mov	r2, sl
 8005a38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a3e:	f7ff ff27 	bl	8005890 <__exponent>
 8005a42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a44:	1813      	adds	r3, r2, r0
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	4681      	mov	r9, r0
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	dc02      	bgt.n	8005a54 <_printf_float+0x150>
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	07d2      	lsls	r2, r2, #31
 8005a52:	d501      	bpl.n	8005a58 <_printf_float+0x154>
 8005a54:	3301      	adds	r3, #1
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0a2      	beq.n	80059a6 <_printf_float+0xa2>
 8005a60:	232d      	movs	r3, #45	@ 0x2d
 8005a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a66:	e79e      	b.n	80059a6 <_printf_float+0xa2>
 8005a68:	9a06      	ldr	r2, [sp, #24]
 8005a6a:	2a47      	cmp	r2, #71	@ 0x47
 8005a6c:	d1c2      	bne.n	80059f4 <_printf_float+0xf0>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1c0      	bne.n	80059f4 <_printf_float+0xf0>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7bd      	b.n	80059f2 <_printf_float+0xee>
 8005a76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a7a:	d9db      	bls.n	8005a34 <_printf_float+0x130>
 8005a7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a80:	d118      	bne.n	8005ab4 <_printf_float+0x1b0>
 8005a82:	2900      	cmp	r1, #0
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	dd0b      	ble.n	8005aa0 <_printf_float+0x19c>
 8005a88:	6121      	str	r1, [r4, #16]
 8005a8a:	b913      	cbnz	r3, 8005a92 <_printf_float+0x18e>
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	07d0      	lsls	r0, r2, #31
 8005a90:	d502      	bpl.n	8005a98 <_printf_float+0x194>
 8005a92:	3301      	adds	r3, #1
 8005a94:	440b      	add	r3, r1
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a9a:	f04f 0900 	mov.w	r9, #0
 8005a9e:	e7db      	b.n	8005a58 <_printf_float+0x154>
 8005aa0:	b913      	cbnz	r3, 8005aa8 <_printf_float+0x1a4>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	07d2      	lsls	r2, r2, #31
 8005aa6:	d501      	bpl.n	8005aac <_printf_float+0x1a8>
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	e7f4      	b.n	8005a96 <_printf_float+0x192>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e7f2      	b.n	8005a96 <_printf_float+0x192>
 8005ab0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	db05      	blt.n	8005ac6 <_printf_float+0x1c2>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	6121      	str	r1, [r4, #16]
 8005abe:	07d8      	lsls	r0, r3, #31
 8005ac0:	d5ea      	bpl.n	8005a98 <_printf_float+0x194>
 8005ac2:	1c4b      	adds	r3, r1, #1
 8005ac4:	e7e7      	b.n	8005a96 <_printf_float+0x192>
 8005ac6:	2900      	cmp	r1, #0
 8005ac8:	bfd4      	ite	le
 8005aca:	f1c1 0202 	rsble	r2, r1, #2
 8005ace:	2201      	movgt	r2, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	e7e0      	b.n	8005a96 <_printf_float+0x192>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	055a      	lsls	r2, r3, #21
 8005ad8:	d407      	bmi.n	8005aea <_printf_float+0x1e6>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	4642      	mov	r2, r8
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d12b      	bne.n	8005b40 <_printf_float+0x23c>
 8005ae8:	e767      	b.n	80059ba <_printf_float+0xb6>
 8005aea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005aee:	f240 80dd 	bls.w	8005cac <_printf_float+0x3a8>
 8005af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005af6:	2200      	movs	r2, #0
 8005af8:	2300      	movs	r3, #0
 8005afa:	f7fa ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d033      	beq.n	8005b6a <_printf_float+0x266>
 8005b02:	4a37      	ldr	r2, [pc, #220]	@ (8005be0 <_printf_float+0x2dc>)
 8005b04:	2301      	movs	r3, #1
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f af54 	beq.w	80059ba <_printf_float+0xb6>
 8005b12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b16:	4543      	cmp	r3, r8
 8005b18:	db02      	blt.n	8005b20 <_printf_float+0x21c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	07d8      	lsls	r0, r3, #31
 8005b1e:	d50f      	bpl.n	8005b40 <_printf_float+0x23c>
 8005b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f af45 	beq.w	80059ba <_printf_float+0xb6>
 8005b30:	f04f 0900 	mov.w	r9, #0
 8005b34:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005b38:	f104 0a1a 	add.w	sl, r4, #26
 8005b3c:	45c8      	cmp	r8, r9
 8005b3e:	dc09      	bgt.n	8005b54 <_printf_float+0x250>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	079b      	lsls	r3, r3, #30
 8005b44:	f100 8103 	bmi.w	8005d4e <_printf_float+0x44a>
 8005b48:	68e0      	ldr	r0, [r4, #12]
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b4c:	4298      	cmp	r0, r3
 8005b4e:	bfb8      	it	lt
 8005b50:	4618      	movlt	r0, r3
 8005b52:	e734      	b.n	80059be <_printf_float+0xba>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4652      	mov	r2, sl
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af2b 	beq.w	80059ba <_printf_float+0xb6>
 8005b64:	f109 0901 	add.w	r9, r9, #1
 8005b68:	e7e8      	b.n	8005b3c <_printf_float+0x238>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc39      	bgt.n	8005be4 <_printf_float+0x2e0>
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <_printf_float+0x2dc>)
 8005b72:	2301      	movs	r3, #1
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af1d 	beq.w	80059ba <_printf_float+0xb6>
 8005b80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b84:	ea59 0303 	orrs.w	r3, r9, r3
 8005b88:	d102      	bne.n	8005b90 <_printf_float+0x28c>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	07d9      	lsls	r1, r3, #31
 8005b8e:	d5d7      	bpl.n	8005b40 <_printf_float+0x23c>
 8005b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af0d 	beq.w	80059ba <_printf_float+0xb6>
 8005ba0:	f04f 0a00 	mov.w	sl, #0
 8005ba4:	f104 0b1a 	add.w	fp, r4, #26
 8005ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005baa:	425b      	negs	r3, r3
 8005bac:	4553      	cmp	r3, sl
 8005bae:	dc01      	bgt.n	8005bb4 <_printf_float+0x2b0>
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	e793      	b.n	8005adc <_printf_float+0x1d8>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	465a      	mov	r2, fp
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f aefb 	beq.w	80059ba <_printf_float+0xb6>
 8005bc4:	f10a 0a01 	add.w	sl, sl, #1
 8005bc8:	e7ee      	b.n	8005ba8 <_printf_float+0x2a4>
 8005bca:	bf00      	nop
 8005bcc:	7fefffff 	.word	0x7fefffff
 8005bd0:	08008614 	.word	0x08008614
 8005bd4:	08008610 	.word	0x08008610
 8005bd8:	0800861c 	.word	0x0800861c
 8005bdc:	08008618 	.word	0x08008618
 8005be0:	08008620 	.word	0x08008620
 8005be4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005be6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bea:	4553      	cmp	r3, sl
 8005bec:	bfa8      	it	ge
 8005bee:	4653      	movge	r3, sl
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	dc36      	bgt.n	8005c64 <_printf_float+0x360>
 8005bf6:	f04f 0b00 	mov.w	fp, #0
 8005bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfe:	f104 021a 	add.w	r2, r4, #26
 8005c02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c04:	9306      	str	r3, [sp, #24]
 8005c06:	eba3 0309 	sub.w	r3, r3, r9
 8005c0a:	455b      	cmp	r3, fp
 8005c0c:	dc31      	bgt.n	8005c72 <_printf_float+0x36e>
 8005c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c10:	459a      	cmp	sl, r3
 8005c12:	dc3a      	bgt.n	8005c8a <_printf_float+0x386>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d437      	bmi.n	8005c8a <_printf_float+0x386>
 8005c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	ebaa 0303 	sub.w	r3, sl, r3
 8005c26:	4599      	cmp	r9, r3
 8005c28:	bfa8      	it	ge
 8005c2a:	4699      	movge	r9, r3
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	dc33      	bgt.n	8005c9a <_printf_float+0x396>
 8005c32:	f04f 0800 	mov.w	r8, #0
 8005c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c3a:	f104 0b1a 	add.w	fp, r4, #26
 8005c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c40:	ebaa 0303 	sub.w	r3, sl, r3
 8005c44:	eba3 0309 	sub.w	r3, r3, r9
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	f77f af79 	ble.w	8005b40 <_printf_float+0x23c>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	465a      	mov	r2, fp
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f aeae 	beq.w	80059ba <_printf_float+0xb6>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	e7ec      	b.n	8005c3e <_printf_float+0x33a>
 8005c64:	4642      	mov	r2, r8
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d1c2      	bne.n	8005bf6 <_printf_float+0x2f2>
 8005c70:	e6a3      	b.n	80059ba <_printf_float+0xb6>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	9206      	str	r2, [sp, #24]
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae9c 	beq.w	80059ba <_printf_float+0xb6>
 8005c82:	9a06      	ldr	r2, [sp, #24]
 8005c84:	f10b 0b01 	add.w	fp, fp, #1
 8005c88:	e7bb      	b.n	8005c02 <_printf_float+0x2fe>
 8005c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	d1c0      	bne.n	8005c1a <_printf_float+0x316>
 8005c98:	e68f      	b.n	80059ba <_printf_float+0xb6>
 8005c9a:	9a06      	ldr	r2, [sp, #24]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	4442      	add	r2, r8
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d1c3      	bne.n	8005c32 <_printf_float+0x32e>
 8005caa:	e686      	b.n	80059ba <_printf_float+0xb6>
 8005cac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cb0:	f1ba 0f01 	cmp.w	sl, #1
 8005cb4:	dc01      	bgt.n	8005cba <_printf_float+0x3b6>
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d536      	bpl.n	8005d28 <_printf_float+0x424>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae78 	beq.w	80059ba <_printf_float+0xb6>
 8005cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae70 	beq.w	80059ba <_printf_float+0xb6>
 8005cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005ce6:	f7fa fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cea:	b9c0      	cbnz	r0, 8005d1e <_printf_float+0x41a>
 8005cec:	4653      	mov	r3, sl
 8005cee:	f108 0201 	add.w	r2, r8, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d10c      	bne.n	8005d16 <_printf_float+0x412>
 8005cfc:	e65d      	b.n	80059ba <_printf_float+0xb6>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	465a      	mov	r2, fp
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae56 	beq.w	80059ba <_printf_float+0xb6>
 8005d0e:	f108 0801 	add.w	r8, r8, #1
 8005d12:	45d0      	cmp	r8, sl
 8005d14:	dbf3      	blt.n	8005cfe <_printf_float+0x3fa>
 8005d16:	464b      	mov	r3, r9
 8005d18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d1c:	e6df      	b.n	8005ade <_printf_float+0x1da>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	f104 0b1a 	add.w	fp, r4, #26
 8005d26:	e7f4      	b.n	8005d12 <_printf_float+0x40e>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	e7e1      	b.n	8005cf2 <_printf_float+0x3ee>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	464a      	mov	r2, r9
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f43f ae3e 	beq.w	80059ba <_printf_float+0xb6>
 8005d3e:	f108 0801 	add.w	r8, r8, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	4543      	cmp	r3, r8
 8005d4a:	dcf0      	bgt.n	8005d2e <_printf_float+0x42a>
 8005d4c:	e6fc      	b.n	8005b48 <_printf_float+0x244>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	f104 0919 	add.w	r9, r4, #25
 8005d56:	e7f4      	b.n	8005d42 <_printf_float+0x43e>

08005d58 <_printf_common>:
 8005d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	4698      	mov	r8, r3
 8005d60:	688a      	ldr	r2, [r1, #8]
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bfb8      	it	lt
 8005d6c:	4613      	movlt	r3, r2
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d74:	4607      	mov	r7, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	b10a      	cbz	r2, 8005d7e <_printf_common+0x26>
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	6033      	str	r3, [r6, #0]
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	0699      	lsls	r1, r3, #26
 8005d82:	bf42      	ittt	mi
 8005d84:	6833      	ldrmi	r3, [r6, #0]
 8005d86:	3302      	addmi	r3, #2
 8005d88:	6033      	strmi	r3, [r6, #0]
 8005d8a:	6825      	ldr	r5, [r4, #0]
 8005d8c:	f015 0506 	ands.w	r5, r5, #6
 8005d90:	d106      	bne.n	8005da0 <_printf_common+0x48>
 8005d92:	f104 0a19 	add.w	sl, r4, #25
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	6832      	ldr	r2, [r6, #0]
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dc26      	bgt.n	8005dee <_printf_common+0x96>
 8005da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005da4:	6822      	ldr	r2, [r4, #0]
 8005da6:	3b00      	subs	r3, #0
 8005da8:	bf18      	it	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	0692      	lsls	r2, r2, #26
 8005dae:	d42b      	bmi.n	8005e08 <_printf_common+0xb0>
 8005db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005db4:	4641      	mov	r1, r8
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c8      	blx	r9
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d01e      	beq.n	8005dfc <_printf_common+0xa4>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	f003 0306 	and.w	r3, r3, #6
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	bf02      	ittt	eq
 8005dca:	68e5      	ldreq	r5, [r4, #12]
 8005dcc:	6833      	ldreq	r3, [r6, #0]
 8005dce:	1aed      	subeq	r5, r5, r3
 8005dd0:	68a3      	ldr	r3, [r4, #8]
 8005dd2:	bf0c      	ite	eq
 8005dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dd8:	2500      	movne	r5, #0
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	bfc4      	itt	gt
 8005dde:	1a9b      	subgt	r3, r3, r2
 8005de0:	18ed      	addgt	r5, r5, r3
 8005de2:	2600      	movs	r6, #0
 8005de4:	341a      	adds	r4, #26
 8005de6:	42b5      	cmp	r5, r6
 8005de8:	d11a      	bne.n	8005e20 <_printf_common+0xc8>
 8005dea:	2000      	movs	r0, #0
 8005dec:	e008      	b.n	8005e00 <_printf_common+0xa8>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4652      	mov	r2, sl
 8005df2:	4641      	mov	r1, r8
 8005df4:	4638      	mov	r0, r7
 8005df6:	47c8      	blx	r9
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d103      	bne.n	8005e04 <_printf_common+0xac>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	3501      	adds	r5, #1
 8005e06:	e7c6      	b.n	8005d96 <_printf_common+0x3e>
 8005e08:	18e1      	adds	r1, r4, r3
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	2030      	movs	r0, #48	@ 0x30
 8005e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e12:	4422      	add	r2, r4
 8005e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	e7c7      	b.n	8005db0 <_printf_common+0x58>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4622      	mov	r2, r4
 8005e24:	4641      	mov	r1, r8
 8005e26:	4638      	mov	r0, r7
 8005e28:	47c8      	blx	r9
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d0e6      	beq.n	8005dfc <_printf_common+0xa4>
 8005e2e:	3601      	adds	r6, #1
 8005e30:	e7d9      	b.n	8005de6 <_printf_common+0x8e>
	...

08005e34 <_printf_i>:
 8005e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	7e0f      	ldrb	r7, [r1, #24]
 8005e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e3c:	2f78      	cmp	r7, #120	@ 0x78
 8005e3e:	4691      	mov	r9, r2
 8005e40:	4680      	mov	r8, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	469a      	mov	sl, r3
 8005e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e4a:	d807      	bhi.n	8005e5c <_printf_i+0x28>
 8005e4c:	2f62      	cmp	r7, #98	@ 0x62
 8005e4e:	d80a      	bhi.n	8005e66 <_printf_i+0x32>
 8005e50:	2f00      	cmp	r7, #0
 8005e52:	f000 80d1 	beq.w	8005ff8 <_printf_i+0x1c4>
 8005e56:	2f58      	cmp	r7, #88	@ 0x58
 8005e58:	f000 80b8 	beq.w	8005fcc <_printf_i+0x198>
 8005e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e64:	e03a      	b.n	8005edc <_printf_i+0xa8>
 8005e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e6a:	2b15      	cmp	r3, #21
 8005e6c:	d8f6      	bhi.n	8005e5c <_printf_i+0x28>
 8005e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e74 <_printf_i+0x40>)
 8005e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e74:	08005ecd 	.word	0x08005ecd
 8005e78:	08005ee1 	.word	0x08005ee1
 8005e7c:	08005e5d 	.word	0x08005e5d
 8005e80:	08005e5d 	.word	0x08005e5d
 8005e84:	08005e5d 	.word	0x08005e5d
 8005e88:	08005e5d 	.word	0x08005e5d
 8005e8c:	08005ee1 	.word	0x08005ee1
 8005e90:	08005e5d 	.word	0x08005e5d
 8005e94:	08005e5d 	.word	0x08005e5d
 8005e98:	08005e5d 	.word	0x08005e5d
 8005e9c:	08005e5d 	.word	0x08005e5d
 8005ea0:	08005fdf 	.word	0x08005fdf
 8005ea4:	08005f0b 	.word	0x08005f0b
 8005ea8:	08005f99 	.word	0x08005f99
 8005eac:	08005e5d 	.word	0x08005e5d
 8005eb0:	08005e5d 	.word	0x08005e5d
 8005eb4:	08006001 	.word	0x08006001
 8005eb8:	08005e5d 	.word	0x08005e5d
 8005ebc:	08005f0b 	.word	0x08005f0b
 8005ec0:	08005e5d 	.word	0x08005e5d
 8005ec4:	08005e5d 	.word	0x08005e5d
 8005ec8:	08005fa1 	.word	0x08005fa1
 8005ecc:	6833      	ldr	r3, [r6, #0]
 8005ece:	1d1a      	adds	r2, r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6032      	str	r2, [r6, #0]
 8005ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005edc:	2301      	movs	r3, #1
 8005ede:	e09c      	b.n	800601a <_printf_i+0x1e6>
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	6031      	str	r1, [r6, #0]
 8005ee8:	0606      	lsls	r6, r0, #24
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0xbc>
 8005eec:	681d      	ldr	r5, [r3, #0]
 8005eee:	e003      	b.n	8005ef8 <_printf_i+0xc4>
 8005ef0:	0645      	lsls	r5, r0, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0xb8>
 8005ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	da03      	bge.n	8005f04 <_printf_i+0xd0>
 8005efc:	232d      	movs	r3, #45	@ 0x2d
 8005efe:	426d      	negs	r5, r5
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f04:	4858      	ldr	r0, [pc, #352]	@ (8006068 <_printf_i+0x234>)
 8005f06:	230a      	movs	r3, #10
 8005f08:	e011      	b.n	8005f2e <_printf_i+0xfa>
 8005f0a:	6821      	ldr	r1, [r4, #0]
 8005f0c:	6833      	ldr	r3, [r6, #0]
 8005f0e:	0608      	lsls	r0, r1, #24
 8005f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f14:	d402      	bmi.n	8005f1c <_printf_i+0xe8>
 8005f16:	0649      	lsls	r1, r1, #25
 8005f18:	bf48      	it	mi
 8005f1a:	b2ad      	uxthmi	r5, r5
 8005f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f1e:	4852      	ldr	r0, [pc, #328]	@ (8006068 <_printf_i+0x234>)
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	bf14      	ite	ne
 8005f24:	230a      	movne	r3, #10
 8005f26:	2308      	moveq	r3, #8
 8005f28:	2100      	movs	r1, #0
 8005f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f2e:	6866      	ldr	r6, [r4, #4]
 8005f30:	60a6      	str	r6, [r4, #8]
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	db05      	blt.n	8005f42 <_printf_i+0x10e>
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	432e      	orrs	r6, r5
 8005f3a:	f021 0104 	bic.w	r1, r1, #4
 8005f3e:	6021      	str	r1, [r4, #0]
 8005f40:	d04b      	beq.n	8005fda <_printf_i+0x1a6>
 8005f42:	4616      	mov	r6, r2
 8005f44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f48:	fb03 5711 	mls	r7, r3, r1, r5
 8005f4c:	5dc7      	ldrb	r7, [r0, r7]
 8005f4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f52:	462f      	mov	r7, r5
 8005f54:	42bb      	cmp	r3, r7
 8005f56:	460d      	mov	r5, r1
 8005f58:	d9f4      	bls.n	8005f44 <_printf_i+0x110>
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d10b      	bne.n	8005f76 <_printf_i+0x142>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	07df      	lsls	r7, r3, #31
 8005f62:	d508      	bpl.n	8005f76 <_printf_i+0x142>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	6861      	ldr	r1, [r4, #4]
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	bfde      	ittt	le
 8005f6c:	2330      	movle	r3, #48	@ 0x30
 8005f6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f76:	1b92      	subs	r2, r2, r6
 8005f78:	6122      	str	r2, [r4, #16]
 8005f7a:	f8cd a000 	str.w	sl, [sp]
 8005f7e:	464b      	mov	r3, r9
 8005f80:	aa03      	add	r2, sp, #12
 8005f82:	4621      	mov	r1, r4
 8005f84:	4640      	mov	r0, r8
 8005f86:	f7ff fee7 	bl	8005d58 <_printf_common>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d14a      	bne.n	8006024 <_printf_i+0x1f0>
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f92:	b004      	add	sp, #16
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	f043 0320 	orr.w	r3, r3, #32
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	4832      	ldr	r0, [pc, #200]	@ (800606c <_printf_i+0x238>)
 8005fa2:	2778      	movs	r7, #120	@ 0x78
 8005fa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	061f      	lsls	r7, r3, #24
 8005fae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fb2:	d402      	bmi.n	8005fba <_printf_i+0x186>
 8005fb4:	065f      	lsls	r7, r3, #25
 8005fb6:	bf48      	it	mi
 8005fb8:	b2ad      	uxthmi	r5, r5
 8005fba:	6031      	str	r1, [r6, #0]
 8005fbc:	07d9      	lsls	r1, r3, #31
 8005fbe:	bf44      	itt	mi
 8005fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc4:	6023      	strmi	r3, [r4, #0]
 8005fc6:	b11d      	cbz	r5, 8005fd0 <_printf_i+0x19c>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	e7ad      	b.n	8005f28 <_printf_i+0xf4>
 8005fcc:	4826      	ldr	r0, [pc, #152]	@ (8006068 <_printf_i+0x234>)
 8005fce:	e7e9      	b.n	8005fa4 <_printf_i+0x170>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	f023 0320 	bic.w	r3, r3, #32
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	e7f6      	b.n	8005fc8 <_printf_i+0x194>
 8005fda:	4616      	mov	r6, r2
 8005fdc:	e7bd      	b.n	8005f5a <_printf_i+0x126>
 8005fde:	6833      	ldr	r3, [r6, #0]
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	6961      	ldr	r1, [r4, #20]
 8005fe4:	1d18      	adds	r0, r3, #4
 8005fe6:	6030      	str	r0, [r6, #0]
 8005fe8:	062e      	lsls	r6, r5, #24
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	d501      	bpl.n	8005ff2 <_printf_i+0x1be>
 8005fee:	6019      	str	r1, [r3, #0]
 8005ff0:	e002      	b.n	8005ff8 <_printf_i+0x1c4>
 8005ff2:	0668      	lsls	r0, r5, #25
 8005ff4:	d5fb      	bpl.n	8005fee <_printf_i+0x1ba>
 8005ff6:	8019      	strh	r1, [r3, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	e7bc      	b.n	8005f7a <_printf_i+0x146>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	6032      	str	r2, [r6, #0]
 8006006:	681e      	ldr	r6, [r3, #0]
 8006008:	6862      	ldr	r2, [r4, #4]
 800600a:	2100      	movs	r1, #0
 800600c:	4630      	mov	r0, r6
 800600e:	f7fa f8e7 	bl	80001e0 <memchr>
 8006012:	b108      	cbz	r0, 8006018 <_printf_i+0x1e4>
 8006014:	1b80      	subs	r0, r0, r6
 8006016:	6060      	str	r0, [r4, #4]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	2300      	movs	r3, #0
 800601e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006022:	e7aa      	b.n	8005f7a <_printf_i+0x146>
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	4632      	mov	r2, r6
 8006028:	4649      	mov	r1, r9
 800602a:	4640      	mov	r0, r8
 800602c:	47d0      	blx	sl
 800602e:	3001      	adds	r0, #1
 8006030:	d0ad      	beq.n	8005f8e <_printf_i+0x15a>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	079b      	lsls	r3, r3, #30
 8006036:	d413      	bmi.n	8006060 <_printf_i+0x22c>
 8006038:	68e0      	ldr	r0, [r4, #12]
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	4298      	cmp	r0, r3
 800603e:	bfb8      	it	lt
 8006040:	4618      	movlt	r0, r3
 8006042:	e7a6      	b.n	8005f92 <_printf_i+0x15e>
 8006044:	2301      	movs	r3, #1
 8006046:	4632      	mov	r2, r6
 8006048:	4649      	mov	r1, r9
 800604a:	4640      	mov	r0, r8
 800604c:	47d0      	blx	sl
 800604e:	3001      	adds	r0, #1
 8006050:	d09d      	beq.n	8005f8e <_printf_i+0x15a>
 8006052:	3501      	adds	r5, #1
 8006054:	68e3      	ldr	r3, [r4, #12]
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	1a5b      	subs	r3, r3, r1
 800605a:	42ab      	cmp	r3, r5
 800605c:	dcf2      	bgt.n	8006044 <_printf_i+0x210>
 800605e:	e7eb      	b.n	8006038 <_printf_i+0x204>
 8006060:	2500      	movs	r5, #0
 8006062:	f104 0619 	add.w	r6, r4, #25
 8006066:	e7f5      	b.n	8006054 <_printf_i+0x220>
 8006068:	08008622 	.word	0x08008622
 800606c:	08008633 	.word	0x08008633

08006070 <std>:
 8006070:	2300      	movs	r3, #0
 8006072:	b510      	push	{r4, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	e9c0 3300 	strd	r3, r3, [r0]
 800607a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800607e:	6083      	str	r3, [r0, #8]
 8006080:	8181      	strh	r1, [r0, #12]
 8006082:	6643      	str	r3, [r0, #100]	@ 0x64
 8006084:	81c2      	strh	r2, [r0, #14]
 8006086:	6183      	str	r3, [r0, #24]
 8006088:	4619      	mov	r1, r3
 800608a:	2208      	movs	r2, #8
 800608c:	305c      	adds	r0, #92	@ 0x5c
 800608e:	f000 f9fb 	bl	8006488 <memset>
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x58>)
 8006094:	6263      	str	r3, [r4, #36]	@ 0x24
 8006096:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <std+0x5c>)
 8006098:	62a3      	str	r3, [r4, #40]	@ 0x28
 800609a:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <std+0x60>)
 800609c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <std+0x64>)
 80060a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80060a2:	4b0d      	ldr	r3, [pc, #52]	@ (80060d8 <std+0x68>)
 80060a4:	6224      	str	r4, [r4, #32]
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d006      	beq.n	80060b8 <std+0x48>
 80060aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ae:	4294      	cmp	r4, r2
 80060b0:	d002      	beq.n	80060b8 <std+0x48>
 80060b2:	33d0      	adds	r3, #208	@ 0xd0
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d105      	bne.n	80060c4 <std+0x54>
 80060b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f000 ba5e 	b.w	8006580 <__retarget_lock_init_recursive>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	08006261 	.word	0x08006261
 80060cc:	08006283 	.word	0x08006283
 80060d0:	080062bb 	.word	0x080062bb
 80060d4:	080062df 	.word	0x080062df
 80060d8:	20000380 	.word	0x20000380

080060dc <stdio_exit_handler>:
 80060dc:	4a02      	ldr	r2, [pc, #8]	@ (80060e8 <stdio_exit_handler+0xc>)
 80060de:	4903      	ldr	r1, [pc, #12]	@ (80060ec <stdio_exit_handler+0x10>)
 80060e0:	4803      	ldr	r0, [pc, #12]	@ (80060f0 <stdio_exit_handler+0x14>)
 80060e2:	f000 b869 	b.w	80061b8 <_fwalk_sglue>
 80060e6:	bf00      	nop
 80060e8:	2000000c 	.word	0x2000000c
 80060ec:	08008169 	.word	0x08008169
 80060f0:	2000001c 	.word	0x2000001c

080060f4 <cleanup_stdio>:
 80060f4:	6841      	ldr	r1, [r0, #4]
 80060f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <cleanup_stdio+0x34>)
 80060f8:	4299      	cmp	r1, r3
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	d001      	beq.n	8006104 <cleanup_stdio+0x10>
 8006100:	f002 f832 	bl	8008168 <_fflush_r>
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	4b09      	ldr	r3, [pc, #36]	@ (800612c <cleanup_stdio+0x38>)
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <cleanup_stdio+0x1e>
 800610c:	4620      	mov	r0, r4
 800610e:	f002 f82b 	bl	8008168 <_fflush_r>
 8006112:	68e1      	ldr	r1, [r4, #12]
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <cleanup_stdio+0x3c>)
 8006116:	4299      	cmp	r1, r3
 8006118:	d004      	beq.n	8006124 <cleanup_stdio+0x30>
 800611a:	4620      	mov	r0, r4
 800611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006120:	f002 b822 	b.w	8008168 <_fflush_r>
 8006124:	bd10      	pop	{r4, pc}
 8006126:	bf00      	nop
 8006128:	20000380 	.word	0x20000380
 800612c:	200003e8 	.word	0x200003e8
 8006130:	20000450 	.word	0x20000450

08006134 <global_stdio_init.part.0>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <global_stdio_init.part.0+0x30>)
 8006138:	4c0b      	ldr	r4, [pc, #44]	@ (8006168 <global_stdio_init.part.0+0x34>)
 800613a:	4a0c      	ldr	r2, [pc, #48]	@ (800616c <global_stdio_init.part.0+0x38>)
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	4620      	mov	r0, r4
 8006140:	2200      	movs	r2, #0
 8006142:	2104      	movs	r1, #4
 8006144:	f7ff ff94 	bl	8006070 <std>
 8006148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800614c:	2201      	movs	r2, #1
 800614e:	2109      	movs	r1, #9
 8006150:	f7ff ff8e 	bl	8006070 <std>
 8006154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006158:	2202      	movs	r2, #2
 800615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615e:	2112      	movs	r1, #18
 8006160:	f7ff bf86 	b.w	8006070 <std>
 8006164:	200004b8 	.word	0x200004b8
 8006168:	20000380 	.word	0x20000380
 800616c:	080060dd 	.word	0x080060dd

08006170 <__sfp_lock_acquire>:
 8006170:	4801      	ldr	r0, [pc, #4]	@ (8006178 <__sfp_lock_acquire+0x8>)
 8006172:	f000 ba06 	b.w	8006582 <__retarget_lock_acquire_recursive>
 8006176:	bf00      	nop
 8006178:	200004c1 	.word	0x200004c1

0800617c <__sfp_lock_release>:
 800617c:	4801      	ldr	r0, [pc, #4]	@ (8006184 <__sfp_lock_release+0x8>)
 800617e:	f000 ba01 	b.w	8006584 <__retarget_lock_release_recursive>
 8006182:	bf00      	nop
 8006184:	200004c1 	.word	0x200004c1

08006188 <__sinit>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	f7ff fff0 	bl	8006170 <__sfp_lock_acquire>
 8006190:	6a23      	ldr	r3, [r4, #32]
 8006192:	b11b      	cbz	r3, 800619c <__sinit+0x14>
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f7ff bff0 	b.w	800617c <__sfp_lock_release>
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <__sinit+0x28>)
 800619e:	6223      	str	r3, [r4, #32]
 80061a0:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <__sinit+0x2c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f5      	bne.n	8006194 <__sinit+0xc>
 80061a8:	f7ff ffc4 	bl	8006134 <global_stdio_init.part.0>
 80061ac:	e7f2      	b.n	8006194 <__sinit+0xc>
 80061ae:	bf00      	nop
 80061b0:	080060f5 	.word	0x080060f5
 80061b4:	200004b8 	.word	0x200004b8

080061b8 <_fwalk_sglue>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4607      	mov	r7, r0
 80061be:	4688      	mov	r8, r1
 80061c0:	4614      	mov	r4, r2
 80061c2:	2600      	movs	r6, #0
 80061c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c8:	f1b9 0901 	subs.w	r9, r9, #1
 80061cc:	d505      	bpl.n	80061da <_fwalk_sglue+0x22>
 80061ce:	6824      	ldr	r4, [r4, #0]
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	d1f7      	bne.n	80061c4 <_fwalk_sglue+0xc>
 80061d4:	4630      	mov	r0, r6
 80061d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d907      	bls.n	80061f0 <_fwalk_sglue+0x38>
 80061e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e4:	3301      	adds	r3, #1
 80061e6:	d003      	beq.n	80061f0 <_fwalk_sglue+0x38>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	4306      	orrs	r6, r0
 80061f0:	3568      	adds	r5, #104	@ 0x68
 80061f2:	e7e9      	b.n	80061c8 <_fwalk_sglue+0x10>

080061f4 <sniprintf>:
 80061f4:	b40c      	push	{r2, r3}
 80061f6:	b530      	push	{r4, r5, lr}
 80061f8:	4b18      	ldr	r3, [pc, #96]	@ (800625c <sniprintf+0x68>)
 80061fa:	1e0c      	subs	r4, r1, #0
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	b09d      	sub	sp, #116	@ 0x74
 8006200:	da08      	bge.n	8006214 <sniprintf+0x20>
 8006202:	238b      	movs	r3, #139	@ 0x8b
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800620a:	b01d      	add	sp, #116	@ 0x74
 800620c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006210:	b002      	add	sp, #8
 8006212:	4770      	bx	lr
 8006214:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006218:	f8ad 3014 	strh.w	r3, [sp, #20]
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006222:	bf14      	ite	ne
 8006224:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006228:	4623      	moveq	r3, r4
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006232:	9002      	str	r0, [sp, #8]
 8006234:	9006      	str	r0, [sp, #24]
 8006236:	f8ad 3016 	strh.w	r3, [sp, #22]
 800623a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800623c:	ab21      	add	r3, sp, #132	@ 0x84
 800623e:	a902      	add	r1, sp, #8
 8006240:	4628      	mov	r0, r5
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f001 fcce 	bl	8007be4 <_svfiprintf_r>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	bfbc      	itt	lt
 800624c:	238b      	movlt	r3, #139	@ 0x8b
 800624e:	602b      	strlt	r3, [r5, #0]
 8006250:	2c00      	cmp	r4, #0
 8006252:	d0da      	beq.n	800620a <sniprintf+0x16>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e7d6      	b.n	800620a <sniprintf+0x16>
 800625c:	20000018 	.word	0x20000018

08006260 <__sread>:
 8006260:	b510      	push	{r4, lr}
 8006262:	460c      	mov	r4, r1
 8006264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006268:	f000 f93c 	bl	80064e4 <_read_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	bfab      	itete	ge
 8006270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006272:	89a3      	ldrhlt	r3, [r4, #12]
 8006274:	181b      	addge	r3, r3, r0
 8006276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800627a:	bfac      	ite	ge
 800627c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800627e:	81a3      	strhlt	r3, [r4, #12]
 8006280:	bd10      	pop	{r4, pc}

08006282 <__swrite>:
 8006282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	461f      	mov	r7, r3
 8006288:	898b      	ldrh	r3, [r1, #12]
 800628a:	05db      	lsls	r3, r3, #23
 800628c:	4605      	mov	r5, r0
 800628e:	460c      	mov	r4, r1
 8006290:	4616      	mov	r6, r2
 8006292:	d505      	bpl.n	80062a0 <__swrite+0x1e>
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	2302      	movs	r3, #2
 800629a:	2200      	movs	r2, #0
 800629c:	f000 f910 	bl	80064c0 <_lseek_r>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
 80062b0:	4628      	mov	r0, r5
 80062b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	f000 b927 	b.w	8006508 <_write_r>

080062ba <__sseek>:
 80062ba:	b510      	push	{r4, lr}
 80062bc:	460c      	mov	r4, r1
 80062be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c2:	f000 f8fd 	bl	80064c0 <_lseek_r>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	bf15      	itete	ne
 80062cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062d6:	81a3      	strheq	r3, [r4, #12]
 80062d8:	bf18      	it	ne
 80062da:	81a3      	strhne	r3, [r4, #12]
 80062dc:	bd10      	pop	{r4, pc}

080062de <__sclose>:
 80062de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e2:	f000 b8dd 	b.w	80064a0 <_close_r>

080062e6 <_vsniprintf_r>:
 80062e6:	b530      	push	{r4, r5, lr}
 80062e8:	4614      	mov	r4, r2
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	b09b      	sub	sp, #108	@ 0x6c
 80062ee:	4605      	mov	r5, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	da05      	bge.n	8006300 <_vsniprintf_r+0x1a>
 80062f4:	238b      	movs	r3, #139	@ 0x8b
 80062f6:	6003      	str	r3, [r0, #0]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062fc:	b01b      	add	sp, #108	@ 0x6c
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006304:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	9319      	str	r3, [sp, #100]	@ 0x64
 800630e:	bf14      	ite	ne
 8006310:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006314:	4623      	moveq	r3, r4
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800631e:	9100      	str	r1, [sp, #0]
 8006320:	9104      	str	r1, [sp, #16]
 8006322:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006326:	4669      	mov	r1, sp
 8006328:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800632a:	f001 fc5b 	bl	8007be4 <_svfiprintf_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	bfbc      	itt	lt
 8006332:	238b      	movlt	r3, #139	@ 0x8b
 8006334:	602b      	strlt	r3, [r5, #0]
 8006336:	2c00      	cmp	r4, #0
 8006338:	d0e0      	beq.n	80062fc <_vsniprintf_r+0x16>
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e7dc      	b.n	80062fc <_vsniprintf_r+0x16>
	...

08006344 <vsniprintf>:
 8006344:	b507      	push	{r0, r1, r2, lr}
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	460a      	mov	r2, r1
 800634c:	4601      	mov	r1, r0
 800634e:	4803      	ldr	r0, [pc, #12]	@ (800635c <vsniprintf+0x18>)
 8006350:	6800      	ldr	r0, [r0, #0]
 8006352:	f7ff ffc8 	bl	80062e6 <_vsniprintf_r>
 8006356:	b003      	add	sp, #12
 8006358:	f85d fb04 	ldr.w	pc, [sp], #4
 800635c:	20000018 	.word	0x20000018

08006360 <__swbuf_r>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	460e      	mov	r6, r1
 8006364:	4614      	mov	r4, r2
 8006366:	4605      	mov	r5, r0
 8006368:	b118      	cbz	r0, 8006372 <__swbuf_r+0x12>
 800636a:	6a03      	ldr	r3, [r0, #32]
 800636c:	b90b      	cbnz	r3, 8006372 <__swbuf_r+0x12>
 800636e:	f7ff ff0b 	bl	8006188 <__sinit>
 8006372:	69a3      	ldr	r3, [r4, #24]
 8006374:	60a3      	str	r3, [r4, #8]
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	071a      	lsls	r2, r3, #28
 800637a:	d501      	bpl.n	8006380 <__swbuf_r+0x20>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	b943      	cbnz	r3, 8006392 <__swbuf_r+0x32>
 8006380:	4621      	mov	r1, r4
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f82a 	bl	80063dc <__swsetup_r>
 8006388:	b118      	cbz	r0, 8006392 <__swbuf_r+0x32>
 800638a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800638e:	4638      	mov	r0, r7
 8006390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	6922      	ldr	r2, [r4, #16]
 8006396:	1a98      	subs	r0, r3, r2
 8006398:	6963      	ldr	r3, [r4, #20]
 800639a:	b2f6      	uxtb	r6, r6
 800639c:	4283      	cmp	r3, r0
 800639e:	4637      	mov	r7, r6
 80063a0:	dc05      	bgt.n	80063ae <__swbuf_r+0x4e>
 80063a2:	4621      	mov	r1, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	f001 fedf 	bl	8008168 <_fflush_r>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1ed      	bne.n	800638a <__swbuf_r+0x2a>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	701e      	strb	r6, [r3, #0]
 80063bc:	6962      	ldr	r2, [r4, #20]
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d004      	beq.n	80063ce <__swbuf_r+0x6e>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d5e1      	bpl.n	800638e <__swbuf_r+0x2e>
 80063ca:	2e0a      	cmp	r6, #10
 80063cc:	d1df      	bne.n	800638e <__swbuf_r+0x2e>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f001 fec9 	bl	8008168 <_fflush_r>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0d9      	beq.n	800638e <__swbuf_r+0x2e>
 80063da:	e7d6      	b.n	800638a <__swbuf_r+0x2a>

080063dc <__swsetup_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4b29      	ldr	r3, [pc, #164]	@ (8006484 <__swsetup_r+0xa8>)
 80063e0:	4605      	mov	r5, r0
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	460c      	mov	r4, r1
 80063e6:	b118      	cbz	r0, 80063f0 <__swsetup_r+0x14>
 80063e8:	6a03      	ldr	r3, [r0, #32]
 80063ea:	b90b      	cbnz	r3, 80063f0 <__swsetup_r+0x14>
 80063ec:	f7ff fecc 	bl	8006188 <__sinit>
 80063f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f4:	0719      	lsls	r1, r3, #28
 80063f6:	d422      	bmi.n	800643e <__swsetup_r+0x62>
 80063f8:	06da      	lsls	r2, r3, #27
 80063fa:	d407      	bmi.n	800640c <__swsetup_r+0x30>
 80063fc:	2209      	movs	r2, #9
 80063fe:	602a      	str	r2, [r5, #0]
 8006400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800640a:	e033      	b.n	8006474 <__swsetup_r+0x98>
 800640c:	0758      	lsls	r0, r3, #29
 800640e:	d512      	bpl.n	8006436 <__swsetup_r+0x5a>
 8006410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006412:	b141      	cbz	r1, 8006426 <__swsetup_r+0x4a>
 8006414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006418:	4299      	cmp	r1, r3
 800641a:	d002      	beq.n	8006422 <__swsetup_r+0x46>
 800641c:	4628      	mov	r0, r5
 800641e:	f000 ff0b 	bl	8007238 <_free_r>
 8006422:	2300      	movs	r3, #0
 8006424:	6363      	str	r3, [r4, #52]	@ 0x34
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	2300      	movs	r3, #0
 8006430:	6063      	str	r3, [r4, #4]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	f043 0308 	orr.w	r3, r3, #8
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	b94b      	cbnz	r3, 8006456 <__swsetup_r+0x7a>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800644c:	d003      	beq.n	8006456 <__swsetup_r+0x7a>
 800644e:	4621      	mov	r1, r4
 8006450:	4628      	mov	r0, r5
 8006452:	f001 fed7 	bl	8008204 <__smakebuf_r>
 8006456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800645a:	f013 0201 	ands.w	r2, r3, #1
 800645e:	d00a      	beq.n	8006476 <__swsetup_r+0x9a>
 8006460:	2200      	movs	r2, #0
 8006462:	60a2      	str	r2, [r4, #8]
 8006464:	6962      	ldr	r2, [r4, #20]
 8006466:	4252      	negs	r2, r2
 8006468:	61a2      	str	r2, [r4, #24]
 800646a:	6922      	ldr	r2, [r4, #16]
 800646c:	b942      	cbnz	r2, 8006480 <__swsetup_r+0xa4>
 800646e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006472:	d1c5      	bne.n	8006400 <__swsetup_r+0x24>
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	0799      	lsls	r1, r3, #30
 8006478:	bf58      	it	pl
 800647a:	6962      	ldrpl	r2, [r4, #20]
 800647c:	60a2      	str	r2, [r4, #8]
 800647e:	e7f4      	b.n	800646a <__swsetup_r+0x8e>
 8006480:	2000      	movs	r0, #0
 8006482:	e7f7      	b.n	8006474 <__swsetup_r+0x98>
 8006484:	20000018 	.word	0x20000018

08006488 <memset>:
 8006488:	4402      	add	r2, r0
 800648a:	4603      	mov	r3, r0
 800648c:	4293      	cmp	r3, r2
 800648e:	d100      	bne.n	8006492 <memset+0xa>
 8006490:	4770      	bx	lr
 8006492:	f803 1b01 	strb.w	r1, [r3], #1
 8006496:	e7f9      	b.n	800648c <memset+0x4>

08006498 <_localeconv_r>:
 8006498:	4800      	ldr	r0, [pc, #0]	@ (800649c <_localeconv_r+0x4>)
 800649a:	4770      	bx	lr
 800649c:	20000158 	.word	0x20000158

080064a0 <_close_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	@ (80064bc <_close_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fe fd50 	bl	8004f50 <_close>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_close_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_close_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200004bc 	.word	0x200004bc

080064c0 <_lseek_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d07      	ldr	r5, [pc, #28]	@ (80064e0 <_lseek_r+0x20>)
 80064c4:	4604      	mov	r4, r0
 80064c6:	4608      	mov	r0, r1
 80064c8:	4611      	mov	r1, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fe fcff 	bl	8004ed2 <_lseek>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_lseek_r+0x1e>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_lseek_r+0x1e>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	200004bc 	.word	0x200004bc

080064e4 <_read_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	@ (8006504 <_read_r+0x20>)
 80064e8:	4604      	mov	r4, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	4611      	mov	r1, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fe fc97 	bl	8004e26 <_read>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_read_r+0x1e>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_read_r+0x1e>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	200004bc 	.word	0x200004bc

08006508 <_write_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d07      	ldr	r5, [pc, #28]	@ (8006528 <_write_r+0x20>)
 800650c:	4604      	mov	r4, r0
 800650e:	4608      	mov	r0, r1
 8006510:	4611      	mov	r1, r2
 8006512:	2200      	movs	r2, #0
 8006514:	602a      	str	r2, [r5, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f7fe fced 	bl	8004ef6 <_write>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_write_r+0x1e>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_write_r+0x1e>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	200004bc 	.word	0x200004bc

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	@ (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000018 	.word	0x20000018

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4d0d      	ldr	r5, [pc, #52]	@ (8006570 <__libc_init_array+0x38>)
 800653c:	4c0d      	ldr	r4, [pc, #52]	@ (8006574 <__libc_init_array+0x3c>)
 800653e:	1b64      	subs	r4, r4, r5
 8006540:	10a4      	asrs	r4, r4, #2
 8006542:	2600      	movs	r6, #0
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	4d0b      	ldr	r5, [pc, #44]	@ (8006578 <__libc_init_array+0x40>)
 800654a:	4c0c      	ldr	r4, [pc, #48]	@ (800657c <__libc_init_array+0x44>)
 800654c:	f001 ffe0 	bl	8008510 <_init>
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	2600      	movs	r6, #0
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	0800898c 	.word	0x0800898c
 8006574:	0800898c 	.word	0x0800898c
 8006578:	0800898c 	.word	0x0800898c
 800657c:	08008990 	.word	0x08008990

08006580 <__retarget_lock_init_recursive>:
 8006580:	4770      	bx	lr

08006582 <__retarget_lock_acquire_recursive>:
 8006582:	4770      	bx	lr

08006584 <__retarget_lock_release_recursive>:
 8006584:	4770      	bx	lr

08006586 <quorem>:
 8006586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	6903      	ldr	r3, [r0, #16]
 800658c:	690c      	ldr	r4, [r1, #16]
 800658e:	42a3      	cmp	r3, r4
 8006590:	4607      	mov	r7, r0
 8006592:	db7e      	blt.n	8006692 <quorem+0x10c>
 8006594:	3c01      	subs	r4, #1
 8006596:	f101 0814 	add.w	r8, r1, #20
 800659a:	00a3      	lsls	r3, r4, #2
 800659c:	f100 0514 	add.w	r5, r0, #20
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065b0:	3301      	adds	r3, #1
 80065b2:	429a      	cmp	r2, r3
 80065b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80065bc:	d32e      	bcc.n	800661c <quorem+0x96>
 80065be:	f04f 0a00 	mov.w	sl, #0
 80065c2:	46c4      	mov	ip, r8
 80065c4:	46ae      	mov	lr, r5
 80065c6:	46d3      	mov	fp, sl
 80065c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065cc:	b298      	uxth	r0, r3
 80065ce:	fb06 a000 	mla	r0, r6, r0, sl
 80065d2:	0c02      	lsrs	r2, r0, #16
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	fb06 2303 	mla	r3, r6, r3, r2
 80065da:	f8de 2000 	ldr.w	r2, [lr]
 80065de:	b280      	uxth	r0, r0
 80065e0:	b292      	uxth	r2, r2
 80065e2:	1a12      	subs	r2, r2, r0
 80065e4:	445a      	add	r2, fp
 80065e6:	f8de 0000 	ldr.w	r0, [lr]
 80065ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80065f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065f8:	b292      	uxth	r2, r2
 80065fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065fe:	45e1      	cmp	r9, ip
 8006600:	f84e 2b04 	str.w	r2, [lr], #4
 8006604:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006608:	d2de      	bcs.n	80065c8 <quorem+0x42>
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	58eb      	ldr	r3, [r5, r3]
 800660e:	b92b      	cbnz	r3, 800661c <quorem+0x96>
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	3b04      	subs	r3, #4
 8006614:	429d      	cmp	r5, r3
 8006616:	461a      	mov	r2, r3
 8006618:	d32f      	bcc.n	800667a <quorem+0xf4>
 800661a:	613c      	str	r4, [r7, #16]
 800661c:	4638      	mov	r0, r7
 800661e:	f001 f97d 	bl	800791c <__mcmp>
 8006622:	2800      	cmp	r0, #0
 8006624:	db25      	blt.n	8006672 <quorem+0xec>
 8006626:	4629      	mov	r1, r5
 8006628:	2000      	movs	r0, #0
 800662a:	f858 2b04 	ldr.w	r2, [r8], #4
 800662e:	f8d1 c000 	ldr.w	ip, [r1]
 8006632:	fa1f fe82 	uxth.w	lr, r2
 8006636:	fa1f f38c 	uxth.w	r3, ip
 800663a:	eba3 030e 	sub.w	r3, r3, lr
 800663e:	4403      	add	r3, r0
 8006640:	0c12      	lsrs	r2, r2, #16
 8006642:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006646:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800664a:	b29b      	uxth	r3, r3
 800664c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006650:	45c1      	cmp	r9, r8
 8006652:	f841 3b04 	str.w	r3, [r1], #4
 8006656:	ea4f 4022 	mov.w	r0, r2, asr #16
 800665a:	d2e6      	bcs.n	800662a <quorem+0xa4>
 800665c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006664:	b922      	cbnz	r2, 8006670 <quorem+0xea>
 8006666:	3b04      	subs	r3, #4
 8006668:	429d      	cmp	r5, r3
 800666a:	461a      	mov	r2, r3
 800666c:	d30b      	bcc.n	8006686 <quorem+0x100>
 800666e:	613c      	str	r4, [r7, #16]
 8006670:	3601      	adds	r6, #1
 8006672:	4630      	mov	r0, r6
 8006674:	b003      	add	sp, #12
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	3b04      	subs	r3, #4
 800667e:	2a00      	cmp	r2, #0
 8006680:	d1cb      	bne.n	800661a <quorem+0x94>
 8006682:	3c01      	subs	r4, #1
 8006684:	e7c6      	b.n	8006614 <quorem+0x8e>
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	3b04      	subs	r3, #4
 800668a:	2a00      	cmp	r2, #0
 800668c:	d1ef      	bne.n	800666e <quorem+0xe8>
 800668e:	3c01      	subs	r4, #1
 8006690:	e7ea      	b.n	8006668 <quorem+0xe2>
 8006692:	2000      	movs	r0, #0
 8006694:	e7ee      	b.n	8006674 <quorem+0xee>
	...

08006698 <_dtoa_r>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	69c7      	ldr	r7, [r0, #28]
 800669e:	b097      	sub	sp, #92	@ 0x5c
 80066a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80066a4:	ec55 4b10 	vmov	r4, r5, d0
 80066a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80066aa:	9107      	str	r1, [sp, #28]
 80066ac:	4681      	mov	r9, r0
 80066ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80066b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80066b2:	b97f      	cbnz	r7, 80066d4 <_dtoa_r+0x3c>
 80066b4:	2010      	movs	r0, #16
 80066b6:	f000 fe09 	bl	80072cc <malloc>
 80066ba:	4602      	mov	r2, r0
 80066bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80066c0:	b920      	cbnz	r0, 80066cc <_dtoa_r+0x34>
 80066c2:	4ba9      	ldr	r3, [pc, #676]	@ (8006968 <_dtoa_r+0x2d0>)
 80066c4:	21ef      	movs	r1, #239	@ 0xef
 80066c6:	48a9      	ldr	r0, [pc, #676]	@ (800696c <_dtoa_r+0x2d4>)
 80066c8:	f001 fe32 	bl	8008330 <__assert_func>
 80066cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066d0:	6007      	str	r7, [r0, #0]
 80066d2:	60c7      	str	r7, [r0, #12]
 80066d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	b159      	cbz	r1, 80066f4 <_dtoa_r+0x5c>
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	604a      	str	r2, [r1, #4]
 80066e0:	2301      	movs	r3, #1
 80066e2:	4093      	lsls	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
 80066e6:	4648      	mov	r0, r9
 80066e8:	f000 fee6 	bl	80074b8 <_Bfree>
 80066ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	1e2b      	subs	r3, r5, #0
 80066f6:	bfb9      	ittee	lt
 80066f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066fc:	9305      	strlt	r3, [sp, #20]
 80066fe:	2300      	movge	r3, #0
 8006700:	6033      	strge	r3, [r6, #0]
 8006702:	9f05      	ldr	r7, [sp, #20]
 8006704:	4b9a      	ldr	r3, [pc, #616]	@ (8006970 <_dtoa_r+0x2d8>)
 8006706:	bfbc      	itt	lt
 8006708:	2201      	movlt	r2, #1
 800670a:	6032      	strlt	r2, [r6, #0]
 800670c:	43bb      	bics	r3, r7
 800670e:	d112      	bne.n	8006736 <_dtoa_r+0x9e>
 8006710:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006712:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800671c:	4323      	orrs	r3, r4
 800671e:	f000 855a 	beq.w	80071d6 <_dtoa_r+0xb3e>
 8006722:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006724:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006984 <_dtoa_r+0x2ec>
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 855c 	beq.w	80071e6 <_dtoa_r+0xb4e>
 800672e:	f10a 0303 	add.w	r3, sl, #3
 8006732:	f000 bd56 	b.w	80071e2 <_dtoa_r+0xb4a>
 8006736:	ed9d 7b04 	vldr	d7, [sp, #16]
 800673a:	2200      	movs	r2, #0
 800673c:	ec51 0b17 	vmov	r0, r1, d7
 8006740:	2300      	movs	r3, #0
 8006742:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006746:	f7fa f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800674a:	4680      	mov	r8, r0
 800674c:	b158      	cbz	r0, 8006766 <_dtoa_r+0xce>
 800674e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006750:	2301      	movs	r3, #1
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006756:	b113      	cbz	r3, 800675e <_dtoa_r+0xc6>
 8006758:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800675a:	4b86      	ldr	r3, [pc, #536]	@ (8006974 <_dtoa_r+0x2dc>)
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006988 <_dtoa_r+0x2f0>
 8006762:	f000 bd40 	b.w	80071e6 <_dtoa_r+0xb4e>
 8006766:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800676a:	aa14      	add	r2, sp, #80	@ 0x50
 800676c:	a915      	add	r1, sp, #84	@ 0x54
 800676e:	4648      	mov	r0, r9
 8006770:	f001 f984 	bl	8007a7c <__d2b>
 8006774:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	2e00      	cmp	r6, #0
 800677c:	d078      	beq.n	8006870 <_dtoa_r+0x1d8>
 800677e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006780:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800678c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006790:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006794:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006798:	4619      	mov	r1, r3
 800679a:	2200      	movs	r2, #0
 800679c:	4b76      	ldr	r3, [pc, #472]	@ (8006978 <_dtoa_r+0x2e0>)
 800679e:	f7f9 fd7b 	bl	8000298 <__aeabi_dsub>
 80067a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006950 <_dtoa_r+0x2b8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 ff2e 	bl	8000608 <__aeabi_dmul>
 80067ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8006958 <_dtoa_r+0x2c0>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 fd73 	bl	800029c <__adddf3>
 80067b6:	4604      	mov	r4, r0
 80067b8:	4630      	mov	r0, r6
 80067ba:	460d      	mov	r5, r1
 80067bc:	f7f9 feba 	bl	8000534 <__aeabi_i2d>
 80067c0:	a367      	add	r3, pc, #412	@ (adr r3, 8006960 <_dtoa_r+0x2c8>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 ff1f 	bl	8000608 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 fd63 	bl	800029c <__adddf3>
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	f7fa f9c5 	bl	8000b68 <__aeabi_d2iz>
 80067de:	2200      	movs	r2, #0
 80067e0:	4607      	mov	r7, r0
 80067e2:	2300      	movs	r3, #0
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7fa f980 	bl	8000aec <__aeabi_dcmplt>
 80067ec:	b140      	cbz	r0, 8006800 <_dtoa_r+0x168>
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7f9 fea0 	bl	8000534 <__aeabi_i2d>
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	f7fa f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80067fc:	b900      	cbnz	r0, 8006800 <_dtoa_r+0x168>
 80067fe:	3f01      	subs	r7, #1
 8006800:	2f16      	cmp	r7, #22
 8006802:	d852      	bhi.n	80068aa <_dtoa_r+0x212>
 8006804:	4b5d      	ldr	r3, [pc, #372]	@ (800697c <_dtoa_r+0x2e4>)
 8006806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006812:	f7fa f96b 	bl	8000aec <__aeabi_dcmplt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d049      	beq.n	80068ae <_dtoa_r+0x216>
 800681a:	3f01      	subs	r7, #1
 800681c:	2300      	movs	r3, #0
 800681e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006820:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006822:	1b9b      	subs	r3, r3, r6
 8006824:	1e5a      	subs	r2, r3, #1
 8006826:	bf45      	ittet	mi
 8006828:	f1c3 0301 	rsbmi	r3, r3, #1
 800682c:	9300      	strmi	r3, [sp, #0]
 800682e:	2300      	movpl	r3, #0
 8006830:	2300      	movmi	r3, #0
 8006832:	9206      	str	r2, [sp, #24]
 8006834:	bf54      	ite	pl
 8006836:	9300      	strpl	r3, [sp, #0]
 8006838:	9306      	strmi	r3, [sp, #24]
 800683a:	2f00      	cmp	r7, #0
 800683c:	db39      	blt.n	80068b2 <_dtoa_r+0x21a>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	970d      	str	r7, [sp, #52]	@ 0x34
 8006842:	443b      	add	r3, r7
 8006844:	9306      	str	r3, [sp, #24]
 8006846:	2300      	movs	r3, #0
 8006848:	9308      	str	r3, [sp, #32]
 800684a:	9b07      	ldr	r3, [sp, #28]
 800684c:	2b09      	cmp	r3, #9
 800684e:	d863      	bhi.n	8006918 <_dtoa_r+0x280>
 8006850:	2b05      	cmp	r3, #5
 8006852:	bfc4      	itt	gt
 8006854:	3b04      	subgt	r3, #4
 8006856:	9307      	strgt	r3, [sp, #28]
 8006858:	9b07      	ldr	r3, [sp, #28]
 800685a:	f1a3 0302 	sub.w	r3, r3, #2
 800685e:	bfcc      	ite	gt
 8006860:	2400      	movgt	r4, #0
 8006862:	2401      	movle	r4, #1
 8006864:	2b03      	cmp	r3, #3
 8006866:	d863      	bhi.n	8006930 <_dtoa_r+0x298>
 8006868:	e8df f003 	tbb	[pc, r3]
 800686c:	2b375452 	.word	0x2b375452
 8006870:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006874:	441e      	add	r6, r3
 8006876:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800687a:	2b20      	cmp	r3, #32
 800687c:	bfc1      	itttt	gt
 800687e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006882:	409f      	lslgt	r7, r3
 8006884:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006888:	fa24 f303 	lsrgt.w	r3, r4, r3
 800688c:	bfd6      	itet	le
 800688e:	f1c3 0320 	rsble	r3, r3, #32
 8006892:	ea47 0003 	orrgt.w	r0, r7, r3
 8006896:	fa04 f003 	lslle.w	r0, r4, r3
 800689a:	f7f9 fe3b 	bl	8000514 <__aeabi_ui2d>
 800689e:	2201      	movs	r2, #1
 80068a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068a4:	3e01      	subs	r6, #1
 80068a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80068a8:	e776      	b.n	8006798 <_dtoa_r+0x100>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e7b7      	b.n	800681e <_dtoa_r+0x186>
 80068ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80068b0:	e7b6      	b.n	8006820 <_dtoa_r+0x188>
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	1bdb      	subs	r3, r3, r7
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	427b      	negs	r3, r7
 80068ba:	9308      	str	r3, [sp, #32]
 80068bc:	2300      	movs	r3, #0
 80068be:	930d      	str	r3, [sp, #52]	@ 0x34
 80068c0:	e7c3      	b.n	800684a <_dtoa_r+0x1b2>
 80068c2:	2301      	movs	r3, #1
 80068c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068c8:	eb07 0b03 	add.w	fp, r7, r3
 80068cc:	f10b 0301 	add.w	r3, fp, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	9303      	str	r3, [sp, #12]
 80068d4:	bfb8      	it	lt
 80068d6:	2301      	movlt	r3, #1
 80068d8:	e006      	b.n	80068e8 <_dtoa_r+0x250>
 80068da:	2301      	movs	r3, #1
 80068dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dd28      	ble.n	8006936 <_dtoa_r+0x29e>
 80068e4:	469b      	mov	fp, r3
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80068ec:	2100      	movs	r1, #0
 80068ee:	2204      	movs	r2, #4
 80068f0:	f102 0514 	add.w	r5, r2, #20
 80068f4:	429d      	cmp	r5, r3
 80068f6:	d926      	bls.n	8006946 <_dtoa_r+0x2ae>
 80068f8:	6041      	str	r1, [r0, #4]
 80068fa:	4648      	mov	r0, r9
 80068fc:	f000 fd9c 	bl	8007438 <_Balloc>
 8006900:	4682      	mov	sl, r0
 8006902:	2800      	cmp	r0, #0
 8006904:	d142      	bne.n	800698c <_dtoa_r+0x2f4>
 8006906:	4b1e      	ldr	r3, [pc, #120]	@ (8006980 <_dtoa_r+0x2e8>)
 8006908:	4602      	mov	r2, r0
 800690a:	f240 11af 	movw	r1, #431	@ 0x1af
 800690e:	e6da      	b.n	80066c6 <_dtoa_r+0x2e>
 8006910:	2300      	movs	r3, #0
 8006912:	e7e3      	b.n	80068dc <_dtoa_r+0x244>
 8006914:	2300      	movs	r3, #0
 8006916:	e7d5      	b.n	80068c4 <_dtoa_r+0x22c>
 8006918:	2401      	movs	r4, #1
 800691a:	2300      	movs	r3, #0
 800691c:	9307      	str	r3, [sp, #28]
 800691e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006920:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006924:	2200      	movs	r2, #0
 8006926:	f8cd b00c 	str.w	fp, [sp, #12]
 800692a:	2312      	movs	r3, #18
 800692c:	920c      	str	r2, [sp, #48]	@ 0x30
 800692e:	e7db      	b.n	80068e8 <_dtoa_r+0x250>
 8006930:	2301      	movs	r3, #1
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	e7f4      	b.n	8006920 <_dtoa_r+0x288>
 8006936:	f04f 0b01 	mov.w	fp, #1
 800693a:	f8cd b00c 	str.w	fp, [sp, #12]
 800693e:	465b      	mov	r3, fp
 8006940:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006944:	e7d0      	b.n	80068e8 <_dtoa_r+0x250>
 8006946:	3101      	adds	r1, #1
 8006948:	0052      	lsls	r2, r2, #1
 800694a:	e7d1      	b.n	80068f0 <_dtoa_r+0x258>
 800694c:	f3af 8000 	nop.w
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	08008651 	.word	0x08008651
 800696c:	08008668 	.word	0x08008668
 8006970:	7ff00000 	.word	0x7ff00000
 8006974:	08008621 	.word	0x08008621
 8006978:	3ff80000 	.word	0x3ff80000
 800697c:	080087b8 	.word	0x080087b8
 8006980:	080086c0 	.word	0x080086c0
 8006984:	0800864d 	.word	0x0800864d
 8006988:	08008620 	.word	0x08008620
 800698c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006990:	6018      	str	r0, [r3, #0]
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	2b0e      	cmp	r3, #14
 8006996:	f200 80a1 	bhi.w	8006adc <_dtoa_r+0x444>
 800699a:	2c00      	cmp	r4, #0
 800699c:	f000 809e 	beq.w	8006adc <_dtoa_r+0x444>
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	dd33      	ble.n	8006a0c <_dtoa_r+0x374>
 80069a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c18 <_dtoa_r+0x580>)
 80069a6:	f007 020f 	and.w	r2, r7, #15
 80069aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ae:	ed93 7b00 	vldr	d7, [r3]
 80069b2:	05f8      	lsls	r0, r7, #23
 80069b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80069b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069bc:	d516      	bpl.n	80069ec <_dtoa_r+0x354>
 80069be:	4b97      	ldr	r3, [pc, #604]	@ (8006c1c <_dtoa_r+0x584>)
 80069c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069c8:	f7f9 ff48 	bl	800085c <__aeabi_ddiv>
 80069cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d0:	f004 040f 	and.w	r4, r4, #15
 80069d4:	2603      	movs	r6, #3
 80069d6:	4d91      	ldr	r5, [pc, #580]	@ (8006c1c <_dtoa_r+0x584>)
 80069d8:	b954      	cbnz	r4, 80069f0 <_dtoa_r+0x358>
 80069da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e2:	f7f9 ff3b 	bl	800085c <__aeabi_ddiv>
 80069e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ea:	e028      	b.n	8006a3e <_dtoa_r+0x3a6>
 80069ec:	2602      	movs	r6, #2
 80069ee:	e7f2      	b.n	80069d6 <_dtoa_r+0x33e>
 80069f0:	07e1      	lsls	r1, r4, #31
 80069f2:	d508      	bpl.n	8006a06 <_dtoa_r+0x36e>
 80069f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80069f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069fc:	f7f9 fe04 	bl	8000608 <__aeabi_dmul>
 8006a00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a04:	3601      	adds	r6, #1
 8006a06:	1064      	asrs	r4, r4, #1
 8006a08:	3508      	adds	r5, #8
 8006a0a:	e7e5      	b.n	80069d8 <_dtoa_r+0x340>
 8006a0c:	f000 80af 	beq.w	8006b6e <_dtoa_r+0x4d6>
 8006a10:	427c      	negs	r4, r7
 8006a12:	4b81      	ldr	r3, [pc, #516]	@ (8006c18 <_dtoa_r+0x580>)
 8006a14:	4d81      	ldr	r5, [pc, #516]	@ (8006c1c <_dtoa_r+0x584>)
 8006a16:	f004 020f 	and.w	r2, r4, #15
 8006a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a26:	f7f9 fdef 	bl	8000608 <__aeabi_dmul>
 8006a2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a2e:	1124      	asrs	r4, r4, #4
 8006a30:	2300      	movs	r3, #0
 8006a32:	2602      	movs	r6, #2
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	f040 808f 	bne.w	8006b58 <_dtoa_r+0x4c0>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d3      	bne.n	80069e6 <_dtoa_r+0x34e>
 8006a3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8094 	beq.w	8006b72 <_dtoa_r+0x4da>
 8006a4a:	4b75      	ldr	r3, [pc, #468]	@ (8006c20 <_dtoa_r+0x588>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7fa f84b 	bl	8000aec <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f000 808b 	beq.w	8006b72 <_dtoa_r+0x4da>
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8087 	beq.w	8006b72 <_dtoa_r+0x4da>
 8006a64:	f1bb 0f00 	cmp.w	fp, #0
 8006a68:	dd34      	ble.n	8006ad4 <_dtoa_r+0x43c>
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c24 <_dtoa_r+0x58c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fdc9 	bl	8000608 <__aeabi_dmul>
 8006a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a7a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006a7e:	3601      	adds	r6, #1
 8006a80:	465c      	mov	r4, fp
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7f9 fd56 	bl	8000534 <__aeabi_i2d>
 8006a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8c:	f7f9 fdbc 	bl	8000608 <__aeabi_dmul>
 8006a90:	4b65      	ldr	r3, [pc, #404]	@ (8006c28 <_dtoa_r+0x590>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	f7f9 fc02 	bl	800029c <__adddf3>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	d16a      	bne.n	8006b78 <_dtoa_r+0x4e0>
 8006aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa6:	4b61      	ldr	r3, [pc, #388]	@ (8006c2c <_dtoa_r+0x594>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f7f9 fbf5 	bl	8000298 <__aeabi_dsub>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4633      	mov	r3, r6
 8006aba:	f7fa f835 	bl	8000b28 <__aeabi_dcmpgt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 8298 	bne.w	8006ff4 <_dtoa_r+0x95c>
 8006ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ace:	f7fa f80d 	bl	8000aec <__aeabi_dcmplt>
 8006ad2:	bb38      	cbnz	r0, 8006b24 <_dtoa_r+0x48c>
 8006ad4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006ad8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006adc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f2c0 8157 	blt.w	8006d92 <_dtoa_r+0x6fa>
 8006ae4:	2f0e      	cmp	r7, #14
 8006ae6:	f300 8154 	bgt.w	8006d92 <_dtoa_r+0x6fa>
 8006aea:	4b4b      	ldr	r3, [pc, #300]	@ (8006c18 <_dtoa_r+0x580>)
 8006aec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006af0:	ed93 7b00 	vldr	d7, [r3]
 8006af4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	ed8d 7b00 	vstr	d7, [sp]
 8006afc:	f280 80e5 	bge.w	8006cca <_dtoa_r+0x632>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f300 80e1 	bgt.w	8006cca <_dtoa_r+0x632>
 8006b08:	d10c      	bne.n	8006b24 <_dtoa_r+0x48c>
 8006b0a:	4b48      	ldr	r3, [pc, #288]	@ (8006c2c <_dtoa_r+0x594>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	ec51 0b17 	vmov	r0, r1, d7
 8006b12:	f7f9 fd79 	bl	8000608 <__aeabi_dmul>
 8006b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b1a:	f7f9 fffb 	bl	8000b14 <__aeabi_dcmpge>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 8266 	beq.w	8006ff0 <_dtoa_r+0x958>
 8006b24:	2400      	movs	r4, #0
 8006b26:	4625      	mov	r5, r4
 8006b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b2a:	4656      	mov	r6, sl
 8006b2c:	ea6f 0803 	mvn.w	r8, r3
 8006b30:	2700      	movs	r7, #0
 8006b32:	4621      	mov	r1, r4
 8006b34:	4648      	mov	r0, r9
 8006b36:	f000 fcbf 	bl	80074b8 <_Bfree>
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	f000 80bd 	beq.w	8006cba <_dtoa_r+0x622>
 8006b40:	b12f      	cbz	r7, 8006b4e <_dtoa_r+0x4b6>
 8006b42:	42af      	cmp	r7, r5
 8006b44:	d003      	beq.n	8006b4e <_dtoa_r+0x4b6>
 8006b46:	4639      	mov	r1, r7
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fcb5 	bl	80074b8 <_Bfree>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4648      	mov	r0, r9
 8006b52:	f000 fcb1 	bl	80074b8 <_Bfree>
 8006b56:	e0b0      	b.n	8006cba <_dtoa_r+0x622>
 8006b58:	07e2      	lsls	r2, r4, #31
 8006b5a:	d505      	bpl.n	8006b68 <_dtoa_r+0x4d0>
 8006b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b60:	f7f9 fd52 	bl	8000608 <__aeabi_dmul>
 8006b64:	3601      	adds	r6, #1
 8006b66:	2301      	movs	r3, #1
 8006b68:	1064      	asrs	r4, r4, #1
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	e762      	b.n	8006a34 <_dtoa_r+0x39c>
 8006b6e:	2602      	movs	r6, #2
 8006b70:	e765      	b.n	8006a3e <_dtoa_r+0x3a6>
 8006b72:	9c03      	ldr	r4, [sp, #12]
 8006b74:	46b8      	mov	r8, r7
 8006b76:	e784      	b.n	8006a82 <_dtoa_r+0x3ea>
 8006b78:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <_dtoa_r+0x580>)
 8006b7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b84:	4454      	add	r4, sl
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d054      	beq.n	8006c34 <_dtoa_r+0x59c>
 8006b8a:	4929      	ldr	r1, [pc, #164]	@ (8006c30 <_dtoa_r+0x598>)
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f7f9 fe65 	bl	800085c <__aeabi_ddiv>
 8006b92:	4633      	mov	r3, r6
 8006b94:	462a      	mov	r2, r5
 8006b96:	f7f9 fb7f 	bl	8000298 <__aeabi_dsub>
 8006b9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b9e:	4656      	mov	r6, sl
 8006ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba4:	f7f9 ffe0 	bl	8000b68 <__aeabi_d2iz>
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f7f9 fcc3 	bl	8000534 <__aeabi_i2d>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb6:	f7f9 fb6f 	bl	8000298 <__aeabi_dsub>
 8006bba:	3530      	adds	r5, #48	@ 0x30
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bc4:	f806 5b01 	strb.w	r5, [r6], #1
 8006bc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bcc:	f7f9 ff8e 	bl	8000aec <__aeabi_dcmplt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d172      	bne.n	8006cba <_dtoa_r+0x622>
 8006bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd8:	4911      	ldr	r1, [pc, #68]	@ (8006c20 <_dtoa_r+0x588>)
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f7f9 fb5c 	bl	8000298 <__aeabi_dsub>
 8006be0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006be4:	f7f9 ff82 	bl	8000aec <__aeabi_dcmplt>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f040 80b4 	bne.w	8006d56 <_dtoa_r+0x6be>
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	f43f af70 	beq.w	8006ad4 <_dtoa_r+0x43c>
 8006bf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <_dtoa_r+0x58c>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 fd04 	bl	8000608 <__aeabi_dmul>
 8006c00:	4b08      	ldr	r3, [pc, #32]	@ (8006c24 <_dtoa_r+0x58c>)
 8006c02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c06:	2200      	movs	r2, #0
 8006c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0c:	f7f9 fcfc 	bl	8000608 <__aeabi_dmul>
 8006c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c14:	e7c4      	b.n	8006ba0 <_dtoa_r+0x508>
 8006c16:	bf00      	nop
 8006c18:	080087b8 	.word	0x080087b8
 8006c1c:	08008790 	.word	0x08008790
 8006c20:	3ff00000 	.word	0x3ff00000
 8006c24:	40240000 	.word	0x40240000
 8006c28:	401c0000 	.word	0x401c0000
 8006c2c:	40140000 	.word	0x40140000
 8006c30:	3fe00000 	.word	0x3fe00000
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	f7f9 fce6 	bl	8000608 <__aeabi_dmul>
 8006c3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c42:	4656      	mov	r6, sl
 8006c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c48:	f7f9 ff8e 	bl	8000b68 <__aeabi_d2iz>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	f7f9 fc71 	bl	8000534 <__aeabi_i2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c5a:	f7f9 fb1d 	bl	8000298 <__aeabi_dsub>
 8006c5e:	3530      	adds	r5, #48	@ 0x30
 8006c60:	f806 5b01 	strb.w	r5, [r6], #1
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	d124      	bne.n	8006cbe <_dtoa_r+0x626>
 8006c74:	4baf      	ldr	r3, [pc, #700]	@ (8006f34 <_dtoa_r+0x89c>)
 8006c76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c7a:	f7f9 fb0f 	bl	800029c <__adddf3>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c86:	f7f9 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d163      	bne.n	8006d56 <_dtoa_r+0x6be>
 8006c8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c92:	49a8      	ldr	r1, [pc, #672]	@ (8006f34 <_dtoa_r+0x89c>)
 8006c94:	2000      	movs	r0, #0
 8006c96:	f7f9 faff 	bl	8000298 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca2:	f7f9 ff23 	bl	8000aec <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f43f af14 	beq.w	8006ad4 <_dtoa_r+0x43c>
 8006cac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cae:	1e73      	subs	r3, r6, #1
 8006cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cb6:	2b30      	cmp	r3, #48	@ 0x30
 8006cb8:	d0f8      	beq.n	8006cac <_dtoa_r+0x614>
 8006cba:	4647      	mov	r7, r8
 8006cbc:	e03b      	b.n	8006d36 <_dtoa_r+0x69e>
 8006cbe:	4b9e      	ldr	r3, [pc, #632]	@ (8006f38 <_dtoa_r+0x8a0>)
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc8:	e7bc      	b.n	8006c44 <_dtoa_r+0x5ac>
 8006cca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006cce:	4656      	mov	r6, sl
 8006cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fdc0 	bl	800085c <__aeabi_ddiv>
 8006cdc:	f7f9 ff44 	bl	8000b68 <__aeabi_d2iz>
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	f7f9 fc27 	bl	8000534 <__aeabi_i2d>
 8006ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cea:	f7f9 fc8d 	bl	8000608 <__aeabi_dmul>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006cfa:	f7f9 facd 	bl	8000298 <__aeabi_dsub>
 8006cfe:	f806 4b01 	strb.w	r4, [r6], #1
 8006d02:	9d03      	ldr	r5, [sp, #12]
 8006d04:	eba6 040a 	sub.w	r4, r6, sl
 8006d08:	42a5      	cmp	r5, r4
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	d133      	bne.n	8006d78 <_dtoa_r+0x6e0>
 8006d10:	f7f9 fac4 	bl	800029c <__adddf3>
 8006d14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	f7f9 ff04 	bl	8000b28 <__aeabi_dcmpgt>
 8006d20:	b9c0      	cbnz	r0, 8006d54 <_dtoa_r+0x6bc>
 8006d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d26:	4620      	mov	r0, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7f9 fed5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d2e:	b110      	cbz	r0, 8006d36 <_dtoa_r+0x69e>
 8006d30:	f018 0f01 	tst.w	r8, #1
 8006d34:	d10e      	bne.n	8006d54 <_dtoa_r+0x6bc>
 8006d36:	9902      	ldr	r1, [sp, #8]
 8006d38:	4648      	mov	r0, r9
 8006d3a:	f000 fbbd 	bl	80074b8 <_Bfree>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	7033      	strb	r3, [r6, #0]
 8006d42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d44:	3701      	adds	r7, #1
 8006d46:	601f      	str	r7, [r3, #0]
 8006d48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 824b 	beq.w	80071e6 <_dtoa_r+0xb4e>
 8006d50:	601e      	str	r6, [r3, #0]
 8006d52:	e248      	b.n	80071e6 <_dtoa_r+0xb4e>
 8006d54:	46b8      	mov	r8, r7
 8006d56:	4633      	mov	r3, r6
 8006d58:	461e      	mov	r6, r3
 8006d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d5e:	2a39      	cmp	r2, #57	@ 0x39
 8006d60:	d106      	bne.n	8006d70 <_dtoa_r+0x6d8>
 8006d62:	459a      	cmp	sl, r3
 8006d64:	d1f8      	bne.n	8006d58 <_dtoa_r+0x6c0>
 8006d66:	2230      	movs	r2, #48	@ 0x30
 8006d68:	f108 0801 	add.w	r8, r8, #1
 8006d6c:	f88a 2000 	strb.w	r2, [sl]
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	3201      	adds	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e7a0      	b.n	8006cba <_dtoa_r+0x622>
 8006d78:	4b6f      	ldr	r3, [pc, #444]	@ (8006f38 <_dtoa_r+0x8a0>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f7f9 fc44 	bl	8000608 <__aeabi_dmul>
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	4604      	mov	r4, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	f7f9 fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d09f      	beq.n	8006cd0 <_dtoa_r+0x638>
 8006d90:	e7d1      	b.n	8006d36 <_dtoa_r+0x69e>
 8006d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	f000 80ea 	beq.w	8006f6e <_dtoa_r+0x8d6>
 8006d9a:	9a07      	ldr	r2, [sp, #28]
 8006d9c:	2a01      	cmp	r2, #1
 8006d9e:	f300 80cd 	bgt.w	8006f3c <_dtoa_r+0x8a4>
 8006da2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	f000 80c1 	beq.w	8006f2c <_dtoa_r+0x894>
 8006daa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dae:	9c08      	ldr	r4, [sp, #32]
 8006db0:	9e00      	ldr	r6, [sp, #0]
 8006db2:	9a00      	ldr	r2, [sp, #0]
 8006db4:	441a      	add	r2, r3
 8006db6:	9200      	str	r2, [sp, #0]
 8006db8:	9a06      	ldr	r2, [sp, #24]
 8006dba:	2101      	movs	r1, #1
 8006dbc:	441a      	add	r2, r3
 8006dbe:	4648      	mov	r0, r9
 8006dc0:	9206      	str	r2, [sp, #24]
 8006dc2:	f000 fc2d 	bl	8007620 <__i2b>
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	b166      	cbz	r6, 8006de4 <_dtoa_r+0x74c>
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dd09      	ble.n	8006de4 <_dtoa_r+0x74c>
 8006dd0:	42b3      	cmp	r3, r6
 8006dd2:	9a00      	ldr	r2, [sp, #0]
 8006dd4:	bfa8      	it	ge
 8006dd6:	4633      	movge	r3, r6
 8006dd8:	1ad2      	subs	r2, r2, r3
 8006dda:	9200      	str	r2, [sp, #0]
 8006ddc:	9a06      	ldr	r2, [sp, #24]
 8006dde:	1af6      	subs	r6, r6, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	9306      	str	r3, [sp, #24]
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	b30b      	cbz	r3, 8006e2c <_dtoa_r+0x794>
 8006de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80c6 	beq.w	8006f7c <_dtoa_r+0x8e4>
 8006df0:	2c00      	cmp	r4, #0
 8006df2:	f000 80c0 	beq.w	8006f76 <_dtoa_r+0x8de>
 8006df6:	4629      	mov	r1, r5
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	f000 fcc8 	bl	8007790 <__pow5mult>
 8006e00:	9a02      	ldr	r2, [sp, #8]
 8006e02:	4601      	mov	r1, r0
 8006e04:	4605      	mov	r5, r0
 8006e06:	4648      	mov	r0, r9
 8006e08:	f000 fc20 	bl	800764c <__multiply>
 8006e0c:	9902      	ldr	r1, [sp, #8]
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4648      	mov	r0, r9
 8006e12:	f000 fb51 	bl	80074b8 <_Bfree>
 8006e16:	9b08      	ldr	r3, [sp, #32]
 8006e18:	1b1b      	subs	r3, r3, r4
 8006e1a:	9308      	str	r3, [sp, #32]
 8006e1c:	f000 80b1 	beq.w	8006f82 <_dtoa_r+0x8ea>
 8006e20:	9a08      	ldr	r2, [sp, #32]
 8006e22:	4641      	mov	r1, r8
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fcb3 	bl	8007790 <__pow5mult>
 8006e2a:	9002      	str	r0, [sp, #8]
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f000 fbf6 	bl	8007620 <__i2b>
 8006e34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e36:	4604      	mov	r4, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 81d8 	beq.w	80071ee <_dtoa_r+0xb56>
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4601      	mov	r1, r0
 8006e42:	4648      	mov	r0, r9
 8006e44:	f000 fca4 	bl	8007790 <__pow5mult>
 8006e48:	9b07      	ldr	r3, [sp, #28]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	f300 809f 	bgt.w	8006f90 <_dtoa_r+0x8f8>
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 8097 	bne.w	8006f88 <_dtoa_r+0x8f0>
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 8093 	bne.w	8006f8c <_dtoa_r+0x8f4>
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e6c:	0d1b      	lsrs	r3, r3, #20
 8006e6e:	051b      	lsls	r3, r3, #20
 8006e70:	b133      	cbz	r3, 8006e80 <_dtoa_r+0x7e8>
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	9306      	str	r3, [sp, #24]
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9308      	str	r3, [sp, #32]
 8006e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 81b8 	beq.w	80071fa <_dtoa_r+0xb62>
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e90:	6918      	ldr	r0, [r3, #16]
 8006e92:	f000 fb79 	bl	8007588 <__hi0bits>
 8006e96:	f1c0 0020 	rsb	r0, r0, #32
 8006e9a:	9b06      	ldr	r3, [sp, #24]
 8006e9c:	4418      	add	r0, r3
 8006e9e:	f010 001f 	ands.w	r0, r0, #31
 8006ea2:	f000 8082 	beq.w	8006faa <_dtoa_r+0x912>
 8006ea6:	f1c0 0320 	rsb	r3, r0, #32
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	dd73      	ble.n	8006f96 <_dtoa_r+0x8fe>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	f1c0 001c 	rsb	r0, r0, #28
 8006eb4:	4403      	add	r3, r0
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	4403      	add	r3, r0
 8006ebc:	4406      	add	r6, r0
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	9b00      	ldr	r3, [sp, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dd05      	ble.n	8006ed2 <_dtoa_r+0x83a>
 8006ec6:	9902      	ldr	r1, [sp, #8]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4648      	mov	r0, r9
 8006ecc:	f000 fcba 	bl	8007844 <__lshift>
 8006ed0:	9002      	str	r0, [sp, #8]
 8006ed2:	9b06      	ldr	r3, [sp, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd05      	ble.n	8006ee4 <_dtoa_r+0x84c>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	461a      	mov	r2, r3
 8006edc:	4648      	mov	r0, r9
 8006ede:	f000 fcb1 	bl	8007844 <__lshift>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d061      	beq.n	8006fae <_dtoa_r+0x916>
 8006eea:	9802      	ldr	r0, [sp, #8]
 8006eec:	4621      	mov	r1, r4
 8006eee:	f000 fd15 	bl	800791c <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	da5b      	bge.n	8006fae <_dtoa_r+0x916>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9902      	ldr	r1, [sp, #8]
 8006efa:	220a      	movs	r2, #10
 8006efc:	4648      	mov	r0, r9
 8006efe:	f000 fafd 	bl	80074fc <__multadd>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8177 	beq.w	80071fe <_dtoa_r+0xb66>
 8006f10:	4629      	mov	r1, r5
 8006f12:	2300      	movs	r3, #0
 8006f14:	220a      	movs	r2, #10
 8006f16:	4648      	mov	r0, r9
 8006f18:	f000 faf0 	bl	80074fc <__multadd>
 8006f1c:	f1bb 0f00 	cmp.w	fp, #0
 8006f20:	4605      	mov	r5, r0
 8006f22:	dc6f      	bgt.n	8007004 <_dtoa_r+0x96c>
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	dc49      	bgt.n	8006fbe <_dtoa_r+0x926>
 8006f2a:	e06b      	b.n	8007004 <_dtoa_r+0x96c>
 8006f2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f32:	e73c      	b.n	8006dae <_dtoa_r+0x716>
 8006f34:	3fe00000 	.word	0x3fe00000
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1e5c      	subs	r4, r3, #1
 8006f40:	9b08      	ldr	r3, [sp, #32]
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	db09      	blt.n	8006f5a <_dtoa_r+0x8c2>
 8006f46:	1b1c      	subs	r4, r3, r4
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f6bf af30 	bge.w	8006db0 <_dtoa_r+0x718>
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	9a03      	ldr	r2, [sp, #12]
 8006f54:	1a9e      	subs	r6, r3, r2
 8006f56:	2300      	movs	r3, #0
 8006f58:	e72b      	b.n	8006db2 <_dtoa_r+0x71a>
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f5e:	9408      	str	r4, [sp, #32]
 8006f60:	1ae3      	subs	r3, r4, r3
 8006f62:	441a      	add	r2, r3
 8006f64:	9e00      	ldr	r6, [sp, #0]
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	920d      	str	r2, [sp, #52]	@ 0x34
 8006f6a:	2400      	movs	r4, #0
 8006f6c:	e721      	b.n	8006db2 <_dtoa_r+0x71a>
 8006f6e:	9c08      	ldr	r4, [sp, #32]
 8006f70:	9e00      	ldr	r6, [sp, #0]
 8006f72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006f74:	e728      	b.n	8006dc8 <_dtoa_r+0x730>
 8006f76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006f7a:	e751      	b.n	8006e20 <_dtoa_r+0x788>
 8006f7c:	9a08      	ldr	r2, [sp, #32]
 8006f7e:	9902      	ldr	r1, [sp, #8]
 8006f80:	e750      	b.n	8006e24 <_dtoa_r+0x78c>
 8006f82:	f8cd 8008 	str.w	r8, [sp, #8]
 8006f86:	e751      	b.n	8006e2c <_dtoa_r+0x794>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e779      	b.n	8006e80 <_dtoa_r+0x7e8>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	e777      	b.n	8006e80 <_dtoa_r+0x7e8>
 8006f90:	2300      	movs	r3, #0
 8006f92:	9308      	str	r3, [sp, #32]
 8006f94:	e779      	b.n	8006e8a <_dtoa_r+0x7f2>
 8006f96:	d093      	beq.n	8006ec0 <_dtoa_r+0x828>
 8006f98:	9a00      	ldr	r2, [sp, #0]
 8006f9a:	331c      	adds	r3, #28
 8006f9c:	441a      	add	r2, r3
 8006f9e:	9200      	str	r2, [sp, #0]
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	441e      	add	r6, r3
 8006fa6:	9206      	str	r2, [sp, #24]
 8006fa8:	e78a      	b.n	8006ec0 <_dtoa_r+0x828>
 8006faa:	4603      	mov	r3, r0
 8006fac:	e7f4      	b.n	8006f98 <_dtoa_r+0x900>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	46b8      	mov	r8, r7
 8006fb4:	dc20      	bgt.n	8006ff8 <_dtoa_r+0x960>
 8006fb6:	469b      	mov	fp, r3
 8006fb8:	9b07      	ldr	r3, [sp, #28]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	dd1e      	ble.n	8006ffc <_dtoa_r+0x964>
 8006fbe:	f1bb 0f00 	cmp.w	fp, #0
 8006fc2:	f47f adb1 	bne.w	8006b28 <_dtoa_r+0x490>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	465b      	mov	r3, fp
 8006fca:	2205      	movs	r2, #5
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f000 fa95 	bl	80074fc <__multadd>
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	9802      	ldr	r0, [sp, #8]
 8006fd8:	f000 fca0 	bl	800791c <__mcmp>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f77f ada3 	ble.w	8006b28 <_dtoa_r+0x490>
 8006fe2:	4656      	mov	r6, sl
 8006fe4:	2331      	movs	r3, #49	@ 0x31
 8006fe6:	f806 3b01 	strb.w	r3, [r6], #1
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	e59f      	b.n	8006b30 <_dtoa_r+0x498>
 8006ff0:	9c03      	ldr	r4, [sp, #12]
 8006ff2:	46b8      	mov	r8, r7
 8006ff4:	4625      	mov	r5, r4
 8006ff6:	e7f4      	b.n	8006fe2 <_dtoa_r+0x94a>
 8006ff8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8101 	beq.w	8007206 <_dtoa_r+0xb6e>
 8007004:	2e00      	cmp	r6, #0
 8007006:	dd05      	ble.n	8007014 <_dtoa_r+0x97c>
 8007008:	4629      	mov	r1, r5
 800700a:	4632      	mov	r2, r6
 800700c:	4648      	mov	r0, r9
 800700e:	f000 fc19 	bl	8007844 <__lshift>
 8007012:	4605      	mov	r5, r0
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d05c      	beq.n	80070d4 <_dtoa_r+0xa3c>
 800701a:	6869      	ldr	r1, [r5, #4]
 800701c:	4648      	mov	r0, r9
 800701e:	f000 fa0b 	bl	8007438 <_Balloc>
 8007022:	4606      	mov	r6, r0
 8007024:	b928      	cbnz	r0, 8007032 <_dtoa_r+0x99a>
 8007026:	4b82      	ldr	r3, [pc, #520]	@ (8007230 <_dtoa_r+0xb98>)
 8007028:	4602      	mov	r2, r0
 800702a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800702e:	f7ff bb4a 	b.w	80066c6 <_dtoa_r+0x2e>
 8007032:	692a      	ldr	r2, [r5, #16]
 8007034:	3202      	adds	r2, #2
 8007036:	0092      	lsls	r2, r2, #2
 8007038:	f105 010c 	add.w	r1, r5, #12
 800703c:	300c      	adds	r0, #12
 800703e:	f001 f969 	bl	8008314 <memcpy>
 8007042:	2201      	movs	r2, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4648      	mov	r0, r9
 8007048:	f000 fbfc 	bl	8007844 <__lshift>
 800704c:	f10a 0301 	add.w	r3, sl, #1
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	eb0a 030b 	add.w	r3, sl, fp
 8007056:	9308      	str	r3, [sp, #32]
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	462f      	mov	r7, r5
 8007060:	9306      	str	r3, [sp, #24]
 8007062:	4605      	mov	r5, r0
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	9802      	ldr	r0, [sp, #8]
 8007068:	4621      	mov	r1, r4
 800706a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800706e:	f7ff fa8a 	bl	8006586 <quorem>
 8007072:	4603      	mov	r3, r0
 8007074:	3330      	adds	r3, #48	@ 0x30
 8007076:	9003      	str	r0, [sp, #12]
 8007078:	4639      	mov	r1, r7
 800707a:	9802      	ldr	r0, [sp, #8]
 800707c:	9309      	str	r3, [sp, #36]	@ 0x24
 800707e:	f000 fc4d 	bl	800791c <__mcmp>
 8007082:	462a      	mov	r2, r5
 8007084:	9004      	str	r0, [sp, #16]
 8007086:	4621      	mov	r1, r4
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fc63 	bl	8007954 <__mdiff>
 800708e:	68c2      	ldr	r2, [r0, #12]
 8007090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007092:	4606      	mov	r6, r0
 8007094:	bb02      	cbnz	r2, 80070d8 <_dtoa_r+0xa40>
 8007096:	4601      	mov	r1, r0
 8007098:	9802      	ldr	r0, [sp, #8]
 800709a:	f000 fc3f 	bl	800791c <__mcmp>
 800709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a0:	4602      	mov	r2, r0
 80070a2:	4631      	mov	r1, r6
 80070a4:	4648      	mov	r0, r9
 80070a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80070a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070aa:	f000 fa05 	bl	80074b8 <_Bfree>
 80070ae:	9b07      	ldr	r3, [sp, #28]
 80070b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070b2:	9e00      	ldr	r6, [sp, #0]
 80070b4:	ea42 0103 	orr.w	r1, r2, r3
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	4319      	orrs	r1, r3
 80070bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070be:	d10d      	bne.n	80070dc <_dtoa_r+0xa44>
 80070c0:	2b39      	cmp	r3, #57	@ 0x39
 80070c2:	d027      	beq.n	8007114 <_dtoa_r+0xa7c>
 80070c4:	9a04      	ldr	r2, [sp, #16]
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	dd01      	ble.n	80070ce <_dtoa_r+0xa36>
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	3331      	adds	r3, #49	@ 0x31
 80070ce:	f88b 3000 	strb.w	r3, [fp]
 80070d2:	e52e      	b.n	8006b32 <_dtoa_r+0x49a>
 80070d4:	4628      	mov	r0, r5
 80070d6:	e7b9      	b.n	800704c <_dtoa_r+0x9b4>
 80070d8:	2201      	movs	r2, #1
 80070da:	e7e2      	b.n	80070a2 <_dtoa_r+0xa0a>
 80070dc:	9904      	ldr	r1, [sp, #16]
 80070de:	2900      	cmp	r1, #0
 80070e0:	db04      	blt.n	80070ec <_dtoa_r+0xa54>
 80070e2:	9807      	ldr	r0, [sp, #28]
 80070e4:	4301      	orrs	r1, r0
 80070e6:	9806      	ldr	r0, [sp, #24]
 80070e8:	4301      	orrs	r1, r0
 80070ea:	d120      	bne.n	800712e <_dtoa_r+0xa96>
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	ddee      	ble.n	80070ce <_dtoa_r+0xa36>
 80070f0:	9902      	ldr	r1, [sp, #8]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	2201      	movs	r2, #1
 80070f6:	4648      	mov	r0, r9
 80070f8:	f000 fba4 	bl	8007844 <__lshift>
 80070fc:	4621      	mov	r1, r4
 80070fe:	9002      	str	r0, [sp, #8]
 8007100:	f000 fc0c 	bl	800791c <__mcmp>
 8007104:	2800      	cmp	r0, #0
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	dc02      	bgt.n	8007110 <_dtoa_r+0xa78>
 800710a:	d1e0      	bne.n	80070ce <_dtoa_r+0xa36>
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	d5de      	bpl.n	80070ce <_dtoa_r+0xa36>
 8007110:	2b39      	cmp	r3, #57	@ 0x39
 8007112:	d1da      	bne.n	80070ca <_dtoa_r+0xa32>
 8007114:	2339      	movs	r3, #57	@ 0x39
 8007116:	f88b 3000 	strb.w	r3, [fp]
 800711a:	4633      	mov	r3, r6
 800711c:	461e      	mov	r6, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007124:	2a39      	cmp	r2, #57	@ 0x39
 8007126:	d04e      	beq.n	80071c6 <_dtoa_r+0xb2e>
 8007128:	3201      	adds	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e501      	b.n	8006b32 <_dtoa_r+0x49a>
 800712e:	2a00      	cmp	r2, #0
 8007130:	dd03      	ble.n	800713a <_dtoa_r+0xaa2>
 8007132:	2b39      	cmp	r3, #57	@ 0x39
 8007134:	d0ee      	beq.n	8007114 <_dtoa_r+0xa7c>
 8007136:	3301      	adds	r3, #1
 8007138:	e7c9      	b.n	80070ce <_dtoa_r+0xa36>
 800713a:	9a00      	ldr	r2, [sp, #0]
 800713c:	9908      	ldr	r1, [sp, #32]
 800713e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007142:	428a      	cmp	r2, r1
 8007144:	d028      	beq.n	8007198 <_dtoa_r+0xb00>
 8007146:	9902      	ldr	r1, [sp, #8]
 8007148:	2300      	movs	r3, #0
 800714a:	220a      	movs	r2, #10
 800714c:	4648      	mov	r0, r9
 800714e:	f000 f9d5 	bl	80074fc <__multadd>
 8007152:	42af      	cmp	r7, r5
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	f04f 020a 	mov.w	r2, #10
 800715e:	4639      	mov	r1, r7
 8007160:	4648      	mov	r0, r9
 8007162:	d107      	bne.n	8007174 <_dtoa_r+0xadc>
 8007164:	f000 f9ca 	bl	80074fc <__multadd>
 8007168:	4607      	mov	r7, r0
 800716a:	4605      	mov	r5, r0
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	e777      	b.n	8007064 <_dtoa_r+0x9cc>
 8007174:	f000 f9c2 	bl	80074fc <__multadd>
 8007178:	4629      	mov	r1, r5
 800717a:	4607      	mov	r7, r0
 800717c:	2300      	movs	r3, #0
 800717e:	220a      	movs	r2, #10
 8007180:	4648      	mov	r0, r9
 8007182:	f000 f9bb 	bl	80074fc <__multadd>
 8007186:	4605      	mov	r5, r0
 8007188:	e7f0      	b.n	800716c <_dtoa_r+0xad4>
 800718a:	f1bb 0f00 	cmp.w	fp, #0
 800718e:	bfcc      	ite	gt
 8007190:	465e      	movgt	r6, fp
 8007192:	2601      	movle	r6, #1
 8007194:	4456      	add	r6, sl
 8007196:	2700      	movs	r7, #0
 8007198:	9902      	ldr	r1, [sp, #8]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	4648      	mov	r0, r9
 80071a0:	f000 fb50 	bl	8007844 <__lshift>
 80071a4:	4621      	mov	r1, r4
 80071a6:	9002      	str	r0, [sp, #8]
 80071a8:	f000 fbb8 	bl	800791c <__mcmp>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	dcb4      	bgt.n	800711a <_dtoa_r+0xa82>
 80071b0:	d102      	bne.n	80071b8 <_dtoa_r+0xb20>
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	07db      	lsls	r3, r3, #31
 80071b6:	d4b0      	bmi.n	800711a <_dtoa_r+0xa82>
 80071b8:	4633      	mov	r3, r6
 80071ba:	461e      	mov	r6, r3
 80071bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071c0:	2a30      	cmp	r2, #48	@ 0x30
 80071c2:	d0fa      	beq.n	80071ba <_dtoa_r+0xb22>
 80071c4:	e4b5      	b.n	8006b32 <_dtoa_r+0x49a>
 80071c6:	459a      	cmp	sl, r3
 80071c8:	d1a8      	bne.n	800711c <_dtoa_r+0xa84>
 80071ca:	2331      	movs	r3, #49	@ 0x31
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	f88a 3000 	strb.w	r3, [sl]
 80071d4:	e4ad      	b.n	8006b32 <_dtoa_r+0x49a>
 80071d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007234 <_dtoa_r+0xb9c>
 80071dc:	b11b      	cbz	r3, 80071e6 <_dtoa_r+0xb4e>
 80071de:	f10a 0308 	add.w	r3, sl, #8
 80071e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4650      	mov	r0, sl
 80071e8:	b017      	add	sp, #92	@ 0x5c
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	f77f ae2e 	ble.w	8006e52 <_dtoa_r+0x7ba>
 80071f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071f8:	9308      	str	r3, [sp, #32]
 80071fa:	2001      	movs	r0, #1
 80071fc:	e64d      	b.n	8006e9a <_dtoa_r+0x802>
 80071fe:	f1bb 0f00 	cmp.w	fp, #0
 8007202:	f77f aed9 	ble.w	8006fb8 <_dtoa_r+0x920>
 8007206:	4656      	mov	r6, sl
 8007208:	9802      	ldr	r0, [sp, #8]
 800720a:	4621      	mov	r1, r4
 800720c:	f7ff f9bb 	bl	8006586 <quorem>
 8007210:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007214:	f806 3b01 	strb.w	r3, [r6], #1
 8007218:	eba6 020a 	sub.w	r2, r6, sl
 800721c:	4593      	cmp	fp, r2
 800721e:	ddb4      	ble.n	800718a <_dtoa_r+0xaf2>
 8007220:	9902      	ldr	r1, [sp, #8]
 8007222:	2300      	movs	r3, #0
 8007224:	220a      	movs	r2, #10
 8007226:	4648      	mov	r0, r9
 8007228:	f000 f968 	bl	80074fc <__multadd>
 800722c:	9002      	str	r0, [sp, #8]
 800722e:	e7eb      	b.n	8007208 <_dtoa_r+0xb70>
 8007230:	080086c0 	.word	0x080086c0
 8007234:	08008644 	.word	0x08008644

08007238 <_free_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	2900      	cmp	r1, #0
 800723e:	d041      	beq.n	80072c4 <_free_r+0x8c>
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f0c      	subs	r4, r1, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	18e4      	addlt	r4, r4, r3
 800724c:	f000 f8e8 	bl	8007420 <__malloc_lock>
 8007250:	4a1d      	ldr	r2, [pc, #116]	@ (80072c8 <_free_r+0x90>)
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	b933      	cbnz	r3, 8007264 <_free_r+0x2c>
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	4628      	mov	r0, r5
 800725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007260:	f000 b8e4 	b.w	800742c <__malloc_unlock>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d908      	bls.n	800727a <_free_r+0x42>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428b      	cmp	r3, r1
 800726e:	bf01      	itttt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	e7ed      	b.n	8007256 <_free_r+0x1e>
 800727a:	461a      	mov	r2, r3
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b10b      	cbz	r3, 8007284 <_free_r+0x4c>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d9fa      	bls.n	800727a <_free_r+0x42>
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	1850      	adds	r0, r2, r1
 8007288:	42a0      	cmp	r0, r4
 800728a:	d10b      	bne.n	80072a4 <_free_r+0x6c>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	4401      	add	r1, r0
 8007290:	1850      	adds	r0, r2, r1
 8007292:	4283      	cmp	r3, r0
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	d1e0      	bne.n	800725a <_free_r+0x22>
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	4408      	add	r0, r1
 80072a0:	6010      	str	r0, [r2, #0]
 80072a2:	e7da      	b.n	800725a <_free_r+0x22>
 80072a4:	d902      	bls.n	80072ac <_free_r+0x74>
 80072a6:	230c      	movs	r3, #12
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	e7d6      	b.n	800725a <_free_r+0x22>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	1821      	adds	r1, r4, r0
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf04      	itt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	bf04      	itt	eq
 80072bc:	1809      	addeq	r1, r1, r0
 80072be:	6021      	streq	r1, [r4, #0]
 80072c0:	6054      	str	r4, [r2, #4]
 80072c2:	e7ca      	b.n	800725a <_free_r+0x22>
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	200004c8 	.word	0x200004c8

080072cc <malloc>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	@ (80072d8 <malloc+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f000 b825 	b.w	8007320 <_malloc_r>
 80072d6:	bf00      	nop
 80072d8:	20000018 	.word	0x20000018

080072dc <sbrk_aligned>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0f      	ldr	r6, [pc, #60]	@ (800731c <sbrk_aligned+0x40>)
 80072e0:	460c      	mov	r4, r1
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	4605      	mov	r5, r0
 80072e6:	b911      	cbnz	r1, 80072ee <sbrk_aligned+0x12>
 80072e8:	f001 f804 	bl	80082f4 <_sbrk_r>
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 ffff 	bl	80082f4 <_sbrk_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d103      	bne.n	8007302 <sbrk_aligned+0x26>
 80072fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80072fe:	4620      	mov	r0, r4
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d0f8      	beq.n	80072fe <sbrk_aligned+0x22>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4628      	mov	r0, r5
 8007310:	f000 fff0 	bl	80082f4 <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d1f2      	bne.n	80072fe <sbrk_aligned+0x22>
 8007318:	e7ef      	b.n	80072fa <sbrk_aligned+0x1e>
 800731a:	bf00      	nop
 800731c:	200004c4 	.word	0x200004c4

08007320 <_malloc_r>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	1ccd      	adds	r5, r1, #3
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	2d00      	cmp	r5, #0
 8007334:	4606      	mov	r6, r0
 8007336:	db01      	blt.n	800733c <_malloc_r+0x1c>
 8007338:	42a9      	cmp	r1, r5
 800733a:	d904      	bls.n	8007346 <_malloc_r+0x26>
 800733c:	230c      	movs	r3, #12
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	2000      	movs	r0, #0
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800741c <_malloc_r+0xfc>
 800734a:	f000 f869 	bl	8007420 <__malloc_lock>
 800734e:	f8d8 3000 	ldr.w	r3, [r8]
 8007352:	461c      	mov	r4, r3
 8007354:	bb44      	cbnz	r4, 80073a8 <_malloc_r+0x88>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff ffbf 	bl	80072dc <sbrk_aligned>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	4604      	mov	r4, r0
 8007362:	d158      	bne.n	8007416 <_malloc_r+0xf6>
 8007364:	f8d8 4000 	ldr.w	r4, [r8]
 8007368:	4627      	mov	r7, r4
 800736a:	2f00      	cmp	r7, #0
 800736c:	d143      	bne.n	80073f6 <_malloc_r+0xd6>
 800736e:	2c00      	cmp	r4, #0
 8007370:	d04b      	beq.n	800740a <_malloc_r+0xea>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	eb04 0903 	add.w	r9, r4, r3
 800737c:	f000 ffba 	bl	80082f4 <_sbrk_r>
 8007380:	4581      	cmp	r9, r0
 8007382:	d142      	bne.n	800740a <_malloc_r+0xea>
 8007384:	6821      	ldr	r1, [r4, #0]
 8007386:	1a6d      	subs	r5, r5, r1
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffa6 	bl	80072dc <sbrk_aligned>
 8007390:	3001      	adds	r0, #1
 8007392:	d03a      	beq.n	800740a <_malloc_r+0xea>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	442b      	add	r3, r5
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	f8d8 3000 	ldr.w	r3, [r8]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	bb62      	cbnz	r2, 80073fc <_malloc_r+0xdc>
 80073a2:	f8c8 7000 	str.w	r7, [r8]
 80073a6:	e00f      	b.n	80073c8 <_malloc_r+0xa8>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	1b52      	subs	r2, r2, r5
 80073ac:	d420      	bmi.n	80073f0 <_malloc_r+0xd0>
 80073ae:	2a0b      	cmp	r2, #11
 80073b0:	d917      	bls.n	80073e2 <_malloc_r+0xc2>
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	bf18      	it	ne
 80073ba:	6059      	strne	r1, [r3, #4]
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	bf08      	it	eq
 80073c0:	f8c8 1000 	streq.w	r1, [r8]
 80073c4:	5162      	str	r2, [r4, r5]
 80073c6:	604b      	str	r3, [r1, #4]
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 f82f 	bl	800742c <__malloc_unlock>
 80073ce:	f104 000b 	add.w	r0, r4, #11
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	f020 0007 	bic.w	r0, r0, #7
 80073d8:	1ac2      	subs	r2, r0, r3
 80073da:	bf1c      	itt	ne
 80073dc:	1a1b      	subne	r3, r3, r0
 80073de:	50a3      	strne	r3, [r4, r2]
 80073e0:	e7af      	b.n	8007342 <_malloc_r+0x22>
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	bf0c      	ite	eq
 80073e8:	f8c8 2000 	streq.w	r2, [r8]
 80073ec:	605a      	strne	r2, [r3, #4]
 80073ee:	e7eb      	b.n	80073c8 <_malloc_r+0xa8>
 80073f0:	4623      	mov	r3, r4
 80073f2:	6864      	ldr	r4, [r4, #4]
 80073f4:	e7ae      	b.n	8007354 <_malloc_r+0x34>
 80073f6:	463c      	mov	r4, r7
 80073f8:	687f      	ldr	r7, [r7, #4]
 80073fa:	e7b6      	b.n	800736a <_malloc_r+0x4a>
 80073fc:	461a      	mov	r2, r3
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	d1fb      	bne.n	80073fc <_malloc_r+0xdc>
 8007404:	2300      	movs	r3, #0
 8007406:	6053      	str	r3, [r2, #4]
 8007408:	e7de      	b.n	80073c8 <_malloc_r+0xa8>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	4630      	mov	r0, r6
 8007410:	f000 f80c 	bl	800742c <__malloc_unlock>
 8007414:	e794      	b.n	8007340 <_malloc_r+0x20>
 8007416:	6005      	str	r5, [r0, #0]
 8007418:	e7d6      	b.n	80073c8 <_malloc_r+0xa8>
 800741a:	bf00      	nop
 800741c:	200004c8 	.word	0x200004c8

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	@ (8007428 <__malloc_lock+0x8>)
 8007422:	f7ff b8ae 	b.w	8006582 <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	200004c0 	.word	0x200004c0

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	@ (8007434 <__malloc_unlock+0x8>)
 800742e:	f7ff b8a9 	b.w	8006584 <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	200004c0 	.word	0x200004c0

08007438 <_Balloc>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	69c6      	ldr	r6, [r0, #28]
 800743c:	4604      	mov	r4, r0
 800743e:	460d      	mov	r5, r1
 8007440:	b976      	cbnz	r6, 8007460 <_Balloc+0x28>
 8007442:	2010      	movs	r0, #16
 8007444:	f7ff ff42 	bl	80072cc <malloc>
 8007448:	4602      	mov	r2, r0
 800744a:	61e0      	str	r0, [r4, #28]
 800744c:	b920      	cbnz	r0, 8007458 <_Balloc+0x20>
 800744e:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <_Balloc+0x78>)
 8007450:	4818      	ldr	r0, [pc, #96]	@ (80074b4 <_Balloc+0x7c>)
 8007452:	216b      	movs	r1, #107	@ 0x6b
 8007454:	f000 ff6c 	bl	8008330 <__assert_func>
 8007458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800745c:	6006      	str	r6, [r0, #0]
 800745e:	60c6      	str	r6, [r0, #12]
 8007460:	69e6      	ldr	r6, [r4, #28]
 8007462:	68f3      	ldr	r3, [r6, #12]
 8007464:	b183      	cbz	r3, 8007488 <_Balloc+0x50>
 8007466:	69e3      	ldr	r3, [r4, #28]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800746e:	b9b8      	cbnz	r0, 80074a0 <_Balloc+0x68>
 8007470:	2101      	movs	r1, #1
 8007472:	fa01 f605 	lsl.w	r6, r1, r5
 8007476:	1d72      	adds	r2, r6, #5
 8007478:	0092      	lsls	r2, r2, #2
 800747a:	4620      	mov	r0, r4
 800747c:	f000 ff76 	bl	800836c <_calloc_r>
 8007480:	b160      	cbz	r0, 800749c <_Balloc+0x64>
 8007482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007486:	e00e      	b.n	80074a6 <_Balloc+0x6e>
 8007488:	2221      	movs	r2, #33	@ 0x21
 800748a:	2104      	movs	r1, #4
 800748c:	4620      	mov	r0, r4
 800748e:	f000 ff6d 	bl	800836c <_calloc_r>
 8007492:	69e3      	ldr	r3, [r4, #28]
 8007494:	60f0      	str	r0, [r6, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e4      	bne.n	8007466 <_Balloc+0x2e>
 800749c:	2000      	movs	r0, #0
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	6802      	ldr	r2, [r0, #0]
 80074a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074a6:	2300      	movs	r3, #0
 80074a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074ac:	e7f7      	b.n	800749e <_Balloc+0x66>
 80074ae:	bf00      	nop
 80074b0:	08008651 	.word	0x08008651
 80074b4:	080086d1 	.word	0x080086d1

080074b8 <_Bfree>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	69c6      	ldr	r6, [r0, #28]
 80074bc:	4605      	mov	r5, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	b976      	cbnz	r6, 80074e0 <_Bfree+0x28>
 80074c2:	2010      	movs	r0, #16
 80074c4:	f7ff ff02 	bl	80072cc <malloc>
 80074c8:	4602      	mov	r2, r0
 80074ca:	61e8      	str	r0, [r5, #28]
 80074cc:	b920      	cbnz	r0, 80074d8 <_Bfree+0x20>
 80074ce:	4b09      	ldr	r3, [pc, #36]	@ (80074f4 <_Bfree+0x3c>)
 80074d0:	4809      	ldr	r0, [pc, #36]	@ (80074f8 <_Bfree+0x40>)
 80074d2:	218f      	movs	r1, #143	@ 0x8f
 80074d4:	f000 ff2c 	bl	8008330 <__assert_func>
 80074d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074dc:	6006      	str	r6, [r0, #0]
 80074de:	60c6      	str	r6, [r0, #12]
 80074e0:	b13c      	cbz	r4, 80074f2 <_Bfree+0x3a>
 80074e2:	69eb      	ldr	r3, [r5, #28]
 80074e4:	6862      	ldr	r2, [r4, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ec:	6021      	str	r1, [r4, #0]
 80074ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	08008651 	.word	0x08008651
 80074f8:	080086d1 	.word	0x080086d1

080074fc <__multadd>:
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	690d      	ldr	r5, [r1, #16]
 8007502:	4607      	mov	r7, r0
 8007504:	460c      	mov	r4, r1
 8007506:	461e      	mov	r6, r3
 8007508:	f101 0c14 	add.w	ip, r1, #20
 800750c:	2000      	movs	r0, #0
 800750e:	f8dc 3000 	ldr.w	r3, [ip]
 8007512:	b299      	uxth	r1, r3
 8007514:	fb02 6101 	mla	r1, r2, r1, r6
 8007518:	0c1e      	lsrs	r6, r3, #16
 800751a:	0c0b      	lsrs	r3, r1, #16
 800751c:	fb02 3306 	mla	r3, r2, r6, r3
 8007520:	b289      	uxth	r1, r1
 8007522:	3001      	adds	r0, #1
 8007524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007528:	4285      	cmp	r5, r0
 800752a:	f84c 1b04 	str.w	r1, [ip], #4
 800752e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007532:	dcec      	bgt.n	800750e <__multadd+0x12>
 8007534:	b30e      	cbz	r6, 800757a <__multadd+0x7e>
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	42ab      	cmp	r3, r5
 800753a:	dc19      	bgt.n	8007570 <__multadd+0x74>
 800753c:	6861      	ldr	r1, [r4, #4]
 800753e:	4638      	mov	r0, r7
 8007540:	3101      	adds	r1, #1
 8007542:	f7ff ff79 	bl	8007438 <_Balloc>
 8007546:	4680      	mov	r8, r0
 8007548:	b928      	cbnz	r0, 8007556 <__multadd+0x5a>
 800754a:	4602      	mov	r2, r0
 800754c:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <__multadd+0x84>)
 800754e:	480d      	ldr	r0, [pc, #52]	@ (8007584 <__multadd+0x88>)
 8007550:	21ba      	movs	r1, #186	@ 0xba
 8007552:	f000 feed 	bl	8008330 <__assert_func>
 8007556:	6922      	ldr	r2, [r4, #16]
 8007558:	3202      	adds	r2, #2
 800755a:	f104 010c 	add.w	r1, r4, #12
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	300c      	adds	r0, #12
 8007562:	f000 fed7 	bl	8008314 <memcpy>
 8007566:	4621      	mov	r1, r4
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff ffa5 	bl	80074b8 <_Bfree>
 800756e:	4644      	mov	r4, r8
 8007570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007574:	3501      	adds	r5, #1
 8007576:	615e      	str	r6, [r3, #20]
 8007578:	6125      	str	r5, [r4, #16]
 800757a:	4620      	mov	r0, r4
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	080086c0 	.word	0x080086c0
 8007584:	080086d1 	.word	0x080086d1

08007588 <__hi0bits>:
 8007588:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800758c:	4603      	mov	r3, r0
 800758e:	bf36      	itet	cc
 8007590:	0403      	lslcc	r3, r0, #16
 8007592:	2000      	movcs	r0, #0
 8007594:	2010      	movcc	r0, #16
 8007596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800759a:	bf3c      	itt	cc
 800759c:	021b      	lslcc	r3, r3, #8
 800759e:	3008      	addcc	r0, #8
 80075a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a4:	bf3c      	itt	cc
 80075a6:	011b      	lslcc	r3, r3, #4
 80075a8:	3004      	addcc	r0, #4
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ae:	bf3c      	itt	cc
 80075b0:	009b      	lslcc	r3, r3, #2
 80075b2:	3002      	addcc	r0, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db05      	blt.n	80075c4 <__hi0bits+0x3c>
 80075b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075bc:	f100 0001 	add.w	r0, r0, #1
 80075c0:	bf08      	it	eq
 80075c2:	2020      	moveq	r0, #32
 80075c4:	4770      	bx	lr

080075c6 <__lo0bits>:
 80075c6:	6803      	ldr	r3, [r0, #0]
 80075c8:	4602      	mov	r2, r0
 80075ca:	f013 0007 	ands.w	r0, r3, #7
 80075ce:	d00b      	beq.n	80075e8 <__lo0bits+0x22>
 80075d0:	07d9      	lsls	r1, r3, #31
 80075d2:	d421      	bmi.n	8007618 <__lo0bits+0x52>
 80075d4:	0798      	lsls	r0, r3, #30
 80075d6:	bf49      	itett	mi
 80075d8:	085b      	lsrmi	r3, r3, #1
 80075da:	089b      	lsrpl	r3, r3, #2
 80075dc:	2001      	movmi	r0, #1
 80075de:	6013      	strmi	r3, [r2, #0]
 80075e0:	bf5c      	itt	pl
 80075e2:	6013      	strpl	r3, [r2, #0]
 80075e4:	2002      	movpl	r0, #2
 80075e6:	4770      	bx	lr
 80075e8:	b299      	uxth	r1, r3
 80075ea:	b909      	cbnz	r1, 80075f0 <__lo0bits+0x2a>
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	2010      	movs	r0, #16
 80075f0:	b2d9      	uxtb	r1, r3
 80075f2:	b909      	cbnz	r1, 80075f8 <__lo0bits+0x32>
 80075f4:	3008      	adds	r0, #8
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	0719      	lsls	r1, r3, #28
 80075fa:	bf04      	itt	eq
 80075fc:	091b      	lsreq	r3, r3, #4
 80075fe:	3004      	addeq	r0, #4
 8007600:	0799      	lsls	r1, r3, #30
 8007602:	bf04      	itt	eq
 8007604:	089b      	lsreq	r3, r3, #2
 8007606:	3002      	addeq	r0, #2
 8007608:	07d9      	lsls	r1, r3, #31
 800760a:	d403      	bmi.n	8007614 <__lo0bits+0x4e>
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f100 0001 	add.w	r0, r0, #1
 8007612:	d003      	beq.n	800761c <__lo0bits+0x56>
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	4770      	bx	lr
 8007618:	2000      	movs	r0, #0
 800761a:	4770      	bx	lr
 800761c:	2020      	movs	r0, #32
 800761e:	4770      	bx	lr

08007620 <__i2b>:
 8007620:	b510      	push	{r4, lr}
 8007622:	460c      	mov	r4, r1
 8007624:	2101      	movs	r1, #1
 8007626:	f7ff ff07 	bl	8007438 <_Balloc>
 800762a:	4602      	mov	r2, r0
 800762c:	b928      	cbnz	r0, 800763a <__i2b+0x1a>
 800762e:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <__i2b+0x24>)
 8007630:	4805      	ldr	r0, [pc, #20]	@ (8007648 <__i2b+0x28>)
 8007632:	f240 1145 	movw	r1, #325	@ 0x145
 8007636:	f000 fe7b 	bl	8008330 <__assert_func>
 800763a:	2301      	movs	r3, #1
 800763c:	6144      	str	r4, [r0, #20]
 800763e:	6103      	str	r3, [r0, #16]
 8007640:	bd10      	pop	{r4, pc}
 8007642:	bf00      	nop
 8007644:	080086c0 	.word	0x080086c0
 8007648:	080086d1 	.word	0x080086d1

0800764c <__multiply>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	4617      	mov	r7, r2
 8007652:	690a      	ldr	r2, [r1, #16]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	429a      	cmp	r2, r3
 8007658:	bfa8      	it	ge
 800765a:	463b      	movge	r3, r7
 800765c:	4689      	mov	r9, r1
 800765e:	bfa4      	itt	ge
 8007660:	460f      	movge	r7, r1
 8007662:	4699      	movge	r9, r3
 8007664:	693d      	ldr	r5, [r7, #16]
 8007666:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	eb05 060a 	add.w	r6, r5, sl
 8007672:	42b3      	cmp	r3, r6
 8007674:	b085      	sub	sp, #20
 8007676:	bfb8      	it	lt
 8007678:	3101      	addlt	r1, #1
 800767a:	f7ff fedd 	bl	8007438 <_Balloc>
 800767e:	b930      	cbnz	r0, 800768e <__multiply+0x42>
 8007680:	4602      	mov	r2, r0
 8007682:	4b41      	ldr	r3, [pc, #260]	@ (8007788 <__multiply+0x13c>)
 8007684:	4841      	ldr	r0, [pc, #260]	@ (800778c <__multiply+0x140>)
 8007686:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800768a:	f000 fe51 	bl	8008330 <__assert_func>
 800768e:	f100 0414 	add.w	r4, r0, #20
 8007692:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007696:	4623      	mov	r3, r4
 8007698:	2200      	movs	r2, #0
 800769a:	4573      	cmp	r3, lr
 800769c:	d320      	bcc.n	80076e0 <__multiply+0x94>
 800769e:	f107 0814 	add.w	r8, r7, #20
 80076a2:	f109 0114 	add.w	r1, r9, #20
 80076a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80076aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	1beb      	subs	r3, r5, r7
 80076b2:	3b15      	subs	r3, #21
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	3304      	adds	r3, #4
 80076ba:	3715      	adds	r7, #21
 80076bc:	42bd      	cmp	r5, r7
 80076be:	bf38      	it	cc
 80076c0:	2304      	movcc	r3, #4
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	9103      	str	r1, [sp, #12]
 80076c8:	428b      	cmp	r3, r1
 80076ca:	d80c      	bhi.n	80076e6 <__multiply+0x9a>
 80076cc:	2e00      	cmp	r6, #0
 80076ce:	dd03      	ble.n	80076d8 <__multiply+0x8c>
 80076d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d055      	beq.n	8007784 <__multiply+0x138>
 80076d8:	6106      	str	r6, [r0, #16]
 80076da:	b005      	add	sp, #20
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	f843 2b04 	str.w	r2, [r3], #4
 80076e4:	e7d9      	b.n	800769a <__multiply+0x4e>
 80076e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80076ea:	f1ba 0f00 	cmp.w	sl, #0
 80076ee:	d01f      	beq.n	8007730 <__multiply+0xe4>
 80076f0:	46c4      	mov	ip, r8
 80076f2:	46a1      	mov	r9, r4
 80076f4:	2700      	movs	r7, #0
 80076f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076fa:	f8d9 3000 	ldr.w	r3, [r9]
 80076fe:	fa1f fb82 	uxth.w	fp, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	fb0a 330b 	mla	r3, sl, fp, r3
 8007708:	443b      	add	r3, r7
 800770a:	f8d9 7000 	ldr.w	r7, [r9]
 800770e:	0c12      	lsrs	r2, r2, #16
 8007710:	0c3f      	lsrs	r7, r7, #16
 8007712:	fb0a 7202 	mla	r2, sl, r2, r7
 8007716:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800771a:	b29b      	uxth	r3, r3
 800771c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007720:	4565      	cmp	r5, ip
 8007722:	f849 3b04 	str.w	r3, [r9], #4
 8007726:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800772a:	d8e4      	bhi.n	80076f6 <__multiply+0xaa>
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	50e7      	str	r7, [r4, r3]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007736:	3104      	adds	r1, #4
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	d020      	beq.n	8007780 <__multiply+0x134>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	4647      	mov	r7, r8
 8007742:	46a4      	mov	ip, r4
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	f8b7 b000 	ldrh.w	fp, [r7]
 800774c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007750:	fb09 220b 	mla	r2, r9, fp, r2
 8007754:	4452      	add	r2, sl
 8007756:	b29b      	uxth	r3, r3
 8007758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800775c:	f84c 3b04 	str.w	r3, [ip], #4
 8007760:	f857 3b04 	ldr.w	r3, [r7], #4
 8007764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007768:	f8bc 3000 	ldrh.w	r3, [ip]
 800776c:	fb09 330a 	mla	r3, r9, sl, r3
 8007770:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007774:	42bd      	cmp	r5, r7
 8007776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800777a:	d8e5      	bhi.n	8007748 <__multiply+0xfc>
 800777c:	9a01      	ldr	r2, [sp, #4]
 800777e:	50a3      	str	r3, [r4, r2]
 8007780:	3404      	adds	r4, #4
 8007782:	e79f      	b.n	80076c4 <__multiply+0x78>
 8007784:	3e01      	subs	r6, #1
 8007786:	e7a1      	b.n	80076cc <__multiply+0x80>
 8007788:	080086c0 	.word	0x080086c0
 800778c:	080086d1 	.word	0x080086d1

08007790 <__pow5mult>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4615      	mov	r5, r2
 8007796:	f012 0203 	ands.w	r2, r2, #3
 800779a:	4607      	mov	r7, r0
 800779c:	460e      	mov	r6, r1
 800779e:	d007      	beq.n	80077b0 <__pow5mult+0x20>
 80077a0:	4c25      	ldr	r4, [pc, #148]	@ (8007838 <__pow5mult+0xa8>)
 80077a2:	3a01      	subs	r2, #1
 80077a4:	2300      	movs	r3, #0
 80077a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077aa:	f7ff fea7 	bl	80074fc <__multadd>
 80077ae:	4606      	mov	r6, r0
 80077b0:	10ad      	asrs	r5, r5, #2
 80077b2:	d03d      	beq.n	8007830 <__pow5mult+0xa0>
 80077b4:	69fc      	ldr	r4, [r7, #28]
 80077b6:	b97c      	cbnz	r4, 80077d8 <__pow5mult+0x48>
 80077b8:	2010      	movs	r0, #16
 80077ba:	f7ff fd87 	bl	80072cc <malloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	61f8      	str	r0, [r7, #28]
 80077c2:	b928      	cbnz	r0, 80077d0 <__pow5mult+0x40>
 80077c4:	4b1d      	ldr	r3, [pc, #116]	@ (800783c <__pow5mult+0xac>)
 80077c6:	481e      	ldr	r0, [pc, #120]	@ (8007840 <__pow5mult+0xb0>)
 80077c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077cc:	f000 fdb0 	bl	8008330 <__assert_func>
 80077d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	60c4      	str	r4, [r0, #12]
 80077d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e0:	b94c      	cbnz	r4, 80077f6 <__pow5mult+0x66>
 80077e2:	f240 2171 	movw	r1, #625	@ 0x271
 80077e6:	4638      	mov	r0, r7
 80077e8:	f7ff ff1a 	bl	8007620 <__i2b>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f2:	4604      	mov	r4, r0
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	07eb      	lsls	r3, r5, #31
 80077fc:	d50a      	bpl.n	8007814 <__pow5mult+0x84>
 80077fe:	4631      	mov	r1, r6
 8007800:	4622      	mov	r2, r4
 8007802:	4638      	mov	r0, r7
 8007804:	f7ff ff22 	bl	800764c <__multiply>
 8007808:	4631      	mov	r1, r6
 800780a:	4680      	mov	r8, r0
 800780c:	4638      	mov	r0, r7
 800780e:	f7ff fe53 	bl	80074b8 <_Bfree>
 8007812:	4646      	mov	r6, r8
 8007814:	106d      	asrs	r5, r5, #1
 8007816:	d00b      	beq.n	8007830 <__pow5mult+0xa0>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	b938      	cbnz	r0, 800782c <__pow5mult+0x9c>
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	4638      	mov	r0, r7
 8007822:	f7ff ff13 	bl	800764c <__multiply>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f8c0 9000 	str.w	r9, [r0]
 800782c:	4604      	mov	r4, r0
 800782e:	e7e4      	b.n	80077fa <__pow5mult+0x6a>
 8007830:	4630      	mov	r0, r6
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	08008784 	.word	0x08008784
 800783c:	08008651 	.word	0x08008651
 8007840:	080086d1 	.word	0x080086d1

08007844 <__lshift>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	6849      	ldr	r1, [r1, #4]
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	4607      	mov	r7, r0
 8007856:	4691      	mov	r9, r2
 8007858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800785c:	f108 0601 	add.w	r6, r8, #1
 8007860:	42b3      	cmp	r3, r6
 8007862:	db0b      	blt.n	800787c <__lshift+0x38>
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff fde7 	bl	8007438 <_Balloc>
 800786a:	4605      	mov	r5, r0
 800786c:	b948      	cbnz	r0, 8007882 <__lshift+0x3e>
 800786e:	4602      	mov	r2, r0
 8007870:	4b28      	ldr	r3, [pc, #160]	@ (8007914 <__lshift+0xd0>)
 8007872:	4829      	ldr	r0, [pc, #164]	@ (8007918 <__lshift+0xd4>)
 8007874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007878:	f000 fd5a 	bl	8008330 <__assert_func>
 800787c:	3101      	adds	r1, #1
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	e7ee      	b.n	8007860 <__lshift+0x1c>
 8007882:	2300      	movs	r3, #0
 8007884:	f100 0114 	add.w	r1, r0, #20
 8007888:	f100 0210 	add.w	r2, r0, #16
 800788c:	4618      	mov	r0, r3
 800788e:	4553      	cmp	r3, sl
 8007890:	db33      	blt.n	80078fa <__lshift+0xb6>
 8007892:	6920      	ldr	r0, [r4, #16]
 8007894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007898:	f104 0314 	add.w	r3, r4, #20
 800789c:	f019 091f 	ands.w	r9, r9, #31
 80078a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078a8:	d02b      	beq.n	8007902 <__lshift+0xbe>
 80078aa:	f1c9 0e20 	rsb	lr, r9, #32
 80078ae:	468a      	mov	sl, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	fa00 f009 	lsl.w	r0, r0, r9
 80078b8:	4310      	orrs	r0, r2
 80078ba:	f84a 0b04 	str.w	r0, [sl], #4
 80078be:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c2:	459c      	cmp	ip, r3
 80078c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078c8:	d8f3      	bhi.n	80078b2 <__lshift+0x6e>
 80078ca:	ebac 0304 	sub.w	r3, ip, r4
 80078ce:	3b15      	subs	r3, #21
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	3304      	adds	r3, #4
 80078d6:	f104 0015 	add.w	r0, r4, #21
 80078da:	4560      	cmp	r0, ip
 80078dc:	bf88      	it	hi
 80078de:	2304      	movhi	r3, #4
 80078e0:	50ca      	str	r2, [r1, r3]
 80078e2:	b10a      	cbz	r2, 80078e8 <__lshift+0xa4>
 80078e4:	f108 0602 	add.w	r6, r8, #2
 80078e8:	3e01      	subs	r6, #1
 80078ea:	4638      	mov	r0, r7
 80078ec:	612e      	str	r6, [r5, #16]
 80078ee:	4621      	mov	r1, r4
 80078f0:	f7ff fde2 	bl	80074b8 <_Bfree>
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80078fe:	3301      	adds	r3, #1
 8007900:	e7c5      	b.n	800788e <__lshift+0x4a>
 8007902:	3904      	subs	r1, #4
 8007904:	f853 2b04 	ldr.w	r2, [r3], #4
 8007908:	f841 2f04 	str.w	r2, [r1, #4]!
 800790c:	459c      	cmp	ip, r3
 800790e:	d8f9      	bhi.n	8007904 <__lshift+0xc0>
 8007910:	e7ea      	b.n	80078e8 <__lshift+0xa4>
 8007912:	bf00      	nop
 8007914:	080086c0 	.word	0x080086c0
 8007918:	080086d1 	.word	0x080086d1

0800791c <__mcmp>:
 800791c:	690a      	ldr	r2, [r1, #16]
 800791e:	4603      	mov	r3, r0
 8007920:	6900      	ldr	r0, [r0, #16]
 8007922:	1a80      	subs	r0, r0, r2
 8007924:	b530      	push	{r4, r5, lr}
 8007926:	d10e      	bne.n	8007946 <__mcmp+0x2a>
 8007928:	3314      	adds	r3, #20
 800792a:	3114      	adds	r1, #20
 800792c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007930:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800793c:	4295      	cmp	r5, r2
 800793e:	d003      	beq.n	8007948 <__mcmp+0x2c>
 8007940:	d205      	bcs.n	800794e <__mcmp+0x32>
 8007942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007946:	bd30      	pop	{r4, r5, pc}
 8007948:	42a3      	cmp	r3, r4
 800794a:	d3f3      	bcc.n	8007934 <__mcmp+0x18>
 800794c:	e7fb      	b.n	8007946 <__mcmp+0x2a>
 800794e:	2001      	movs	r0, #1
 8007950:	e7f9      	b.n	8007946 <__mcmp+0x2a>
	...

08007954 <__mdiff>:
 8007954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4689      	mov	r9, r1
 800795a:	4606      	mov	r6, r0
 800795c:	4611      	mov	r1, r2
 800795e:	4648      	mov	r0, r9
 8007960:	4614      	mov	r4, r2
 8007962:	f7ff ffdb 	bl	800791c <__mcmp>
 8007966:	1e05      	subs	r5, r0, #0
 8007968:	d112      	bne.n	8007990 <__mdiff+0x3c>
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff fd63 	bl	8007438 <_Balloc>
 8007972:	4602      	mov	r2, r0
 8007974:	b928      	cbnz	r0, 8007982 <__mdiff+0x2e>
 8007976:	4b3f      	ldr	r3, [pc, #252]	@ (8007a74 <__mdiff+0x120>)
 8007978:	f240 2137 	movw	r1, #567	@ 0x237
 800797c:	483e      	ldr	r0, [pc, #248]	@ (8007a78 <__mdiff+0x124>)
 800797e:	f000 fcd7 	bl	8008330 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007988:	4610      	mov	r0, r2
 800798a:	b003      	add	sp, #12
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	bfbc      	itt	lt
 8007992:	464b      	movlt	r3, r9
 8007994:	46a1      	movlt	r9, r4
 8007996:	4630      	mov	r0, r6
 8007998:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800799c:	bfba      	itte	lt
 800799e:	461c      	movlt	r4, r3
 80079a0:	2501      	movlt	r5, #1
 80079a2:	2500      	movge	r5, #0
 80079a4:	f7ff fd48 	bl	8007438 <_Balloc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	b918      	cbnz	r0, 80079b4 <__mdiff+0x60>
 80079ac:	4b31      	ldr	r3, [pc, #196]	@ (8007a74 <__mdiff+0x120>)
 80079ae:	f240 2145 	movw	r1, #581	@ 0x245
 80079b2:	e7e3      	b.n	800797c <__mdiff+0x28>
 80079b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079b8:	6926      	ldr	r6, [r4, #16]
 80079ba:	60c5      	str	r5, [r0, #12]
 80079bc:	f109 0310 	add.w	r3, r9, #16
 80079c0:	f109 0514 	add.w	r5, r9, #20
 80079c4:	f104 0e14 	add.w	lr, r4, #20
 80079c8:	f100 0b14 	add.w	fp, r0, #20
 80079cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	46d9      	mov	r9, fp
 80079d8:	f04f 0c00 	mov.w	ip, #0
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	fa1f f38a 	uxth.w	r3, sl
 80079ec:	4619      	mov	r1, r3
 80079ee:	b283      	uxth	r3, r0
 80079f0:	1acb      	subs	r3, r1, r3
 80079f2:	0c00      	lsrs	r0, r0, #16
 80079f4:	4463      	add	r3, ip
 80079f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a04:	4576      	cmp	r6, lr
 8007a06:	f849 3b04 	str.w	r3, [r9], #4
 8007a0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a0e:	d8e5      	bhi.n	80079dc <__mdiff+0x88>
 8007a10:	1b33      	subs	r3, r6, r4
 8007a12:	3b15      	subs	r3, #21
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	3415      	adds	r4, #21
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	42a6      	cmp	r6, r4
 8007a1e:	bf38      	it	cc
 8007a20:	2304      	movcc	r3, #4
 8007a22:	441d      	add	r5, r3
 8007a24:	445b      	add	r3, fp
 8007a26:	461e      	mov	r6, r3
 8007a28:	462c      	mov	r4, r5
 8007a2a:	4544      	cmp	r4, r8
 8007a2c:	d30e      	bcc.n	8007a4c <__mdiff+0xf8>
 8007a2e:	f108 0103 	add.w	r1, r8, #3
 8007a32:	1b49      	subs	r1, r1, r5
 8007a34:	f021 0103 	bic.w	r1, r1, #3
 8007a38:	3d03      	subs	r5, #3
 8007a3a:	45a8      	cmp	r8, r5
 8007a3c:	bf38      	it	cc
 8007a3e:	2100      	movcc	r1, #0
 8007a40:	440b      	add	r3, r1
 8007a42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a46:	b191      	cbz	r1, 8007a6e <__mdiff+0x11a>
 8007a48:	6117      	str	r7, [r2, #16]
 8007a4a:	e79d      	b.n	8007988 <__mdiff+0x34>
 8007a4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a50:	46e6      	mov	lr, ip
 8007a52:	0c08      	lsrs	r0, r1, #16
 8007a54:	fa1c fc81 	uxtah	ip, ip, r1
 8007a58:	4471      	add	r1, lr
 8007a5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a64:	f846 1b04 	str.w	r1, [r6], #4
 8007a68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a6c:	e7dd      	b.n	8007a2a <__mdiff+0xd6>
 8007a6e:	3f01      	subs	r7, #1
 8007a70:	e7e7      	b.n	8007a42 <__mdiff+0xee>
 8007a72:	bf00      	nop
 8007a74:	080086c0 	.word	0x080086c0
 8007a78:	080086d1 	.word	0x080086d1

08007a7c <__d2b>:
 8007a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	460f      	mov	r7, r1
 8007a82:	2101      	movs	r1, #1
 8007a84:	ec59 8b10 	vmov	r8, r9, d0
 8007a88:	4616      	mov	r6, r2
 8007a8a:	f7ff fcd5 	bl	8007438 <_Balloc>
 8007a8e:	4604      	mov	r4, r0
 8007a90:	b930      	cbnz	r0, 8007aa0 <__d2b+0x24>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <__d2b+0xa8>)
 8007a96:	4824      	ldr	r0, [pc, #144]	@ (8007b28 <__d2b+0xac>)
 8007a98:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a9c:	f000 fc48 	bl	8008330 <__assert_func>
 8007aa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007aa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa8:	b10d      	cbz	r5, 8007aae <__d2b+0x32>
 8007aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ab4:	d023      	beq.n	8007afe <__d2b+0x82>
 8007ab6:	4668      	mov	r0, sp
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	f7ff fd84 	bl	80075c6 <__lo0bits>
 8007abe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ac2:	b1d0      	cbz	r0, 8007afa <__d2b+0x7e>
 8007ac4:	f1c0 0320 	rsb	r3, r0, #32
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	430b      	orrs	r3, r1
 8007ace:	40c2      	lsrs	r2, r0
 8007ad0:	6163      	str	r3, [r4, #20]
 8007ad2:	9201      	str	r2, [sp, #4]
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	61a3      	str	r3, [r4, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bf0c      	ite	eq
 8007adc:	2201      	moveq	r2, #1
 8007ade:	2202      	movne	r2, #2
 8007ae0:	6122      	str	r2, [r4, #16]
 8007ae2:	b1a5      	cbz	r5, 8007b0e <__d2b+0x92>
 8007ae4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ae8:	4405      	add	r5, r0
 8007aea:	603d      	str	r5, [r7, #0]
 8007aec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007af0:	6030      	str	r0, [r6, #0]
 8007af2:	4620      	mov	r0, r4
 8007af4:	b003      	add	sp, #12
 8007af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007afa:	6161      	str	r1, [r4, #20]
 8007afc:	e7ea      	b.n	8007ad4 <__d2b+0x58>
 8007afe:	a801      	add	r0, sp, #4
 8007b00:	f7ff fd61 	bl	80075c6 <__lo0bits>
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	6163      	str	r3, [r4, #20]
 8007b08:	3020      	adds	r0, #32
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	e7e8      	b.n	8007ae0 <__d2b+0x64>
 8007b0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b16:	6038      	str	r0, [r7, #0]
 8007b18:	6918      	ldr	r0, [r3, #16]
 8007b1a:	f7ff fd35 	bl	8007588 <__hi0bits>
 8007b1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b22:	e7e5      	b.n	8007af0 <__d2b+0x74>
 8007b24:	080086c0 	.word	0x080086c0
 8007b28:	080086d1 	.word	0x080086d1

08007b2c <__ssputs_r>:
 8007b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	688e      	ldr	r6, [r1, #8]
 8007b32:	461f      	mov	r7, r3
 8007b34:	42be      	cmp	r6, r7
 8007b36:	680b      	ldr	r3, [r1, #0]
 8007b38:	4682      	mov	sl, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	4690      	mov	r8, r2
 8007b3e:	d82d      	bhi.n	8007b9c <__ssputs_r+0x70>
 8007b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b48:	d026      	beq.n	8007b98 <__ssputs_r+0x6c>
 8007b4a:	6965      	ldr	r5, [r4, #20]
 8007b4c:	6909      	ldr	r1, [r1, #16]
 8007b4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b52:	eba3 0901 	sub.w	r9, r3, r1
 8007b56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b5a:	1c7b      	adds	r3, r7, #1
 8007b5c:	444b      	add	r3, r9
 8007b5e:	106d      	asrs	r5, r5, #1
 8007b60:	429d      	cmp	r5, r3
 8007b62:	bf38      	it	cc
 8007b64:	461d      	movcc	r5, r3
 8007b66:	0553      	lsls	r3, r2, #21
 8007b68:	d527      	bpl.n	8007bba <__ssputs_r+0x8e>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7ff fbd8 	bl	8007320 <_malloc_r>
 8007b70:	4606      	mov	r6, r0
 8007b72:	b360      	cbz	r0, 8007bce <__ssputs_r+0xa2>
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	464a      	mov	r2, r9
 8007b78:	f000 fbcc 	bl	8008314 <memcpy>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	6126      	str	r6, [r4, #16]
 8007b8a:	6165      	str	r5, [r4, #20]
 8007b8c:	444e      	add	r6, r9
 8007b8e:	eba5 0509 	sub.w	r5, r5, r9
 8007b92:	6026      	str	r6, [r4, #0]
 8007b94:	60a5      	str	r5, [r4, #8]
 8007b96:	463e      	mov	r6, r7
 8007b98:	42be      	cmp	r6, r7
 8007b9a:	d900      	bls.n	8007b9e <__ssputs_r+0x72>
 8007b9c:	463e      	mov	r6, r7
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	f000 fb6a 	bl	800827c <memmove>
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	1b9b      	subs	r3, r3, r6
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	4433      	add	r3, r6
 8007bb2:	6023      	str	r3, [r4, #0]
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	462a      	mov	r2, r5
 8007bbc:	f000 fbfc 	bl	80083b8 <_realloc_r>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1e0      	bne.n	8007b88 <__ssputs_r+0x5c>
 8007bc6:	6921      	ldr	r1, [r4, #16]
 8007bc8:	4650      	mov	r0, sl
 8007bca:	f7ff fb35 	bl	8007238 <_free_r>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	f8ca 3000 	str.w	r3, [sl]
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007be0:	e7e9      	b.n	8007bb6 <__ssputs_r+0x8a>
	...

08007be4 <_svfiprintf_r>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	4698      	mov	r8, r3
 8007bea:	898b      	ldrh	r3, [r1, #12]
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	b09d      	sub	sp, #116	@ 0x74
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	d510      	bpl.n	8007c1a <_svfiprintf_r+0x36>
 8007bf8:	690b      	ldr	r3, [r1, #16]
 8007bfa:	b973      	cbnz	r3, 8007c1a <_svfiprintf_r+0x36>
 8007bfc:	2140      	movs	r1, #64	@ 0x40
 8007bfe:	f7ff fb8f 	bl	8007320 <_malloc_r>
 8007c02:	6028      	str	r0, [r5, #0]
 8007c04:	6128      	str	r0, [r5, #16]
 8007c06:	b930      	cbnz	r0, 8007c16 <_svfiprintf_r+0x32>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c10:	b01d      	add	sp, #116	@ 0x74
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	2340      	movs	r3, #64	@ 0x40
 8007c18:	616b      	str	r3, [r5, #20]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1e:	2320      	movs	r3, #32
 8007c20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c28:	2330      	movs	r3, #48	@ 0x30
 8007c2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dc8 <_svfiprintf_r+0x1e4>
 8007c2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c32:	f04f 0901 	mov.w	r9, #1
 8007c36:	4623      	mov	r3, r4
 8007c38:	469a      	mov	sl, r3
 8007c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3e:	b10a      	cbz	r2, 8007c44 <_svfiprintf_r+0x60>
 8007c40:	2a25      	cmp	r2, #37	@ 0x25
 8007c42:	d1f9      	bne.n	8007c38 <_svfiprintf_r+0x54>
 8007c44:	ebba 0b04 	subs.w	fp, sl, r4
 8007c48:	d00b      	beq.n	8007c62 <_svfiprintf_r+0x7e>
 8007c4a:	465b      	mov	r3, fp
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff ff6b 	bl	8007b2c <__ssputs_r>
 8007c56:	3001      	adds	r0, #1
 8007c58:	f000 80a7 	beq.w	8007daa <_svfiprintf_r+0x1c6>
 8007c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c5e:	445a      	add	r2, fp
 8007c60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c62:	f89a 3000 	ldrb.w	r3, [sl]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 809f 	beq.w	8007daa <_svfiprintf_r+0x1c6>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c76:	f10a 0a01 	add.w	sl, sl, #1
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	9307      	str	r3, [sp, #28]
 8007c7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c84:	4654      	mov	r4, sl
 8007c86:	2205      	movs	r2, #5
 8007c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8c:	484e      	ldr	r0, [pc, #312]	@ (8007dc8 <_svfiprintf_r+0x1e4>)
 8007c8e:	f7f8 faa7 	bl	80001e0 <memchr>
 8007c92:	9a04      	ldr	r2, [sp, #16]
 8007c94:	b9d8      	cbnz	r0, 8007cce <_svfiprintf_r+0xea>
 8007c96:	06d0      	lsls	r0, r2, #27
 8007c98:	bf44      	itt	mi
 8007c9a:	2320      	movmi	r3, #32
 8007c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca0:	0711      	lsls	r1, r2, #28
 8007ca2:	bf44      	itt	mi
 8007ca4:	232b      	movmi	r3, #43	@ 0x2b
 8007ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007caa:	f89a 3000 	ldrb.w	r3, [sl]
 8007cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb0:	d015      	beq.n	8007cde <_svfiprintf_r+0xfa>
 8007cb2:	9a07      	ldr	r2, [sp, #28]
 8007cb4:	4654      	mov	r4, sl
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f04f 0c0a 	mov.w	ip, #10
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc2:	3b30      	subs	r3, #48	@ 0x30
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	d94b      	bls.n	8007d60 <_svfiprintf_r+0x17c>
 8007cc8:	b1b0      	cbz	r0, 8007cf8 <_svfiprintf_r+0x114>
 8007cca:	9207      	str	r2, [sp, #28]
 8007ccc:	e014      	b.n	8007cf8 <_svfiprintf_r+0x114>
 8007cce:	eba0 0308 	sub.w	r3, r0, r8
 8007cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	46a2      	mov	sl, r4
 8007cdc:	e7d2      	b.n	8007c84 <_svfiprintf_r+0xa0>
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	1d19      	adds	r1, r3, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	9103      	str	r1, [sp, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bfbb      	ittet	lt
 8007cea:	425b      	neglt	r3, r3
 8007cec:	f042 0202 	orrlt.w	r2, r2, #2
 8007cf0:	9307      	strge	r3, [sp, #28]
 8007cf2:	9307      	strlt	r3, [sp, #28]
 8007cf4:	bfb8      	it	lt
 8007cf6:	9204      	strlt	r2, [sp, #16]
 8007cf8:	7823      	ldrb	r3, [r4, #0]
 8007cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cfc:	d10a      	bne.n	8007d14 <_svfiprintf_r+0x130>
 8007cfe:	7863      	ldrb	r3, [r4, #1]
 8007d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d02:	d132      	bne.n	8007d6a <_svfiprintf_r+0x186>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	1d1a      	adds	r2, r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	9203      	str	r2, [sp, #12]
 8007d0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d10:	3402      	adds	r4, #2
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dd8 <_svfiprintf_r+0x1f4>
 8007d18:	7821      	ldrb	r1, [r4, #0]
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	f7f8 fa5f 	bl	80001e0 <memchr>
 8007d22:	b138      	cbz	r0, 8007d34 <_svfiprintf_r+0x150>
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	eba0 000a 	sub.w	r0, r0, sl
 8007d2a:	2240      	movs	r2, #64	@ 0x40
 8007d2c:	4082      	lsls	r2, r0
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	3401      	adds	r4, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d38:	4824      	ldr	r0, [pc, #144]	@ (8007dcc <_svfiprintf_r+0x1e8>)
 8007d3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d3e:	2206      	movs	r2, #6
 8007d40:	f7f8 fa4e 	bl	80001e0 <memchr>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d036      	beq.n	8007db6 <_svfiprintf_r+0x1d2>
 8007d48:	4b21      	ldr	r3, [pc, #132]	@ (8007dd0 <_svfiprintf_r+0x1ec>)
 8007d4a:	bb1b      	cbnz	r3, 8007d94 <_svfiprintf_r+0x1b0>
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	3307      	adds	r3, #7
 8007d50:	f023 0307 	bic.w	r3, r3, #7
 8007d54:	3308      	adds	r3, #8
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5a:	4433      	add	r3, r6
 8007d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5e:	e76a      	b.n	8007c36 <_svfiprintf_r+0x52>
 8007d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d64:	460c      	mov	r4, r1
 8007d66:	2001      	movs	r0, #1
 8007d68:	e7a8      	b.n	8007cbc <_svfiprintf_r+0xd8>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	3401      	adds	r4, #1
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	4619      	mov	r1, r3
 8007d72:	f04f 0c0a 	mov.w	ip, #10
 8007d76:	4620      	mov	r0, r4
 8007d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d7c:	3a30      	subs	r2, #48	@ 0x30
 8007d7e:	2a09      	cmp	r2, #9
 8007d80:	d903      	bls.n	8007d8a <_svfiprintf_r+0x1a6>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0c6      	beq.n	8007d14 <_svfiprintf_r+0x130>
 8007d86:	9105      	str	r1, [sp, #20]
 8007d88:	e7c4      	b.n	8007d14 <_svfiprintf_r+0x130>
 8007d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8e:	4604      	mov	r4, r0
 8007d90:	2301      	movs	r3, #1
 8007d92:	e7f0      	b.n	8007d76 <_svfiprintf_r+0x192>
 8007d94:	ab03      	add	r3, sp, #12
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	462a      	mov	r2, r5
 8007d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd4 <_svfiprintf_r+0x1f0>)
 8007d9c:	a904      	add	r1, sp, #16
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7fd fdb0 	bl	8005904 <_printf_float>
 8007da4:	1c42      	adds	r2, r0, #1
 8007da6:	4606      	mov	r6, r0
 8007da8:	d1d6      	bne.n	8007d58 <_svfiprintf_r+0x174>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	065b      	lsls	r3, r3, #25
 8007dae:	f53f af2d 	bmi.w	8007c0c <_svfiprintf_r+0x28>
 8007db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db4:	e72c      	b.n	8007c10 <_svfiprintf_r+0x2c>
 8007db6:	ab03      	add	r3, sp, #12
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <_svfiprintf_r+0x1f0>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7fe f837 	bl	8005e34 <_printf_i>
 8007dc6:	e7ed      	b.n	8007da4 <_svfiprintf_r+0x1c0>
 8007dc8:	0800872a 	.word	0x0800872a
 8007dcc:	08008734 	.word	0x08008734
 8007dd0:	08005905 	.word	0x08005905
 8007dd4:	08007b2d 	.word	0x08007b2d
 8007dd8:	08008730 	.word	0x08008730

08007ddc <__sfputc_r>:
 8007ddc:	6893      	ldr	r3, [r2, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	b410      	push	{r4}
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	da08      	bge.n	8007dfa <__sfputc_r+0x1e>
 8007de8:	6994      	ldr	r4, [r2, #24]
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	db01      	blt.n	8007df2 <__sfputc_r+0x16>
 8007dee:	290a      	cmp	r1, #10
 8007df0:	d103      	bne.n	8007dfa <__sfputc_r+0x1e>
 8007df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df6:	f7fe bab3 	b.w	8006360 <__swbuf_r>
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	1c58      	adds	r0, r3, #1
 8007dfe:	6010      	str	r0, [r2, #0]
 8007e00:	7019      	strb	r1, [r3, #0]
 8007e02:	4608      	mov	r0, r1
 8007e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <__sfputs_r>:
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	4614      	mov	r4, r2
 8007e12:	18d5      	adds	r5, r2, r3
 8007e14:	42ac      	cmp	r4, r5
 8007e16:	d101      	bne.n	8007e1c <__sfputs_r+0x12>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e007      	b.n	8007e2c <__sfputs_r+0x22>
 8007e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e20:	463a      	mov	r2, r7
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffda 	bl	8007ddc <__sfputc_r>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f3      	bne.n	8007e14 <__sfputs_r+0xa>
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e30 <_vfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	460d      	mov	r5, r1
 8007e36:	b09d      	sub	sp, #116	@ 0x74
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4698      	mov	r8, r3
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	b118      	cbz	r0, 8007e48 <_vfiprintf_r+0x18>
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_vfiprintf_r+0x18>
 8007e44:	f7fe f9a0 	bl	8006188 <__sinit>
 8007e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d405      	bmi.n	8007e5a <_vfiprintf_r+0x2a>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	059a      	lsls	r2, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_vfiprintf_r+0x2a>
 8007e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e56:	f7fe fb94 	bl	8006582 <__retarget_lock_acquire_recursive>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	071b      	lsls	r3, r3, #28
 8007e5e:	d501      	bpl.n	8007e64 <_vfiprintf_r+0x34>
 8007e60:	692b      	ldr	r3, [r5, #16]
 8007e62:	b99b      	cbnz	r3, 8007e8c <_vfiprintf_r+0x5c>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7fe fab8 	bl	80063dc <__swsetup_r>
 8007e6c:	b170      	cbz	r0, 8007e8c <_vfiprintf_r+0x5c>
 8007e6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e70:	07dc      	lsls	r4, r3, #31
 8007e72:	d504      	bpl.n	8007e7e <_vfiprintf_r+0x4e>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e78:	b01d      	add	sp, #116	@ 0x74
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	0598      	lsls	r0, r3, #22
 8007e82:	d4f7      	bmi.n	8007e74 <_vfiprintf_r+0x44>
 8007e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e86:	f7fe fb7d 	bl	8006584 <__retarget_lock_release_recursive>
 8007e8a:	e7f3      	b.n	8007e74 <_vfiprintf_r+0x44>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e90:	2320      	movs	r3, #32
 8007e92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e9a:	2330      	movs	r3, #48	@ 0x30
 8007e9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800804c <_vfiprintf_r+0x21c>
 8007ea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ea4:	f04f 0901 	mov.w	r9, #1
 8007ea8:	4623      	mov	r3, r4
 8007eaa:	469a      	mov	sl, r3
 8007eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb0:	b10a      	cbz	r2, 8007eb6 <_vfiprintf_r+0x86>
 8007eb2:	2a25      	cmp	r2, #37	@ 0x25
 8007eb4:	d1f9      	bne.n	8007eaa <_vfiprintf_r+0x7a>
 8007eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eba:	d00b      	beq.n	8007ed4 <_vfiprintf_r+0xa4>
 8007ebc:	465b      	mov	r3, fp
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ffa1 	bl	8007e0a <__sfputs_r>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f000 80a7 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed0:	445a      	add	r2, fp
 8007ed2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 809f 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee8:	f10a 0a01 	add.w	sl, sl, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ef6:	4654      	mov	r4, sl
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4853      	ldr	r0, [pc, #332]	@ (800804c <_vfiprintf_r+0x21c>)
 8007f00:	f7f8 f96e 	bl	80001e0 <memchr>
 8007f04:	9a04      	ldr	r2, [sp, #16]
 8007f06:	b9d8      	cbnz	r0, 8007f40 <_vfiprintf_r+0x110>
 8007f08:	06d1      	lsls	r1, r2, #27
 8007f0a:	bf44      	itt	mi
 8007f0c:	2320      	movmi	r3, #32
 8007f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f12:	0713      	lsls	r3, r2, #28
 8007f14:	bf44      	itt	mi
 8007f16:	232b      	movmi	r3, #43	@ 0x2b
 8007f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f22:	d015      	beq.n	8007f50 <_vfiprintf_r+0x120>
 8007f24:	9a07      	ldr	r2, [sp, #28]
 8007f26:	4654      	mov	r4, sl
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f04f 0c0a 	mov.w	ip, #10
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f34:	3b30      	subs	r3, #48	@ 0x30
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d94b      	bls.n	8007fd2 <_vfiprintf_r+0x1a2>
 8007f3a:	b1b0      	cbz	r0, 8007f6a <_vfiprintf_r+0x13a>
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	e014      	b.n	8007f6a <_vfiprintf_r+0x13a>
 8007f40:	eba0 0308 	sub.w	r3, r0, r8
 8007f44:	fa09 f303 	lsl.w	r3, r9, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	46a2      	mov	sl, r4
 8007f4e:	e7d2      	b.n	8007ef6 <_vfiprintf_r+0xc6>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d19      	adds	r1, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9103      	str	r1, [sp, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfbb      	ittet	lt
 8007f5c:	425b      	neglt	r3, r3
 8007f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f62:	9307      	strge	r3, [sp, #28]
 8007f64:	9307      	strlt	r3, [sp, #28]
 8007f66:	bfb8      	it	lt
 8007f68:	9204      	strlt	r2, [sp, #16]
 8007f6a:	7823      	ldrb	r3, [r4, #0]
 8007f6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f6e:	d10a      	bne.n	8007f86 <_vfiprintf_r+0x156>
 8007f70:	7863      	ldrb	r3, [r4, #1]
 8007f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f74:	d132      	bne.n	8007fdc <_vfiprintf_r+0x1ac>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9203      	str	r2, [sp, #12]
 8007f7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f82:	3402      	adds	r4, #2
 8007f84:	9305      	str	r3, [sp, #20]
 8007f86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800805c <_vfiprintf_r+0x22c>
 8007f8a:	7821      	ldrb	r1, [r4, #0]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f7f8 f926 	bl	80001e0 <memchr>
 8007f94:	b138      	cbz	r0, 8007fa6 <_vfiprintf_r+0x176>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	eba0 000a 	sub.w	r0, r0, sl
 8007f9c:	2240      	movs	r2, #64	@ 0x40
 8007f9e:	4082      	lsls	r2, r0
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	4829      	ldr	r0, [pc, #164]	@ (8008050 <_vfiprintf_r+0x220>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	f7f8 f915 	bl	80001e0 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d03f      	beq.n	800803a <_vfiprintf_r+0x20a>
 8007fba:	4b26      	ldr	r3, [pc, #152]	@ (8008054 <_vfiprintf_r+0x224>)
 8007fbc:	bb1b      	cbnz	r3, 8008006 <_vfiprintf_r+0x1d6>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	443b      	add	r3, r7
 8007fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd0:	e76a      	b.n	8007ea8 <_vfiprintf_r+0x78>
 8007fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7a8      	b.n	8007f2e <_vfiprintf_r+0xfe>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f04f 0c0a 	mov.w	ip, #10
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	3a30      	subs	r2, #48	@ 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_vfiprintf_r+0x1cc>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c6      	beq.n	8007f86 <_vfiprintf_r+0x156>
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	e7c4      	b.n	8007f86 <_vfiprintf_r+0x156>
 8007ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008000:	4604      	mov	r4, r0
 8008002:	2301      	movs	r3, #1
 8008004:	e7f0      	b.n	8007fe8 <_vfiprintf_r+0x1b8>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b12      	ldr	r3, [pc, #72]	@ (8008058 <_vfiprintf_r+0x228>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4630      	mov	r0, r6
 8008012:	f7fd fc77 	bl	8005904 <_printf_float>
 8008016:	4607      	mov	r7, r0
 8008018:	1c78      	adds	r0, r7, #1
 800801a:	d1d6      	bne.n	8007fca <_vfiprintf_r+0x19a>
 800801c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x1fe>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x1fe>
 8008028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800802a:	f7fe faab 	bl	8006584 <__retarget_lock_release_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	065b      	lsls	r3, r3, #25
 8008032:	f53f af1f 	bmi.w	8007e74 <_vfiprintf_r+0x44>
 8008036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008038:	e71e      	b.n	8007e78 <_vfiprintf_r+0x48>
 800803a:	ab03      	add	r3, sp, #12
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	462a      	mov	r2, r5
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <_vfiprintf_r+0x228>)
 8008042:	a904      	add	r1, sp, #16
 8008044:	4630      	mov	r0, r6
 8008046:	f7fd fef5 	bl	8005e34 <_printf_i>
 800804a:	e7e4      	b.n	8008016 <_vfiprintf_r+0x1e6>
 800804c:	0800872a 	.word	0x0800872a
 8008050:	08008734 	.word	0x08008734
 8008054:	08005905 	.word	0x08005905
 8008058:	08007e0b 	.word	0x08007e0b
 800805c:	08008730 	.word	0x08008730

08008060 <__sflush_r>:
 8008060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	0716      	lsls	r6, r2, #28
 800806a:	4605      	mov	r5, r0
 800806c:	460c      	mov	r4, r1
 800806e:	d454      	bmi.n	800811a <__sflush_r+0xba>
 8008070:	684b      	ldr	r3, [r1, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc02      	bgt.n	800807c <__sflush_r+0x1c>
 8008076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	dd48      	ble.n	800810e <__sflush_r+0xae>
 800807c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800807e:	2e00      	cmp	r6, #0
 8008080:	d045      	beq.n	800810e <__sflush_r+0xae>
 8008082:	2300      	movs	r3, #0
 8008084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008088:	682f      	ldr	r7, [r5, #0]
 800808a:	6a21      	ldr	r1, [r4, #32]
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	d030      	beq.n	80080f2 <__sflush_r+0x92>
 8008090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	0759      	lsls	r1, r3, #29
 8008096:	d505      	bpl.n	80080a4 <__sflush_r+0x44>
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800809e:	b10b      	cbz	r3, 80080a4 <__sflush_r+0x44>
 80080a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b0      	blx	r6
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	d106      	bne.n	80080c2 <__sflush_r+0x62>
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	291d      	cmp	r1, #29
 80080b8:	d82b      	bhi.n	8008112 <__sflush_r+0xb2>
 80080ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008164 <__sflush_r+0x104>)
 80080bc:	40ca      	lsrs	r2, r1
 80080be:	07d6      	lsls	r6, r2, #31
 80080c0:	d527      	bpl.n	8008112 <__sflush_r+0xb2>
 80080c2:	2200      	movs	r2, #0
 80080c4:	6062      	str	r2, [r4, #4]
 80080c6:	04d9      	lsls	r1, r3, #19
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	d504      	bpl.n	80080d8 <__sflush_r+0x78>
 80080ce:	1c42      	adds	r2, r0, #1
 80080d0:	d101      	bne.n	80080d6 <__sflush_r+0x76>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	b903      	cbnz	r3, 80080d8 <__sflush_r+0x78>
 80080d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80080d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080da:	602f      	str	r7, [r5, #0]
 80080dc:	b1b9      	cbz	r1, 800810e <__sflush_r+0xae>
 80080de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e2:	4299      	cmp	r1, r3
 80080e4:	d002      	beq.n	80080ec <__sflush_r+0x8c>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff f8a6 	bl	8007238 <_free_r>
 80080ec:	2300      	movs	r3, #0
 80080ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f0:	e00d      	b.n	800810e <__sflush_r+0xae>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b0      	blx	r6
 80080f8:	4602      	mov	r2, r0
 80080fa:	1c50      	adds	r0, r2, #1
 80080fc:	d1c9      	bne.n	8008092 <__sflush_r+0x32>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0c6      	beq.n	8008092 <__sflush_r+0x32>
 8008104:	2b1d      	cmp	r3, #29
 8008106:	d001      	beq.n	800810c <__sflush_r+0xac>
 8008108:	2b16      	cmp	r3, #22
 800810a:	d11e      	bne.n	800814a <__sflush_r+0xea>
 800810c:	602f      	str	r7, [r5, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	e022      	b.n	8008158 <__sflush_r+0xf8>
 8008112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008116:	b21b      	sxth	r3, r3
 8008118:	e01b      	b.n	8008152 <__sflush_r+0xf2>
 800811a:	690f      	ldr	r7, [r1, #16]
 800811c:	2f00      	cmp	r7, #0
 800811e:	d0f6      	beq.n	800810e <__sflush_r+0xae>
 8008120:	0793      	lsls	r3, r2, #30
 8008122:	680e      	ldr	r6, [r1, #0]
 8008124:	bf08      	it	eq
 8008126:	694b      	ldreq	r3, [r1, #20]
 8008128:	600f      	str	r7, [r1, #0]
 800812a:	bf18      	it	ne
 800812c:	2300      	movne	r3, #0
 800812e:	eba6 0807 	sub.w	r8, r6, r7
 8008132:	608b      	str	r3, [r1, #8]
 8008134:	f1b8 0f00 	cmp.w	r8, #0
 8008138:	dde9      	ble.n	800810e <__sflush_r+0xae>
 800813a:	6a21      	ldr	r1, [r4, #32]
 800813c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800813e:	4643      	mov	r3, r8
 8008140:	463a      	mov	r2, r7
 8008142:	4628      	mov	r0, r5
 8008144:	47b0      	blx	r6
 8008146:	2800      	cmp	r0, #0
 8008148:	dc08      	bgt.n	800815c <__sflush_r+0xfc>
 800814a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	4407      	add	r7, r0
 800815e:	eba8 0800 	sub.w	r8, r8, r0
 8008162:	e7e7      	b.n	8008134 <__sflush_r+0xd4>
 8008164:	20400001 	.word	0x20400001

08008168 <_fflush_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	690b      	ldr	r3, [r1, #16]
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b913      	cbnz	r3, 8008178 <_fflush_r+0x10>
 8008172:	2500      	movs	r5, #0
 8008174:	4628      	mov	r0, r5
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	b118      	cbz	r0, 8008182 <_fflush_r+0x1a>
 800817a:	6a03      	ldr	r3, [r0, #32]
 800817c:	b90b      	cbnz	r3, 8008182 <_fflush_r+0x1a>
 800817e:	f7fe f803 	bl	8006188 <__sinit>
 8008182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f3      	beq.n	8008172 <_fflush_r+0xa>
 800818a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800818c:	07d0      	lsls	r0, r2, #31
 800818e:	d404      	bmi.n	800819a <_fflush_r+0x32>
 8008190:	0599      	lsls	r1, r3, #22
 8008192:	d402      	bmi.n	800819a <_fflush_r+0x32>
 8008194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008196:	f7fe f9f4 	bl	8006582 <__retarget_lock_acquire_recursive>
 800819a:	4628      	mov	r0, r5
 800819c:	4621      	mov	r1, r4
 800819e:	f7ff ff5f 	bl	8008060 <__sflush_r>
 80081a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081a4:	07da      	lsls	r2, r3, #31
 80081a6:	4605      	mov	r5, r0
 80081a8:	d4e4      	bmi.n	8008174 <_fflush_r+0xc>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	059b      	lsls	r3, r3, #22
 80081ae:	d4e1      	bmi.n	8008174 <_fflush_r+0xc>
 80081b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081b2:	f7fe f9e7 	bl	8006584 <__retarget_lock_release_recursive>
 80081b6:	e7dd      	b.n	8008174 <_fflush_r+0xc>

080081b8 <__swhatbuf_r>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	460c      	mov	r4, r1
 80081bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c0:	2900      	cmp	r1, #0
 80081c2:	b096      	sub	sp, #88	@ 0x58
 80081c4:	4615      	mov	r5, r2
 80081c6:	461e      	mov	r6, r3
 80081c8:	da0d      	bge.n	80081e6 <__swhatbuf_r+0x2e>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081d0:	f04f 0100 	mov.w	r1, #0
 80081d4:	bf14      	ite	ne
 80081d6:	2340      	movne	r3, #64	@ 0x40
 80081d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081dc:	2000      	movs	r0, #0
 80081de:	6031      	str	r1, [r6, #0]
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	b016      	add	sp, #88	@ 0x58
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	466a      	mov	r2, sp
 80081e8:	f000 f862 	bl	80082b0 <_fstat_r>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	dbec      	blt.n	80081ca <__swhatbuf_r+0x12>
 80081f0:	9901      	ldr	r1, [sp, #4]
 80081f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081fa:	4259      	negs	r1, r3
 80081fc:	4159      	adcs	r1, r3
 80081fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008202:	e7eb      	b.n	80081dc <__swhatbuf_r+0x24>

08008204 <__smakebuf_r>:
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008208:	079d      	lsls	r5, r3, #30
 800820a:	4606      	mov	r6, r0
 800820c:	460c      	mov	r4, r1
 800820e:	d507      	bpl.n	8008220 <__smakebuf_r+0x1c>
 8008210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	2301      	movs	r3, #1
 800821a:	6163      	str	r3, [r4, #20]
 800821c:	b003      	add	sp, #12
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008220:	ab01      	add	r3, sp, #4
 8008222:	466a      	mov	r2, sp
 8008224:	f7ff ffc8 	bl	80081b8 <__swhatbuf_r>
 8008228:	9f00      	ldr	r7, [sp, #0]
 800822a:	4605      	mov	r5, r0
 800822c:	4639      	mov	r1, r7
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff f876 	bl	8007320 <_malloc_r>
 8008234:	b948      	cbnz	r0, 800824a <__smakebuf_r+0x46>
 8008236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823a:	059a      	lsls	r2, r3, #22
 800823c:	d4ee      	bmi.n	800821c <__smakebuf_r+0x18>
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	f043 0302 	orr.w	r3, r3, #2
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	e7e2      	b.n	8008210 <__smakebuf_r+0xc>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	6020      	str	r0, [r4, #0]
 800824e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800825a:	b15b      	cbz	r3, 8008274 <__smakebuf_r+0x70>
 800825c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008260:	4630      	mov	r0, r6
 8008262:	f000 f837 	bl	80082d4 <_isatty_r>
 8008266:	b128      	cbz	r0, 8008274 <__smakebuf_r+0x70>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	431d      	orrs	r5, r3
 8008278:	81a5      	strh	r5, [r4, #12]
 800827a:	e7cf      	b.n	800821c <__smakebuf_r+0x18>

0800827c <memmove>:
 800827c:	4288      	cmp	r0, r1
 800827e:	b510      	push	{r4, lr}
 8008280:	eb01 0402 	add.w	r4, r1, r2
 8008284:	d902      	bls.n	800828c <memmove+0x10>
 8008286:	4284      	cmp	r4, r0
 8008288:	4623      	mov	r3, r4
 800828a:	d807      	bhi.n	800829c <memmove+0x20>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	42a1      	cmp	r1, r4
 8008290:	d008      	beq.n	80082a4 <memmove+0x28>
 8008292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829a:	e7f8      	b.n	800828e <memmove+0x12>
 800829c:	4402      	add	r2, r0
 800829e:	4601      	mov	r1, r0
 80082a0:	428a      	cmp	r2, r1
 80082a2:	d100      	bne.n	80082a6 <memmove+0x2a>
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ae:	e7f7      	b.n	80082a0 <memmove+0x24>

080082b0 <_fstat_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d07      	ldr	r5, [pc, #28]	@ (80082d0 <_fstat_r+0x20>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	602b      	str	r3, [r5, #0]
 80082be:	f7fc fe90 	bl	8004fe2 <_fstat>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d102      	bne.n	80082cc <_fstat_r+0x1c>
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	b103      	cbz	r3, 80082cc <_fstat_r+0x1c>
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	200004bc 	.word	0x200004bc

080082d4 <_isatty_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d06      	ldr	r5, [pc, #24]	@ (80082f0 <_isatty_r+0x1c>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7fc fe8d 	bl	8004ffe <_isatty>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_isatty_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_isatty_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	200004bc 	.word	0x200004bc

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	@ (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f9 fbc8 	bl	8001a94 <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200004bc 	.word	0x200004bc

08008314 <memcpy>:
 8008314:	440a      	add	r2, r1
 8008316:	4291      	cmp	r1, r2
 8008318:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800831c:	d100      	bne.n	8008320 <memcpy+0xc>
 800831e:	4770      	bx	lr
 8008320:	b510      	push	{r4, lr}
 8008322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832a:	4291      	cmp	r1, r2
 800832c:	d1f9      	bne.n	8008322 <memcpy+0xe>
 800832e:	bd10      	pop	{r4, pc}

08008330 <__assert_func>:
 8008330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008332:	4614      	mov	r4, r2
 8008334:	461a      	mov	r2, r3
 8008336:	4b09      	ldr	r3, [pc, #36]	@ (800835c <__assert_func+0x2c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4605      	mov	r5, r0
 800833c:	68d8      	ldr	r0, [r3, #12]
 800833e:	b14c      	cbz	r4, 8008354 <__assert_func+0x24>
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <__assert_func+0x30>)
 8008342:	9100      	str	r1, [sp, #0]
 8008344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008348:	4906      	ldr	r1, [pc, #24]	@ (8008364 <__assert_func+0x34>)
 800834a:	462b      	mov	r3, r5
 800834c:	f000 f870 	bl	8008430 <fiprintf>
 8008350:	f000 f880 	bl	8008454 <abort>
 8008354:	4b04      	ldr	r3, [pc, #16]	@ (8008368 <__assert_func+0x38>)
 8008356:	461c      	mov	r4, r3
 8008358:	e7f3      	b.n	8008342 <__assert_func+0x12>
 800835a:	bf00      	nop
 800835c:	20000018 	.word	0x20000018
 8008360:	08008745 	.word	0x08008745
 8008364:	08008752 	.word	0x08008752
 8008368:	08008780 	.word	0x08008780

0800836c <_calloc_r>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	fba1 5402 	umull	r5, r4, r1, r2
 8008372:	b934      	cbnz	r4, 8008382 <_calloc_r+0x16>
 8008374:	4629      	mov	r1, r5
 8008376:	f7fe ffd3 	bl	8007320 <_malloc_r>
 800837a:	4606      	mov	r6, r0
 800837c:	b928      	cbnz	r0, 800838a <_calloc_r+0x1e>
 800837e:	4630      	mov	r0, r6
 8008380:	bd70      	pop	{r4, r5, r6, pc}
 8008382:	220c      	movs	r2, #12
 8008384:	6002      	str	r2, [r0, #0]
 8008386:	2600      	movs	r6, #0
 8008388:	e7f9      	b.n	800837e <_calloc_r+0x12>
 800838a:	462a      	mov	r2, r5
 800838c:	4621      	mov	r1, r4
 800838e:	f7fe f87b 	bl	8006488 <memset>
 8008392:	e7f4      	b.n	800837e <_calloc_r+0x12>

08008394 <__ascii_mbtowc>:
 8008394:	b082      	sub	sp, #8
 8008396:	b901      	cbnz	r1, 800839a <__ascii_mbtowc+0x6>
 8008398:	a901      	add	r1, sp, #4
 800839a:	b142      	cbz	r2, 80083ae <__ascii_mbtowc+0x1a>
 800839c:	b14b      	cbz	r3, 80083b2 <__ascii_mbtowc+0x1e>
 800839e:	7813      	ldrb	r3, [r2, #0]
 80083a0:	600b      	str	r3, [r1, #0]
 80083a2:	7812      	ldrb	r2, [r2, #0]
 80083a4:	1e10      	subs	r0, r2, #0
 80083a6:	bf18      	it	ne
 80083a8:	2001      	movne	r0, #1
 80083aa:	b002      	add	sp, #8
 80083ac:	4770      	bx	lr
 80083ae:	4610      	mov	r0, r2
 80083b0:	e7fb      	b.n	80083aa <__ascii_mbtowc+0x16>
 80083b2:	f06f 0001 	mvn.w	r0, #1
 80083b6:	e7f8      	b.n	80083aa <__ascii_mbtowc+0x16>

080083b8 <_realloc_r>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	4607      	mov	r7, r0
 80083be:	4614      	mov	r4, r2
 80083c0:	460d      	mov	r5, r1
 80083c2:	b921      	cbnz	r1, 80083ce <_realloc_r+0x16>
 80083c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	4611      	mov	r1, r2
 80083ca:	f7fe bfa9 	b.w	8007320 <_malloc_r>
 80083ce:	b92a      	cbnz	r2, 80083dc <_realloc_r+0x24>
 80083d0:	f7fe ff32 	bl	8007238 <_free_r>
 80083d4:	4625      	mov	r5, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083dc:	f000 f841 	bl	8008462 <_malloc_usable_size_r>
 80083e0:	4284      	cmp	r4, r0
 80083e2:	4606      	mov	r6, r0
 80083e4:	d802      	bhi.n	80083ec <_realloc_r+0x34>
 80083e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ea:	d8f4      	bhi.n	80083d6 <_realloc_r+0x1e>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4638      	mov	r0, r7
 80083f0:	f7fe ff96 	bl	8007320 <_malloc_r>
 80083f4:	4680      	mov	r8, r0
 80083f6:	b908      	cbnz	r0, 80083fc <_realloc_r+0x44>
 80083f8:	4645      	mov	r5, r8
 80083fa:	e7ec      	b.n	80083d6 <_realloc_r+0x1e>
 80083fc:	42b4      	cmp	r4, r6
 80083fe:	4622      	mov	r2, r4
 8008400:	4629      	mov	r1, r5
 8008402:	bf28      	it	cs
 8008404:	4632      	movcs	r2, r6
 8008406:	f7ff ff85 	bl	8008314 <memcpy>
 800840a:	4629      	mov	r1, r5
 800840c:	4638      	mov	r0, r7
 800840e:	f7fe ff13 	bl	8007238 <_free_r>
 8008412:	e7f1      	b.n	80083f8 <_realloc_r+0x40>

08008414 <__ascii_wctomb>:
 8008414:	4603      	mov	r3, r0
 8008416:	4608      	mov	r0, r1
 8008418:	b141      	cbz	r1, 800842c <__ascii_wctomb+0x18>
 800841a:	2aff      	cmp	r2, #255	@ 0xff
 800841c:	d904      	bls.n	8008428 <__ascii_wctomb+0x14>
 800841e:	228a      	movs	r2, #138	@ 0x8a
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008426:	4770      	bx	lr
 8008428:	700a      	strb	r2, [r1, #0]
 800842a:	2001      	movs	r0, #1
 800842c:	4770      	bx	lr
	...

08008430 <fiprintf>:
 8008430:	b40e      	push	{r1, r2, r3}
 8008432:	b503      	push	{r0, r1, lr}
 8008434:	4601      	mov	r1, r0
 8008436:	ab03      	add	r3, sp, #12
 8008438:	4805      	ldr	r0, [pc, #20]	@ (8008450 <fiprintf+0x20>)
 800843a:	f853 2b04 	ldr.w	r2, [r3], #4
 800843e:	6800      	ldr	r0, [r0, #0]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	f7ff fcf5 	bl	8007e30 <_vfiprintf_r>
 8008446:	b002      	add	sp, #8
 8008448:	f85d eb04 	ldr.w	lr, [sp], #4
 800844c:	b003      	add	sp, #12
 800844e:	4770      	bx	lr
 8008450:	20000018 	.word	0x20000018

08008454 <abort>:
 8008454:	b508      	push	{r3, lr}
 8008456:	2006      	movs	r0, #6
 8008458:	f000 f834 	bl	80084c4 <raise>
 800845c:	2001      	movs	r0, #1
 800845e:	f000 f855 	bl	800850c <_exit>

08008462 <_malloc_usable_size_r>:
 8008462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008466:	1f18      	subs	r0, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfbc      	itt	lt
 800846c:	580b      	ldrlt	r3, [r1, r0]
 800846e:	18c0      	addlt	r0, r0, r3
 8008470:	4770      	bx	lr

08008472 <_raise_r>:
 8008472:	291f      	cmp	r1, #31
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4605      	mov	r5, r0
 8008478:	460c      	mov	r4, r1
 800847a:	d904      	bls.n	8008486 <_raise_r+0x14>
 800847c:	2316      	movs	r3, #22
 800847e:	6003      	str	r3, [r0, #0]
 8008480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008488:	b112      	cbz	r2, 8008490 <_raise_r+0x1e>
 800848a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800848e:	b94b      	cbnz	r3, 80084a4 <_raise_r+0x32>
 8008490:	4628      	mov	r0, r5
 8008492:	f000 f831 	bl	80084f8 <_getpid_r>
 8008496:	4622      	mov	r2, r4
 8008498:	4601      	mov	r1, r0
 800849a:	4628      	mov	r0, r5
 800849c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a0:	f000 b818 	b.w	80084d4 <_kill_r>
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d00a      	beq.n	80084be <_raise_r+0x4c>
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	d103      	bne.n	80084b4 <_raise_r+0x42>
 80084ac:	2316      	movs	r3, #22
 80084ae:	6003      	str	r3, [r0, #0]
 80084b0:	2001      	movs	r0, #1
 80084b2:	e7e7      	b.n	8008484 <_raise_r+0x12>
 80084b4:	2100      	movs	r1, #0
 80084b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084ba:	4620      	mov	r0, r4
 80084bc:	4798      	blx	r3
 80084be:	2000      	movs	r0, #0
 80084c0:	e7e0      	b.n	8008484 <_raise_r+0x12>
	...

080084c4 <raise>:
 80084c4:	4b02      	ldr	r3, [pc, #8]	@ (80084d0 <raise+0xc>)
 80084c6:	4601      	mov	r1, r0
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	f7ff bfd2 	b.w	8008472 <_raise_r>
 80084ce:	bf00      	nop
 80084d0:	20000018 	.word	0x20000018

080084d4 <_kill_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d07      	ldr	r5, [pc, #28]	@ (80084f4 <_kill_r+0x20>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	4611      	mov	r1, r2
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	f000 f80b 	bl	80084fc <_kill>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d102      	bne.n	80084f0 <_kill_r+0x1c>
 80084ea:	682b      	ldr	r3, [r5, #0]
 80084ec:	b103      	cbz	r3, 80084f0 <_kill_r+0x1c>
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	bd38      	pop	{r3, r4, r5, pc}
 80084f2:	bf00      	nop
 80084f4:	200004bc 	.word	0x200004bc

080084f8 <_getpid_r>:
 80084f8:	f7fc bd50 	b.w	8004f9c <_getpid>

080084fc <_kill>:
 80084fc:	4b02      	ldr	r3, [pc, #8]	@ (8008508 <_kill+0xc>)
 80084fe:	2258      	movs	r2, #88	@ 0x58
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008506:	4770      	bx	lr
 8008508:	200004bc 	.word	0x200004bc

0800850c <_exit>:
 800850c:	e7fe      	b.n	800850c <_exit>
	...

08008510 <_init>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr

0800851c <_fini>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr
