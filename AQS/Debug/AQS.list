
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007158  08007158  00008158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007584  08007584  000091dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007584  08007584  00008584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800758c  0800758c  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800758c  0800758c  0000858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007590  08007590  00008590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007594  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  08007770  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007770  00009494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008379  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ac  00000000  00000000  00011585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00012d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064d  00000000  00000000  00013578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702e  00000000  00000000  00013bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a87f  00000000  00000000  0002abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092344  00000000  00000000  00035472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c77b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003778  00000000  00000000  000c77fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000caf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007140 	.word	0x08007140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007140 	.word	0x08007140

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f001 fc99 	bl	8002868 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000240 	.word	0x20000240

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	214e      	movs	r1, #78	@ 0x4e
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f001 fc69 	bl	8002868 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000240 	.word	0x20000240

08000fa4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fa8:	2032      	movs	r0, #50	@ 0x32
 8000faa:	f000 fc7f 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fae:	2030      	movs	r0, #48	@ 0x30
 8000fb0:	f7ff ff98 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f000 fc79 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fba:	2030      	movs	r0, #48	@ 0x30
 8000fbc:	f7ff ff92 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f000 fc73 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc6:	2030      	movs	r0, #48	@ 0x30
 8000fc8:	f7ff ff8c 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fc6d 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fd2:	2020      	movs	r0, #32
 8000fd4:	f7ff ff86 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f000 fc67 	bl	80018ac <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f7ff ff80 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fc61 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff7a 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fc5b 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff ff74 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fc55 	bl	80018ac <HAL_Delay>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fc52 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001008:	2006      	movs	r0, #6
 800100a:	f7ff ff6b 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fc4c 	bl	80018ac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001014:	200c      	movs	r0, #12
 8001016:	f7ff ff65 	bl	8000ee4 <lcd_send_cmd>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001026:	e006      	b.n	8001036 <lcd_send_string+0x18>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff87 	bl	8000f44 <lcd_send_data>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f4      	bne.n	8001028 <lcd_send_string+0xa>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Read_MQ135>:
extern void initialise_monitor_handles(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_MQ135() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001052:	480b      	ldr	r0, [pc, #44]	@ (8001080 <Read_MQ135+0x38>)
 8001054:	f000 fc92 	bl	800197c <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001058:	210a      	movs	r1, #10
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Read_MQ135+0x38>)
 800105c:	f000 fd75 	bl	8001b4a <HAL_ADC_PollForConversion>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Read_MQ135+0x38>)
 8001068:	f000 fdfa 	bl	8001c60 <HAL_ADC_GetValue>
 800106c:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <Read_MQ135+0x38>)
 8001070:	f000 fd38 	bl	8001ae4 <HAL_ADC_Stop>
    return adc_value;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f8 	.word	0x200001f8

08001084 <update_measurement>:

void update_measurement(MQ135_Data *data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    data->voltage = (Read_MQ135() * 2.97f) / 4095.0f;	// obliczenie napięcia 2.97 V VrefADC - voltomierz
 800108c:	f7ff ffdc 	bl	8001048 <Read_MQ135>
 8001090:	ee07 0a90 	vmov	s15, r0
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800117c <update_measurement+0xf8>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001180 <update_measurement+0xfc>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a00 	vstr	s15, [r3]
    data->Rs = ((5.0f - data->voltage) / data->voltage) * 10.0f;  // R_load = 10 kΩ - zmierzone omomierzem, 5V - Vcc
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edc3 7a01 	vstr	s15, [r3, #4]
    data->gci = 116.602f * powf((data->Rs / R0), -2.769f);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001184 <update_measurement+0x100>
 80010de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e2:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001188 <update_measurement+0x104>
 80010e6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ea:	f002 ff66 	bl	8003fba <powf>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800118c <update_measurement+0x108>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edc3 7a02 	vstr	s15, [r3, #8]

    // ograniczenie GCI do 20000
    if (data->gci > 20000) data->gci = 20000;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a02 	vldr	s15, [r3, #8]
 8001106:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001190 <update_measurement+0x10c>
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	dd02      	ble.n	800111a <update_measurement+0x96>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <update_measurement+0x110>)
 8001118:	609a      	str	r2, [r3, #8]

    // klasyfikacja jakosci powietrza
    if (data->gci < 500) data->air_quality_level = 0;       // :D
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001198 <update_measurement+0x114>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d503      	bpl.n	8001136 <update_measurement+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	731a      	strb	r2, [r3, #12]
 *
 * WARSZAWA:
 * w Rivierze:
 * na dworze:
 * */
}
 8001134:	e01e      	b.n	8001174 <update_measurement+0xf0>
    else if (data->gci < 1000) data->air_quality_level = 1;  // :)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a02 	vldr	s15, [r3, #8]
 800113c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800119c <update_measurement+0x118>
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d503      	bpl.n	8001152 <update_measurement+0xce>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	731a      	strb	r2, [r3, #12]
}
 8001150:	e010      	b.n	8001174 <update_measurement+0xf0>
    else if (data->gci < 3000) data->air_quality_level = 2; // :|
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a02 	vldr	s15, [r3, #8]
 8001158:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011a0 <update_measurement+0x11c>
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d503      	bpl.n	800116e <update_measurement+0xea>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	731a      	strb	r2, [r3, #12]
}
 800116c:	e002      	b.n	8001174 <update_measurement+0xf0>
    else data->air_quality_level = 3;                       // :(
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	731a      	strb	r2, [r3, #12]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	403e147b 	.word	0x403e147b
 8001180:	457ff000 	.word	0x457ff000
 8001184:	4285051f 	.word	0x4285051f
 8001188:	c031374c 	.word	0xc031374c
 800118c:	42e93439 	.word	0x42e93439
 8001190:	469c4000 	.word	0x469c4000
 8001194:	469c4000 	.word	0x469c4000
 8001198:	43fa0000 	.word	0x43fa0000
 800119c:	447a0000 	.word	0x447a0000
 80011a0:	453b8000 	.word	0x453b8000

080011a4 <I2C_Scan>:
//             data->sensor.co2_ppm,
//             data->sensor.air_quality_level);
//    HC05_Send(msg);
//}

void I2C_Scan() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
    printf("Scanning I2C bus...\r\n");
 80011aa:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <I2C_Scan+0x50>)
 80011ac:	f004 f84a 	bl	8005244 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 80011b0:	2301      	movs	r3, #1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	e014      	b.n	80011e0 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b299      	uxth	r1, r3
 80011be:	230a      	movs	r3, #10
 80011c0:	2201      	movs	r2, #1
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <I2C_Scan+0x54>)
 80011c4:	f001 fc4e 	bl	8002a64 <HAL_I2C_IsDeviceReady>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <I2C_Scan+0x36>
            printf("Found device at 0x%02X\r\n", addr << 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <I2C_Scan+0x58>)
 80011d6:	f003 ffcd 	bl	8005174 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3301      	adds	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dae6      	bge.n	80011b6 <I2C_Scan+0x12>
        }
    }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08007158 	.word	0x08007158
 80011f8:	20000240 	.word	0x20000240
 80011fc:	08007170 	.word	0x08007170

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f000 fadf 	bl	80017c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 800120a:	f002 fe59 	bl	8003ec0 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f833 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 f91b 	bl	800144c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001216:	f000 f899 	bl	800134c <MX_ADC1_Init>
  MX_I2C1_Init();
 800121a:	f000 f8e9 	bl	80013f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja struktury
  MQ135_Data data;
  // inicjalizacja ekranu
  lcd_init();
 800121e:	f7ff fec1 	bl	8000fa4 <lcd_init>

  lcd_send_cmd (0x80|0x00);
 8001222:	2080      	movs	r0, #128	@ 0x80
 8001224:	f7ff fe5e 	bl	8000ee4 <lcd_send_cmd>
  lcd_send_string("HELLO WORLD");
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <main+0x70>)
 800122a:	f7ff fef8 	bl	800101e <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_measurement(&data);
 800122e:	463b      	mov	r3, r7
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff27 	bl	8001084 <update_measurement>
	    printf("Napięcie: %.2f V | GCI: %.2f | Poziom: %d\r\n",
	           data.voltage, data.gci, data.air_quality_level);
 8001236:	683b      	ldr	r3, [r7, #0]
	    printf("Napięcie: %.2f V | GCI: %.2f | Poziom: %d\r\n",
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f98d 	bl	8000558 <__aeabi_f2d>
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
	           data.voltage, data.gci, data.air_quality_level);
 8001242:	68bb      	ldr	r3, [r7, #8]
	    printf("Napięcie: %.2f V | GCI: %.2f | Poziom: %d\r\n",
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f987 	bl	8000558 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
	           data.voltage, data.gci, data.air_quality_level);
 800124e:	7b39      	ldrb	r1, [r7, #12]
	    printf("Napięcie: %.2f V | GCI: %.2f | Poziom: %d\r\n",
 8001250:	9102      	str	r1, [sp, #8]
 8001252:	e9cd 2300 	strd	r2, r3, [sp]
 8001256:	4622      	mov	r2, r4
 8001258:	462b      	mov	r3, r5
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <main+0x74>)
 800125c:	f003 ff8a 	bl	8005174 <iprintf>

      HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001264:	f000 fb22 	bl	80018ac <HAL_Delay>

      I2C_Scan();
 8001268:	f7ff ff9c 	bl	80011a4 <I2C_Scan>
	  update_measurement(&data);
 800126c:	bf00      	nop
 800126e:	e7de      	b.n	800122e <main+0x2e>
 8001270:	0800718c 	.word	0x0800718c
 8001274:	08007198 	.word	0x08007198

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	@ 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	@ 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f8bc 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <SystemClock_Config+0xcc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <SystemClock_Config+0xd0>)
 80012c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e8:	2308      	movs	r3, #8
 80012ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012ec:	23c0      	movs	r3, #192	@ 0xc0
 80012ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 ff3b 	bl	8003178 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001308:	f000 f902 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001318:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2103      	movs	r1, #3
 800132a:	4618      	mov	r0, r3
 800132c:	f002 f99c 	bl	8003668 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001336:	f000 f8eb 	bl	8001510 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	@ 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001360:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <MX_ADC1_Init+0x9c>)
 8001362:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_ADC1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_ADC1_Init+0x98>)
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <MX_ADC1_Init+0xa0>)
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_ADC1_Init+0x98>)
 8001398:	2201      	movs	r2, #1
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_ADC1_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_ADC1_Init+0x98>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	@ (80013e4 <MX_ADC1_Init+0x98>)
 80013ac:	f000 faa2 	bl	80018f4 <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 f8ab 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_ADC1_Init+0x98>)
 80013cc:	f000 fc56 	bl	8001c7c <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013d6:	f000 f89b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001f8 	.word	0x200001f8
 80013e8:	40012000 	.word	0x40012000
 80013ec:	0f000001 	.word	0x0f000001

080013f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <MX_I2C1_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C1_Init+0x50>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MX_I2C1_Init+0x58>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_I2C1_Init+0x50>)
 800140e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <MX_I2C1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_I2C1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_I2C1_Init+0x50>)
 800142e:	f001 f8d7 	bl	80025e0 <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 f86a 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000240 	.word	0x20000240
 8001444:	40005400 	.word	0x40005400
 8001448:	000186a0 	.word	0x000186a0

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <MX_GPIO_Init+0xb8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <MX_GPIO_Init+0xb8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_GPIO_Init+0xb8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_GPIO_Init+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <MX_GPIO_Init+0xb8>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_GPIO_Init+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_GPIO_Init+0xb8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <MX_GPIO_Init+0xb8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_GPIO_Init+0xb8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014bc:	4812      	ldr	r0, [pc, #72]	@ (8001508 <MX_GPIO_Init+0xbc>)
 80014be:	f001 f875 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 80014c2:	2301      	movs	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_GPIO_Init+0xc0>)
 80014d8:	f000 fee4 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80014dc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_GPIO_Init+0xbc>)
 80014f6:	f000 fed5 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020000 	.word	0x40020000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001530:	6453      	str	r3, [r2, #68]	@ 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	@ (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155a:	2007      	movs	r0, #7
 800155c:	f000 fe6e 	bl	800223c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_ADC_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d127      	bne.n	80015de <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a15      	ldr	r2, [pc, #84]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_ADC_MspInit+0x80>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <HAL_ADC_MspInit+0x84>)
 80015da:	f000 fe63 	bl	80022a4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012000 	.word	0x40012000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_I2C_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001632:	23c0      	movs	r3, #192	@ 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <HAL_I2C_MspInit+0x8c>)
 800164e:	f000 fe29 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_I2C_MspInit+0x88>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40005400 	.word	0x40005400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020400 	.word	0x40020400

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <NMI_Handler+0x4>

0800168c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <MemManage_Handler+0x4>

0800169c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <UsageFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 f8c7 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f003 fec8 	bl	80054a8 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000294 	.word	0x20000294
 800174c:	20000498 	.word	0x20000498

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 fe87 	bl	80054b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fd2b 	bl	8001200 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017b8:	08007594 	.word	0x08007594
  ldr r2, =_sbss
 80017bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017c0:	20000494 	.word	0x20000494

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 fd23 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fe8e 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fd2d 	bl	800228a <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001848:	f000 fd03 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	20000298 	.word	0x20000298

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000298 	.word	0x20000298

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e033      	b.n	8001972 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fe2a 	bl	800156c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 faca 	bl	8001ee0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
 8001962:	e001      	b.n	8001968 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Start+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	e097      	b.n	8001ac6 <HAL_ADC_Start+0x14a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d018      	beq.n	80019de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019bc:	4b45      	ldr	r3, [pc, #276]	@ (8001ad4 <HAL_ADC_Start+0x158>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a45      	ldr	r2, [pc, #276]	@ (8001ad8 <HAL_ADC_Start+0x15c>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9a      	lsrs	r2, r3, #18
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d15f      	bne.n	8001aac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f023 0206 	bic.w	r2, r3, #6
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_ADC_Start+0x160>)
 8001a4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a54:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d129      	bne.n	8001ac4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e020      	b.n	8001ac4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a16      	ldr	r2, [pc, #88]	@ (8001ae0 <HAL_ADC_Start+0x164>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_ADC_Start+0x148>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d114      	bne.n	8001ac4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	40012000 	.word	0x40012000

08001ae4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Stop+0x16>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e021      	b.n	8001b3e <HAL_ADC_Stop+0x5a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b66:	d113      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b76:	d10b      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e063      	b.n	8001c58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b90:	f7ff fe80 	bl	8001894 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b96:	e021      	b.n	8001bdc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b9e:	d01d      	beq.n	8001bdc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x6c>
 8001ba6:	f7ff fe75 	bl	8001894 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d212      	bcs.n	8001bdc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d00b      	beq.n	8001bdc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e03d      	b.n	8001c58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d1d6      	bne.n	8001b98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0212 	mvn.w	r2, #18
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d123      	bne.n	8001c56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11f      	bne.n	8001c56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d111      	bne.n	8001c56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1c>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e113      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x244>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d925      	bls.n	8001cf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68d9      	ldr	r1, [r3, #12]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b1e      	subs	r3, #30
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68d9      	ldr	r1, [r3, #12]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4403      	add	r3, r0
 8001ce6:	3b1e      	subs	r3, #30
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	e022      	b.n	8001d3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	2207      	movs	r2, #7
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6919      	ldr	r1, [r3, #16]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4403      	add	r3, r0
 8001d30:	409a      	lsls	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d824      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	3b05      	subs	r3, #5
 8001d54:	221f      	movs	r2, #31
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b05      	subs	r3, #5
 8001d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d8a:	e04c      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d824      	bhi.n	8001dde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b23      	subs	r3, #35	@ 0x23
 8001da6:	221f      	movs	r2, #31
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b23      	subs	r3, #35	@ 0x23
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ddc:	e023      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	3b41      	subs	r3, #65	@ 0x41
 8001df0:	221f      	movs	r2, #31
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b41      	subs	r3, #65	@ 0x41
 8001e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e26:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <HAL_ADC_ConfigChannel+0x250>)
 8001e28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x254>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10f      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1d8>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d10b      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x254>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12b      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x23a>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x258>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <HAL_ADC_ConfigChannel+0x1f4>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d122      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x258>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d111      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_ADC_ConfigChannel+0x260>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	0c9a      	lsrs	r2, r3, #18
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f9      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40012300 	.word	0x40012300
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	10000012 	.word	0x10000012
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee8:	4b79      	ldr	r3, [pc, #484]	@ (80020d0 <ADC_Init+0x1f0>)
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	021a      	lsls	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	4a58      	ldr	r2, [pc, #352]	@ (80020d4 <ADC_Init+0x1f4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	e00f      	b.n	8001fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fdc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0202 	bic.w	r2, r2, #2
 8001fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e1b      	ldrb	r3, [r3, #24]
 8001ff8:	005a      	lsls	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800201a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800202a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	3b01      	subs	r3, #1
 8002038:	035a      	lsls	r2, r3, #13
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e007      	b.n	8002054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002052:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	3b01      	subs	r3, #1
 8002070:	051a      	lsls	r2, r3, #20
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002096:	025a      	lsls	r2, r3, #9
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	029a      	lsls	r2, r3, #10
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40012300 	.word	0x40012300
 80020d4:	0f000001 	.word	0x0f000001

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff47 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff5c 	bl	8002120 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffb0 	bl	80021f8 <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e159      	b.n	8002574 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8148 	bne.w	800256e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d005      	beq.n	80022f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d017      	beq.n	8002394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a2 	beq.w	800256e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b57      	ldr	r3, [pc, #348]	@ (800258c <HAL_GPIO_Init+0x2e8>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a56      	ldr	r2, [pc, #344]	@ (800258c <HAL_GPIO_Init+0x2e8>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b54      	ldr	r3, [pc, #336]	@ (800258c <HAL_GPIO_Init+0x2e8>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_GPIO_Init+0x2ec>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_GPIO_Init+0x2f0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x202>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_GPIO_Init+0x2f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x1fe>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a47      	ldr	r2, [pc, #284]	@ (800259c <HAL_GPIO_Init+0x2f8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x1fa>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <HAL_GPIO_Init+0x2fc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x1f6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a45      	ldr	r2, [pc, #276]	@ (80025a4 <HAL_GPIO_Init+0x300>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x1f2>
 8002492:	2304      	movs	r3, #4
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x204>
 8002496:	2307      	movs	r3, #7
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x204>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x204>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x204>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x204>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b8:	4935      	ldr	r1, [pc, #212]	@ (8002590 <HAL_GPIO_Init+0x2ec>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a2f      	ldr	r2, [pc, #188]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a24      	ldr	r2, [pc, #144]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251a:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253e:	4a1a      	ldr	r2, [pc, #104]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002568:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f aea2 	bls.w	80022c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e12b      	b.n	800284a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fff4 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002644:	f001 fa08 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a81      	ldr	r2, [pc, #516]	@ (8002854 <HAL_I2C_Init+0x274>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d807      	bhi.n	8002664 <HAL_I2C_Init+0x84>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a80      	ldr	r2, [pc, #512]	@ (8002858 <HAL_I2C_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e006      	b.n	8002672 <HAL_I2C_Init+0x92>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a7d      	ldr	r2, [pc, #500]	@ (800285c <HAL_I2C_Init+0x27c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e7      	b.n	800284a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a78      	ldr	r2, [pc, #480]	@ (8002860 <HAL_I2C_Init+0x280>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_I2C_Init+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d802      	bhi.n	80026b4 <HAL_I2C_Init+0xd4>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e009      	b.n	80026c8 <HAL_I2C_Init+0xe8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a69      	ldr	r2, [pc, #420]	@ (8002864 <HAL_I2C_Init+0x284>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	495c      	ldr	r1, [pc, #368]	@ (8002854 <HAL_I2C_Init+0x274>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d819      	bhi.n	800271c <HAL_I2C_Init+0x13c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_I2C_Init+0x138>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	e051      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x168>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x18e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x196>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
 8002878:	4613      	mov	r3, r2
 800287a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff f80a 	bl	8001894 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 80e0 	bne.w	8002a50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2319      	movs	r3, #25
 8002896:	2201      	movs	r2, #1
 8002898:	4970      	ldr	r1, [pc, #448]	@ (8002a5c <HAL_I2C_Master_Transmit+0x1f4>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa92 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0d3      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0x50>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e0cc      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d007      	beq.n	80028de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2221      	movs	r2, #33	@ 0x21
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2210      	movs	r2, #16
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	893a      	ldrh	r2, [r7, #8]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a50      	ldr	r2, [pc, #320]	@ (8002a60 <HAL_I2C_Master_Transmit+0x1f8>)
 800291e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002920:	8979      	ldrh	r1, [r7, #10]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f9ca 	bl	8002cc0 <I2C_MasterRequestWrite>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e08d      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800294c:	e066      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	6a39      	ldr	r1, [r7, #32]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fb50 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b04      	cmp	r3, #4
 8002964:	d107      	bne.n	8002976 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06b      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x188>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6a39      	ldr	r1, [r7, #32]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb47 	bl	8003088 <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01a      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d194      	bne.n	800294e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	00100002 	.word	0x00100002
 8002a60:	ffff0000 	.word	0xffff0000

08002a64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7fe ff0e 	bl	8001894 <HAL_GetTick>
 8002a78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 8111 	bne.w	8002cae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	4988      	ldr	r1, [pc, #544]	@ (8002cb8 <HAL_I2C_IsDeviceReady+0x254>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f994 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e104      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_IsDeviceReady+0x50>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0fd      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2224      	movs	r2, #36	@ 0x24
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a70      	ldr	r2, [pc, #448]	@ (8002cbc <HAL_I2C_IsDeviceReady+0x258>)
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f952 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b34:	d103      	bne.n	8002b3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0b6      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fe9f 	bl	8001894 <HAL_GetTick>
 8002b56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b86:	e025      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fe84 	bl	8001894 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <HAL_I2C_IsDeviceReady+0x13a>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d103      	bne.n	8002ba6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22a0      	movs	r2, #160	@ 0xa0
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bde:	d005      	beq.n	8002bec <HAL_I2C_IsDeviceReady+0x188>
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_I2C_IsDeviceReady+0x188>
 8002be6:	7dbb      	ldrb	r3, [r7, #22]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0cd      	beq.n	8002b88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d129      	bne.n	8002c56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2319      	movs	r3, #25
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4921      	ldr	r1, [pc, #132]	@ (8002cb8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f8c6 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e036      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e02c      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2319      	movs	r3, #25
 8002c76:	2201      	movs	r2, #1
 8002c78:	490f      	ldr	r1, [pc, #60]	@ (8002cb8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8a2 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e012      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f4ff af32 	bcc.w	8002afe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00100002 	.word	0x00100002
 8002cbc:	ffff0000 	.word	0xffff0000

08002cc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d006      	beq.n	8002cea <I2C_MasterRequestWrite+0x2a>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d003      	beq.n	8002cea <I2C_MasterRequestWrite+0x2a>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ce8:	d108      	bne.n	8002cfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00b      	b.n	8002d14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	2b12      	cmp	r3, #18
 8002d02:	d107      	bne.n	8002d14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f84f 	bl	8002dc4 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d3a:	d103      	bne.n	8002d44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e035      	b.n	8002db4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	e01b      	b.n	8002d9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	11db      	asrs	r3, r3, #7
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 0306 	and.w	r3, r3, #6
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f063 030f 	orn	r3, r3, #15
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	490e      	ldr	r1, [pc, #56]	@ (8002dbc <I2C_MasterRequestWrite+0xfc>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f898 	bl	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e010      	b.n	8002db4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4907      	ldr	r1, [pc, #28]	@ (8002dc0 <I2C_MasterRequestWrite+0x100>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f888 	bl	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00010008 	.word	0x00010008
 8002dc0:	00010002 	.word	0x00010002

08002dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd4:	e048      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ddc:	d044      	beq.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7fe fd59 	bl	8001894 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d139      	bne.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10d      	bne.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	e00c      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d116      	bne.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e023      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10d      	bne.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	e00c      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	43da      	mvns	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d093      	beq.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec6:	e071      	b.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d123      	bne.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e067      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f26:	d041      	beq.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fcb4 	bl	8001894 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d136      	bne.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10c      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e00b      	b.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d016      	beq.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e021      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10c      	bne.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e00b      	b.n	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af6d 	bne.w	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003004:	e034      	b.n	8003070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f886 	bl	8003118 <I2C_IsAcknowledgeFailed>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e034      	b.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800301c:	d028      	beq.n	8003070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe fc39 	bl	8001894 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11d      	bne.n	8003070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	2b80      	cmp	r3, #128	@ 0x80
 8003040:	d016      	beq.n	8003070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307a:	2b80      	cmp	r3, #128	@ 0x80
 800307c:	d1c3      	bne.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003094:	e034      	b.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f83e 	bl	8003118 <I2C_IsAcknowledgeFailed>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ac:	d028      	beq.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fe fbf1 	bl	8001894 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d11d      	bne.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d016      	beq.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e007      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d1c3      	bne.n	8003096 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312e:	d11b      	bne.n	8003168 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003138:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e267      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d075      	beq.n	8003282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003196:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00c      	beq.n	80031bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4b85      	ldr	r3, [pc, #532]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d112      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b82      	ldr	r3, [pc, #520]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05b      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d157      	bne.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e242      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x74>
 80031de:	4b76      	ldr	r3, [pc, #472]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b70      	ldr	r3, [pc, #448]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6f      	ldr	r2, [pc, #444]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b6d      	ldr	r3, [pc, #436]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6c      	ldr	r2, [pc, #432]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 8003210:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b66      	ldr	r3, [pc, #408]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a65      	ldr	r2, [pc, #404]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fb30 	bl	8001894 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fb2c 	bl	8001894 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e207      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b5b      	ldr	r3, [pc, #364]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xc0>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fb1c 	bl	8001894 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fb18 	bl	8001894 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1f3      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b51      	ldr	r3, [pc, #324]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0xe8>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d063      	beq.n	8003356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b41      	ldr	r3, [pc, #260]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x152>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1c7      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3b      	ldr	r3, [pc, #236]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4937      	ldr	r1, [pc, #220]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b34      	ldr	r3, [pc, #208]	@ (80033bc <HAL_RCC_OscConfig+0x244>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fad1 	bl	8001894 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe facd 	bl	8001894 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e1a8      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2b      	ldr	r3, [pc, #172]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4925      	ldr	r1, [pc, #148]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <HAL_RCC_OscConfig+0x244>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fab0 	bl	8001894 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003338:	f7fe faac 	bl	8001894 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e187      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d036      	beq.n	80033d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_RCC_OscConfig+0x248>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fa90 	bl	8001894 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fa8c 	bl	8001894 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e167      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_RCC_OscConfig+0x240>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x200>
 8003396:	e01b      	b.n	80033d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_OscConfig+0x248>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe fa79 	bl	8001894 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	e00e      	b.n	80033c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe fa75 	bl	8001894 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d907      	bls.n	80033c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e150      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ea      	bne.n	80033a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b81      	ldr	r3, [pc, #516]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	4b7d      	ldr	r3, [pc, #500]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a7c      	ldr	r2, [pc, #496]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fe:	4b7a      	ldr	r3, [pc, #488]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b77      	ldr	r3, [pc, #476]	@ (80035ec <HAL_RCC_OscConfig+0x474>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4b74      	ldr	r3, [pc, #464]	@ (80035ec <HAL_RCC_OscConfig+0x474>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a73      	ldr	r2, [pc, #460]	@ (80035ec <HAL_RCC_OscConfig+0x474>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fe fa35 	bl	8001894 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fe fa31 	bl	8001894 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e10c      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6a      	ldr	r3, [pc, #424]	@ (80035ec <HAL_RCC_OscConfig+0x474>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x2ea>
 8003454:	4b64      	ldr	r3, [pc, #400]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a63      	ldr	r2, [pc, #396]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x324>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x30c>
 800346a:	4b5f      	ldr	r3, [pc, #380]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a5e      	ldr	r2, [pc, #376]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	4b5c      	ldr	r3, [pc, #368]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	@ 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x324>
 8003484:	4b58      	ldr	r3, [pc, #352]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a57      	ldr	r2, [pc, #348]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	4b55      	ldr	r3, [pc, #340]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a54      	ldr	r2, [pc, #336]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe f9f6 	bl	8001894 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe f9f2 	bl	8001894 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0cb      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b49      	ldr	r3, [pc, #292]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x334>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d0:	f7fe f9e0 	bl	8001894 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe f9dc 	bl	8001894 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0b5      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b3e      	ldr	r3, [pc, #248]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b39      	ldr	r3, [pc, #228]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	4a38      	ldr	r2, [pc, #224]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a1 	beq.w	8003658 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003516:	4b34      	ldr	r3, [pc, #208]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d05c      	beq.n	80035dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d141      	bne.n	80035ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <HAL_RCC_OscConfig+0x478>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe f9b0 	bl	8001894 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe f9ac 	bl	8001894 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e087      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	491b      	ldr	r1, [pc, #108]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCC_OscConfig+0x478>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe f985 	bl	8001894 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe f981 	bl	8001894 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e05c      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x416>
 80035ac:	e054      	b.n	8003658 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <HAL_RCC_OscConfig+0x478>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe f96e 	bl	8001894 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe f96a 	bl	8001894 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e045      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x444>
 80035da:	e03d      	b.n	8003658 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e038      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40007000 	.word	0x40007000
 80035f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4ec>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d028      	beq.n	8003654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d121      	bne.n	8003654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d11a      	bne.n	8003654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800362a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d107      	bne.n	8003654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0cc      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b68      	ldr	r3, [pc, #416]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d90c      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b65      	ldr	r3, [pc, #404]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b63      	ldr	r3, [pc, #396]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b8      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036bc:	4b59      	ldr	r3, [pc, #356]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a58      	ldr	r2, [pc, #352]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d4:	4b53      	ldr	r3, [pc, #332]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a52      	ldr	r2, [pc, #328]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4b50      	ldr	r3, [pc, #320]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	494d      	ldr	r1, [pc, #308]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d044      	beq.n	8003788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d003      	beq.n	8003726 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	2b03      	cmp	r3, #3
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e067      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4934      	ldr	r1, [pc, #208]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003758:	f7fe f89c 	bl	8001894 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe f898 	bl	8001894 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e04f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b2b      	ldr	r3, [pc, #172]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003788:	4b25      	ldr	r3, [pc, #148]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d20c      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b22      	ldr	r3, [pc, #136]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e032      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037bc:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4916      	ldr	r1, [pc, #88]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037da:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	490e      	ldr	r1, [pc, #56]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ee:	f000 f821 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	490a      	ldr	r1, [pc, #40]	@ (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	5ccb      	ldrb	r3, [r1, r3]
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	4a09      	ldr	r2, [pc, #36]	@ (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fffc 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00
 8003824:	40023800 	.word	0x40023800
 8003828:	080071c8 	.word	0x080071c8
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003838:	b094      	sub	sp, #80	@ 0x50
 800383a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800384c:	4b79      	ldr	r3, [pc, #484]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d00d      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x40>
 8003858:	2b08      	cmp	r3, #8
 800385a:	f200 80e1 	bhi.w	8003a20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x34>
 8003862:	2b04      	cmp	r3, #4
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x3a>
 8003866:	e0db      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x204>)
 800386a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800386c:	e0db      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386e:	4b73      	ldr	r3, [pc, #460]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003872:	e0d8      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4b6f      	ldr	r3, [pc, #444]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	2200      	movs	r2, #0
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003894:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389c:	633b      	str	r3, [r7, #48]	@ 0x30
 800389e:	2300      	movs	r3, #0
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	f04f 0000 	mov.w	r0, #0
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	0159      	lsls	r1, r3, #5
 80038b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b8:	0150      	lsls	r0, r2, #5
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4621      	mov	r1, r4
 80038c0:	1a51      	subs	r1, r2, r1
 80038c2:	6139      	str	r1, [r7, #16]
 80038c4:	4629      	mov	r1, r5
 80038c6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d8:	4659      	mov	r1, fp
 80038da:	018b      	lsls	r3, r1, #6
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e2:	4651      	mov	r1, sl
 80038e4:	018a      	lsls	r2, r1, #6
 80038e6:	4651      	mov	r1, sl
 80038e8:	ebb2 0801 	subs.w	r8, r2, r1
 80038ec:	4659      	mov	r1, fp
 80038ee:	eb63 0901 	sbc.w	r9, r3, r1
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003906:	4690      	mov	r8, r2
 8003908:	4699      	mov	r9, r3
 800390a:	4623      	mov	r3, r4
 800390c:	eb18 0303 	adds.w	r3, r8, r3
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	462b      	mov	r3, r5
 8003914:	eb49 0303 	adc.w	r3, r9, r3
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003926:	4629      	mov	r1, r5
 8003928:	024b      	lsls	r3, r1, #9
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003930:	4621      	mov	r1, r4
 8003932:	024a      	lsls	r2, r1, #9
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	2200      	movs	r2, #0
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003944:	f7fd f938 	bl	8000bb8 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003950:	e058      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b38      	ldr	r3, [pc, #224]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	2200      	movs	r2, #0
 800395a:	4618      	mov	r0, r3
 800395c:	4611      	mov	r1, r2
 800395e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
 8003968:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	f04f 0000 	mov.w	r0, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	0159      	lsls	r1, r3, #5
 800397a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397e:	0150      	lsls	r0, r2, #5
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4641      	mov	r1, r8
 8003986:	ebb2 0a01 	subs.w	sl, r2, r1
 800398a:	4649      	mov	r1, r9
 800398c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800399c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a4:	ebb2 040a 	subs.w	r4, r2, sl
 80039a8:	eb63 050b 	sbc.w	r5, r3, fp
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	00eb      	lsls	r3, r5, #3
 80039b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ba:	00e2      	lsls	r2, r4, #3
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	18e3      	adds	r3, r4, r3
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	464b      	mov	r3, r9
 80039c8:	eb45 0303 	adc.w	r3, r5, r3
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039da:	4629      	mov	r1, r5
 80039dc:	028b      	lsls	r3, r1, #10
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e4:	4621      	mov	r1, r4
 80039e6:	028a      	lsls	r2, r1, #10
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	61fa      	str	r2, [r7, #28]
 80039f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f8:	f7fd f8de 	bl	8000bb8 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3750      	adds	r7, #80	@ 0x50
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a44:	4b03      	ldr	r3, [pc, #12]	@ (8003a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000000 	.word	0x20000000

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff fff0 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0a9b      	lsrs	r3, r3, #10
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	@ (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	080071d8 	.word	0x080071d8

08003a80 <findslot>:
 8003a80:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <findslot+0x2c>)
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	b118      	cbz	r0, 8003a92 <findslot+0x12>
 8003a8a:	6a03      	ldr	r3, [r0, #32]
 8003a8c:	b90b      	cbnz	r3, 8003a92 <findslot+0x12>
 8003a8e:	f001 fb3b 	bl	8005108 <__sinit>
 8003a92:	2c13      	cmp	r4, #19
 8003a94:	d807      	bhi.n	8003aa6 <findslot+0x26>
 8003a96:	4806      	ldr	r0, [pc, #24]	@ (8003ab0 <findslot+0x30>)
 8003a98:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003a9c:	3201      	adds	r2, #1
 8003a9e:	d002      	beq.n	8003aa6 <findslot+0x26>
 8003aa0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e7fc      	b.n	8003aa4 <findslot+0x24>
 8003aaa:	bf00      	nop
 8003aac:	20000020 	.word	0x20000020
 8003ab0:	200002a8 	.word	0x200002a8

08003ab4 <error>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	f001 fcf6 	bl	80054a8 <__errno>
 8003abc:	2613      	movs	r6, #19
 8003abe:	4605      	mov	r5, r0
 8003ac0:	2700      	movs	r7, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	beab      	bkpt	0x00ab
 8003ac8:	4606      	mov	r6, r0
 8003aca:	602e      	str	r6, [r5, #0]
 8003acc:	4620      	mov	r0, r4
 8003ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ad0 <checkerror>:
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d101      	bne.n	8003ad8 <checkerror+0x8>
 8003ad4:	f7ff bfee 	b.w	8003ab4 <error>
 8003ad8:	4770      	bx	lr

08003ada <_swiread>:
 8003ada:	b530      	push	{r4, r5, lr}
 8003adc:	b085      	sub	sp, #20
 8003ade:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003ae2:	9203      	str	r2, [sp, #12]
 8003ae4:	2406      	movs	r4, #6
 8003ae6:	ad01      	add	r5, sp, #4
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	beab      	bkpt	0x00ab
 8003aee:	4604      	mov	r4, r0
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7ff ffed 	bl	8003ad0 <checkerror>
 8003af6:	b005      	add	sp, #20
 8003af8:	bd30      	pop	{r4, r5, pc}

08003afa <_read>:
 8003afa:	b570      	push	{r4, r5, r6, lr}
 8003afc:	460e      	mov	r6, r1
 8003afe:	4614      	mov	r4, r2
 8003b00:	f7ff ffbe 	bl	8003a80 <findslot>
 8003b04:	4605      	mov	r5, r0
 8003b06:	b930      	cbnz	r0, 8003b16 <_read+0x1c>
 8003b08:	f001 fcce 	bl	80054a8 <__errno>
 8003b0c:	2309      	movs	r3, #9
 8003b0e:	6003      	str	r3, [r0, #0]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	6800      	ldr	r0, [r0, #0]
 8003b18:	4622      	mov	r2, r4
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	f7ff ffdd 	bl	8003ada <_swiread>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d0f5      	beq.n	8003b10 <_read+0x16>
 8003b24:	686b      	ldr	r3, [r5, #4]
 8003b26:	1a20      	subs	r0, r4, r0
 8003b28:	4403      	add	r3, r0
 8003b2a:	606b      	str	r3, [r5, #4]
 8003b2c:	e7f2      	b.n	8003b14 <_read+0x1a>

08003b2e <_swilseek>:
 8003b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b30:	460c      	mov	r4, r1
 8003b32:	4616      	mov	r6, r2
 8003b34:	f7ff ffa4 	bl	8003a80 <findslot>
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b940      	cbnz	r0, 8003b4e <_swilseek+0x20>
 8003b3c:	f001 fcb4 	bl	80054a8 <__errno>
 8003b40:	2309      	movs	r3, #9
 8003b42:	6003      	str	r3, [r0, #0]
 8003b44:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b48:	4620      	mov	r0, r4
 8003b4a:	b003      	add	sp, #12
 8003b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4e:	2e02      	cmp	r6, #2
 8003b50:	d903      	bls.n	8003b5a <_swilseek+0x2c>
 8003b52:	f001 fca9 	bl	80054a8 <__errno>
 8003b56:	2316      	movs	r3, #22
 8003b58:	e7f3      	b.n	8003b42 <_swilseek+0x14>
 8003b5a:	2e01      	cmp	r6, #1
 8003b5c:	d112      	bne.n	8003b84 <_swilseek+0x56>
 8003b5e:	6843      	ldr	r3, [r0, #4]
 8003b60:	18e4      	adds	r4, r4, r3
 8003b62:	d4f6      	bmi.n	8003b52 <_swilseek+0x24>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	260a      	movs	r6, #10
 8003b68:	e9cd 3400 	strd	r3, r4, [sp]
 8003b6c:	466f      	mov	r7, sp
 8003b6e:	4630      	mov	r0, r6
 8003b70:	4639      	mov	r1, r7
 8003b72:	beab      	bkpt	0x00ab
 8003b74:	4606      	mov	r6, r0
 8003b76:	4630      	mov	r0, r6
 8003b78:	f7ff ffaa 	bl	8003ad0 <checkerror>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	dbe1      	blt.n	8003b44 <_swilseek+0x16>
 8003b80:	606c      	str	r4, [r5, #4]
 8003b82:	e7e1      	b.n	8003b48 <_swilseek+0x1a>
 8003b84:	2e02      	cmp	r6, #2
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	d1ec      	bne.n	8003b64 <_swilseek+0x36>
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	260c      	movs	r6, #12
 8003b8e:	466f      	mov	r7, sp
 8003b90:	4630      	mov	r0, r6
 8003b92:	4639      	mov	r1, r7
 8003b94:	beab      	bkpt	0x00ab
 8003b96:	4606      	mov	r6, r0
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff ff99 	bl	8003ad0 <checkerror>
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	d0d0      	beq.n	8003b44 <_swilseek+0x16>
 8003ba2:	4404      	add	r4, r0
 8003ba4:	e7de      	b.n	8003b64 <_swilseek+0x36>

08003ba6 <_lseek>:
 8003ba6:	f7ff bfc2 	b.w	8003b2e <_swilseek>

08003baa <_swiwrite>:
 8003baa:	b530      	push	{r4, r5, lr}
 8003bac:	b085      	sub	sp, #20
 8003bae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	2405      	movs	r4, #5
 8003bb6:	ad01      	add	r5, sp, #4
 8003bb8:	4620      	mov	r0, r4
 8003bba:	4629      	mov	r1, r5
 8003bbc:	beab      	bkpt	0x00ab
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff ff85 	bl	8003ad0 <checkerror>
 8003bc6:	b005      	add	sp, #20
 8003bc8:	bd30      	pop	{r4, r5, pc}

08003bca <_write>:
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	460e      	mov	r6, r1
 8003bce:	4615      	mov	r5, r2
 8003bd0:	f7ff ff56 	bl	8003a80 <findslot>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	b930      	cbnz	r0, 8003be6 <_write+0x1c>
 8003bd8:	f001 fc66 	bl	80054a8 <__errno>
 8003bdc:	2309      	movs	r3, #9
 8003bde:	6003      	str	r3, [r0, #0]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	6800      	ldr	r0, [r0, #0]
 8003be8:	462a      	mov	r2, r5
 8003bea:	4631      	mov	r1, r6
 8003bec:	f7ff ffdd 	bl	8003baa <_swiwrite>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	dbf5      	blt.n	8003be0 <_write+0x16>
 8003bf4:	6862      	ldr	r2, [r4, #4]
 8003bf6:	1ae8      	subs	r0, r5, r3
 8003bf8:	4402      	add	r2, r0
 8003bfa:	42ab      	cmp	r3, r5
 8003bfc:	6062      	str	r2, [r4, #4]
 8003bfe:	d1f1      	bne.n	8003be4 <_write+0x1a>
 8003c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7ff bf55 	b.w	8003ab4 <error>

08003c0a <_swiclose>:
 8003c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0c:	2402      	movs	r4, #2
 8003c0e:	9001      	str	r0, [sp, #4]
 8003c10:	ad01      	add	r5, sp, #4
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	beab      	bkpt	0x00ab
 8003c18:	4604      	mov	r4, r0
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff58 	bl	8003ad0 <checkerror>
 8003c20:	b003      	add	sp, #12
 8003c22:	bd30      	pop	{r4, r5, pc}

08003c24 <_close>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4605      	mov	r5, r0
 8003c28:	f7ff ff2a 	bl	8003a80 <findslot>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	b930      	cbnz	r0, 8003c3e <_close+0x1a>
 8003c30:	f001 fc3a 	bl	80054a8 <__errno>
 8003c34:	2309      	movs	r3, #9
 8003c36:	6003      	str	r3, [r0, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	3d01      	subs	r5, #1
 8003c40:	2d01      	cmp	r5, #1
 8003c42:	d809      	bhi.n	8003c58 <_close+0x34>
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <_close+0x48>)
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d104      	bne.n	8003c58 <_close+0x34>
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c52:	6003      	str	r3, [r0, #0]
 8003c54:	2000      	movs	r0, #0
 8003c56:	e7f1      	b.n	8003c3c <_close+0x18>
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	f7ff ffd6 	bl	8003c0a <_swiclose>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1ec      	bne.n	8003c3c <_close+0x18>
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	e7e8      	b.n	8003c3c <_close+0x18>
 8003c6a:	bf00      	nop
 8003c6c:	200002a8 	.word	0x200002a8

08003c70 <_getpid>:
 8003c70:	2001      	movs	r0, #1
 8003c72:	4770      	bx	lr

08003c74 <_swistat>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	460c      	mov	r4, r1
 8003c78:	f7ff ff02 	bl	8003a80 <findslot>
 8003c7c:	4605      	mov	r5, r0
 8003c7e:	b930      	cbnz	r0, 8003c8e <_swistat+0x1a>
 8003c80:	f001 fc12 	bl	80054a8 <__errno>
 8003c84:	2309      	movs	r3, #9
 8003c86:	6003      	str	r3, [r0, #0]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c9a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003c9c:	260c      	movs	r6, #12
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	beab      	bkpt	0x00ab
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7ff ff12 	bl	8003ad0 <checkerror>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d0eb      	beq.n	8003c88 <_swistat+0x14>
 8003cb0:	6120      	str	r0, [r4, #16]
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7ea      	b.n	8003c8c <_swistat+0x18>

08003cb6 <_fstat>:
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	2258      	movs	r2, #88	@ 0x58
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fb9f 	bl	8005404 <memset>
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	4620      	mov	r0, r4
 8003cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cce:	f7ff bfd1 	b.w	8003c74 <_swistat>

08003cd2 <_stat>:
 8003cd2:	b538      	push	{r3, r4, r5, lr}
 8003cd4:	460d      	mov	r5, r1
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	2258      	movs	r2, #88	@ 0x58
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f001 fb91 	bl	8005404 <memset>
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f000 f811 	bl	8003d0c <_swiopen>
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	4604      	mov	r4, r0
 8003cee:	d00b      	beq.n	8003d08 <_stat+0x36>
 8003cf0:	686b      	ldr	r3, [r5, #4]
 8003cf2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003cf6:	606b      	str	r3, [r5, #4]
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f7ff ffbb 	bl	8003c74 <_swistat>
 8003cfe:	4605      	mov	r5, r0
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7ff ff8f 	bl	8003c24 <_close>
 8003d06:	462c      	mov	r4, r5
 8003d08:	4620      	mov	r0, r4
 8003d0a:	bd38      	pop	{r3, r4, r5, pc}

08003d0c <_swiopen>:
 8003d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8003dbc <_swiopen+0xb0>
 8003d14:	b096      	sub	sp, #88	@ 0x58
 8003d16:	4607      	mov	r7, r0
 8003d18:	460e      	mov	r6, r1
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8003d20:	3301      	adds	r3, #1
 8003d22:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003d26:	d032      	beq.n	8003d8e <_swiopen+0x82>
 8003d28:	3401      	adds	r4, #1
 8003d2a:	2c14      	cmp	r4, #20
 8003d2c:	d1f6      	bne.n	8003d1c <_swiopen+0x10>
 8003d2e:	f001 fbbb 	bl	80054a8 <__errno>
 8003d32:	2318      	movs	r3, #24
 8003d34:	e03a      	b.n	8003dac <_swiopen+0xa0>
 8003d36:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003d3a:	f240 6301 	movw	r3, #1537	@ 0x601
 8003d3e:	07b2      	lsls	r2, r6, #30
 8003d40:	bf48      	it	mi
 8003d42:	f045 0502 	orrmi.w	r5, r5, #2
 8003d46:	421e      	tst	r6, r3
 8003d48:	bf18      	it	ne
 8003d4a:	f045 0504 	orrne.w	r5, r5, #4
 8003d4e:	0733      	lsls	r3, r6, #28
 8003d50:	bf48      	it	mi
 8003d52:	f025 0504 	bicmi.w	r5, r5, #4
 8003d56:	4638      	mov	r0, r7
 8003d58:	bf48      	it	mi
 8003d5a:	f045 0508 	orrmi.w	r5, r5, #8
 8003d5e:	9700      	str	r7, [sp, #0]
 8003d60:	f7fc fa8e 	bl	8000280 <strlen>
 8003d64:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003d68:	2501      	movs	r5, #1
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	beab      	bkpt	0x00ab
 8003d70:	4605      	mov	r5, r0
 8003d72:	2d00      	cmp	r5, #0
 8003d74:	db06      	blt.n	8003d84 <_swiopen+0x78>
 8003d76:	44c8      	add	r8, r9
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8003d7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003d82:	e016      	b.n	8003db2 <_swiopen+0xa6>
 8003d84:	4628      	mov	r0, r5
 8003d86:	f7ff fe95 	bl	8003ab4 <error>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	e011      	b.n	8003db2 <_swiopen+0xa6>
 8003d8e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003d92:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d96:	46ea      	mov	sl, sp
 8003d98:	d1cd      	bne.n	8003d36 <_swiopen+0x2a>
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7ff ff98 	bl	8003cd2 <_stat>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0c7      	beq.n	8003d36 <_swiopen+0x2a>
 8003da6:	f001 fb7f 	bl	80054a8 <__errno>
 8003daa:	2311      	movs	r3, #17
 8003dac:	6003      	str	r3, [r0, #0]
 8003dae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003db2:	4620      	mov	r0, r4
 8003db4:	b016      	add	sp, #88	@ 0x58
 8003db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dba:	bf00      	nop
 8003dbc:	200002a8 	.word	0x200002a8

08003dc0 <_get_semihosting_exts>:
 8003dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	460f      	mov	r7, r1
 8003dc8:	4829      	ldr	r0, [pc, #164]	@ (8003e70 <_get_semihosting_exts+0xb0>)
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4615      	mov	r5, r2
 8003dce:	f7ff ff9d 	bl	8003d0c <_swiopen>
 8003dd2:	462a      	mov	r2, r5
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f001 fb13 	bl	8005404 <memset>
 8003dde:	1c63      	adds	r3, r4, #1
 8003de0:	d014      	beq.n	8003e0c <_get_semihosting_exts+0x4c>
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff fe4c 	bl	8003a80 <findslot>
 8003de8:	f04f 080c 	mov.w	r8, #12
 8003dec:	4681      	mov	r9, r0
 8003dee:	4640      	mov	r0, r8
 8003df0:	4649      	mov	r1, r9
 8003df2:	beab      	bkpt	0x00ab
 8003df4:	4680      	mov	r8, r0
 8003df6:	4640      	mov	r0, r8
 8003df8:	f7ff fe6a 	bl	8003ad0 <checkerror>
 8003dfc:	2803      	cmp	r0, #3
 8003dfe:	dd02      	ble.n	8003e06 <_get_semihosting_exts+0x46>
 8003e00:	1ec3      	subs	r3, r0, #3
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	dc07      	bgt.n	8003e16 <_get_semihosting_exts+0x56>
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff ff0c 	bl	8003c24 <_close>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e10:	b003      	add	sp, #12
 8003e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e16:	2204      	movs	r2, #4
 8003e18:	eb0d 0102 	add.w	r1, sp, r2
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fe6c 	bl	8003afa <_read>
 8003e22:	2803      	cmp	r0, #3
 8003e24:	ddef      	ble.n	8003e06 <_get_semihosting_exts+0x46>
 8003e26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e2a:	2b53      	cmp	r3, #83	@ 0x53
 8003e2c:	d1eb      	bne.n	8003e06 <_get_semihosting_exts+0x46>
 8003e2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e32:	2b48      	cmp	r3, #72	@ 0x48
 8003e34:	d1e7      	bne.n	8003e06 <_get_semihosting_exts+0x46>
 8003e36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e3a:	2b46      	cmp	r3, #70	@ 0x46
 8003e3c:	d1e3      	bne.n	8003e06 <_get_semihosting_exts+0x46>
 8003e3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e42:	2b42      	cmp	r3, #66	@ 0x42
 8003e44:	d1df      	bne.n	8003e06 <_get_semihosting_exts+0x46>
 8003e46:	2201      	movs	r2, #1
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7ff fe6f 	bl	8003b2e <_swilseek>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dbd8      	blt.n	8003e06 <_get_semihosting_exts+0x46>
 8003e54:	462a      	mov	r2, r5
 8003e56:	4631      	mov	r1, r6
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7ff fe4e 	bl	8003afa <_read>
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4620      	mov	r0, r4
 8003e62:	f7ff fedf 	bl	8003c24 <_close>
 8003e66:	4628      	mov	r0, r5
 8003e68:	f7ff fe32 	bl	8003ad0 <checkerror>
 8003e6c:	e7d0      	b.n	8003e10 <_get_semihosting_exts+0x50>
 8003e6e:	bf00      	nop
 8003e70:	080071e0 	.word	0x080071e0

08003e74 <initialise_semihosting_exts>:
 8003e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e76:	4d0a      	ldr	r5, [pc, #40]	@ (8003ea0 <initialise_semihosting_exts+0x2c>)
 8003e78:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea4 <initialise_semihosting_exts+0x30>)
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	a801      	add	r0, sp, #4
 8003e80:	6029      	str	r1, [r5, #0]
 8003e82:	6022      	str	r2, [r4, #0]
 8003e84:	f7ff ff9c 	bl	8003dc0 <_get_semihosting_exts>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	dd07      	ble.n	8003e9c <initialise_semihosting_exts+0x28>
 8003e8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e90:	f003 0201 	and.w	r2, r3, #1
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	b003      	add	sp, #12
 8003e9e:	bd30      	pop	{r4, r5, pc}
 8003ea0:	20000010 	.word	0x20000010
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <_has_ext_stdout_stderr>:
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4c04      	ldr	r4, [pc, #16]	@ (8003ebc <_has_ext_stdout_stderr+0x14>)
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da01      	bge.n	8003eb6 <_has_ext_stdout_stderr+0xe>
 8003eb2:	f7ff ffdf 	bl	8003e74 <initialise_semihosting_exts>
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <initialise_monitor_handles>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003f78 <initialise_monitor_handles+0xb8>
 8003eca:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ece:	2303      	movs	r3, #3
 8003ed0:	2400      	movs	r4, #0
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	af01      	add	r7, sp, #4
 8003ed6:	9402      	str	r4, [sp, #8]
 8003ed8:	2501      	movs	r5, #1
 8003eda:	4628      	mov	r0, r5
 8003edc:	4639      	mov	r1, r7
 8003ede:	beab      	bkpt	0x00ab
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003f7c <initialise_monitor_handles+0xbc>
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	4c20      	ldr	r4, [pc, #128]	@ (8003f6c <initialise_monitor_handles+0xac>)
 8003eea:	f8c8 5000 	str.w	r5, [r8]
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ef2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	2b14      	cmp	r3, #20
 8003efa:	d1fa      	bne.n	8003ef2 <initialise_monitor_handles+0x32>
 8003efc:	f7ff ffd4 	bl	8003ea8 <_has_ext_stdout_stderr>
 8003f00:	4d1b      	ldr	r5, [pc, #108]	@ (8003f70 <initialise_monitor_handles+0xb0>)
 8003f02:	b1d0      	cbz	r0, 8003f3a <initialise_monitor_handles+0x7a>
 8003f04:	f04f 0a03 	mov.w	sl, #3
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f0e:	2601      	movs	r6, #1
 8003f10:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f14:	9302      	str	r3, [sp, #8]
 8003f16:	4630      	mov	r0, r6
 8003f18:	4639      	mov	r1, r7
 8003f1a:	beab      	bkpt	0x00ab
 8003f1c:	4683      	mov	fp, r0
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <initialise_monitor_handles+0xb4>)
 8003f20:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f24:	f8c3 b000 	str.w	fp, [r3]
 8003f28:	2308      	movs	r3, #8
 8003f2a:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	4630      	mov	r0, r6
 8003f32:	4639      	mov	r1, r7
 8003f34:	beab      	bkpt	0x00ab
 8003f36:	4606      	mov	r6, r0
 8003f38:	602e      	str	r6, [r5, #0]
 8003f3a:	682b      	ldr	r3, [r5, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	bf02      	ittt	eq
 8003f40:	4b0c      	ldreq	r3, [pc, #48]	@ (8003f74 <initialise_monitor_handles+0xb4>)
 8003f42:	681b      	ldreq	r3, [r3, #0]
 8003f44:	602b      	streq	r3, [r5, #0]
 8003f46:	2600      	movs	r6, #0
 8003f48:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	6066      	str	r6, [r4, #4]
 8003f50:	f7ff ffaa 	bl	8003ea8 <_has_ext_stdout_stderr>
 8003f54:	b130      	cbz	r0, 8003f64 <initialise_monitor_handles+0xa4>
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <initialise_monitor_handles+0xb4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003f64:	b005      	add	sp, #20
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200002a8 	.word	0x200002a8
 8003f70:	2000029c 	.word	0x2000029c
 8003f74:	200002a0 	.word	0x200002a0
 8003f78:	080071f6 	.word	0x080071f6
 8003f7c:	200002a4 	.word	0x200002a4

08003f80 <_isatty>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	f7ff fd7d 	bl	8003a80 <findslot>
 8003f86:	2409      	movs	r4, #9
 8003f88:	4605      	mov	r5, r0
 8003f8a:	b920      	cbnz	r0, 8003f96 <_isatty+0x16>
 8003f8c:	f001 fa8c 	bl	80054a8 <__errno>
 8003f90:	6004      	str	r4, [r0, #0]
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	beab      	bkpt	0x00ab
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	2c01      	cmp	r4, #1
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	d0f7      	beq.n	8003f94 <_isatty+0x14>
 8003fa4:	f001 fa80 	bl	80054a8 <__errno>
 8003fa8:	2513      	movs	r5, #19
 8003faa:	4604      	mov	r4, r0
 8003fac:	2600      	movs	r6, #0
 8003fae:	4628      	mov	r0, r5
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	beab      	bkpt	0x00ab
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	6025      	str	r5, [r4, #0]
 8003fb8:	e7eb      	b.n	8003f92 <_isatty+0x12>

08003fba <powf>:
 8003fba:	b508      	push	{r3, lr}
 8003fbc:	ed2d 8b04 	vpush	{d8-d9}
 8003fc0:	eeb0 8a60 	vmov.f32	s16, s1
 8003fc4:	eeb0 9a40 	vmov.f32	s18, s0
 8003fc8:	f000 f858 	bl	800407c <__ieee754_powf>
 8003fcc:	eeb4 8a48 	vcmp.f32	s16, s16
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	eef0 8a40 	vmov.f32	s17, s0
 8003fd8:	d63e      	bvs.n	8004058 <powf+0x9e>
 8003fda:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	d112      	bne.n	800400a <powf+0x50>
 8003fe4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	d039      	beq.n	8004062 <powf+0xa8>
 8003fee:	eeb0 0a48 	vmov.f32	s0, s16
 8003ff2:	f000 f839 	bl	8004068 <finitef>
 8003ff6:	b378      	cbz	r0, 8004058 <powf+0x9e>
 8003ff8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	d52a      	bpl.n	8004058 <powf+0x9e>
 8004002:	f001 fa51 	bl	80054a8 <__errno>
 8004006:	2322      	movs	r3, #34	@ 0x22
 8004008:	e014      	b.n	8004034 <powf+0x7a>
 800400a:	f000 f82d 	bl	8004068 <finitef>
 800400e:	b998      	cbnz	r0, 8004038 <powf+0x7e>
 8004010:	eeb0 0a49 	vmov.f32	s0, s18
 8004014:	f000 f828 	bl	8004068 <finitef>
 8004018:	b170      	cbz	r0, 8004038 <powf+0x7e>
 800401a:	eeb0 0a48 	vmov.f32	s0, s16
 800401e:	f000 f823 	bl	8004068 <finitef>
 8004022:	b148      	cbz	r0, 8004038 <powf+0x7e>
 8004024:	eef4 8a68 	vcmp.f32	s17, s17
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d7e9      	bvc.n	8004002 <powf+0x48>
 800402e:	f001 fa3b 	bl	80054a8 <__errno>
 8004032:	2321      	movs	r3, #33	@ 0x21
 8004034:	6003      	str	r3, [r0, #0]
 8004036:	e00f      	b.n	8004058 <powf+0x9e>
 8004038:	eef5 8a40 	vcmp.f32	s17, #0.0
 800403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004040:	d10a      	bne.n	8004058 <powf+0x9e>
 8004042:	eeb0 0a49 	vmov.f32	s0, s18
 8004046:	f000 f80f 	bl	8004068 <finitef>
 800404a:	b128      	cbz	r0, 8004058 <powf+0x9e>
 800404c:	eeb0 0a48 	vmov.f32	s0, s16
 8004050:	f000 f80a 	bl	8004068 <finitef>
 8004054:	2800      	cmp	r0, #0
 8004056:	d1d4      	bne.n	8004002 <powf+0x48>
 8004058:	eeb0 0a68 	vmov.f32	s0, s17
 800405c:	ecbd 8b04 	vpop	{d8-d9}
 8004060:	bd08      	pop	{r3, pc}
 8004062:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8004066:	e7f7      	b.n	8004058 <powf+0x9e>

08004068 <finitef>:
 8004068:	ee10 3a10 	vmov	r3, s0
 800406c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8004070:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004074:	bfac      	ite	ge
 8004076:	2000      	movge	r0, #0
 8004078:	2001      	movlt	r0, #1
 800407a:	4770      	bx	lr

0800407c <__ieee754_powf>:
 800407c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004080:	ee10 4a90 	vmov	r4, s1
 8004084:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8004088:	ed2d 8b02 	vpush	{d8}
 800408c:	ee10 6a10 	vmov	r6, s0
 8004090:	eeb0 8a40 	vmov.f32	s16, s0
 8004094:	eef0 8a60 	vmov.f32	s17, s1
 8004098:	d10c      	bne.n	80040b4 <__ieee754_powf+0x38>
 800409a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800409e:	0076      	lsls	r6, r6, #1
 80040a0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80040a4:	f240 8274 	bls.w	8004590 <__ieee754_powf+0x514>
 80040a8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80040ac:	ecbd 8b02 	vpop	{d8}
 80040b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80040b8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80040bc:	d802      	bhi.n	80040c4 <__ieee754_powf+0x48>
 80040be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80040c2:	d908      	bls.n	80040d6 <__ieee754_powf+0x5a>
 80040c4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80040c8:	d1ee      	bne.n	80040a8 <__ieee754_powf+0x2c>
 80040ca:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80040ce:	0064      	lsls	r4, r4, #1
 80040d0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80040d4:	e7e6      	b.n	80040a4 <__ieee754_powf+0x28>
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	da1f      	bge.n	800411a <__ieee754_powf+0x9e>
 80040da:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80040de:	f080 8260 	bcs.w	80045a2 <__ieee754_powf+0x526>
 80040e2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80040e6:	d32f      	bcc.n	8004148 <__ieee754_powf+0xcc>
 80040e8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80040ec:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80040f0:	fa49 f503 	asr.w	r5, r9, r3
 80040f4:	fa05 f303 	lsl.w	r3, r5, r3
 80040f8:	454b      	cmp	r3, r9
 80040fa:	d123      	bne.n	8004144 <__ieee754_powf+0xc8>
 80040fc:	f005 0501 	and.w	r5, r5, #1
 8004100:	f1c5 0502 	rsb	r5, r5, #2
 8004104:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8004108:	d11f      	bne.n	800414a <__ieee754_powf+0xce>
 800410a:	2c00      	cmp	r4, #0
 800410c:	f280 8246 	bge.w	800459c <__ieee754_powf+0x520>
 8004110:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004114:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004118:	e7c8      	b.n	80040ac <__ieee754_powf+0x30>
 800411a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800411e:	d111      	bne.n	8004144 <__ieee754_powf+0xc8>
 8004120:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8004124:	f000 8234 	beq.w	8004590 <__ieee754_powf+0x514>
 8004128:	d906      	bls.n	8004138 <__ieee754_powf+0xbc>
 800412a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8004440 <__ieee754_powf+0x3c4>
 800412e:	2c00      	cmp	r4, #0
 8004130:	bfa8      	it	ge
 8004132:	eeb0 0a68 	vmovge.f32	s0, s17
 8004136:	e7b9      	b.n	80040ac <__ieee754_powf+0x30>
 8004138:	2c00      	cmp	r4, #0
 800413a:	f280 822c 	bge.w	8004596 <__ieee754_powf+0x51a>
 800413e:	eeb1 0a68 	vneg.f32	s0, s17
 8004142:	e7b3      	b.n	80040ac <__ieee754_powf+0x30>
 8004144:	2500      	movs	r5, #0
 8004146:	e7dd      	b.n	8004104 <__ieee754_powf+0x88>
 8004148:	2500      	movs	r5, #0
 800414a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800414e:	d102      	bne.n	8004156 <__ieee754_powf+0xda>
 8004150:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004154:	e7aa      	b.n	80040ac <__ieee754_powf+0x30>
 8004156:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800415a:	f040 8227 	bne.w	80045ac <__ieee754_powf+0x530>
 800415e:	2e00      	cmp	r6, #0
 8004160:	f2c0 8224 	blt.w	80045ac <__ieee754_powf+0x530>
 8004164:	eeb0 0a48 	vmov.f32	s0, s16
 8004168:	ecbd 8b02 	vpop	{d8}
 800416c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004170:	f000 bae6 	b.w	8004740 <__ieee754_sqrtf>
 8004174:	2d01      	cmp	r5, #1
 8004176:	d199      	bne.n	80040ac <__ieee754_powf+0x30>
 8004178:	eeb1 0a40 	vneg.f32	s0, s0
 800417c:	e796      	b.n	80040ac <__ieee754_powf+0x30>
 800417e:	0ff0      	lsrs	r0, r6, #31
 8004180:	3801      	subs	r0, #1
 8004182:	ea55 0300 	orrs.w	r3, r5, r0
 8004186:	d104      	bne.n	8004192 <__ieee754_powf+0x116>
 8004188:	ee38 8a48 	vsub.f32	s16, s16, s16
 800418c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004190:	e78c      	b.n	80040ac <__ieee754_powf+0x30>
 8004192:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8004196:	d96d      	bls.n	8004274 <__ieee754_powf+0x1f8>
 8004198:	4baa      	ldr	r3, [pc, #680]	@ (8004444 <__ieee754_powf+0x3c8>)
 800419a:	4598      	cmp	r8, r3
 800419c:	d808      	bhi.n	80041b0 <__ieee754_powf+0x134>
 800419e:	2c00      	cmp	r4, #0
 80041a0:	da0b      	bge.n	80041ba <__ieee754_powf+0x13e>
 80041a2:	2000      	movs	r0, #0
 80041a4:	ecbd 8b02 	vpop	{d8}
 80041a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ac:	f000 bac2 	b.w	8004734 <__math_oflowf>
 80041b0:	4ba5      	ldr	r3, [pc, #660]	@ (8004448 <__ieee754_powf+0x3cc>)
 80041b2:	4598      	cmp	r8, r3
 80041b4:	d908      	bls.n	80041c8 <__ieee754_powf+0x14c>
 80041b6:	2c00      	cmp	r4, #0
 80041b8:	dcf3      	bgt.n	80041a2 <__ieee754_powf+0x126>
 80041ba:	2000      	movs	r0, #0
 80041bc:	ecbd 8b02 	vpop	{d8}
 80041c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c4:	f000 bab0 	b.w	8004728 <__math_uflowf>
 80041c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80041cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80041d0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800444c <__ieee754_powf+0x3d0>
 80041d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80041d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80041dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80041e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80041e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80041e8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8004450 <__ieee754_powf+0x3d4>
 80041ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041f0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8004454 <__ieee754_powf+0x3d8>
 80041f4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80041f8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004458 <__ieee754_powf+0x3dc>
 80041fc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004200:	eeb0 7a67 	vmov.f32	s14, s15
 8004204:	eea0 7a26 	vfma.f32	s14, s0, s13
 8004208:	ee17 3a10 	vmov	r3, s14
 800420c:	f36f 030b 	bfc	r3, #0, #12
 8004210:	ee07 3a10 	vmov	s14, r3
 8004214:	eeb0 6a47 	vmov.f32	s12, s14
 8004218:	eea0 6a66 	vfms.f32	s12, s0, s13
 800421c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004220:	3d01      	subs	r5, #1
 8004222:	4305      	orrs	r5, r0
 8004224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004228:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800422c:	f36f 040b 	bfc	r4, #0, #12
 8004230:	bf18      	it	ne
 8004232:	eeb0 8a66 	vmovne.f32	s16, s13
 8004236:	ee06 4a90 	vmov	s13, r4
 800423a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800423e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8004242:	ee67 7a26 	vmul.f32	s15, s14, s13
 8004246:	eee6 0a07 	vfma.f32	s1, s12, s14
 800424a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800424e:	ee17 1a10 	vmov	r1, s14
 8004252:	2900      	cmp	r1, #0
 8004254:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004258:	f340 80dd 	ble.w	8004416 <__ieee754_powf+0x39a>
 800425c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004260:	f240 80ca 	bls.w	80043f8 <__ieee754_powf+0x37c>
 8004264:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf4c      	ite	mi
 800426e:	2001      	movmi	r0, #1
 8004270:	2000      	movpl	r0, #0
 8004272:	e797      	b.n	80041a4 <__ieee754_powf+0x128>
 8004274:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8004278:	bf01      	itttt	eq
 800427a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800445c <__ieee754_powf+0x3e0>
 800427e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004282:	f06f 0317 	mvneq.w	r3, #23
 8004286:	ee17 7a90 	vmoveq	r7, s15
 800428a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800428e:	bf18      	it	ne
 8004290:	2300      	movne	r3, #0
 8004292:	3a7f      	subs	r2, #127	@ 0x7f
 8004294:	441a      	add	r2, r3
 8004296:	4b72      	ldr	r3, [pc, #456]	@ (8004460 <__ieee754_powf+0x3e4>)
 8004298:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800429c:	429f      	cmp	r7, r3
 800429e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80042a2:	dd06      	ble.n	80042b2 <__ieee754_powf+0x236>
 80042a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004464 <__ieee754_powf+0x3e8>)
 80042a6:	429f      	cmp	r7, r3
 80042a8:	f340 80a4 	ble.w	80043f4 <__ieee754_powf+0x378>
 80042ac:	3201      	adds	r2, #1
 80042ae:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80042b2:	2600      	movs	r6, #0
 80042b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004468 <__ieee754_powf+0x3ec>)
 80042b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80042ba:	ee07 1a10 	vmov	s14, r1
 80042be:	edd3 5a00 	vldr	s11, [r3]
 80042c2:	4b6a      	ldr	r3, [pc, #424]	@ (800446c <__ieee754_powf+0x3f0>)
 80042c4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80042c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042cc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80042d0:	1049      	asrs	r1, r1, #1
 80042d2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80042d6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80042da:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80042de:	ee37 6a65 	vsub.f32	s12, s14, s11
 80042e2:	ee07 1a90 	vmov	s15, r1
 80042e6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80042ea:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80042ee:	ee15 7a10 	vmov	r7, s10
 80042f2:	401f      	ands	r7, r3
 80042f4:	ee06 7a90 	vmov	s13, r7
 80042f8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80042fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8004300:	ee65 7a05 	vmul.f32	s15, s10, s10
 8004304:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004308:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004470 <__ieee754_powf+0x3f4>
 800430c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8004474 <__ieee754_powf+0x3f8>
 8004310:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004314:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004478 <__ieee754_powf+0x3fc>
 8004318:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800431c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800444c <__ieee754_powf+0x3d0>
 8004320:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004324:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800447c <__ieee754_powf+0x400>
 8004328:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800432c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8004480 <__ieee754_powf+0x404>
 8004330:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004334:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004338:	ee35 7a26 	vadd.f32	s14, s10, s13
 800433c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8004340:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004344:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8004348:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800434c:	eef0 5a67 	vmov.f32	s11, s15
 8004350:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8004354:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004358:	ee15 1a90 	vmov	r1, s11
 800435c:	4019      	ands	r1, r3
 800435e:	ee05 1a90 	vmov	s11, r1
 8004362:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004366:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800436a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800436e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004372:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004376:	eeb0 6a67 	vmov.f32	s12, s15
 800437a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800437e:	ee16 1a10 	vmov	r1, s12
 8004382:	4019      	ands	r1, r3
 8004384:	ee06 1a10 	vmov	s12, r1
 8004388:	eeb0 7a46 	vmov.f32	s14, s12
 800438c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8004390:	493c      	ldr	r1, [pc, #240]	@ (8004484 <__ieee754_powf+0x408>)
 8004392:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8004396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800439a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004488 <__ieee754_powf+0x40c>
 800439e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800448c <__ieee754_powf+0x410>
 80043a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004490 <__ieee754_powf+0x414>
 80043aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80043ae:	ed91 7a00 	vldr	s14, [r1]
 80043b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043b6:	ee07 2a10 	vmov	s14, r2
 80043ba:	4a36      	ldr	r2, [pc, #216]	@ (8004494 <__ieee754_powf+0x418>)
 80043bc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80043c0:	eeb0 7a67 	vmov.f32	s14, s15
 80043c4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80043c8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80043cc:	ed92 5a00 	vldr	s10, [r2]
 80043d0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80043d4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80043d8:	ee17 2a10 	vmov	r2, s14
 80043dc:	401a      	ands	r2, r3
 80043de:	ee07 2a10 	vmov	s14, r2
 80043e2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80043e6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80043ea:	eee6 6a65 	vfms.f32	s13, s12, s11
 80043ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80043f2:	e715      	b.n	8004220 <__ieee754_powf+0x1a4>
 80043f4:	2601      	movs	r6, #1
 80043f6:	e75d      	b.n	80042b4 <__ieee754_powf+0x238>
 80043f8:	d152      	bne.n	80044a0 <__ieee754_powf+0x424>
 80043fa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8004498 <__ieee754_powf+0x41c>
 80043fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004402:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004406:	eef4 6ac7 	vcmpe.f32	s13, s14
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	f73f af29 	bgt.w	8004264 <__ieee754_powf+0x1e8>
 8004412:	2386      	movs	r3, #134	@ 0x86
 8004414:	e048      	b.n	80044a8 <__ieee754_powf+0x42c>
 8004416:	4a21      	ldr	r2, [pc, #132]	@ (800449c <__ieee754_powf+0x420>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d907      	bls.n	800442c <__ieee754_powf+0x3b0>
 800441c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	bf4c      	ite	mi
 8004426:	2001      	movmi	r0, #1
 8004428:	2000      	movpl	r0, #0
 800442a:	e6c7      	b.n	80041bc <__ieee754_powf+0x140>
 800442c:	d138      	bne.n	80044a0 <__ieee754_powf+0x424>
 800442e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004432:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	dbea      	blt.n	8004412 <__ieee754_powf+0x396>
 800443c:	e7ee      	b.n	800441c <__ieee754_powf+0x3a0>
 800443e:	bf00      	nop
 8004440:	00000000 	.word	0x00000000
 8004444:	3f7ffff3 	.word	0x3f7ffff3
 8004448:	3f800007 	.word	0x3f800007
 800444c:	3eaaaaab 	.word	0x3eaaaaab
 8004450:	3fb8aa00 	.word	0x3fb8aa00
 8004454:	3fb8aa3b 	.word	0x3fb8aa3b
 8004458:	36eca570 	.word	0x36eca570
 800445c:	4b800000 	.word	0x4b800000
 8004460:	001cc471 	.word	0x001cc471
 8004464:	005db3d6 	.word	0x005db3d6
 8004468:	0800737c 	.word	0x0800737c
 800446c:	fffff000 	.word	0xfffff000
 8004470:	3e6c3255 	.word	0x3e6c3255
 8004474:	3e53f142 	.word	0x3e53f142
 8004478:	3e8ba305 	.word	0x3e8ba305
 800447c:	3edb6db7 	.word	0x3edb6db7
 8004480:	3f19999a 	.word	0x3f19999a
 8004484:	0800736c 	.word	0x0800736c
 8004488:	3f76384f 	.word	0x3f76384f
 800448c:	3f763800 	.word	0x3f763800
 8004490:	369dc3a0 	.word	0x369dc3a0
 8004494:	08007374 	.word	0x08007374
 8004498:	3338aa3c 	.word	0x3338aa3c
 800449c:	43160000 	.word	0x43160000
 80044a0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80044a4:	d96f      	bls.n	8004586 <__ieee754_powf+0x50a>
 80044a6:	15db      	asrs	r3, r3, #23
 80044a8:	3b7e      	subs	r3, #126	@ 0x7e
 80044aa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80044ae:	4118      	asrs	r0, r3
 80044b0:	4408      	add	r0, r1
 80044b2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80044b6:	4a4e      	ldr	r2, [pc, #312]	@ (80045f0 <__ieee754_powf+0x574>)
 80044b8:	3b7f      	subs	r3, #127	@ 0x7f
 80044ba:	411a      	asrs	r2, r3
 80044bc:	4002      	ands	r2, r0
 80044be:	ee07 2a10 	vmov	s14, r2
 80044c2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80044c6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80044ca:	f1c3 0317 	rsb	r3, r3, #23
 80044ce:	4118      	asrs	r0, r3
 80044d0:	2900      	cmp	r1, #0
 80044d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044d6:	bfb8      	it	lt
 80044d8:	4240      	neglt	r0, r0
 80044da:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80044de:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80045f4 <__ieee754_powf+0x578>
 80044e2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80045f8 <__ieee754_powf+0x57c>
 80044e6:	ee16 3a90 	vmov	r3, s13
 80044ea:	f36f 030b 	bfc	r3, #0, #12
 80044ee:	ee06 3a90 	vmov	s13, r3
 80044f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044f6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80044fa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80044fe:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80045fc <__ieee754_powf+0x580>
 8004502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004506:	eee0 7a87 	vfma.f32	s15, s1, s14
 800450a:	eeb0 7a67 	vmov.f32	s14, s15
 800450e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8004512:	eef0 5a47 	vmov.f32	s11, s14
 8004516:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800451a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800451e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004522:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8004600 <__ieee754_powf+0x584>
 8004526:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8004604 <__ieee754_powf+0x588>
 800452a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800452e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8004608 <__ieee754_powf+0x58c>
 8004532:	eee6 5a26 	vfma.f32	s11, s12, s13
 8004536:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800460c <__ieee754_powf+0x590>
 800453a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800453e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004610 <__ieee754_powf+0x594>
 8004542:	eee6 5a26 	vfma.f32	s11, s12, s13
 8004546:	eeb0 6a47 	vmov.f32	s12, s14
 800454a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800454e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004552:	ee67 5a06 	vmul.f32	s11, s14, s12
 8004556:	ee36 6a66 	vsub.f32	s12, s12, s13
 800455a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800455e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004562:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800456a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800456e:	ee10 3a10 	vmov	r3, s0
 8004572:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004576:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800457a:	da06      	bge.n	800458a <__ieee754_powf+0x50e>
 800457c:	f000 f854 	bl	8004628 <scalbnf>
 8004580:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004584:	e592      	b.n	80040ac <__ieee754_powf+0x30>
 8004586:	2000      	movs	r0, #0
 8004588:	e7a7      	b.n	80044da <__ieee754_powf+0x45e>
 800458a:	ee00 3a10 	vmov	s0, r3
 800458e:	e7f7      	b.n	8004580 <__ieee754_powf+0x504>
 8004590:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004594:	e58a      	b.n	80040ac <__ieee754_powf+0x30>
 8004596:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8004614 <__ieee754_powf+0x598>
 800459a:	e587      	b.n	80040ac <__ieee754_powf+0x30>
 800459c:	eeb0 0a48 	vmov.f32	s0, s16
 80045a0:	e584      	b.n	80040ac <__ieee754_powf+0x30>
 80045a2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80045a6:	f43f adbb 	beq.w	8004120 <__ieee754_powf+0xa4>
 80045aa:	2502      	movs	r5, #2
 80045ac:	eeb0 0a48 	vmov.f32	s0, s16
 80045b0:	f000 f832 	bl	8004618 <fabsf>
 80045b4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80045b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80045bc:	4647      	mov	r7, r8
 80045be:	d003      	beq.n	80045c8 <__ieee754_powf+0x54c>
 80045c0:	f1b8 0f00 	cmp.w	r8, #0
 80045c4:	f47f addb 	bne.w	800417e <__ieee754_powf+0x102>
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	bfbc      	itt	lt
 80045cc:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80045d0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	f6bf ad69 	bge.w	80040ac <__ieee754_powf+0x30>
 80045da:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80045de:	ea58 0805 	orrs.w	r8, r8, r5
 80045e2:	f47f adc7 	bne.w	8004174 <__ieee754_powf+0xf8>
 80045e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80045ea:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80045ee:	e55d      	b.n	80040ac <__ieee754_powf+0x30>
 80045f0:	ff800000 	.word	0xff800000
 80045f4:	3f317218 	.word	0x3f317218
 80045f8:	3f317200 	.word	0x3f317200
 80045fc:	35bfbe8c 	.word	0x35bfbe8c
 8004600:	b5ddea0e 	.word	0xb5ddea0e
 8004604:	3331bb4c 	.word	0x3331bb4c
 8004608:	388ab355 	.word	0x388ab355
 800460c:	bb360b61 	.word	0xbb360b61
 8004610:	3e2aaaab 	.word	0x3e2aaaab
 8004614:	00000000 	.word	0x00000000

08004618 <fabsf>:
 8004618:	ee10 3a10 	vmov	r3, s0
 800461c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004620:	ee00 3a10 	vmov	s0, r3
 8004624:	4770      	bx	lr
	...

08004628 <scalbnf>:
 8004628:	ee10 3a10 	vmov	r3, s0
 800462c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004630:	d02b      	beq.n	800468a <scalbnf+0x62>
 8004632:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004636:	d302      	bcc.n	800463e <scalbnf+0x16>
 8004638:	ee30 0a00 	vadd.f32	s0, s0, s0
 800463c:	4770      	bx	lr
 800463e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004642:	d123      	bne.n	800468c <scalbnf+0x64>
 8004644:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <scalbnf+0xb0>)
 8004646:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80046dc <scalbnf+0xb4>
 800464a:	4298      	cmp	r0, r3
 800464c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004650:	db17      	blt.n	8004682 <scalbnf+0x5a>
 8004652:	ee10 3a10 	vmov	r3, s0
 8004656:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800465a:	3a19      	subs	r2, #25
 800465c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004660:	4288      	cmp	r0, r1
 8004662:	dd15      	ble.n	8004690 <scalbnf+0x68>
 8004664:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80046e0 <scalbnf+0xb8>
 8004668:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80046e4 <scalbnf+0xbc>
 800466c:	ee10 3a10 	vmov	r3, s0
 8004670:	eeb0 7a67 	vmov.f32	s14, s15
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfb8      	it	lt
 8004678:	eef0 7a66 	vmovlt.f32	s15, s13
 800467c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004680:	4770      	bx	lr
 8004682:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80046e8 <scalbnf+0xc0>
 8004686:	ee27 0a80 	vmul.f32	s0, s15, s0
 800468a:	4770      	bx	lr
 800468c:	0dd2      	lsrs	r2, r2, #23
 800468e:	e7e5      	b.n	800465c <scalbnf+0x34>
 8004690:	4410      	add	r0, r2
 8004692:	28fe      	cmp	r0, #254	@ 0xfe
 8004694:	dce6      	bgt.n	8004664 <scalbnf+0x3c>
 8004696:	2800      	cmp	r0, #0
 8004698:	dd06      	ble.n	80046a8 <scalbnf+0x80>
 800469a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800469e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80046a2:	ee00 3a10 	vmov	s0, r3
 80046a6:	4770      	bx	lr
 80046a8:	f110 0f16 	cmn.w	r0, #22
 80046ac:	da09      	bge.n	80046c2 <scalbnf+0x9a>
 80046ae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80046e8 <scalbnf+0xc0>
 80046b2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80046ec <scalbnf+0xc4>
 80046b6:	ee10 3a10 	vmov	r3, s0
 80046ba:	eeb0 7a67 	vmov.f32	s14, s15
 80046be:	2b00      	cmp	r3, #0
 80046c0:	e7d9      	b.n	8004676 <scalbnf+0x4e>
 80046c2:	3019      	adds	r0, #25
 80046c4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80046cc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80046f0 <scalbnf+0xc8>
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	e7d7      	b.n	8004686 <scalbnf+0x5e>
 80046d6:	bf00      	nop
 80046d8:	ffff3cb0 	.word	0xffff3cb0
 80046dc:	4c000000 	.word	0x4c000000
 80046e0:	7149f2ca 	.word	0x7149f2ca
 80046e4:	f149f2ca 	.word	0xf149f2ca
 80046e8:	0da24260 	.word	0x0da24260
 80046ec:	8da24260 	.word	0x8da24260
 80046f0:	33000000 	.word	0x33000000

080046f4 <with_errnof>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	ed2d 8b02 	vpush	{d8}
 80046fa:	eeb0 8a40 	vmov.f32	s16, s0
 80046fe:	4604      	mov	r4, r0
 8004700:	f000 fed2 	bl	80054a8 <__errno>
 8004704:	eeb0 0a48 	vmov.f32	s0, s16
 8004708:	ecbd 8b02 	vpop	{d8}
 800470c:	6004      	str	r4, [r0, #0]
 800470e:	bd10      	pop	{r4, pc}

08004710 <xflowf>:
 8004710:	b130      	cbz	r0, 8004720 <xflowf+0x10>
 8004712:	eef1 7a40 	vneg.f32	s15, s0
 8004716:	ee27 0a80 	vmul.f32	s0, s15, s0
 800471a:	2022      	movs	r0, #34	@ 0x22
 800471c:	f7ff bfea 	b.w	80046f4 <with_errnof>
 8004720:	eef0 7a40 	vmov.f32	s15, s0
 8004724:	e7f7      	b.n	8004716 <xflowf+0x6>
	...

08004728 <__math_uflowf>:
 8004728:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004730 <__math_uflowf+0x8>
 800472c:	f7ff bff0 	b.w	8004710 <xflowf>
 8004730:	10000000 	.word	0x10000000

08004734 <__math_oflowf>:
 8004734:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800473c <__math_oflowf+0x8>
 8004738:	f7ff bfea 	b.w	8004710 <xflowf>
 800473c:	70000000 	.word	0x70000000

08004740 <__ieee754_sqrtf>:
 8004740:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004744:	4770      	bx	lr

08004746 <__cvt>:
 8004746:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800474a:	ec57 6b10 	vmov	r6, r7, d0
 800474e:	2f00      	cmp	r7, #0
 8004750:	460c      	mov	r4, r1
 8004752:	4619      	mov	r1, r3
 8004754:	463b      	mov	r3, r7
 8004756:	bfbb      	ittet	lt
 8004758:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800475c:	461f      	movlt	r7, r3
 800475e:	2300      	movge	r3, #0
 8004760:	232d      	movlt	r3, #45	@ 0x2d
 8004762:	700b      	strb	r3, [r1, #0]
 8004764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004766:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800476a:	4691      	mov	r9, r2
 800476c:	f023 0820 	bic.w	r8, r3, #32
 8004770:	bfbc      	itt	lt
 8004772:	4632      	movlt	r2, r6
 8004774:	4616      	movlt	r6, r2
 8004776:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800477a:	d005      	beq.n	8004788 <__cvt+0x42>
 800477c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004780:	d100      	bne.n	8004784 <__cvt+0x3e>
 8004782:	3401      	adds	r4, #1
 8004784:	2102      	movs	r1, #2
 8004786:	e000      	b.n	800478a <__cvt+0x44>
 8004788:	2103      	movs	r1, #3
 800478a:	ab03      	add	r3, sp, #12
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	ab02      	add	r3, sp, #8
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	ec47 6b10 	vmov	d0, r6, r7
 8004796:	4653      	mov	r3, sl
 8004798:	4622      	mov	r2, r4
 800479a:	f000 ff3d 	bl	8005618 <_dtoa_r>
 800479e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047a2:	4605      	mov	r5, r0
 80047a4:	d119      	bne.n	80047da <__cvt+0x94>
 80047a6:	f019 0f01 	tst.w	r9, #1
 80047aa:	d00e      	beq.n	80047ca <__cvt+0x84>
 80047ac:	eb00 0904 	add.w	r9, r0, r4
 80047b0:	2200      	movs	r2, #0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4630      	mov	r0, r6
 80047b6:	4639      	mov	r1, r7
 80047b8:	f7fc f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 80047bc:	b108      	cbz	r0, 80047c2 <__cvt+0x7c>
 80047be:	f8cd 900c 	str.w	r9, [sp, #12]
 80047c2:	2230      	movs	r2, #48	@ 0x30
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	454b      	cmp	r3, r9
 80047c8:	d31e      	bcc.n	8004808 <__cvt+0xc2>
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047ce:	1b5b      	subs	r3, r3, r5
 80047d0:	4628      	mov	r0, r5
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	b004      	add	sp, #16
 80047d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047de:	eb00 0904 	add.w	r9, r0, r4
 80047e2:	d1e5      	bne.n	80047b0 <__cvt+0x6a>
 80047e4:	7803      	ldrb	r3, [r0, #0]
 80047e6:	2b30      	cmp	r3, #48	@ 0x30
 80047e8:	d10a      	bne.n	8004800 <__cvt+0xba>
 80047ea:	2200      	movs	r2, #0
 80047ec:	2300      	movs	r3, #0
 80047ee:	4630      	mov	r0, r6
 80047f0:	4639      	mov	r1, r7
 80047f2:	f7fc f971 	bl	8000ad8 <__aeabi_dcmpeq>
 80047f6:	b918      	cbnz	r0, 8004800 <__cvt+0xba>
 80047f8:	f1c4 0401 	rsb	r4, r4, #1
 80047fc:	f8ca 4000 	str.w	r4, [sl]
 8004800:	f8da 3000 	ldr.w	r3, [sl]
 8004804:	4499      	add	r9, r3
 8004806:	e7d3      	b.n	80047b0 <__cvt+0x6a>
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	9103      	str	r1, [sp, #12]
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e7d9      	b.n	80047c4 <__cvt+0x7e>

08004810 <__exponent>:
 8004810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004812:	2900      	cmp	r1, #0
 8004814:	bfba      	itte	lt
 8004816:	4249      	neglt	r1, r1
 8004818:	232d      	movlt	r3, #45	@ 0x2d
 800481a:	232b      	movge	r3, #43	@ 0x2b
 800481c:	2909      	cmp	r1, #9
 800481e:	7002      	strb	r2, [r0, #0]
 8004820:	7043      	strb	r3, [r0, #1]
 8004822:	dd29      	ble.n	8004878 <__exponent+0x68>
 8004824:	f10d 0307 	add.w	r3, sp, #7
 8004828:	461d      	mov	r5, r3
 800482a:	270a      	movs	r7, #10
 800482c:	461a      	mov	r2, r3
 800482e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004832:	fb07 1416 	mls	r4, r7, r6, r1
 8004836:	3430      	adds	r4, #48	@ 0x30
 8004838:	f802 4c01 	strb.w	r4, [r2, #-1]
 800483c:	460c      	mov	r4, r1
 800483e:	2c63      	cmp	r4, #99	@ 0x63
 8004840:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004844:	4631      	mov	r1, r6
 8004846:	dcf1      	bgt.n	800482c <__exponent+0x1c>
 8004848:	3130      	adds	r1, #48	@ 0x30
 800484a:	1e94      	subs	r4, r2, #2
 800484c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004850:	1c41      	adds	r1, r0, #1
 8004852:	4623      	mov	r3, r4
 8004854:	42ab      	cmp	r3, r5
 8004856:	d30a      	bcc.n	800486e <__exponent+0x5e>
 8004858:	f10d 0309 	add.w	r3, sp, #9
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	42ac      	cmp	r4, r5
 8004860:	bf88      	it	hi
 8004862:	2300      	movhi	r3, #0
 8004864:	3302      	adds	r3, #2
 8004866:	4403      	add	r3, r0
 8004868:	1a18      	subs	r0, r3, r0
 800486a:	b003      	add	sp, #12
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004872:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004876:	e7ed      	b.n	8004854 <__exponent+0x44>
 8004878:	2330      	movs	r3, #48	@ 0x30
 800487a:	3130      	adds	r1, #48	@ 0x30
 800487c:	7083      	strb	r3, [r0, #2]
 800487e:	70c1      	strb	r1, [r0, #3]
 8004880:	1d03      	adds	r3, r0, #4
 8004882:	e7f1      	b.n	8004868 <__exponent+0x58>

08004884 <_printf_float>:
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	b08d      	sub	sp, #52	@ 0x34
 800488a:	460c      	mov	r4, r1
 800488c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004890:	4616      	mov	r6, r2
 8004892:	461f      	mov	r7, r3
 8004894:	4605      	mov	r5, r0
 8004896:	f000 fdbd 	bl	8005414 <_localeconv_r>
 800489a:	6803      	ldr	r3, [r0, #0]
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fb fcee 	bl	8000280 <strlen>
 80048a4:	2300      	movs	r3, #0
 80048a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048a8:	f8d8 3000 	ldr.w	r3, [r8]
 80048ac:	9005      	str	r0, [sp, #20]
 80048ae:	3307      	adds	r3, #7
 80048b0:	f023 0307 	bic.w	r3, r3, #7
 80048b4:	f103 0208 	add.w	r2, r3, #8
 80048b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048bc:	f8d4 b000 	ldr.w	fp, [r4]
 80048c0:	f8c8 2000 	str.w	r2, [r8]
 80048c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048cc:	9307      	str	r3, [sp, #28]
 80048ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80048d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048da:	4b9c      	ldr	r3, [pc, #624]	@ (8004b4c <_printf_float+0x2c8>)
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048e0:	f7fc f92c 	bl	8000b3c <__aeabi_dcmpun>
 80048e4:	bb70      	cbnz	r0, 8004944 <_printf_float+0xc0>
 80048e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ea:	4b98      	ldr	r3, [pc, #608]	@ (8004b4c <_printf_float+0x2c8>)
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048f0:	f7fc f906 	bl	8000b00 <__aeabi_dcmple>
 80048f4:	bb30      	cbnz	r0, 8004944 <_printf_float+0xc0>
 80048f6:	2200      	movs	r2, #0
 80048f8:	2300      	movs	r3, #0
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fc f8f5 	bl	8000aec <__aeabi_dcmplt>
 8004902:	b110      	cbz	r0, 800490a <_printf_float+0x86>
 8004904:	232d      	movs	r3, #45	@ 0x2d
 8004906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800490a:	4a91      	ldr	r2, [pc, #580]	@ (8004b50 <_printf_float+0x2cc>)
 800490c:	4b91      	ldr	r3, [pc, #580]	@ (8004b54 <_printf_float+0x2d0>)
 800490e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004912:	bf8c      	ite	hi
 8004914:	4690      	movhi	r8, r2
 8004916:	4698      	movls	r8, r3
 8004918:	2303      	movs	r3, #3
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	f02b 0304 	bic.w	r3, fp, #4
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	f04f 0900 	mov.w	r9, #0
 8004926:	9700      	str	r7, [sp, #0]
 8004928:	4633      	mov	r3, r6
 800492a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800492c:	4621      	mov	r1, r4
 800492e:	4628      	mov	r0, r5
 8004930:	f000 f9d2 	bl	8004cd8 <_printf_common>
 8004934:	3001      	adds	r0, #1
 8004936:	f040 808d 	bne.w	8004a54 <_printf_float+0x1d0>
 800493a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800493e:	b00d      	add	sp, #52	@ 0x34
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	4640      	mov	r0, r8
 800494a:	4649      	mov	r1, r9
 800494c:	f7fc f8f6 	bl	8000b3c <__aeabi_dcmpun>
 8004950:	b140      	cbz	r0, 8004964 <_printf_float+0xe0>
 8004952:	464b      	mov	r3, r9
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfbc      	itt	lt
 8004958:	232d      	movlt	r3, #45	@ 0x2d
 800495a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800495e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b58 <_printf_float+0x2d4>)
 8004960:	4b7e      	ldr	r3, [pc, #504]	@ (8004b5c <_printf_float+0x2d8>)
 8004962:	e7d4      	b.n	800490e <_printf_float+0x8a>
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800496a:	9206      	str	r2, [sp, #24]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	d13b      	bne.n	80049e8 <_printf_float+0x164>
 8004970:	2306      	movs	r3, #6
 8004972:	6063      	str	r3, [r4, #4]
 8004974:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004978:	2300      	movs	r3, #0
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	9303      	str	r3, [sp, #12]
 800497e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004980:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004984:	ab09      	add	r3, sp, #36	@ 0x24
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	6861      	ldr	r1, [r4, #4]
 800498a:	ec49 8b10 	vmov	d0, r8, r9
 800498e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004992:	4628      	mov	r0, r5
 8004994:	f7ff fed7 	bl	8004746 <__cvt>
 8004998:	9b06      	ldr	r3, [sp, #24]
 800499a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800499c:	2b47      	cmp	r3, #71	@ 0x47
 800499e:	4680      	mov	r8, r0
 80049a0:	d129      	bne.n	80049f6 <_printf_float+0x172>
 80049a2:	1cc8      	adds	r0, r1, #3
 80049a4:	db02      	blt.n	80049ac <_printf_float+0x128>
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	4299      	cmp	r1, r3
 80049aa:	dd41      	ble.n	8004a30 <_printf_float+0x1ac>
 80049ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80049b0:	fa5f fa8a 	uxtb.w	sl, sl
 80049b4:	3901      	subs	r1, #1
 80049b6:	4652      	mov	r2, sl
 80049b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80049be:	f7ff ff27 	bl	8004810 <__exponent>
 80049c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049c4:	1813      	adds	r3, r2, r0
 80049c6:	2a01      	cmp	r2, #1
 80049c8:	4681      	mov	r9, r0
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	dc02      	bgt.n	80049d4 <_printf_float+0x150>
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	07d2      	lsls	r2, r2, #31
 80049d2:	d501      	bpl.n	80049d8 <_printf_float+0x154>
 80049d4:	3301      	adds	r3, #1
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0a2      	beq.n	8004926 <_printf_float+0xa2>
 80049e0:	232d      	movs	r3, #45	@ 0x2d
 80049e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049e6:	e79e      	b.n	8004926 <_printf_float+0xa2>
 80049e8:	9a06      	ldr	r2, [sp, #24]
 80049ea:	2a47      	cmp	r2, #71	@ 0x47
 80049ec:	d1c2      	bne.n	8004974 <_printf_float+0xf0>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1c0      	bne.n	8004974 <_printf_float+0xf0>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7bd      	b.n	8004972 <_printf_float+0xee>
 80049f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049fa:	d9db      	bls.n	80049b4 <_printf_float+0x130>
 80049fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a00:	d118      	bne.n	8004a34 <_printf_float+0x1b0>
 8004a02:	2900      	cmp	r1, #0
 8004a04:	6863      	ldr	r3, [r4, #4]
 8004a06:	dd0b      	ble.n	8004a20 <_printf_float+0x19c>
 8004a08:	6121      	str	r1, [r4, #16]
 8004a0a:	b913      	cbnz	r3, 8004a12 <_printf_float+0x18e>
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	07d0      	lsls	r0, r2, #31
 8004a10:	d502      	bpl.n	8004a18 <_printf_float+0x194>
 8004a12:	3301      	adds	r3, #1
 8004a14:	440b      	add	r3, r1
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a1a:	f04f 0900 	mov.w	r9, #0
 8004a1e:	e7db      	b.n	80049d8 <_printf_float+0x154>
 8004a20:	b913      	cbnz	r3, 8004a28 <_printf_float+0x1a4>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	07d2      	lsls	r2, r2, #31
 8004a26:	d501      	bpl.n	8004a2c <_printf_float+0x1a8>
 8004a28:	3302      	adds	r3, #2
 8004a2a:	e7f4      	b.n	8004a16 <_printf_float+0x192>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e7f2      	b.n	8004a16 <_printf_float+0x192>
 8004a30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a36:	4299      	cmp	r1, r3
 8004a38:	db05      	blt.n	8004a46 <_printf_float+0x1c2>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6121      	str	r1, [r4, #16]
 8004a3e:	07d8      	lsls	r0, r3, #31
 8004a40:	d5ea      	bpl.n	8004a18 <_printf_float+0x194>
 8004a42:	1c4b      	adds	r3, r1, #1
 8004a44:	e7e7      	b.n	8004a16 <_printf_float+0x192>
 8004a46:	2900      	cmp	r1, #0
 8004a48:	bfd4      	ite	le
 8004a4a:	f1c1 0202 	rsble	r2, r1, #2
 8004a4e:	2201      	movgt	r2, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	e7e0      	b.n	8004a16 <_printf_float+0x192>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	055a      	lsls	r2, r3, #21
 8004a58:	d407      	bmi.n	8004a6a <_printf_float+0x1e6>
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	d12b      	bne.n	8004ac0 <_printf_float+0x23c>
 8004a68:	e767      	b.n	800493a <_printf_float+0xb6>
 8004a6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a6e:	f240 80dd 	bls.w	8004c2c <_printf_float+0x3a8>
 8004a72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a76:	2200      	movs	r2, #0
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f7fc f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d033      	beq.n	8004aea <_printf_float+0x266>
 8004a82:	4a37      	ldr	r2, [pc, #220]	@ (8004b60 <_printf_float+0x2dc>)
 8004a84:	2301      	movs	r3, #1
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f43f af54 	beq.w	800493a <_printf_float+0xb6>
 8004a92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a96:	4543      	cmp	r3, r8
 8004a98:	db02      	blt.n	8004aa0 <_printf_float+0x21c>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07d8      	lsls	r0, r3, #31
 8004a9e:	d50f      	bpl.n	8004ac0 <_printf_float+0x23c>
 8004aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f af45 	beq.w	800493a <_printf_float+0xb6>
 8004ab0:	f04f 0900 	mov.w	r9, #0
 8004ab4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004ab8:	f104 0a1a 	add.w	sl, r4, #26
 8004abc:	45c8      	cmp	r8, r9
 8004abe:	dc09      	bgt.n	8004ad4 <_printf_float+0x250>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	079b      	lsls	r3, r3, #30
 8004ac4:	f100 8103 	bmi.w	8004cce <_printf_float+0x44a>
 8004ac8:	68e0      	ldr	r0, [r4, #12]
 8004aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004acc:	4298      	cmp	r0, r3
 8004ace:	bfb8      	it	lt
 8004ad0:	4618      	movlt	r0, r3
 8004ad2:	e734      	b.n	800493e <_printf_float+0xba>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f43f af2b 	beq.w	800493a <_printf_float+0xb6>
 8004ae4:	f109 0901 	add.w	r9, r9, #1
 8004ae8:	e7e8      	b.n	8004abc <_printf_float+0x238>
 8004aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dc39      	bgt.n	8004b64 <_printf_float+0x2e0>
 8004af0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <_printf_float+0x2dc>)
 8004af2:	2301      	movs	r3, #1
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f af1d 	beq.w	800493a <_printf_float+0xb6>
 8004b00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b04:	ea59 0303 	orrs.w	r3, r9, r3
 8004b08:	d102      	bne.n	8004b10 <_printf_float+0x28c>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	07d9      	lsls	r1, r3, #31
 8004b0e:	d5d7      	bpl.n	8004ac0 <_printf_float+0x23c>
 8004b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f af0d 	beq.w	800493a <_printf_float+0xb6>
 8004b20:	f04f 0a00 	mov.w	sl, #0
 8004b24:	f104 0b1a 	add.w	fp, r4, #26
 8004b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b2a:	425b      	negs	r3, r3
 8004b2c:	4553      	cmp	r3, sl
 8004b2e:	dc01      	bgt.n	8004b34 <_printf_float+0x2b0>
 8004b30:	464b      	mov	r3, r9
 8004b32:	e793      	b.n	8004a5c <_printf_float+0x1d8>
 8004b34:	2301      	movs	r3, #1
 8004b36:	465a      	mov	r2, fp
 8004b38:	4631      	mov	r1, r6
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b8      	blx	r7
 8004b3e:	3001      	adds	r0, #1
 8004b40:	f43f aefb 	beq.w	800493a <_printf_float+0xb6>
 8004b44:	f10a 0a01 	add.w	sl, sl, #1
 8004b48:	e7ee      	b.n	8004b28 <_printf_float+0x2a4>
 8004b4a:	bf00      	nop
 8004b4c:	7fefffff 	.word	0x7fefffff
 8004b50:	080071fe 	.word	0x080071fe
 8004b54:	080071fa 	.word	0x080071fa
 8004b58:	08007206 	.word	0x08007206
 8004b5c:	08007202 	.word	0x08007202
 8004b60:	0800720a 	.word	0x0800720a
 8004b64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b6a:	4553      	cmp	r3, sl
 8004b6c:	bfa8      	it	ge
 8004b6e:	4653      	movge	r3, sl
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	4699      	mov	r9, r3
 8004b74:	dc36      	bgt.n	8004be4 <_printf_float+0x360>
 8004b76:	f04f 0b00 	mov.w	fp, #0
 8004b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b7e:	f104 021a 	add.w	r2, r4, #26
 8004b82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b84:	9306      	str	r3, [sp, #24]
 8004b86:	eba3 0309 	sub.w	r3, r3, r9
 8004b8a:	455b      	cmp	r3, fp
 8004b8c:	dc31      	bgt.n	8004bf2 <_printf_float+0x36e>
 8004b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b90:	459a      	cmp	sl, r3
 8004b92:	dc3a      	bgt.n	8004c0a <_printf_float+0x386>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07da      	lsls	r2, r3, #31
 8004b98:	d437      	bmi.n	8004c0a <_printf_float+0x386>
 8004b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9c:	ebaa 0903 	sub.w	r9, sl, r3
 8004ba0:	9b06      	ldr	r3, [sp, #24]
 8004ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ba6:	4599      	cmp	r9, r3
 8004ba8:	bfa8      	it	ge
 8004baa:	4699      	movge	r9, r3
 8004bac:	f1b9 0f00 	cmp.w	r9, #0
 8004bb0:	dc33      	bgt.n	8004c1a <_printf_float+0x396>
 8004bb2:	f04f 0800 	mov.w	r8, #0
 8004bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bba:	f104 0b1a 	add.w	fp, r4, #26
 8004bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc0:	ebaa 0303 	sub.w	r3, sl, r3
 8004bc4:	eba3 0309 	sub.w	r3, r3, r9
 8004bc8:	4543      	cmp	r3, r8
 8004bca:	f77f af79 	ble.w	8004ac0 <_printf_float+0x23c>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	465a      	mov	r2, fp
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f43f aeae 	beq.w	800493a <_printf_float+0xb6>
 8004bde:	f108 0801 	add.w	r8, r8, #1
 8004be2:	e7ec      	b.n	8004bbe <_printf_float+0x33a>
 8004be4:	4642      	mov	r2, r8
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	d1c2      	bne.n	8004b76 <_printf_float+0x2f2>
 8004bf0:	e6a3      	b.n	800493a <_printf_float+0xb6>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	9206      	str	r2, [sp, #24]
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	f43f ae9c 	beq.w	800493a <_printf_float+0xb6>
 8004c02:	9a06      	ldr	r2, [sp, #24]
 8004c04:	f10b 0b01 	add.w	fp, fp, #1
 8004c08:	e7bb      	b.n	8004b82 <_printf_float+0x2fe>
 8004c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1c0      	bne.n	8004b9a <_printf_float+0x316>
 8004c18:	e68f      	b.n	800493a <_printf_float+0xb6>
 8004c1a:	9a06      	ldr	r2, [sp, #24]
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	4442      	add	r2, r8
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	d1c3      	bne.n	8004bb2 <_printf_float+0x32e>
 8004c2a:	e686      	b.n	800493a <_printf_float+0xb6>
 8004c2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c30:	f1ba 0f01 	cmp.w	sl, #1
 8004c34:	dc01      	bgt.n	8004c3a <_printf_float+0x3b6>
 8004c36:	07db      	lsls	r3, r3, #31
 8004c38:	d536      	bpl.n	8004ca8 <_printf_float+0x424>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f ae78 	beq.w	800493a <_printf_float+0xb6>
 8004c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f ae70 	beq.w	800493a <_printf_float+0xb6>
 8004c5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2300      	movs	r3, #0
 8004c62:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004c66:	f7fb ff37 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c6a:	b9c0      	cbnz	r0, 8004c9e <_printf_float+0x41a>
 8004c6c:	4653      	mov	r3, sl
 8004c6e:	f108 0201 	add.w	r2, r8, #1
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d10c      	bne.n	8004c96 <_printf_float+0x412>
 8004c7c:	e65d      	b.n	800493a <_printf_float+0xb6>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	465a      	mov	r2, fp
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f ae56 	beq.w	800493a <_printf_float+0xb6>
 8004c8e:	f108 0801 	add.w	r8, r8, #1
 8004c92:	45d0      	cmp	r8, sl
 8004c94:	dbf3      	blt.n	8004c7e <_printf_float+0x3fa>
 8004c96:	464b      	mov	r3, r9
 8004c98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c9c:	e6df      	b.n	8004a5e <_printf_float+0x1da>
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	f104 0b1a 	add.w	fp, r4, #26
 8004ca6:	e7f4      	b.n	8004c92 <_printf_float+0x40e>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4642      	mov	r2, r8
 8004cac:	e7e1      	b.n	8004c72 <_printf_float+0x3ee>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	464a      	mov	r2, r9
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f ae3e 	beq.w	800493a <_printf_float+0xb6>
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	4543      	cmp	r3, r8
 8004cca:	dcf0      	bgt.n	8004cae <_printf_float+0x42a>
 8004ccc:	e6fc      	b.n	8004ac8 <_printf_float+0x244>
 8004cce:	f04f 0800 	mov.w	r8, #0
 8004cd2:	f104 0919 	add.w	r9, r4, #25
 8004cd6:	e7f4      	b.n	8004cc2 <_printf_float+0x43e>

08004cd8 <_printf_common>:
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	4616      	mov	r6, r2
 8004cde:	4698      	mov	r8, r3
 8004ce0:	688a      	ldr	r2, [r1, #8]
 8004ce2:	690b      	ldr	r3, [r1, #16]
 8004ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bfb8      	it	lt
 8004cec:	4613      	movlt	r3, r2
 8004cee:	6033      	str	r3, [r6, #0]
 8004cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b10a      	cbz	r2, 8004cfe <_printf_common+0x26>
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	0699      	lsls	r1, r3, #26
 8004d02:	bf42      	ittt	mi
 8004d04:	6833      	ldrmi	r3, [r6, #0]
 8004d06:	3302      	addmi	r3, #2
 8004d08:	6033      	strmi	r3, [r6, #0]
 8004d0a:	6825      	ldr	r5, [r4, #0]
 8004d0c:	f015 0506 	ands.w	r5, r5, #6
 8004d10:	d106      	bne.n	8004d20 <_printf_common+0x48>
 8004d12:	f104 0a19 	add.w	sl, r4, #25
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	6832      	ldr	r2, [r6, #0]
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dc26      	bgt.n	8004d6e <_printf_common+0x96>
 8004d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	3b00      	subs	r3, #0
 8004d28:	bf18      	it	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	0692      	lsls	r2, r2, #26
 8004d2e:	d42b      	bmi.n	8004d88 <_printf_common+0xb0>
 8004d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d34:	4641      	mov	r1, r8
 8004d36:	4638      	mov	r0, r7
 8004d38:	47c8      	blx	r9
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d01e      	beq.n	8004d7c <_printf_common+0xa4>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	6922      	ldr	r2, [r4, #16]
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	bf02      	ittt	eq
 8004d4a:	68e5      	ldreq	r5, [r4, #12]
 8004d4c:	6833      	ldreq	r3, [r6, #0]
 8004d4e:	1aed      	subeq	r5, r5, r3
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	bf0c      	ite	eq
 8004d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d58:	2500      	movne	r5, #0
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bfc4      	itt	gt
 8004d5e:	1a9b      	subgt	r3, r3, r2
 8004d60:	18ed      	addgt	r5, r5, r3
 8004d62:	2600      	movs	r6, #0
 8004d64:	341a      	adds	r4, #26
 8004d66:	42b5      	cmp	r5, r6
 8004d68:	d11a      	bne.n	8004da0 <_printf_common+0xc8>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e008      	b.n	8004d80 <_printf_common+0xa8>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4652      	mov	r2, sl
 8004d72:	4641      	mov	r1, r8
 8004d74:	4638      	mov	r0, r7
 8004d76:	47c8      	blx	r9
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d103      	bne.n	8004d84 <_printf_common+0xac>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	3501      	adds	r5, #1
 8004d86:	e7c6      	b.n	8004d16 <_printf_common+0x3e>
 8004d88:	18e1      	adds	r1, r4, r3
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	2030      	movs	r0, #48	@ 0x30
 8004d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d92:	4422      	add	r2, r4
 8004d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	e7c7      	b.n	8004d30 <_printf_common+0x58>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4622      	mov	r2, r4
 8004da4:	4641      	mov	r1, r8
 8004da6:	4638      	mov	r0, r7
 8004da8:	47c8      	blx	r9
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0e6      	beq.n	8004d7c <_printf_common+0xa4>
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7d9      	b.n	8004d66 <_printf_common+0x8e>
	...

08004db4 <_printf_i>:
 8004db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	7e0f      	ldrb	r7, [r1, #24]
 8004dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dbc:	2f78      	cmp	r7, #120	@ 0x78
 8004dbe:	4691      	mov	r9, r2
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dca:	d807      	bhi.n	8004ddc <_printf_i+0x28>
 8004dcc:	2f62      	cmp	r7, #98	@ 0x62
 8004dce:	d80a      	bhi.n	8004de6 <_printf_i+0x32>
 8004dd0:	2f00      	cmp	r7, #0
 8004dd2:	f000 80d1 	beq.w	8004f78 <_printf_i+0x1c4>
 8004dd6:	2f58      	cmp	r7, #88	@ 0x58
 8004dd8:	f000 80b8 	beq.w	8004f4c <_printf_i+0x198>
 8004ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004de4:	e03a      	b.n	8004e5c <_printf_i+0xa8>
 8004de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dea:	2b15      	cmp	r3, #21
 8004dec:	d8f6      	bhi.n	8004ddc <_printf_i+0x28>
 8004dee:	a101      	add	r1, pc, #4	@ (adr r1, 8004df4 <_printf_i+0x40>)
 8004df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004ddd 	.word	0x08004ddd
 8004e00:	08004ddd 	.word	0x08004ddd
 8004e04:	08004ddd 	.word	0x08004ddd
 8004e08:	08004ddd 	.word	0x08004ddd
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004ddd 	.word	0x08004ddd
 8004e14:	08004ddd 	.word	0x08004ddd
 8004e18:	08004ddd 	.word	0x08004ddd
 8004e1c:	08004ddd 	.word	0x08004ddd
 8004e20:	08004f5f 	.word	0x08004f5f
 8004e24:	08004e8b 	.word	0x08004e8b
 8004e28:	08004f19 	.word	0x08004f19
 8004e2c:	08004ddd 	.word	0x08004ddd
 8004e30:	08004ddd 	.word	0x08004ddd
 8004e34:	08004f81 	.word	0x08004f81
 8004e38:	08004ddd 	.word	0x08004ddd
 8004e3c:	08004e8b 	.word	0x08004e8b
 8004e40:	08004ddd 	.word	0x08004ddd
 8004e44:	08004ddd 	.word	0x08004ddd
 8004e48:	08004f21 	.word	0x08004f21
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6032      	str	r2, [r6, #0]
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e09c      	b.n	8004f9a <_printf_i+0x1e6>
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	6031      	str	r1, [r6, #0]
 8004e68:	0606      	lsls	r6, r0, #24
 8004e6a:	d501      	bpl.n	8004e70 <_printf_i+0xbc>
 8004e6c:	681d      	ldr	r5, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <_printf_i+0xc4>
 8004e70:	0645      	lsls	r5, r0, #25
 8004e72:	d5fb      	bpl.n	8004e6c <_printf_i+0xb8>
 8004e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e78:	2d00      	cmp	r5, #0
 8004e7a:	da03      	bge.n	8004e84 <_printf_i+0xd0>
 8004e7c:	232d      	movs	r3, #45	@ 0x2d
 8004e7e:	426d      	negs	r5, r5
 8004e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e84:	4858      	ldr	r0, [pc, #352]	@ (8004fe8 <_printf_i+0x234>)
 8004e86:	230a      	movs	r3, #10
 8004e88:	e011      	b.n	8004eae <_printf_i+0xfa>
 8004e8a:	6821      	ldr	r1, [r4, #0]
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	0608      	lsls	r0, r1, #24
 8004e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e94:	d402      	bmi.n	8004e9c <_printf_i+0xe8>
 8004e96:	0649      	lsls	r1, r1, #25
 8004e98:	bf48      	it	mi
 8004e9a:	b2ad      	uxthmi	r5, r5
 8004e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e9e:	4852      	ldr	r0, [pc, #328]	@ (8004fe8 <_printf_i+0x234>)
 8004ea0:	6033      	str	r3, [r6, #0]
 8004ea2:	bf14      	ite	ne
 8004ea4:	230a      	movne	r3, #10
 8004ea6:	2308      	moveq	r3, #8
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eae:	6866      	ldr	r6, [r4, #4]
 8004eb0:	60a6      	str	r6, [r4, #8]
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	db05      	blt.n	8004ec2 <_printf_i+0x10e>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	432e      	orrs	r6, r5
 8004eba:	f021 0104 	bic.w	r1, r1, #4
 8004ebe:	6021      	str	r1, [r4, #0]
 8004ec0:	d04b      	beq.n	8004f5a <_printf_i+0x1a6>
 8004ec2:	4616      	mov	r6, r2
 8004ec4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ec8:	fb03 5711 	mls	r7, r3, r1, r5
 8004ecc:	5dc7      	ldrb	r7, [r0, r7]
 8004ece:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ed2:	462f      	mov	r7, r5
 8004ed4:	42bb      	cmp	r3, r7
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	d9f4      	bls.n	8004ec4 <_printf_i+0x110>
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d10b      	bne.n	8004ef6 <_printf_i+0x142>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	07df      	lsls	r7, r3, #31
 8004ee2:	d508      	bpl.n	8004ef6 <_printf_i+0x142>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	6861      	ldr	r1, [r4, #4]
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	bfde      	ittt	le
 8004eec:	2330      	movle	r3, #48	@ 0x30
 8004eee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ef2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ef6:	1b92      	subs	r2, r2, r6
 8004ef8:	6122      	str	r2, [r4, #16]
 8004efa:	f8cd a000 	str.w	sl, [sp]
 8004efe:	464b      	mov	r3, r9
 8004f00:	aa03      	add	r2, sp, #12
 8004f02:	4621      	mov	r1, r4
 8004f04:	4640      	mov	r0, r8
 8004f06:	f7ff fee7 	bl	8004cd8 <_printf_common>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d14a      	bne.n	8004fa4 <_printf_i+0x1f0>
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f12:	b004      	add	sp, #16
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	f043 0320 	orr.w	r3, r3, #32
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	4832      	ldr	r0, [pc, #200]	@ (8004fec <_printf_i+0x238>)
 8004f22:	2778      	movs	r7, #120	@ 0x78
 8004f24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	6831      	ldr	r1, [r6, #0]
 8004f2c:	061f      	lsls	r7, r3, #24
 8004f2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f32:	d402      	bmi.n	8004f3a <_printf_i+0x186>
 8004f34:	065f      	lsls	r7, r3, #25
 8004f36:	bf48      	it	mi
 8004f38:	b2ad      	uxthmi	r5, r5
 8004f3a:	6031      	str	r1, [r6, #0]
 8004f3c:	07d9      	lsls	r1, r3, #31
 8004f3e:	bf44      	itt	mi
 8004f40:	f043 0320 	orrmi.w	r3, r3, #32
 8004f44:	6023      	strmi	r3, [r4, #0]
 8004f46:	b11d      	cbz	r5, 8004f50 <_printf_i+0x19c>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	e7ad      	b.n	8004ea8 <_printf_i+0xf4>
 8004f4c:	4826      	ldr	r0, [pc, #152]	@ (8004fe8 <_printf_i+0x234>)
 8004f4e:	e7e9      	b.n	8004f24 <_printf_i+0x170>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	f023 0320 	bic.w	r3, r3, #32
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	e7f6      	b.n	8004f48 <_printf_i+0x194>
 8004f5a:	4616      	mov	r6, r2
 8004f5c:	e7bd      	b.n	8004eda <_printf_i+0x126>
 8004f5e:	6833      	ldr	r3, [r6, #0]
 8004f60:	6825      	ldr	r5, [r4, #0]
 8004f62:	6961      	ldr	r1, [r4, #20]
 8004f64:	1d18      	adds	r0, r3, #4
 8004f66:	6030      	str	r0, [r6, #0]
 8004f68:	062e      	lsls	r6, r5, #24
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	d501      	bpl.n	8004f72 <_printf_i+0x1be>
 8004f6e:	6019      	str	r1, [r3, #0]
 8004f70:	e002      	b.n	8004f78 <_printf_i+0x1c4>
 8004f72:	0668      	lsls	r0, r5, #25
 8004f74:	d5fb      	bpl.n	8004f6e <_printf_i+0x1ba>
 8004f76:	8019      	strh	r1, [r3, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	e7bc      	b.n	8004efa <_printf_i+0x146>
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	6032      	str	r2, [r6, #0]
 8004f86:	681e      	ldr	r6, [r3, #0]
 8004f88:	6862      	ldr	r2, [r4, #4]
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7fb f927 	bl	80001e0 <memchr>
 8004f92:	b108      	cbz	r0, 8004f98 <_printf_i+0x1e4>
 8004f94:	1b80      	subs	r0, r0, r6
 8004f96:	6060      	str	r0, [r4, #4]
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fa2:	e7aa      	b.n	8004efa <_printf_i+0x146>
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4640      	mov	r0, r8
 8004fac:	47d0      	blx	sl
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d0ad      	beq.n	8004f0e <_printf_i+0x15a>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	079b      	lsls	r3, r3, #30
 8004fb6:	d413      	bmi.n	8004fe0 <_printf_i+0x22c>
 8004fb8:	68e0      	ldr	r0, [r4, #12]
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	4298      	cmp	r0, r3
 8004fbe:	bfb8      	it	lt
 8004fc0:	4618      	movlt	r0, r3
 8004fc2:	e7a6      	b.n	8004f12 <_printf_i+0x15e>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	4649      	mov	r1, r9
 8004fca:	4640      	mov	r0, r8
 8004fcc:	47d0      	blx	sl
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d09d      	beq.n	8004f0e <_printf_i+0x15a>
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	68e3      	ldr	r3, [r4, #12]
 8004fd6:	9903      	ldr	r1, [sp, #12]
 8004fd8:	1a5b      	subs	r3, r3, r1
 8004fda:	42ab      	cmp	r3, r5
 8004fdc:	dcf2      	bgt.n	8004fc4 <_printf_i+0x210>
 8004fde:	e7eb      	b.n	8004fb8 <_printf_i+0x204>
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	f104 0619 	add.w	r6, r4, #25
 8004fe6:	e7f5      	b.n	8004fd4 <_printf_i+0x220>
 8004fe8:	0800720c 	.word	0x0800720c
 8004fec:	0800721d 	.word	0x0800721d

08004ff0 <std>:
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8004ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ffe:	6083      	str	r3, [r0, #8]
 8005000:	8181      	strh	r1, [r0, #12]
 8005002:	6643      	str	r3, [r0, #100]	@ 0x64
 8005004:	81c2      	strh	r2, [r0, #14]
 8005006:	6183      	str	r3, [r0, #24]
 8005008:	4619      	mov	r1, r3
 800500a:	2208      	movs	r2, #8
 800500c:	305c      	adds	r0, #92	@ 0x5c
 800500e:	f000 f9f9 	bl	8005404 <memset>
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <std+0x58>)
 8005014:	6263      	str	r3, [r4, #36]	@ 0x24
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <std+0x5c>)
 8005018:	62a3      	str	r3, [r4, #40]	@ 0x28
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <std+0x60>)
 800501c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <std+0x64>)
 8005020:	6323      	str	r3, [r4, #48]	@ 0x30
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x68>)
 8005024:	6224      	str	r4, [r4, #32]
 8005026:	429c      	cmp	r4, r3
 8005028:	d006      	beq.n	8005038 <std+0x48>
 800502a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800502e:	4294      	cmp	r4, r2
 8005030:	d002      	beq.n	8005038 <std+0x48>
 8005032:	33d0      	adds	r3, #208	@ 0xd0
 8005034:	429c      	cmp	r4, r3
 8005036:	d105      	bne.n	8005044 <std+0x54>
 8005038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005040:	f000 ba5c 	b.w	80054fc <__retarget_lock_init_recursive>
 8005044:	bd10      	pop	{r4, pc}
 8005046:	bf00      	nop
 8005048:	08005255 	.word	0x08005255
 800504c:	08005277 	.word	0x08005277
 8005050:	080052af 	.word	0x080052af
 8005054:	080052d3 	.word	0x080052d3
 8005058:	20000348 	.word	0x20000348

0800505c <stdio_exit_handler>:
 800505c:	4a02      	ldr	r2, [pc, #8]	@ (8005068 <stdio_exit_handler+0xc>)
 800505e:	4903      	ldr	r1, [pc, #12]	@ (800506c <stdio_exit_handler+0x10>)
 8005060:	4803      	ldr	r0, [pc, #12]	@ (8005070 <stdio_exit_handler+0x14>)
 8005062:	f000 b869 	b.w	8005138 <_fwalk_sglue>
 8005066:	bf00      	nop
 8005068:	20000014 	.word	0x20000014
 800506c:	08006e39 	.word	0x08006e39
 8005070:	20000024 	.word	0x20000024

08005074 <cleanup_stdio>:
 8005074:	6841      	ldr	r1, [r0, #4]
 8005076:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <cleanup_stdio+0x34>)
 8005078:	4299      	cmp	r1, r3
 800507a:	b510      	push	{r4, lr}
 800507c:	4604      	mov	r4, r0
 800507e:	d001      	beq.n	8005084 <cleanup_stdio+0x10>
 8005080:	f001 feda 	bl	8006e38 <_fflush_r>
 8005084:	68a1      	ldr	r1, [r4, #8]
 8005086:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <cleanup_stdio+0x38>)
 8005088:	4299      	cmp	r1, r3
 800508a:	d002      	beq.n	8005092 <cleanup_stdio+0x1e>
 800508c:	4620      	mov	r0, r4
 800508e:	f001 fed3 	bl	8006e38 <_fflush_r>
 8005092:	68e1      	ldr	r1, [r4, #12]
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <cleanup_stdio+0x3c>)
 8005096:	4299      	cmp	r1, r3
 8005098:	d004      	beq.n	80050a4 <cleanup_stdio+0x30>
 800509a:	4620      	mov	r0, r4
 800509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a0:	f001 beca 	b.w	8006e38 <_fflush_r>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	bf00      	nop
 80050a8:	20000348 	.word	0x20000348
 80050ac:	200003b0 	.word	0x200003b0
 80050b0:	20000418 	.word	0x20000418

080050b4 <global_stdio_init.part.0>:
 80050b4:	b510      	push	{r4, lr}
 80050b6:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <global_stdio_init.part.0+0x30>)
 80050b8:	4c0b      	ldr	r4, [pc, #44]	@ (80050e8 <global_stdio_init.part.0+0x34>)
 80050ba:	4a0c      	ldr	r2, [pc, #48]	@ (80050ec <global_stdio_init.part.0+0x38>)
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	4620      	mov	r0, r4
 80050c0:	2200      	movs	r2, #0
 80050c2:	2104      	movs	r1, #4
 80050c4:	f7ff ff94 	bl	8004ff0 <std>
 80050c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050cc:	2201      	movs	r2, #1
 80050ce:	2109      	movs	r1, #9
 80050d0:	f7ff ff8e 	bl	8004ff0 <std>
 80050d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050d8:	2202      	movs	r2, #2
 80050da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050de:	2112      	movs	r1, #18
 80050e0:	f7ff bf86 	b.w	8004ff0 <std>
 80050e4:	20000480 	.word	0x20000480
 80050e8:	20000348 	.word	0x20000348
 80050ec:	0800505d 	.word	0x0800505d

080050f0 <__sfp_lock_acquire>:
 80050f0:	4801      	ldr	r0, [pc, #4]	@ (80050f8 <__sfp_lock_acquire+0x8>)
 80050f2:	f000 ba04 	b.w	80054fe <__retarget_lock_acquire_recursive>
 80050f6:	bf00      	nop
 80050f8:	20000489 	.word	0x20000489

080050fc <__sfp_lock_release>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__sfp_lock_release+0x8>)
 80050fe:	f000 b9ff 	b.w	8005500 <__retarget_lock_release_recursive>
 8005102:	bf00      	nop
 8005104:	20000489 	.word	0x20000489

08005108 <__sinit>:
 8005108:	b510      	push	{r4, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	f7ff fff0 	bl	80050f0 <__sfp_lock_acquire>
 8005110:	6a23      	ldr	r3, [r4, #32]
 8005112:	b11b      	cbz	r3, 800511c <__sinit+0x14>
 8005114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005118:	f7ff bff0 	b.w	80050fc <__sfp_lock_release>
 800511c:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <__sinit+0x28>)
 800511e:	6223      	str	r3, [r4, #32]
 8005120:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <__sinit+0x2c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f5      	bne.n	8005114 <__sinit+0xc>
 8005128:	f7ff ffc4 	bl	80050b4 <global_stdio_init.part.0>
 800512c:	e7f2      	b.n	8005114 <__sinit+0xc>
 800512e:	bf00      	nop
 8005130:	08005075 	.word	0x08005075
 8005134:	20000480 	.word	0x20000480

08005138 <_fwalk_sglue>:
 8005138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800513c:	4607      	mov	r7, r0
 800513e:	4688      	mov	r8, r1
 8005140:	4614      	mov	r4, r2
 8005142:	2600      	movs	r6, #0
 8005144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005148:	f1b9 0901 	subs.w	r9, r9, #1
 800514c:	d505      	bpl.n	800515a <_fwalk_sglue+0x22>
 800514e:	6824      	ldr	r4, [r4, #0]
 8005150:	2c00      	cmp	r4, #0
 8005152:	d1f7      	bne.n	8005144 <_fwalk_sglue+0xc>
 8005154:	4630      	mov	r0, r6
 8005156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d907      	bls.n	8005170 <_fwalk_sglue+0x38>
 8005160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005164:	3301      	adds	r3, #1
 8005166:	d003      	beq.n	8005170 <_fwalk_sglue+0x38>
 8005168:	4629      	mov	r1, r5
 800516a:	4638      	mov	r0, r7
 800516c:	47c0      	blx	r8
 800516e:	4306      	orrs	r6, r0
 8005170:	3568      	adds	r5, #104	@ 0x68
 8005172:	e7e9      	b.n	8005148 <_fwalk_sglue+0x10>

08005174 <iprintf>:
 8005174:	b40f      	push	{r0, r1, r2, r3}
 8005176:	b507      	push	{r0, r1, r2, lr}
 8005178:	4906      	ldr	r1, [pc, #24]	@ (8005194 <iprintf+0x20>)
 800517a:	ab04      	add	r3, sp, #16
 800517c:	6808      	ldr	r0, [r1, #0]
 800517e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005182:	6881      	ldr	r1, [r0, #8]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	f001 fcbb 	bl	8006b00 <_vfiprintf_r>
 800518a:	b003      	add	sp, #12
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b004      	add	sp, #16
 8005192:	4770      	bx	lr
 8005194:	20000020 	.word	0x20000020

08005198 <_puts_r>:
 8005198:	6a03      	ldr	r3, [r0, #32]
 800519a:	b570      	push	{r4, r5, r6, lr}
 800519c:	6884      	ldr	r4, [r0, #8]
 800519e:	4605      	mov	r5, r0
 80051a0:	460e      	mov	r6, r1
 80051a2:	b90b      	cbnz	r3, 80051a8 <_puts_r+0x10>
 80051a4:	f7ff ffb0 	bl	8005108 <__sinit>
 80051a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051aa:	07db      	lsls	r3, r3, #31
 80051ac:	d405      	bmi.n	80051ba <_puts_r+0x22>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	0598      	lsls	r0, r3, #22
 80051b2:	d402      	bmi.n	80051ba <_puts_r+0x22>
 80051b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051b6:	f000 f9a2 	bl	80054fe <__retarget_lock_acquire_recursive>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	0719      	lsls	r1, r3, #28
 80051be:	d502      	bpl.n	80051c6 <_puts_r+0x2e>
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d135      	bne.n	8005232 <_puts_r+0x9a>
 80051c6:	4621      	mov	r1, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 f8c5 	bl	8005358 <__swsetup_r>
 80051ce:	b380      	cbz	r0, 8005232 <_puts_r+0x9a>
 80051d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80051d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051d6:	07da      	lsls	r2, r3, #31
 80051d8:	d405      	bmi.n	80051e6 <_puts_r+0x4e>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	059b      	lsls	r3, r3, #22
 80051de:	d402      	bmi.n	80051e6 <_puts_r+0x4e>
 80051e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051e2:	f000 f98d 	bl	8005500 <__retarget_lock_release_recursive>
 80051e6:	4628      	mov	r0, r5
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	da04      	bge.n	80051f8 <_puts_r+0x60>
 80051ee:	69a2      	ldr	r2, [r4, #24]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	dc17      	bgt.n	8005224 <_puts_r+0x8c>
 80051f4:	290a      	cmp	r1, #10
 80051f6:	d015      	beq.n	8005224 <_puts_r+0x8c>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	6022      	str	r2, [r4, #0]
 80051fe:	7019      	strb	r1, [r3, #0]
 8005200:	68a3      	ldr	r3, [r4, #8]
 8005202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005206:	3b01      	subs	r3, #1
 8005208:	60a3      	str	r3, [r4, #8]
 800520a:	2900      	cmp	r1, #0
 800520c:	d1ed      	bne.n	80051ea <_puts_r+0x52>
 800520e:	2b00      	cmp	r3, #0
 8005210:	da11      	bge.n	8005236 <_puts_r+0x9e>
 8005212:	4622      	mov	r2, r4
 8005214:	210a      	movs	r1, #10
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f85f 	bl	80052da <__swbuf_r>
 800521c:	3001      	adds	r0, #1
 800521e:	d0d7      	beq.n	80051d0 <_puts_r+0x38>
 8005220:	250a      	movs	r5, #10
 8005222:	e7d7      	b.n	80051d4 <_puts_r+0x3c>
 8005224:	4622      	mov	r2, r4
 8005226:	4628      	mov	r0, r5
 8005228:	f000 f857 	bl	80052da <__swbuf_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d1e7      	bne.n	8005200 <_puts_r+0x68>
 8005230:	e7ce      	b.n	80051d0 <_puts_r+0x38>
 8005232:	3e01      	subs	r6, #1
 8005234:	e7e4      	b.n	8005200 <_puts_r+0x68>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	220a      	movs	r2, #10
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e7ee      	b.n	8005220 <_puts_r+0x88>
	...

08005244 <puts>:
 8005244:	4b02      	ldr	r3, [pc, #8]	@ (8005250 <puts+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f7ff bfa5 	b.w	8005198 <_puts_r>
 800524e:	bf00      	nop
 8005250:	20000020 	.word	0x20000020

08005254 <__sread>:
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	f000 f900 	bl	8005460 <_read_r>
 8005260:	2800      	cmp	r0, #0
 8005262:	bfab      	itete	ge
 8005264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005266:	89a3      	ldrhlt	r3, [r4, #12]
 8005268:	181b      	addge	r3, r3, r0
 800526a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800526e:	bfac      	ite	ge
 8005270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005272:	81a3      	strhlt	r3, [r4, #12]
 8005274:	bd10      	pop	{r4, pc}

08005276 <__swrite>:
 8005276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	461f      	mov	r7, r3
 800527c:	898b      	ldrh	r3, [r1, #12]
 800527e:	05db      	lsls	r3, r3, #23
 8005280:	4605      	mov	r5, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4616      	mov	r6, r2
 8005286:	d505      	bpl.n	8005294 <__swrite+0x1e>
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	2302      	movs	r3, #2
 800528e:	2200      	movs	r2, #0
 8005290:	f000 f8d4 	bl	800543c <_lseek_r>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800529a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	4632      	mov	r2, r6
 80052a2:	463b      	mov	r3, r7
 80052a4:	4628      	mov	r0, r5
 80052a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	f000 b8eb 	b.w	8005484 <_write_r>

080052ae <__sseek>:
 80052ae:	b510      	push	{r4, lr}
 80052b0:	460c      	mov	r4, r1
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 f8c1 	bl	800543c <_lseek_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	bf15      	itete	ne
 80052c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052ca:	81a3      	strheq	r3, [r4, #12]
 80052cc:	bf18      	it	ne
 80052ce:	81a3      	strhne	r3, [r4, #12]
 80052d0:	bd10      	pop	{r4, pc}

080052d2 <__sclose>:
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 b8a1 	b.w	800541c <_close_r>

080052da <__swbuf_r>:
 80052da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052dc:	460e      	mov	r6, r1
 80052de:	4614      	mov	r4, r2
 80052e0:	4605      	mov	r5, r0
 80052e2:	b118      	cbz	r0, 80052ec <__swbuf_r+0x12>
 80052e4:	6a03      	ldr	r3, [r0, #32]
 80052e6:	b90b      	cbnz	r3, 80052ec <__swbuf_r+0x12>
 80052e8:	f7ff ff0e 	bl	8005108 <__sinit>
 80052ec:	69a3      	ldr	r3, [r4, #24]
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	071a      	lsls	r2, r3, #28
 80052f4:	d501      	bpl.n	80052fa <__swbuf_r+0x20>
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	b943      	cbnz	r3, 800530c <__swbuf_r+0x32>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f82b 	bl	8005358 <__swsetup_r>
 8005302:	b118      	cbz	r0, 800530c <__swbuf_r+0x32>
 8005304:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005308:	4638      	mov	r0, r7
 800530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	6922      	ldr	r2, [r4, #16]
 8005310:	1a98      	subs	r0, r3, r2
 8005312:	6963      	ldr	r3, [r4, #20]
 8005314:	b2f6      	uxtb	r6, r6
 8005316:	4283      	cmp	r3, r0
 8005318:	4637      	mov	r7, r6
 800531a:	dc05      	bgt.n	8005328 <__swbuf_r+0x4e>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f001 fd8a 	bl	8006e38 <_fflush_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	d1ed      	bne.n	8005304 <__swbuf_r+0x2a>
 8005328:	68a3      	ldr	r3, [r4, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	6022      	str	r2, [r4, #0]
 8005334:	701e      	strb	r6, [r3, #0]
 8005336:	6962      	ldr	r2, [r4, #20]
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	429a      	cmp	r2, r3
 800533c:	d004      	beq.n	8005348 <__swbuf_r+0x6e>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	07db      	lsls	r3, r3, #31
 8005342:	d5e1      	bpl.n	8005308 <__swbuf_r+0x2e>
 8005344:	2e0a      	cmp	r6, #10
 8005346:	d1df      	bne.n	8005308 <__swbuf_r+0x2e>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f001 fd74 	bl	8006e38 <_fflush_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	d0d9      	beq.n	8005308 <__swbuf_r+0x2e>
 8005354:	e7d6      	b.n	8005304 <__swbuf_r+0x2a>
	...

08005358 <__swsetup_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4b29      	ldr	r3, [pc, #164]	@ (8005400 <__swsetup_r+0xa8>)
 800535c:	4605      	mov	r5, r0
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	460c      	mov	r4, r1
 8005362:	b118      	cbz	r0, 800536c <__swsetup_r+0x14>
 8005364:	6a03      	ldr	r3, [r0, #32]
 8005366:	b90b      	cbnz	r3, 800536c <__swsetup_r+0x14>
 8005368:	f7ff fece 	bl	8005108 <__sinit>
 800536c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005370:	0719      	lsls	r1, r3, #28
 8005372:	d422      	bmi.n	80053ba <__swsetup_r+0x62>
 8005374:	06da      	lsls	r2, r3, #27
 8005376:	d407      	bmi.n	8005388 <__swsetup_r+0x30>
 8005378:	2209      	movs	r2, #9
 800537a:	602a      	str	r2, [r5, #0]
 800537c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005386:	e033      	b.n	80053f0 <__swsetup_r+0x98>
 8005388:	0758      	lsls	r0, r3, #29
 800538a:	d512      	bpl.n	80053b2 <__swsetup_r+0x5a>
 800538c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800538e:	b141      	cbz	r1, 80053a2 <__swsetup_r+0x4a>
 8005390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005394:	4299      	cmp	r1, r3
 8005396:	d002      	beq.n	800539e <__swsetup_r+0x46>
 8005398:	4628      	mov	r0, r5
 800539a:	f000 ff0d 	bl	80061b8 <_free_r>
 800539e:	2300      	movs	r3, #0
 80053a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	2300      	movs	r3, #0
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	f043 0308 	orr.w	r3, r3, #8
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	b94b      	cbnz	r3, 80053d2 <__swsetup_r+0x7a>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c8:	d003      	beq.n	80053d2 <__swsetup_r+0x7a>
 80053ca:	4621      	mov	r1, r4
 80053cc:	4628      	mov	r0, r5
 80053ce:	f001 fd81 	bl	8006ed4 <__smakebuf_r>
 80053d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d6:	f013 0201 	ands.w	r2, r3, #1
 80053da:	d00a      	beq.n	80053f2 <__swsetup_r+0x9a>
 80053dc:	2200      	movs	r2, #0
 80053de:	60a2      	str	r2, [r4, #8]
 80053e0:	6962      	ldr	r2, [r4, #20]
 80053e2:	4252      	negs	r2, r2
 80053e4:	61a2      	str	r2, [r4, #24]
 80053e6:	6922      	ldr	r2, [r4, #16]
 80053e8:	b942      	cbnz	r2, 80053fc <__swsetup_r+0xa4>
 80053ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053ee:	d1c5      	bne.n	800537c <__swsetup_r+0x24>
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
 80053f2:	0799      	lsls	r1, r3, #30
 80053f4:	bf58      	it	pl
 80053f6:	6962      	ldrpl	r2, [r4, #20]
 80053f8:	60a2      	str	r2, [r4, #8]
 80053fa:	e7f4      	b.n	80053e6 <__swsetup_r+0x8e>
 80053fc:	2000      	movs	r0, #0
 80053fe:	e7f7      	b.n	80053f0 <__swsetup_r+0x98>
 8005400:	20000020 	.word	0x20000020

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <_localeconv_r>:
 8005414:	4800      	ldr	r0, [pc, #0]	@ (8005418 <_localeconv_r+0x4>)
 8005416:	4770      	bx	lr
 8005418:	20000160 	.word	0x20000160

0800541c <_close_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d06      	ldr	r5, [pc, #24]	@ (8005438 <_close_r+0x1c>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	f7fe fbfc 	bl	8003c24 <_close>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_close_r+0x1a>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_close_r+0x1a>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20000484 	.word	0x20000484

0800543c <_lseek_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d07      	ldr	r5, [pc, #28]	@ (800545c <_lseek_r+0x20>)
 8005440:	4604      	mov	r4, r0
 8005442:	4608      	mov	r0, r1
 8005444:	4611      	mov	r1, r2
 8005446:	2200      	movs	r2, #0
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f7fe fbab 	bl	8003ba6 <_lseek>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_lseek_r+0x1e>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_lseek_r+0x1e>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	20000484 	.word	0x20000484

08005460 <_read_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	@ (8005480 <_read_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fe fb43 	bl	8003afa <_read>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_read_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_read_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000484 	.word	0x20000484

08005484 <_write_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	@ (80054a4 <_write_r+0x20>)
 8005488:	4604      	mov	r4, r0
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	2200      	movs	r2, #0
 8005490:	602a      	str	r2, [r5, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	f7fe fb99 	bl	8003bca <_write>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_write_r+0x1e>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_write_r+0x1e>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000484 	.word	0x20000484

080054a8 <__errno>:
 80054a8:	4b01      	ldr	r3, [pc, #4]	@ (80054b0 <__errno+0x8>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20000020 	.word	0x20000020

080054b4 <__libc_init_array>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4d0d      	ldr	r5, [pc, #52]	@ (80054ec <__libc_init_array+0x38>)
 80054b8:	4c0d      	ldr	r4, [pc, #52]	@ (80054f0 <__libc_init_array+0x3c>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	2600      	movs	r6, #0
 80054c0:	42a6      	cmp	r6, r4
 80054c2:	d109      	bne.n	80054d8 <__libc_init_array+0x24>
 80054c4:	4d0b      	ldr	r5, [pc, #44]	@ (80054f4 <__libc_init_array+0x40>)
 80054c6:	4c0c      	ldr	r4, [pc, #48]	@ (80054f8 <__libc_init_array+0x44>)
 80054c8:	f001 fe3a 	bl	8007140 <_init>
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	2600      	movs	r6, #0
 80054d2:	42a6      	cmp	r6, r4
 80054d4:	d105      	bne.n	80054e2 <__libc_init_array+0x2e>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054dc:	4798      	blx	r3
 80054de:	3601      	adds	r6, #1
 80054e0:	e7ee      	b.n	80054c0 <__libc_init_array+0xc>
 80054e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e6:	4798      	blx	r3
 80054e8:	3601      	adds	r6, #1
 80054ea:	e7f2      	b.n	80054d2 <__libc_init_array+0x1e>
 80054ec:	0800758c 	.word	0x0800758c
 80054f0:	0800758c 	.word	0x0800758c
 80054f4:	0800758c 	.word	0x0800758c
 80054f8:	08007590 	.word	0x08007590

080054fc <__retarget_lock_init_recursive>:
 80054fc:	4770      	bx	lr

080054fe <__retarget_lock_acquire_recursive>:
 80054fe:	4770      	bx	lr

08005500 <__retarget_lock_release_recursive>:
 8005500:	4770      	bx	lr

08005502 <quorem>:
 8005502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005506:	6903      	ldr	r3, [r0, #16]
 8005508:	690c      	ldr	r4, [r1, #16]
 800550a:	42a3      	cmp	r3, r4
 800550c:	4607      	mov	r7, r0
 800550e:	db7e      	blt.n	800560e <quorem+0x10c>
 8005510:	3c01      	subs	r4, #1
 8005512:	f101 0814 	add.w	r8, r1, #20
 8005516:	00a3      	lsls	r3, r4, #2
 8005518:	f100 0514 	add.w	r5, r0, #20
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800552c:	3301      	adds	r3, #1
 800552e:	429a      	cmp	r2, r3
 8005530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005534:	fbb2 f6f3 	udiv	r6, r2, r3
 8005538:	d32e      	bcc.n	8005598 <quorem+0x96>
 800553a:	f04f 0a00 	mov.w	sl, #0
 800553e:	46c4      	mov	ip, r8
 8005540:	46ae      	mov	lr, r5
 8005542:	46d3      	mov	fp, sl
 8005544:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005548:	b298      	uxth	r0, r3
 800554a:	fb06 a000 	mla	r0, r6, r0, sl
 800554e:	0c02      	lsrs	r2, r0, #16
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	fb06 2303 	mla	r3, r6, r3, r2
 8005556:	f8de 2000 	ldr.w	r2, [lr]
 800555a:	b280      	uxth	r0, r0
 800555c:	b292      	uxth	r2, r2
 800555e:	1a12      	subs	r2, r2, r0
 8005560:	445a      	add	r2, fp
 8005562:	f8de 0000 	ldr.w	r0, [lr]
 8005566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800556a:	b29b      	uxth	r3, r3
 800556c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005570:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005574:	b292      	uxth	r2, r2
 8005576:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800557a:	45e1      	cmp	r9, ip
 800557c:	f84e 2b04 	str.w	r2, [lr], #4
 8005580:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005584:	d2de      	bcs.n	8005544 <quorem+0x42>
 8005586:	9b00      	ldr	r3, [sp, #0]
 8005588:	58eb      	ldr	r3, [r5, r3]
 800558a:	b92b      	cbnz	r3, 8005598 <quorem+0x96>
 800558c:	9b01      	ldr	r3, [sp, #4]
 800558e:	3b04      	subs	r3, #4
 8005590:	429d      	cmp	r5, r3
 8005592:	461a      	mov	r2, r3
 8005594:	d32f      	bcc.n	80055f6 <quorem+0xf4>
 8005596:	613c      	str	r4, [r7, #16]
 8005598:	4638      	mov	r0, r7
 800559a:	f001 f97f 	bl	800689c <__mcmp>
 800559e:	2800      	cmp	r0, #0
 80055a0:	db25      	blt.n	80055ee <quorem+0xec>
 80055a2:	4629      	mov	r1, r5
 80055a4:	2000      	movs	r0, #0
 80055a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80055aa:	f8d1 c000 	ldr.w	ip, [r1]
 80055ae:	fa1f fe82 	uxth.w	lr, r2
 80055b2:	fa1f f38c 	uxth.w	r3, ip
 80055b6:	eba3 030e 	sub.w	r3, r3, lr
 80055ba:	4403      	add	r3, r0
 80055bc:	0c12      	lsrs	r2, r2, #16
 80055be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055cc:	45c1      	cmp	r9, r8
 80055ce:	f841 3b04 	str.w	r3, [r1], #4
 80055d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055d6:	d2e6      	bcs.n	80055a6 <quorem+0xa4>
 80055d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055e0:	b922      	cbnz	r2, 80055ec <quorem+0xea>
 80055e2:	3b04      	subs	r3, #4
 80055e4:	429d      	cmp	r5, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	d30b      	bcc.n	8005602 <quorem+0x100>
 80055ea:	613c      	str	r4, [r7, #16]
 80055ec:	3601      	adds	r6, #1
 80055ee:	4630      	mov	r0, r6
 80055f0:	b003      	add	sp, #12
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d1cb      	bne.n	8005596 <quorem+0x94>
 80055fe:	3c01      	subs	r4, #1
 8005600:	e7c6      	b.n	8005590 <quorem+0x8e>
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	3b04      	subs	r3, #4
 8005606:	2a00      	cmp	r2, #0
 8005608:	d1ef      	bne.n	80055ea <quorem+0xe8>
 800560a:	3c01      	subs	r4, #1
 800560c:	e7ea      	b.n	80055e4 <quorem+0xe2>
 800560e:	2000      	movs	r0, #0
 8005610:	e7ee      	b.n	80055f0 <quorem+0xee>
 8005612:	0000      	movs	r0, r0
 8005614:	0000      	movs	r0, r0
	...

08005618 <_dtoa_r>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	69c7      	ldr	r7, [r0, #28]
 800561e:	b097      	sub	sp, #92	@ 0x5c
 8005620:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005624:	ec55 4b10 	vmov	r4, r5, d0
 8005628:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800562a:	9107      	str	r1, [sp, #28]
 800562c:	4681      	mov	r9, r0
 800562e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005630:	9311      	str	r3, [sp, #68]	@ 0x44
 8005632:	b97f      	cbnz	r7, 8005654 <_dtoa_r+0x3c>
 8005634:	2010      	movs	r0, #16
 8005636:	f000 fe09 	bl	800624c <malloc>
 800563a:	4602      	mov	r2, r0
 800563c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005640:	b920      	cbnz	r0, 800564c <_dtoa_r+0x34>
 8005642:	4ba9      	ldr	r3, [pc, #676]	@ (80058e8 <_dtoa_r+0x2d0>)
 8005644:	21ef      	movs	r1, #239	@ 0xef
 8005646:	48a9      	ldr	r0, [pc, #676]	@ (80058ec <_dtoa_r+0x2d4>)
 8005648:	f001 fcc0 	bl	8006fcc <__assert_func>
 800564c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005650:	6007      	str	r7, [r0, #0]
 8005652:	60c7      	str	r7, [r0, #12]
 8005654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	b159      	cbz	r1, 8005674 <_dtoa_r+0x5c>
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	604a      	str	r2, [r1, #4]
 8005660:	2301      	movs	r3, #1
 8005662:	4093      	lsls	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
 8005666:	4648      	mov	r0, r9
 8005668:	f000 fee6 	bl	8006438 <_Bfree>
 800566c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	1e2b      	subs	r3, r5, #0
 8005676:	bfb9      	ittee	lt
 8005678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800567c:	9305      	strlt	r3, [sp, #20]
 800567e:	2300      	movge	r3, #0
 8005680:	6033      	strge	r3, [r6, #0]
 8005682:	9f05      	ldr	r7, [sp, #20]
 8005684:	4b9a      	ldr	r3, [pc, #616]	@ (80058f0 <_dtoa_r+0x2d8>)
 8005686:	bfbc      	itt	lt
 8005688:	2201      	movlt	r2, #1
 800568a:	6032      	strlt	r2, [r6, #0]
 800568c:	43bb      	bics	r3, r7
 800568e:	d112      	bne.n	80056b6 <_dtoa_r+0x9e>
 8005690:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800569c:	4323      	orrs	r3, r4
 800569e:	f000 855a 	beq.w	8006156 <_dtoa_r+0xb3e>
 80056a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005904 <_dtoa_r+0x2ec>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 855c 	beq.w	8006166 <_dtoa_r+0xb4e>
 80056ae:	f10a 0303 	add.w	r3, sl, #3
 80056b2:	f000 bd56 	b.w	8006162 <_dtoa_r+0xb4a>
 80056b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80056ba:	2200      	movs	r2, #0
 80056bc:	ec51 0b17 	vmov	r0, r1, d7
 80056c0:	2300      	movs	r3, #0
 80056c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80056c6:	f7fb fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ca:	4680      	mov	r8, r0
 80056cc:	b158      	cbz	r0, 80056e6 <_dtoa_r+0xce>
 80056ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056d0:	2301      	movs	r3, #1
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056d6:	b113      	cbz	r3, 80056de <_dtoa_r+0xc6>
 80056d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056da:	4b86      	ldr	r3, [pc, #536]	@ (80058f4 <_dtoa_r+0x2dc>)
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005908 <_dtoa_r+0x2f0>
 80056e2:	f000 bd40 	b.w	8006166 <_dtoa_r+0xb4e>
 80056e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80056ea:	aa14      	add	r2, sp, #80	@ 0x50
 80056ec:	a915      	add	r1, sp, #84	@ 0x54
 80056ee:	4648      	mov	r0, r9
 80056f0:	f001 f984 	bl	80069fc <__d2b>
 80056f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056f8:	9002      	str	r0, [sp, #8]
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d078      	beq.n	80057f0 <_dtoa_r+0x1d8>
 80056fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005700:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800570c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005718:	4619      	mov	r1, r3
 800571a:	2200      	movs	r2, #0
 800571c:	4b76      	ldr	r3, [pc, #472]	@ (80058f8 <_dtoa_r+0x2e0>)
 800571e:	f7fa fdbb 	bl	8000298 <__aeabi_dsub>
 8005722:	a36b      	add	r3, pc, #428	@ (adr r3, 80058d0 <_dtoa_r+0x2b8>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa ff6e 	bl	8000608 <__aeabi_dmul>
 800572c:	a36a      	add	r3, pc, #424	@ (adr r3, 80058d8 <_dtoa_r+0x2c0>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fa fdb3 	bl	800029c <__adddf3>
 8005736:	4604      	mov	r4, r0
 8005738:	4630      	mov	r0, r6
 800573a:	460d      	mov	r5, r1
 800573c:	f7fa fefa 	bl	8000534 <__aeabi_i2d>
 8005740:	a367      	add	r3, pc, #412	@ (adr r3, 80058e0 <_dtoa_r+0x2c8>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa ff5f 	bl	8000608 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fda3 	bl	800029c <__adddf3>
 8005756:	4604      	mov	r4, r0
 8005758:	460d      	mov	r5, r1
 800575a:	f7fb fa05 	bl	8000b68 <__aeabi_d2iz>
 800575e:	2200      	movs	r2, #0
 8005760:	4607      	mov	r7, r0
 8005762:	2300      	movs	r3, #0
 8005764:	4620      	mov	r0, r4
 8005766:	4629      	mov	r1, r5
 8005768:	f7fb f9c0 	bl	8000aec <__aeabi_dcmplt>
 800576c:	b140      	cbz	r0, 8005780 <_dtoa_r+0x168>
 800576e:	4638      	mov	r0, r7
 8005770:	f7fa fee0 	bl	8000534 <__aeabi_i2d>
 8005774:	4622      	mov	r2, r4
 8005776:	462b      	mov	r3, r5
 8005778:	f7fb f9ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800577c:	b900      	cbnz	r0, 8005780 <_dtoa_r+0x168>
 800577e:	3f01      	subs	r7, #1
 8005780:	2f16      	cmp	r7, #22
 8005782:	d852      	bhi.n	800582a <_dtoa_r+0x212>
 8005784:	4b5d      	ldr	r3, [pc, #372]	@ (80058fc <_dtoa_r+0x2e4>)
 8005786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005792:	f7fb f9ab 	bl	8000aec <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	d049      	beq.n	800582e <_dtoa_r+0x216>
 800579a:	3f01      	subs	r7, #1
 800579c:	2300      	movs	r3, #0
 800579e:	9310      	str	r3, [sp, #64]	@ 0x40
 80057a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057a2:	1b9b      	subs	r3, r3, r6
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	bf45      	ittet	mi
 80057a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80057ac:	9300      	strmi	r3, [sp, #0]
 80057ae:	2300      	movpl	r3, #0
 80057b0:	2300      	movmi	r3, #0
 80057b2:	9206      	str	r2, [sp, #24]
 80057b4:	bf54      	ite	pl
 80057b6:	9300      	strpl	r3, [sp, #0]
 80057b8:	9306      	strmi	r3, [sp, #24]
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	db39      	blt.n	8005832 <_dtoa_r+0x21a>
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80057c2:	443b      	add	r3, r7
 80057c4:	9306      	str	r3, [sp, #24]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9308      	str	r3, [sp, #32]
 80057ca:	9b07      	ldr	r3, [sp, #28]
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d863      	bhi.n	8005898 <_dtoa_r+0x280>
 80057d0:	2b05      	cmp	r3, #5
 80057d2:	bfc4      	itt	gt
 80057d4:	3b04      	subgt	r3, #4
 80057d6:	9307      	strgt	r3, [sp, #28]
 80057d8:	9b07      	ldr	r3, [sp, #28]
 80057da:	f1a3 0302 	sub.w	r3, r3, #2
 80057de:	bfcc      	ite	gt
 80057e0:	2400      	movgt	r4, #0
 80057e2:	2401      	movle	r4, #1
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d863      	bhi.n	80058b0 <_dtoa_r+0x298>
 80057e8:	e8df f003 	tbb	[pc, r3]
 80057ec:	2b375452 	.word	0x2b375452
 80057f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057f4:	441e      	add	r6, r3
 80057f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	bfc1      	itttt	gt
 80057fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005802:	409f      	lslgt	r7, r3
 8005804:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005808:	fa24 f303 	lsrgt.w	r3, r4, r3
 800580c:	bfd6      	itet	le
 800580e:	f1c3 0320 	rsble	r3, r3, #32
 8005812:	ea47 0003 	orrgt.w	r0, r7, r3
 8005816:	fa04 f003 	lslle.w	r0, r4, r3
 800581a:	f7fa fe7b 	bl	8000514 <__aeabi_ui2d>
 800581e:	2201      	movs	r2, #1
 8005820:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005824:	3e01      	subs	r6, #1
 8005826:	9212      	str	r2, [sp, #72]	@ 0x48
 8005828:	e776      	b.n	8005718 <_dtoa_r+0x100>
 800582a:	2301      	movs	r3, #1
 800582c:	e7b7      	b.n	800579e <_dtoa_r+0x186>
 800582e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005830:	e7b6      	b.n	80057a0 <_dtoa_r+0x188>
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	1bdb      	subs	r3, r3, r7
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	427b      	negs	r3, r7
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	2300      	movs	r3, #0
 800583e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005840:	e7c3      	b.n	80057ca <_dtoa_r+0x1b2>
 8005842:	2301      	movs	r3, #1
 8005844:	9309      	str	r3, [sp, #36]	@ 0x24
 8005846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005848:	eb07 0b03 	add.w	fp, r7, r3
 800584c:	f10b 0301 	add.w	r3, fp, #1
 8005850:	2b01      	cmp	r3, #1
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	bfb8      	it	lt
 8005856:	2301      	movlt	r3, #1
 8005858:	e006      	b.n	8005868 <_dtoa_r+0x250>
 800585a:	2301      	movs	r3, #1
 800585c:	9309      	str	r3, [sp, #36]	@ 0x24
 800585e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	dd28      	ble.n	80058b6 <_dtoa_r+0x29e>
 8005864:	469b      	mov	fp, r3
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800586c:	2100      	movs	r1, #0
 800586e:	2204      	movs	r2, #4
 8005870:	f102 0514 	add.w	r5, r2, #20
 8005874:	429d      	cmp	r5, r3
 8005876:	d926      	bls.n	80058c6 <_dtoa_r+0x2ae>
 8005878:	6041      	str	r1, [r0, #4]
 800587a:	4648      	mov	r0, r9
 800587c:	f000 fd9c 	bl	80063b8 <_Balloc>
 8005880:	4682      	mov	sl, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d142      	bne.n	800590c <_dtoa_r+0x2f4>
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <_dtoa_r+0x2e8>)
 8005888:	4602      	mov	r2, r0
 800588a:	f240 11af 	movw	r1, #431	@ 0x1af
 800588e:	e6da      	b.n	8005646 <_dtoa_r+0x2e>
 8005890:	2300      	movs	r3, #0
 8005892:	e7e3      	b.n	800585c <_dtoa_r+0x244>
 8005894:	2300      	movs	r3, #0
 8005896:	e7d5      	b.n	8005844 <_dtoa_r+0x22c>
 8005898:	2401      	movs	r4, #1
 800589a:	2300      	movs	r3, #0
 800589c:	9307      	str	r3, [sp, #28]
 800589e:	9409      	str	r4, [sp, #36]	@ 0x24
 80058a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80058aa:	2312      	movs	r3, #18
 80058ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80058ae:	e7db      	b.n	8005868 <_dtoa_r+0x250>
 80058b0:	2301      	movs	r3, #1
 80058b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b4:	e7f4      	b.n	80058a0 <_dtoa_r+0x288>
 80058b6:	f04f 0b01 	mov.w	fp, #1
 80058ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80058be:	465b      	mov	r3, fp
 80058c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80058c4:	e7d0      	b.n	8005868 <_dtoa_r+0x250>
 80058c6:	3101      	adds	r1, #1
 80058c8:	0052      	lsls	r2, r2, #1
 80058ca:	e7d1      	b.n	8005870 <_dtoa_r+0x258>
 80058cc:	f3af 8000 	nop.w
 80058d0:	636f4361 	.word	0x636f4361
 80058d4:	3fd287a7 	.word	0x3fd287a7
 80058d8:	8b60c8b3 	.word	0x8b60c8b3
 80058dc:	3fc68a28 	.word	0x3fc68a28
 80058e0:	509f79fb 	.word	0x509f79fb
 80058e4:	3fd34413 	.word	0x3fd34413
 80058e8:	0800723b 	.word	0x0800723b
 80058ec:	08007252 	.word	0x08007252
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	0800720b 	.word	0x0800720b
 80058f8:	3ff80000 	.word	0x3ff80000
 80058fc:	080073b8 	.word	0x080073b8
 8005900:	080072aa 	.word	0x080072aa
 8005904:	08007237 	.word	0x08007237
 8005908:	0800720a 	.word	0x0800720a
 800590c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005910:	6018      	str	r0, [r3, #0]
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	2b0e      	cmp	r3, #14
 8005916:	f200 80a1 	bhi.w	8005a5c <_dtoa_r+0x444>
 800591a:	2c00      	cmp	r4, #0
 800591c:	f000 809e 	beq.w	8005a5c <_dtoa_r+0x444>
 8005920:	2f00      	cmp	r7, #0
 8005922:	dd33      	ble.n	800598c <_dtoa_r+0x374>
 8005924:	4b9c      	ldr	r3, [pc, #624]	@ (8005b98 <_dtoa_r+0x580>)
 8005926:	f007 020f 	and.w	r2, r7, #15
 800592a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800592e:	ed93 7b00 	vldr	d7, [r3]
 8005932:	05f8      	lsls	r0, r7, #23
 8005934:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800593c:	d516      	bpl.n	800596c <_dtoa_r+0x354>
 800593e:	4b97      	ldr	r3, [pc, #604]	@ (8005b9c <_dtoa_r+0x584>)
 8005940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005948:	f7fa ff88 	bl	800085c <__aeabi_ddiv>
 800594c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005950:	f004 040f 	and.w	r4, r4, #15
 8005954:	2603      	movs	r6, #3
 8005956:	4d91      	ldr	r5, [pc, #580]	@ (8005b9c <_dtoa_r+0x584>)
 8005958:	b954      	cbnz	r4, 8005970 <_dtoa_r+0x358>
 800595a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800595e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005962:	f7fa ff7b 	bl	800085c <__aeabi_ddiv>
 8005966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800596a:	e028      	b.n	80059be <_dtoa_r+0x3a6>
 800596c:	2602      	movs	r6, #2
 800596e:	e7f2      	b.n	8005956 <_dtoa_r+0x33e>
 8005970:	07e1      	lsls	r1, r4, #31
 8005972:	d508      	bpl.n	8005986 <_dtoa_r+0x36e>
 8005974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800597c:	f7fa fe44 	bl	8000608 <__aeabi_dmul>
 8005980:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005984:	3601      	adds	r6, #1
 8005986:	1064      	asrs	r4, r4, #1
 8005988:	3508      	adds	r5, #8
 800598a:	e7e5      	b.n	8005958 <_dtoa_r+0x340>
 800598c:	f000 80af 	beq.w	8005aee <_dtoa_r+0x4d6>
 8005990:	427c      	negs	r4, r7
 8005992:	4b81      	ldr	r3, [pc, #516]	@ (8005b98 <_dtoa_r+0x580>)
 8005994:	4d81      	ldr	r5, [pc, #516]	@ (8005b9c <_dtoa_r+0x584>)
 8005996:	f004 020f 	and.w	r2, r4, #15
 800599a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ae:	1124      	asrs	r4, r4, #4
 80059b0:	2300      	movs	r3, #0
 80059b2:	2602      	movs	r6, #2
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	f040 808f 	bne.w	8005ad8 <_dtoa_r+0x4c0>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1d3      	bne.n	8005966 <_dtoa_r+0x34e>
 80059be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80059c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8094 	beq.w	8005af2 <_dtoa_r+0x4da>
 80059ca:	4b75      	ldr	r3, [pc, #468]	@ (8005ba0 <_dtoa_r+0x588>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7fb f88b 	bl	8000aec <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f000 808b 	beq.w	8005af2 <_dtoa_r+0x4da>
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8087 	beq.w	8005af2 <_dtoa_r+0x4da>
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	dd34      	ble.n	8005a54 <_dtoa_r+0x43c>
 80059ea:	4620      	mov	r0, r4
 80059ec:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba4 <_dtoa_r+0x58c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fa fe09 	bl	8000608 <__aeabi_dmul>
 80059f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059fa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80059fe:	3601      	adds	r6, #1
 8005a00:	465c      	mov	r4, fp
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fa fd96 	bl	8000534 <__aeabi_i2d>
 8005a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0c:	f7fa fdfc 	bl	8000608 <__aeabi_dmul>
 8005a10:	4b65      	ldr	r3, [pc, #404]	@ (8005ba8 <_dtoa_r+0x590>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	f7fa fc42 	bl	800029c <__adddf3>
 8005a18:	4605      	mov	r5, r0
 8005a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	d16a      	bne.n	8005af8 <_dtoa_r+0x4e0>
 8005a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a26:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <_dtoa_r+0x594>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f7fa fc35 	bl	8000298 <__aeabi_dsub>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a36:	462a      	mov	r2, r5
 8005a38:	4633      	mov	r3, r6
 8005a3a:	f7fb f875 	bl	8000b28 <__aeabi_dcmpgt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f040 8298 	bne.w	8005f74 <_dtoa_r+0x95c>
 8005a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a4e:	f7fb f84d 	bl	8000aec <__aeabi_dcmplt>
 8005a52:	bb38      	cbnz	r0, 8005aa4 <_dtoa_r+0x48c>
 8005a54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f2c0 8157 	blt.w	8005d12 <_dtoa_r+0x6fa>
 8005a64:	2f0e      	cmp	r7, #14
 8005a66:	f300 8154 	bgt.w	8005d12 <_dtoa_r+0x6fa>
 8005a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b98 <_dtoa_r+0x580>)
 8005a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a70:	ed93 7b00 	vldr	d7, [r3]
 8005a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	ed8d 7b00 	vstr	d7, [sp]
 8005a7c:	f280 80e5 	bge.w	8005c4a <_dtoa_r+0x632>
 8005a80:	9b03      	ldr	r3, [sp, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f300 80e1 	bgt.w	8005c4a <_dtoa_r+0x632>
 8005a88:	d10c      	bne.n	8005aa4 <_dtoa_r+0x48c>
 8005a8a:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <_dtoa_r+0x594>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	ec51 0b17 	vmov	r0, r1, d7
 8005a92:	f7fa fdb9 	bl	8000608 <__aeabi_dmul>
 8005a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9a:	f7fb f83b 	bl	8000b14 <__aeabi_dcmpge>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f000 8266 	beq.w	8005f70 <_dtoa_r+0x958>
 8005aa4:	2400      	movs	r4, #0
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005aaa:	4656      	mov	r6, sl
 8005aac:	ea6f 0803 	mvn.w	r8, r3
 8005ab0:	2700      	movs	r7, #0
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4648      	mov	r0, r9
 8005ab6:	f000 fcbf 	bl	8006438 <_Bfree>
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	f000 80bd 	beq.w	8005c3a <_dtoa_r+0x622>
 8005ac0:	b12f      	cbz	r7, 8005ace <_dtoa_r+0x4b6>
 8005ac2:	42af      	cmp	r7, r5
 8005ac4:	d003      	beq.n	8005ace <_dtoa_r+0x4b6>
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4648      	mov	r0, r9
 8005aca:	f000 fcb5 	bl	8006438 <_Bfree>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	f000 fcb1 	bl	8006438 <_Bfree>
 8005ad6:	e0b0      	b.n	8005c3a <_dtoa_r+0x622>
 8005ad8:	07e2      	lsls	r2, r4, #31
 8005ada:	d505      	bpl.n	8005ae8 <_dtoa_r+0x4d0>
 8005adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ae0:	f7fa fd92 	bl	8000608 <__aeabi_dmul>
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	1064      	asrs	r4, r4, #1
 8005aea:	3508      	adds	r5, #8
 8005aec:	e762      	b.n	80059b4 <_dtoa_r+0x39c>
 8005aee:	2602      	movs	r6, #2
 8005af0:	e765      	b.n	80059be <_dtoa_r+0x3a6>
 8005af2:	9c03      	ldr	r4, [sp, #12]
 8005af4:	46b8      	mov	r8, r7
 8005af6:	e784      	b.n	8005a02 <_dtoa_r+0x3ea>
 8005af8:	4b27      	ldr	r3, [pc, #156]	@ (8005b98 <_dtoa_r+0x580>)
 8005afa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b04:	4454      	add	r4, sl
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d054      	beq.n	8005bb4 <_dtoa_r+0x59c>
 8005b0a:	4929      	ldr	r1, [pc, #164]	@ (8005bb0 <_dtoa_r+0x598>)
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7fa fea5 	bl	800085c <__aeabi_ddiv>
 8005b12:	4633      	mov	r3, r6
 8005b14:	462a      	mov	r2, r5
 8005b16:	f7fa fbbf 	bl	8000298 <__aeabi_dsub>
 8005b1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b1e:	4656      	mov	r6, sl
 8005b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b24:	f7fb f820 	bl	8000b68 <__aeabi_d2iz>
 8005b28:	4605      	mov	r5, r0
 8005b2a:	f7fa fd03 	bl	8000534 <__aeabi_i2d>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b36:	f7fa fbaf 	bl	8000298 <__aeabi_dsub>
 8005b3a:	3530      	adds	r5, #48	@ 0x30
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b44:	f806 5b01 	strb.w	r5, [r6], #1
 8005b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b4c:	f7fa ffce 	bl	8000aec <__aeabi_dcmplt>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d172      	bne.n	8005c3a <_dtoa_r+0x622>
 8005b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b58:	4911      	ldr	r1, [pc, #68]	@ (8005ba0 <_dtoa_r+0x588>)
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f7fa fb9c 	bl	8000298 <__aeabi_dsub>
 8005b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b64:	f7fa ffc2 	bl	8000aec <__aeabi_dcmplt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 80b4 	bne.w	8005cd6 <_dtoa_r+0x6be>
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	f43f af70 	beq.w	8005a54 <_dtoa_r+0x43c>
 8005b74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <_dtoa_r+0x58c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f7fa fd44 	bl	8000608 <__aeabi_dmul>
 8005b80:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <_dtoa_r+0x58c>)
 8005b82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b86:	2200      	movs	r2, #0
 8005b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b8c:	f7fa fd3c 	bl	8000608 <__aeabi_dmul>
 8005b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b94:	e7c4      	b.n	8005b20 <_dtoa_r+0x508>
 8005b96:	bf00      	nop
 8005b98:	080073b8 	.word	0x080073b8
 8005b9c:	08007390 	.word	0x08007390
 8005ba0:	3ff00000 	.word	0x3ff00000
 8005ba4:	40240000 	.word	0x40240000
 8005ba8:	401c0000 	.word	0x401c0000
 8005bac:	40140000 	.word	0x40140000
 8005bb0:	3fe00000 	.word	0x3fe00000
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7fa fd26 	bl	8000608 <__aeabi_dmul>
 8005bbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005bc2:	4656      	mov	r6, sl
 8005bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc8:	f7fa ffce 	bl	8000b68 <__aeabi_d2iz>
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f7fa fcb1 	bl	8000534 <__aeabi_i2d>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bda:	f7fa fb5d 	bl	8000298 <__aeabi_dsub>
 8005bde:	3530      	adds	r5, #48	@ 0x30
 8005be0:	f806 5b01 	strb.w	r5, [r6], #1
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	42a6      	cmp	r6, r4
 8005bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	d124      	bne.n	8005c3e <_dtoa_r+0x626>
 8005bf4:	4baf      	ldr	r3, [pc, #700]	@ (8005eb4 <_dtoa_r+0x89c>)
 8005bf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bfa:	f7fa fb4f 	bl	800029c <__adddf3>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c06:	f7fa ff8f 	bl	8000b28 <__aeabi_dcmpgt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d163      	bne.n	8005cd6 <_dtoa_r+0x6be>
 8005c0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c12:	49a8      	ldr	r1, [pc, #672]	@ (8005eb4 <_dtoa_r+0x89c>)
 8005c14:	2000      	movs	r0, #0
 8005c16:	f7fa fb3f 	bl	8000298 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c22:	f7fa ff63 	bl	8000aec <__aeabi_dcmplt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f43f af14 	beq.w	8005a54 <_dtoa_r+0x43c>
 8005c2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c2e:	1e73      	subs	r3, r6, #1
 8005c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c36:	2b30      	cmp	r3, #48	@ 0x30
 8005c38:	d0f8      	beq.n	8005c2c <_dtoa_r+0x614>
 8005c3a:	4647      	mov	r7, r8
 8005c3c:	e03b      	b.n	8005cb6 <_dtoa_r+0x69e>
 8005c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005eb8 <_dtoa_r+0x8a0>)
 8005c40:	f7fa fce2 	bl	8000608 <__aeabi_dmul>
 8005c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c48:	e7bc      	b.n	8005bc4 <_dtoa_r+0x5ac>
 8005c4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c4e:	4656      	mov	r6, sl
 8005c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fe00 	bl	800085c <__aeabi_ddiv>
 8005c5c:	f7fa ff84 	bl	8000b68 <__aeabi_d2iz>
 8005c60:	4680      	mov	r8, r0
 8005c62:	f7fa fc67 	bl	8000534 <__aeabi_i2d>
 8005c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c6a:	f7fa fccd 	bl	8000608 <__aeabi_dmul>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c7a:	f7fa fb0d 	bl	8000298 <__aeabi_dsub>
 8005c7e:	f806 4b01 	strb.w	r4, [r6], #1
 8005c82:	9d03      	ldr	r5, [sp, #12]
 8005c84:	eba6 040a 	sub.w	r4, r6, sl
 8005c88:	42a5      	cmp	r5, r4
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	d133      	bne.n	8005cf8 <_dtoa_r+0x6e0>
 8005c90:	f7fa fb04 	bl	800029c <__adddf3>
 8005c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c98:	4604      	mov	r4, r0
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	f7fa ff44 	bl	8000b28 <__aeabi_dcmpgt>
 8005ca0:	b9c0      	cbnz	r0, 8005cd4 <_dtoa_r+0x6bc>
 8005ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa ff15 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cae:	b110      	cbz	r0, 8005cb6 <_dtoa_r+0x69e>
 8005cb0:	f018 0f01 	tst.w	r8, #1
 8005cb4:	d10e      	bne.n	8005cd4 <_dtoa_r+0x6bc>
 8005cb6:	9902      	ldr	r1, [sp, #8]
 8005cb8:	4648      	mov	r0, r9
 8005cba:	f000 fbbd 	bl	8006438 <_Bfree>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	7033      	strb	r3, [r6, #0]
 8005cc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cc4:	3701      	adds	r7, #1
 8005cc6:	601f      	str	r7, [r3, #0]
 8005cc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 824b 	beq.w	8006166 <_dtoa_r+0xb4e>
 8005cd0:	601e      	str	r6, [r3, #0]
 8005cd2:	e248      	b.n	8006166 <_dtoa_r+0xb4e>
 8005cd4:	46b8      	mov	r8, r7
 8005cd6:	4633      	mov	r3, r6
 8005cd8:	461e      	mov	r6, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a39      	cmp	r2, #57	@ 0x39
 8005ce0:	d106      	bne.n	8005cf0 <_dtoa_r+0x6d8>
 8005ce2:	459a      	cmp	sl, r3
 8005ce4:	d1f8      	bne.n	8005cd8 <_dtoa_r+0x6c0>
 8005ce6:	2230      	movs	r2, #48	@ 0x30
 8005ce8:	f108 0801 	add.w	r8, r8, #1
 8005cec:	f88a 2000 	strb.w	r2, [sl]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e7a0      	b.n	8005c3a <_dtoa_r+0x622>
 8005cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb8 <_dtoa_r+0x8a0>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f7fa fc84 	bl	8000608 <__aeabi_dmul>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	f7fa fee6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d09f      	beq.n	8005c50 <_dtoa_r+0x638>
 8005d10:	e7d1      	b.n	8005cb6 <_dtoa_r+0x69e>
 8005d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 80ea 	beq.w	8005eee <_dtoa_r+0x8d6>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	2a01      	cmp	r2, #1
 8005d1e:	f300 80cd 	bgt.w	8005ebc <_dtoa_r+0x8a4>
 8005d22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f000 80c1 	beq.w	8005eac <_dtoa_r+0x894>
 8005d2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d2e:	9c08      	ldr	r4, [sp, #32]
 8005d30:	9e00      	ldr	r6, [sp, #0]
 8005d32:	9a00      	ldr	r2, [sp, #0]
 8005d34:	441a      	add	r2, r3
 8005d36:	9200      	str	r2, [sp, #0]
 8005d38:	9a06      	ldr	r2, [sp, #24]
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	441a      	add	r2, r3
 8005d3e:	4648      	mov	r0, r9
 8005d40:	9206      	str	r2, [sp, #24]
 8005d42:	f000 fc2d 	bl	80065a0 <__i2b>
 8005d46:	4605      	mov	r5, r0
 8005d48:	b166      	cbz	r6, 8005d64 <_dtoa_r+0x74c>
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd09      	ble.n	8005d64 <_dtoa_r+0x74c>
 8005d50:	42b3      	cmp	r3, r6
 8005d52:	9a00      	ldr	r2, [sp, #0]
 8005d54:	bfa8      	it	ge
 8005d56:	4633      	movge	r3, r6
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	9200      	str	r2, [sp, #0]
 8005d5c:	9a06      	ldr	r2, [sp, #24]
 8005d5e:	1af6      	subs	r6, r6, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	b30b      	cbz	r3, 8005dac <_dtoa_r+0x794>
 8005d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80c6 	beq.w	8005efc <_dtoa_r+0x8e4>
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	f000 80c0 	beq.w	8005ef6 <_dtoa_r+0x8de>
 8005d76:	4629      	mov	r1, r5
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4648      	mov	r0, r9
 8005d7c:	f000 fcc8 	bl	8006710 <__pow5mult>
 8005d80:	9a02      	ldr	r2, [sp, #8]
 8005d82:	4601      	mov	r1, r0
 8005d84:	4605      	mov	r5, r0
 8005d86:	4648      	mov	r0, r9
 8005d88:	f000 fc20 	bl	80065cc <__multiply>
 8005d8c:	9902      	ldr	r1, [sp, #8]
 8005d8e:	4680      	mov	r8, r0
 8005d90:	4648      	mov	r0, r9
 8005d92:	f000 fb51 	bl	8006438 <_Bfree>
 8005d96:	9b08      	ldr	r3, [sp, #32]
 8005d98:	1b1b      	subs	r3, r3, r4
 8005d9a:	9308      	str	r3, [sp, #32]
 8005d9c:	f000 80b1 	beq.w	8005f02 <_dtoa_r+0x8ea>
 8005da0:	9a08      	ldr	r2, [sp, #32]
 8005da2:	4641      	mov	r1, r8
 8005da4:	4648      	mov	r0, r9
 8005da6:	f000 fcb3 	bl	8006710 <__pow5mult>
 8005daa:	9002      	str	r0, [sp, #8]
 8005dac:	2101      	movs	r1, #1
 8005dae:	4648      	mov	r0, r9
 8005db0:	f000 fbf6 	bl	80065a0 <__i2b>
 8005db4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005db6:	4604      	mov	r4, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 81d8 	beq.w	800616e <_dtoa_r+0xb56>
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	f000 fca4 	bl	8006710 <__pow5mult>
 8005dc8:	9b07      	ldr	r3, [sp, #28]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	4604      	mov	r4, r0
 8005dce:	f300 809f 	bgt.w	8005f10 <_dtoa_r+0x8f8>
 8005dd2:	9b04      	ldr	r3, [sp, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 8097 	bne.w	8005f08 <_dtoa_r+0x8f0>
 8005dda:	9b05      	ldr	r3, [sp, #20]
 8005ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 8093 	bne.w	8005f0c <_dtoa_r+0x8f4>
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dec:	0d1b      	lsrs	r3, r3, #20
 8005dee:	051b      	lsls	r3, r3, #20
 8005df0:	b133      	cbz	r3, 8005e00 <_dtoa_r+0x7e8>
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	9b06      	ldr	r3, [sp, #24]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	9306      	str	r3, [sp, #24]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	9308      	str	r3, [sp, #32]
 8005e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 81b8 	beq.w	800617a <_dtoa_r+0xb62>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e10:	6918      	ldr	r0, [r3, #16]
 8005e12:	f000 fb79 	bl	8006508 <__hi0bits>
 8005e16:	f1c0 0020 	rsb	r0, r0, #32
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	4418      	add	r0, r3
 8005e1e:	f010 001f 	ands.w	r0, r0, #31
 8005e22:	f000 8082 	beq.w	8005f2a <_dtoa_r+0x912>
 8005e26:	f1c0 0320 	rsb	r3, r0, #32
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	dd73      	ble.n	8005f16 <_dtoa_r+0x8fe>
 8005e2e:	9b00      	ldr	r3, [sp, #0]
 8005e30:	f1c0 001c 	rsb	r0, r0, #28
 8005e34:	4403      	add	r3, r0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	9b06      	ldr	r3, [sp, #24]
 8005e3a:	4403      	add	r3, r0
 8005e3c:	4406      	add	r6, r0
 8005e3e:	9306      	str	r3, [sp, #24]
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd05      	ble.n	8005e52 <_dtoa_r+0x83a>
 8005e46:	9902      	ldr	r1, [sp, #8]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	f000 fcba 	bl	80067c4 <__lshift>
 8005e50:	9002      	str	r0, [sp, #8]
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd05      	ble.n	8005e64 <_dtoa_r+0x84c>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4648      	mov	r0, r9
 8005e5e:	f000 fcb1 	bl	80067c4 <__lshift>
 8005e62:	4604      	mov	r4, r0
 8005e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d061      	beq.n	8005f2e <_dtoa_r+0x916>
 8005e6a:	9802      	ldr	r0, [sp, #8]
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	f000 fd15 	bl	800689c <__mcmp>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	da5b      	bge.n	8005f2e <_dtoa_r+0x916>
 8005e76:	2300      	movs	r3, #0
 8005e78:	9902      	ldr	r1, [sp, #8]
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	f000 fafd 	bl	800647c <__multadd>
 8005e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8177 	beq.w	800617e <_dtoa_r+0xb66>
 8005e90:	4629      	mov	r1, r5
 8005e92:	2300      	movs	r3, #0
 8005e94:	220a      	movs	r2, #10
 8005e96:	4648      	mov	r0, r9
 8005e98:	f000 faf0 	bl	800647c <__multadd>
 8005e9c:	f1bb 0f00 	cmp.w	fp, #0
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	dc6f      	bgt.n	8005f84 <_dtoa_r+0x96c>
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	dc49      	bgt.n	8005f3e <_dtoa_r+0x926>
 8005eaa:	e06b      	b.n	8005f84 <_dtoa_r+0x96c>
 8005eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eb2:	e73c      	b.n	8005d2e <_dtoa_r+0x716>
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1e5c      	subs	r4, r3, #1
 8005ec0:	9b08      	ldr	r3, [sp, #32]
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	db09      	blt.n	8005eda <_dtoa_r+0x8c2>
 8005ec6:	1b1c      	subs	r4, r3, r4
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f6bf af30 	bge.w	8005d30 <_dtoa_r+0x718>
 8005ed0:	9b00      	ldr	r3, [sp, #0]
 8005ed2:	9a03      	ldr	r2, [sp, #12]
 8005ed4:	1a9e      	subs	r6, r3, r2
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e72b      	b.n	8005d32 <_dtoa_r+0x71a>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ede:	9408      	str	r4, [sp, #32]
 8005ee0:	1ae3      	subs	r3, r4, r3
 8005ee2:	441a      	add	r2, r3
 8005ee4:	9e00      	ldr	r6, [sp, #0]
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005eea:	2400      	movs	r4, #0
 8005eec:	e721      	b.n	8005d32 <_dtoa_r+0x71a>
 8005eee:	9c08      	ldr	r4, [sp, #32]
 8005ef0:	9e00      	ldr	r6, [sp, #0]
 8005ef2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ef4:	e728      	b.n	8005d48 <_dtoa_r+0x730>
 8005ef6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005efa:	e751      	b.n	8005da0 <_dtoa_r+0x788>
 8005efc:	9a08      	ldr	r2, [sp, #32]
 8005efe:	9902      	ldr	r1, [sp, #8]
 8005f00:	e750      	b.n	8005da4 <_dtoa_r+0x78c>
 8005f02:	f8cd 8008 	str.w	r8, [sp, #8]
 8005f06:	e751      	b.n	8005dac <_dtoa_r+0x794>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e779      	b.n	8005e00 <_dtoa_r+0x7e8>
 8005f0c:	9b04      	ldr	r3, [sp, #16]
 8005f0e:	e777      	b.n	8005e00 <_dtoa_r+0x7e8>
 8005f10:	2300      	movs	r3, #0
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	e779      	b.n	8005e0a <_dtoa_r+0x7f2>
 8005f16:	d093      	beq.n	8005e40 <_dtoa_r+0x828>
 8005f18:	9a00      	ldr	r2, [sp, #0]
 8005f1a:	331c      	adds	r3, #28
 8005f1c:	441a      	add	r2, r3
 8005f1e:	9200      	str	r2, [sp, #0]
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	441a      	add	r2, r3
 8005f24:	441e      	add	r6, r3
 8005f26:	9206      	str	r2, [sp, #24]
 8005f28:	e78a      	b.n	8005e40 <_dtoa_r+0x828>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e7f4      	b.n	8005f18 <_dtoa_r+0x900>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	46b8      	mov	r8, r7
 8005f34:	dc20      	bgt.n	8005f78 <_dtoa_r+0x960>
 8005f36:	469b      	mov	fp, r3
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	dd1e      	ble.n	8005f7c <_dtoa_r+0x964>
 8005f3e:	f1bb 0f00 	cmp.w	fp, #0
 8005f42:	f47f adb1 	bne.w	8005aa8 <_dtoa_r+0x490>
 8005f46:	4621      	mov	r1, r4
 8005f48:	465b      	mov	r3, fp
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	4648      	mov	r0, r9
 8005f4e:	f000 fa95 	bl	800647c <__multadd>
 8005f52:	4601      	mov	r1, r0
 8005f54:	4604      	mov	r4, r0
 8005f56:	9802      	ldr	r0, [sp, #8]
 8005f58:	f000 fca0 	bl	800689c <__mcmp>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f77f ada3 	ble.w	8005aa8 <_dtoa_r+0x490>
 8005f62:	4656      	mov	r6, sl
 8005f64:	2331      	movs	r3, #49	@ 0x31
 8005f66:	f806 3b01 	strb.w	r3, [r6], #1
 8005f6a:	f108 0801 	add.w	r8, r8, #1
 8005f6e:	e59f      	b.n	8005ab0 <_dtoa_r+0x498>
 8005f70:	9c03      	ldr	r4, [sp, #12]
 8005f72:	46b8      	mov	r8, r7
 8005f74:	4625      	mov	r5, r4
 8005f76:	e7f4      	b.n	8005f62 <_dtoa_r+0x94a>
 8005f78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8101 	beq.w	8006186 <_dtoa_r+0xb6e>
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	dd05      	ble.n	8005f94 <_dtoa_r+0x97c>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fc19 	bl	80067c4 <__lshift>
 8005f92:	4605      	mov	r5, r0
 8005f94:	9b08      	ldr	r3, [sp, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d05c      	beq.n	8006054 <_dtoa_r+0xa3c>
 8005f9a:	6869      	ldr	r1, [r5, #4]
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	f000 fa0b 	bl	80063b8 <_Balloc>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <_dtoa_r+0x99a>
 8005fa6:	4b82      	ldr	r3, [pc, #520]	@ (80061b0 <_dtoa_r+0xb98>)
 8005fa8:	4602      	mov	r2, r0
 8005faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fae:	f7ff bb4a 	b.w	8005646 <_dtoa_r+0x2e>
 8005fb2:	692a      	ldr	r2, [r5, #16]
 8005fb4:	3202      	adds	r2, #2
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	f105 010c 	add.w	r1, r5, #12
 8005fbc:	300c      	adds	r0, #12
 8005fbe:	f000 fff7 	bl	8006fb0 <memcpy>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4648      	mov	r0, r9
 8005fc8:	f000 fbfc 	bl	80067c4 <__lshift>
 8005fcc:	f10a 0301 	add.w	r3, sl, #1
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	eb0a 030b 	add.w	r3, sl, fp
 8005fd6:	9308      	str	r3, [sp, #32]
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	462f      	mov	r7, r5
 8005fe0:	9306      	str	r3, [sp, #24]
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	9b00      	ldr	r3, [sp, #0]
 8005fe6:	9802      	ldr	r0, [sp, #8]
 8005fe8:	4621      	mov	r1, r4
 8005fea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005fee:	f7ff fa88 	bl	8005502 <quorem>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	3330      	adds	r3, #48	@ 0x30
 8005ff6:	9003      	str	r0, [sp, #12]
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	9802      	ldr	r0, [sp, #8]
 8005ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffe:	f000 fc4d 	bl	800689c <__mcmp>
 8006002:	462a      	mov	r2, r5
 8006004:	9004      	str	r0, [sp, #16]
 8006006:	4621      	mov	r1, r4
 8006008:	4648      	mov	r0, r9
 800600a:	f000 fc63 	bl	80068d4 <__mdiff>
 800600e:	68c2      	ldr	r2, [r0, #12]
 8006010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006012:	4606      	mov	r6, r0
 8006014:	bb02      	cbnz	r2, 8006058 <_dtoa_r+0xa40>
 8006016:	4601      	mov	r1, r0
 8006018:	9802      	ldr	r0, [sp, #8]
 800601a:	f000 fc3f 	bl	800689c <__mcmp>
 800601e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006020:	4602      	mov	r2, r0
 8006022:	4631      	mov	r1, r6
 8006024:	4648      	mov	r0, r9
 8006026:	920c      	str	r2, [sp, #48]	@ 0x30
 8006028:	9309      	str	r3, [sp, #36]	@ 0x24
 800602a:	f000 fa05 	bl	8006438 <_Bfree>
 800602e:	9b07      	ldr	r3, [sp, #28]
 8006030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006032:	9e00      	ldr	r6, [sp, #0]
 8006034:	ea42 0103 	orr.w	r1, r2, r3
 8006038:	9b06      	ldr	r3, [sp, #24]
 800603a:	4319      	orrs	r1, r3
 800603c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603e:	d10d      	bne.n	800605c <_dtoa_r+0xa44>
 8006040:	2b39      	cmp	r3, #57	@ 0x39
 8006042:	d027      	beq.n	8006094 <_dtoa_r+0xa7c>
 8006044:	9a04      	ldr	r2, [sp, #16]
 8006046:	2a00      	cmp	r2, #0
 8006048:	dd01      	ble.n	800604e <_dtoa_r+0xa36>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	3331      	adds	r3, #49	@ 0x31
 800604e:	f88b 3000 	strb.w	r3, [fp]
 8006052:	e52e      	b.n	8005ab2 <_dtoa_r+0x49a>
 8006054:	4628      	mov	r0, r5
 8006056:	e7b9      	b.n	8005fcc <_dtoa_r+0x9b4>
 8006058:	2201      	movs	r2, #1
 800605a:	e7e2      	b.n	8006022 <_dtoa_r+0xa0a>
 800605c:	9904      	ldr	r1, [sp, #16]
 800605e:	2900      	cmp	r1, #0
 8006060:	db04      	blt.n	800606c <_dtoa_r+0xa54>
 8006062:	9807      	ldr	r0, [sp, #28]
 8006064:	4301      	orrs	r1, r0
 8006066:	9806      	ldr	r0, [sp, #24]
 8006068:	4301      	orrs	r1, r0
 800606a:	d120      	bne.n	80060ae <_dtoa_r+0xa96>
 800606c:	2a00      	cmp	r2, #0
 800606e:	ddee      	ble.n	800604e <_dtoa_r+0xa36>
 8006070:	9902      	ldr	r1, [sp, #8]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	4648      	mov	r0, r9
 8006078:	f000 fba4 	bl	80067c4 <__lshift>
 800607c:	4621      	mov	r1, r4
 800607e:	9002      	str	r0, [sp, #8]
 8006080:	f000 fc0c 	bl	800689c <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	dc02      	bgt.n	8006090 <_dtoa_r+0xa78>
 800608a:	d1e0      	bne.n	800604e <_dtoa_r+0xa36>
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	d5de      	bpl.n	800604e <_dtoa_r+0xa36>
 8006090:	2b39      	cmp	r3, #57	@ 0x39
 8006092:	d1da      	bne.n	800604a <_dtoa_r+0xa32>
 8006094:	2339      	movs	r3, #57	@ 0x39
 8006096:	f88b 3000 	strb.w	r3, [fp]
 800609a:	4633      	mov	r3, r6
 800609c:	461e      	mov	r6, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060a4:	2a39      	cmp	r2, #57	@ 0x39
 80060a6:	d04e      	beq.n	8006146 <_dtoa_r+0xb2e>
 80060a8:	3201      	adds	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e501      	b.n	8005ab2 <_dtoa_r+0x49a>
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	dd03      	ble.n	80060ba <_dtoa_r+0xaa2>
 80060b2:	2b39      	cmp	r3, #57	@ 0x39
 80060b4:	d0ee      	beq.n	8006094 <_dtoa_r+0xa7c>
 80060b6:	3301      	adds	r3, #1
 80060b8:	e7c9      	b.n	800604e <_dtoa_r+0xa36>
 80060ba:	9a00      	ldr	r2, [sp, #0]
 80060bc:	9908      	ldr	r1, [sp, #32]
 80060be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060c2:	428a      	cmp	r2, r1
 80060c4:	d028      	beq.n	8006118 <_dtoa_r+0xb00>
 80060c6:	9902      	ldr	r1, [sp, #8]
 80060c8:	2300      	movs	r3, #0
 80060ca:	220a      	movs	r2, #10
 80060cc:	4648      	mov	r0, r9
 80060ce:	f000 f9d5 	bl	800647c <__multadd>
 80060d2:	42af      	cmp	r7, r5
 80060d4:	9002      	str	r0, [sp, #8]
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	f04f 020a 	mov.w	r2, #10
 80060de:	4639      	mov	r1, r7
 80060e0:	4648      	mov	r0, r9
 80060e2:	d107      	bne.n	80060f4 <_dtoa_r+0xadc>
 80060e4:	f000 f9ca 	bl	800647c <__multadd>
 80060e8:	4607      	mov	r7, r0
 80060ea:	4605      	mov	r5, r0
 80060ec:	9b00      	ldr	r3, [sp, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	e777      	b.n	8005fe4 <_dtoa_r+0x9cc>
 80060f4:	f000 f9c2 	bl	800647c <__multadd>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4607      	mov	r7, r0
 80060fc:	2300      	movs	r3, #0
 80060fe:	220a      	movs	r2, #10
 8006100:	4648      	mov	r0, r9
 8006102:	f000 f9bb 	bl	800647c <__multadd>
 8006106:	4605      	mov	r5, r0
 8006108:	e7f0      	b.n	80060ec <_dtoa_r+0xad4>
 800610a:	f1bb 0f00 	cmp.w	fp, #0
 800610e:	bfcc      	ite	gt
 8006110:	465e      	movgt	r6, fp
 8006112:	2601      	movle	r6, #1
 8006114:	4456      	add	r6, sl
 8006116:	2700      	movs	r7, #0
 8006118:	9902      	ldr	r1, [sp, #8]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	4648      	mov	r0, r9
 8006120:	f000 fb50 	bl	80067c4 <__lshift>
 8006124:	4621      	mov	r1, r4
 8006126:	9002      	str	r0, [sp, #8]
 8006128:	f000 fbb8 	bl	800689c <__mcmp>
 800612c:	2800      	cmp	r0, #0
 800612e:	dcb4      	bgt.n	800609a <_dtoa_r+0xa82>
 8006130:	d102      	bne.n	8006138 <_dtoa_r+0xb20>
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	07db      	lsls	r3, r3, #31
 8006136:	d4b0      	bmi.n	800609a <_dtoa_r+0xa82>
 8006138:	4633      	mov	r3, r6
 800613a:	461e      	mov	r6, r3
 800613c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006140:	2a30      	cmp	r2, #48	@ 0x30
 8006142:	d0fa      	beq.n	800613a <_dtoa_r+0xb22>
 8006144:	e4b5      	b.n	8005ab2 <_dtoa_r+0x49a>
 8006146:	459a      	cmp	sl, r3
 8006148:	d1a8      	bne.n	800609c <_dtoa_r+0xa84>
 800614a:	2331      	movs	r3, #49	@ 0x31
 800614c:	f108 0801 	add.w	r8, r8, #1
 8006150:	f88a 3000 	strb.w	r3, [sl]
 8006154:	e4ad      	b.n	8005ab2 <_dtoa_r+0x49a>
 8006156:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80061b4 <_dtoa_r+0xb9c>
 800615c:	b11b      	cbz	r3, 8006166 <_dtoa_r+0xb4e>
 800615e:	f10a 0308 	add.w	r3, sl, #8
 8006162:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4650      	mov	r0, sl
 8006168:	b017      	add	sp, #92	@ 0x5c
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	9b07      	ldr	r3, [sp, #28]
 8006170:	2b01      	cmp	r3, #1
 8006172:	f77f ae2e 	ble.w	8005dd2 <_dtoa_r+0x7ba>
 8006176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006178:	9308      	str	r3, [sp, #32]
 800617a:	2001      	movs	r0, #1
 800617c:	e64d      	b.n	8005e1a <_dtoa_r+0x802>
 800617e:	f1bb 0f00 	cmp.w	fp, #0
 8006182:	f77f aed9 	ble.w	8005f38 <_dtoa_r+0x920>
 8006186:	4656      	mov	r6, sl
 8006188:	9802      	ldr	r0, [sp, #8]
 800618a:	4621      	mov	r1, r4
 800618c:	f7ff f9b9 	bl	8005502 <quorem>
 8006190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006194:	f806 3b01 	strb.w	r3, [r6], #1
 8006198:	eba6 020a 	sub.w	r2, r6, sl
 800619c:	4593      	cmp	fp, r2
 800619e:	ddb4      	ble.n	800610a <_dtoa_r+0xaf2>
 80061a0:	9902      	ldr	r1, [sp, #8]
 80061a2:	2300      	movs	r3, #0
 80061a4:	220a      	movs	r2, #10
 80061a6:	4648      	mov	r0, r9
 80061a8:	f000 f968 	bl	800647c <__multadd>
 80061ac:	9002      	str	r0, [sp, #8]
 80061ae:	e7eb      	b.n	8006188 <_dtoa_r+0xb70>
 80061b0:	080072aa 	.word	0x080072aa
 80061b4:	0800722e 	.word	0x0800722e

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d041      	beq.n	8006244 <_free_r+0x8c>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e8 	bl	80063a0 <__malloc_lock>
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <_free_r+0x90>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8e4 	b.w	80063ac <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4408      	add	r0, r1
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1809      	addeq	r1, r1, r0
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x22>
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	20000490 	.word	0x20000490

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	@ (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b825 	b.w	80062a0 <_malloc_r>
 8006256:	bf00      	nop
 8006258:	20000020 	.word	0x20000020

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0f      	ldr	r6, [pc, #60]	@ (800629c <sbrk_aligned+0x40>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 fe92 	bl	8006f90 <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fe8d 	bl	8006f90 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d103      	bne.n	8006282 <sbrk_aligned+0x26>
 800627a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800627e:	4620      	mov	r0, r4
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d0f8      	beq.n	800627e <sbrk_aligned+0x22>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fe7e 	bl	8006f90 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d1f2      	bne.n	800627e <sbrk_aligned+0x22>
 8006298:	e7ef      	b.n	800627a <sbrk_aligned+0x1e>
 800629a:	bf00      	nop
 800629c:	2000048c 	.word	0x2000048c

080062a0 <_malloc_r>:
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4606      	mov	r6, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d904      	bls.n	80062c6 <_malloc_r+0x26>
 80062bc:	230c      	movs	r3, #12
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	2000      	movs	r0, #0
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800639c <_malloc_r+0xfc>
 80062ca:	f000 f869 	bl	80063a0 <__malloc_lock>
 80062ce:	f8d8 3000 	ldr.w	r3, [r8]
 80062d2:	461c      	mov	r4, r3
 80062d4:	bb44      	cbnz	r4, 8006328 <_malloc_r+0x88>
 80062d6:	4629      	mov	r1, r5
 80062d8:	4630      	mov	r0, r6
 80062da:	f7ff ffbf 	bl	800625c <sbrk_aligned>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	4604      	mov	r4, r0
 80062e2:	d158      	bne.n	8006396 <_malloc_r+0xf6>
 80062e4:	f8d8 4000 	ldr.w	r4, [r8]
 80062e8:	4627      	mov	r7, r4
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	d143      	bne.n	8006376 <_malloc_r+0xd6>
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d04b      	beq.n	800638a <_malloc_r+0xea>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	4639      	mov	r1, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	eb04 0903 	add.w	r9, r4, r3
 80062fc:	f000 fe48 	bl	8006f90 <_sbrk_r>
 8006300:	4581      	cmp	r9, r0
 8006302:	d142      	bne.n	800638a <_malloc_r+0xea>
 8006304:	6821      	ldr	r1, [r4, #0]
 8006306:	1a6d      	subs	r5, r5, r1
 8006308:	4629      	mov	r1, r5
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff ffa6 	bl	800625c <sbrk_aligned>
 8006310:	3001      	adds	r0, #1
 8006312:	d03a      	beq.n	800638a <_malloc_r+0xea>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	442b      	add	r3, r5
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	f8d8 3000 	ldr.w	r3, [r8]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	bb62      	cbnz	r2, 800637c <_malloc_r+0xdc>
 8006322:	f8c8 7000 	str.w	r7, [r8]
 8006326:	e00f      	b.n	8006348 <_malloc_r+0xa8>
 8006328:	6822      	ldr	r2, [r4, #0]
 800632a:	1b52      	subs	r2, r2, r5
 800632c:	d420      	bmi.n	8006370 <_malloc_r+0xd0>
 800632e:	2a0b      	cmp	r2, #11
 8006330:	d917      	bls.n	8006362 <_malloc_r+0xc2>
 8006332:	1961      	adds	r1, r4, r5
 8006334:	42a3      	cmp	r3, r4
 8006336:	6025      	str	r5, [r4, #0]
 8006338:	bf18      	it	ne
 800633a:	6059      	strne	r1, [r3, #4]
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	bf08      	it	eq
 8006340:	f8c8 1000 	streq.w	r1, [r8]
 8006344:	5162      	str	r2, [r4, r5]
 8006346:	604b      	str	r3, [r1, #4]
 8006348:	4630      	mov	r0, r6
 800634a:	f000 f82f 	bl	80063ac <__malloc_unlock>
 800634e:	f104 000b 	add.w	r0, r4, #11
 8006352:	1d23      	adds	r3, r4, #4
 8006354:	f020 0007 	bic.w	r0, r0, #7
 8006358:	1ac2      	subs	r2, r0, r3
 800635a:	bf1c      	itt	ne
 800635c:	1a1b      	subne	r3, r3, r0
 800635e:	50a3      	strne	r3, [r4, r2]
 8006360:	e7af      	b.n	80062c2 <_malloc_r+0x22>
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	42a3      	cmp	r3, r4
 8006366:	bf0c      	ite	eq
 8006368:	f8c8 2000 	streq.w	r2, [r8]
 800636c:	605a      	strne	r2, [r3, #4]
 800636e:	e7eb      	b.n	8006348 <_malloc_r+0xa8>
 8006370:	4623      	mov	r3, r4
 8006372:	6864      	ldr	r4, [r4, #4]
 8006374:	e7ae      	b.n	80062d4 <_malloc_r+0x34>
 8006376:	463c      	mov	r4, r7
 8006378:	687f      	ldr	r7, [r7, #4]
 800637a:	e7b6      	b.n	80062ea <_malloc_r+0x4a>
 800637c:	461a      	mov	r2, r3
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	42a3      	cmp	r3, r4
 8006382:	d1fb      	bne.n	800637c <_malloc_r+0xdc>
 8006384:	2300      	movs	r3, #0
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	e7de      	b.n	8006348 <_malloc_r+0xa8>
 800638a:	230c      	movs	r3, #12
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f80c 	bl	80063ac <__malloc_unlock>
 8006394:	e794      	b.n	80062c0 <_malloc_r+0x20>
 8006396:	6005      	str	r5, [r0, #0]
 8006398:	e7d6      	b.n	8006348 <_malloc_r+0xa8>
 800639a:	bf00      	nop
 800639c:	20000490 	.word	0x20000490

080063a0 <__malloc_lock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	@ (80063a8 <__malloc_lock+0x8>)
 80063a2:	f7ff b8ac 	b.w	80054fe <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	20000488 	.word	0x20000488

080063ac <__malloc_unlock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	@ (80063b4 <__malloc_unlock+0x8>)
 80063ae:	f7ff b8a7 	b.w	8005500 <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	20000488 	.word	0x20000488

080063b8 <_Balloc>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	69c6      	ldr	r6, [r0, #28]
 80063bc:	4604      	mov	r4, r0
 80063be:	460d      	mov	r5, r1
 80063c0:	b976      	cbnz	r6, 80063e0 <_Balloc+0x28>
 80063c2:	2010      	movs	r0, #16
 80063c4:	f7ff ff42 	bl	800624c <malloc>
 80063c8:	4602      	mov	r2, r0
 80063ca:	61e0      	str	r0, [r4, #28]
 80063cc:	b920      	cbnz	r0, 80063d8 <_Balloc+0x20>
 80063ce:	4b18      	ldr	r3, [pc, #96]	@ (8006430 <_Balloc+0x78>)
 80063d0:	4818      	ldr	r0, [pc, #96]	@ (8006434 <_Balloc+0x7c>)
 80063d2:	216b      	movs	r1, #107	@ 0x6b
 80063d4:	f000 fdfa 	bl	8006fcc <__assert_func>
 80063d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063dc:	6006      	str	r6, [r0, #0]
 80063de:	60c6      	str	r6, [r0, #12]
 80063e0:	69e6      	ldr	r6, [r4, #28]
 80063e2:	68f3      	ldr	r3, [r6, #12]
 80063e4:	b183      	cbz	r3, 8006408 <_Balloc+0x50>
 80063e6:	69e3      	ldr	r3, [r4, #28]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ee:	b9b8      	cbnz	r0, 8006420 <_Balloc+0x68>
 80063f0:	2101      	movs	r1, #1
 80063f2:	fa01 f605 	lsl.w	r6, r1, r5
 80063f6:	1d72      	adds	r2, r6, #5
 80063f8:	0092      	lsls	r2, r2, #2
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fe04 	bl	8007008 <_calloc_r>
 8006400:	b160      	cbz	r0, 800641c <_Balloc+0x64>
 8006402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006406:	e00e      	b.n	8006426 <_Balloc+0x6e>
 8006408:	2221      	movs	r2, #33	@ 0x21
 800640a:	2104      	movs	r1, #4
 800640c:	4620      	mov	r0, r4
 800640e:	f000 fdfb 	bl	8007008 <_calloc_r>
 8006412:	69e3      	ldr	r3, [r4, #28]
 8006414:	60f0      	str	r0, [r6, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e4      	bne.n	80063e6 <_Balloc+0x2e>
 800641c:	2000      	movs	r0, #0
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	6802      	ldr	r2, [r0, #0]
 8006422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006426:	2300      	movs	r3, #0
 8006428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800642c:	e7f7      	b.n	800641e <_Balloc+0x66>
 800642e:	bf00      	nop
 8006430:	0800723b 	.word	0x0800723b
 8006434:	080072bb 	.word	0x080072bb

08006438 <_Bfree>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	69c6      	ldr	r6, [r0, #28]
 800643c:	4605      	mov	r5, r0
 800643e:	460c      	mov	r4, r1
 8006440:	b976      	cbnz	r6, 8006460 <_Bfree+0x28>
 8006442:	2010      	movs	r0, #16
 8006444:	f7ff ff02 	bl	800624c <malloc>
 8006448:	4602      	mov	r2, r0
 800644a:	61e8      	str	r0, [r5, #28]
 800644c:	b920      	cbnz	r0, 8006458 <_Bfree+0x20>
 800644e:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <_Bfree+0x3c>)
 8006450:	4809      	ldr	r0, [pc, #36]	@ (8006478 <_Bfree+0x40>)
 8006452:	218f      	movs	r1, #143	@ 0x8f
 8006454:	f000 fdba 	bl	8006fcc <__assert_func>
 8006458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	b13c      	cbz	r4, 8006472 <_Bfree+0x3a>
 8006462:	69eb      	ldr	r3, [r5, #28]
 8006464:	6862      	ldr	r2, [r4, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800646c:	6021      	str	r1, [r4, #0]
 800646e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	0800723b 	.word	0x0800723b
 8006478:	080072bb 	.word	0x080072bb

0800647c <__multadd>:
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	690d      	ldr	r5, [r1, #16]
 8006482:	4607      	mov	r7, r0
 8006484:	460c      	mov	r4, r1
 8006486:	461e      	mov	r6, r3
 8006488:	f101 0c14 	add.w	ip, r1, #20
 800648c:	2000      	movs	r0, #0
 800648e:	f8dc 3000 	ldr.w	r3, [ip]
 8006492:	b299      	uxth	r1, r3
 8006494:	fb02 6101 	mla	r1, r2, r1, r6
 8006498:	0c1e      	lsrs	r6, r3, #16
 800649a:	0c0b      	lsrs	r3, r1, #16
 800649c:	fb02 3306 	mla	r3, r2, r6, r3
 80064a0:	b289      	uxth	r1, r1
 80064a2:	3001      	adds	r0, #1
 80064a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a8:	4285      	cmp	r5, r0
 80064aa:	f84c 1b04 	str.w	r1, [ip], #4
 80064ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064b2:	dcec      	bgt.n	800648e <__multadd+0x12>
 80064b4:	b30e      	cbz	r6, 80064fa <__multadd+0x7e>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dc19      	bgt.n	80064f0 <__multadd+0x74>
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4638      	mov	r0, r7
 80064c0:	3101      	adds	r1, #1
 80064c2:	f7ff ff79 	bl	80063b8 <_Balloc>
 80064c6:	4680      	mov	r8, r0
 80064c8:	b928      	cbnz	r0, 80064d6 <__multadd+0x5a>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <__multadd+0x84>)
 80064ce:	480d      	ldr	r0, [pc, #52]	@ (8006504 <__multadd+0x88>)
 80064d0:	21ba      	movs	r1, #186	@ 0xba
 80064d2:	f000 fd7b 	bl	8006fcc <__assert_func>
 80064d6:	6922      	ldr	r2, [r4, #16]
 80064d8:	3202      	adds	r2, #2
 80064da:	f104 010c 	add.w	r1, r4, #12
 80064de:	0092      	lsls	r2, r2, #2
 80064e0:	300c      	adds	r0, #12
 80064e2:	f000 fd65 	bl	8006fb0 <memcpy>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ffa5 	bl	8006438 <_Bfree>
 80064ee:	4644      	mov	r4, r8
 80064f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f4:	3501      	adds	r5, #1
 80064f6:	615e      	str	r6, [r3, #20]
 80064f8:	6125      	str	r5, [r4, #16]
 80064fa:	4620      	mov	r0, r4
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	080072aa 	.word	0x080072aa
 8006504:	080072bb 	.word	0x080072bb

08006508 <__hi0bits>:
 8006508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800650c:	4603      	mov	r3, r0
 800650e:	bf36      	itet	cc
 8006510:	0403      	lslcc	r3, r0, #16
 8006512:	2000      	movcs	r0, #0
 8006514:	2010      	movcc	r0, #16
 8006516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800651a:	bf3c      	itt	cc
 800651c:	021b      	lslcc	r3, r3, #8
 800651e:	3008      	addcc	r0, #8
 8006520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006524:	bf3c      	itt	cc
 8006526:	011b      	lslcc	r3, r3, #4
 8006528:	3004      	addcc	r0, #4
 800652a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652e:	bf3c      	itt	cc
 8006530:	009b      	lslcc	r3, r3, #2
 8006532:	3002      	addcc	r0, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	db05      	blt.n	8006544 <__hi0bits+0x3c>
 8006538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800653c:	f100 0001 	add.w	r0, r0, #1
 8006540:	bf08      	it	eq
 8006542:	2020      	moveq	r0, #32
 8006544:	4770      	bx	lr

08006546 <__lo0bits>:
 8006546:	6803      	ldr	r3, [r0, #0]
 8006548:	4602      	mov	r2, r0
 800654a:	f013 0007 	ands.w	r0, r3, #7
 800654e:	d00b      	beq.n	8006568 <__lo0bits+0x22>
 8006550:	07d9      	lsls	r1, r3, #31
 8006552:	d421      	bmi.n	8006598 <__lo0bits+0x52>
 8006554:	0798      	lsls	r0, r3, #30
 8006556:	bf49      	itett	mi
 8006558:	085b      	lsrmi	r3, r3, #1
 800655a:	089b      	lsrpl	r3, r3, #2
 800655c:	2001      	movmi	r0, #1
 800655e:	6013      	strmi	r3, [r2, #0]
 8006560:	bf5c      	itt	pl
 8006562:	6013      	strpl	r3, [r2, #0]
 8006564:	2002      	movpl	r0, #2
 8006566:	4770      	bx	lr
 8006568:	b299      	uxth	r1, r3
 800656a:	b909      	cbnz	r1, 8006570 <__lo0bits+0x2a>
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	2010      	movs	r0, #16
 8006570:	b2d9      	uxtb	r1, r3
 8006572:	b909      	cbnz	r1, 8006578 <__lo0bits+0x32>
 8006574:	3008      	adds	r0, #8
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	bf04      	itt	eq
 800657c:	091b      	lsreq	r3, r3, #4
 800657e:	3004      	addeq	r0, #4
 8006580:	0799      	lsls	r1, r3, #30
 8006582:	bf04      	itt	eq
 8006584:	089b      	lsreq	r3, r3, #2
 8006586:	3002      	addeq	r0, #2
 8006588:	07d9      	lsls	r1, r3, #31
 800658a:	d403      	bmi.n	8006594 <__lo0bits+0x4e>
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	f100 0001 	add.w	r0, r0, #1
 8006592:	d003      	beq.n	800659c <__lo0bits+0x56>
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4770      	bx	lr
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr
 800659c:	2020      	movs	r0, #32
 800659e:	4770      	bx	lr

080065a0 <__i2b>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	2101      	movs	r1, #1
 80065a6:	f7ff ff07 	bl	80063b8 <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__i2b+0x1a>
 80065ae:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <__i2b+0x24>)
 80065b0:	4805      	ldr	r0, [pc, #20]	@ (80065c8 <__i2b+0x28>)
 80065b2:	f240 1145 	movw	r1, #325	@ 0x145
 80065b6:	f000 fd09 	bl	8006fcc <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	6144      	str	r4, [r0, #20]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	080072aa 	.word	0x080072aa
 80065c8:	080072bb 	.word	0x080072bb

080065cc <__multiply>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4617      	mov	r7, r2
 80065d2:	690a      	ldr	r2, [r1, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	bfa8      	it	ge
 80065da:	463b      	movge	r3, r7
 80065dc:	4689      	mov	r9, r1
 80065de:	bfa4      	itt	ge
 80065e0:	460f      	movge	r7, r1
 80065e2:	4699      	movge	r9, r3
 80065e4:	693d      	ldr	r5, [r7, #16]
 80065e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	eb05 060a 	add.w	r6, r5, sl
 80065f2:	42b3      	cmp	r3, r6
 80065f4:	b085      	sub	sp, #20
 80065f6:	bfb8      	it	lt
 80065f8:	3101      	addlt	r1, #1
 80065fa:	f7ff fedd 	bl	80063b8 <_Balloc>
 80065fe:	b930      	cbnz	r0, 800660e <__multiply+0x42>
 8006600:	4602      	mov	r2, r0
 8006602:	4b41      	ldr	r3, [pc, #260]	@ (8006708 <__multiply+0x13c>)
 8006604:	4841      	ldr	r0, [pc, #260]	@ (800670c <__multiply+0x140>)
 8006606:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800660a:	f000 fcdf 	bl	8006fcc <__assert_func>
 800660e:	f100 0414 	add.w	r4, r0, #20
 8006612:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006616:	4623      	mov	r3, r4
 8006618:	2200      	movs	r2, #0
 800661a:	4573      	cmp	r3, lr
 800661c:	d320      	bcc.n	8006660 <__multiply+0x94>
 800661e:	f107 0814 	add.w	r8, r7, #20
 8006622:	f109 0114 	add.w	r1, r9, #20
 8006626:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800662a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800662e:	9302      	str	r3, [sp, #8]
 8006630:	1beb      	subs	r3, r5, r7
 8006632:	3b15      	subs	r3, #21
 8006634:	f023 0303 	bic.w	r3, r3, #3
 8006638:	3304      	adds	r3, #4
 800663a:	3715      	adds	r7, #21
 800663c:	42bd      	cmp	r5, r7
 800663e:	bf38      	it	cc
 8006640:	2304      	movcc	r3, #4
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	9103      	str	r1, [sp, #12]
 8006648:	428b      	cmp	r3, r1
 800664a:	d80c      	bhi.n	8006666 <__multiply+0x9a>
 800664c:	2e00      	cmp	r6, #0
 800664e:	dd03      	ble.n	8006658 <__multiply+0x8c>
 8006650:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006654:	2b00      	cmp	r3, #0
 8006656:	d055      	beq.n	8006704 <__multiply+0x138>
 8006658:	6106      	str	r6, [r0, #16]
 800665a:	b005      	add	sp, #20
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	f843 2b04 	str.w	r2, [r3], #4
 8006664:	e7d9      	b.n	800661a <__multiply+0x4e>
 8006666:	f8b1 a000 	ldrh.w	sl, [r1]
 800666a:	f1ba 0f00 	cmp.w	sl, #0
 800666e:	d01f      	beq.n	80066b0 <__multiply+0xe4>
 8006670:	46c4      	mov	ip, r8
 8006672:	46a1      	mov	r9, r4
 8006674:	2700      	movs	r7, #0
 8006676:	f85c 2b04 	ldr.w	r2, [ip], #4
 800667a:	f8d9 3000 	ldr.w	r3, [r9]
 800667e:	fa1f fb82 	uxth.w	fp, r2
 8006682:	b29b      	uxth	r3, r3
 8006684:	fb0a 330b 	mla	r3, sl, fp, r3
 8006688:	443b      	add	r3, r7
 800668a:	f8d9 7000 	ldr.w	r7, [r9]
 800668e:	0c12      	lsrs	r2, r2, #16
 8006690:	0c3f      	lsrs	r7, r7, #16
 8006692:	fb0a 7202 	mla	r2, sl, r2, r7
 8006696:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800669a:	b29b      	uxth	r3, r3
 800669c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a0:	4565      	cmp	r5, ip
 80066a2:	f849 3b04 	str.w	r3, [r9], #4
 80066a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80066aa:	d8e4      	bhi.n	8006676 <__multiply+0xaa>
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	50e7      	str	r7, [r4, r3]
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066b6:	3104      	adds	r1, #4
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	d020      	beq.n	8006700 <__multiply+0x134>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4647      	mov	r7, r8
 80066c2:	46a4      	mov	ip, r4
 80066c4:	f04f 0a00 	mov.w	sl, #0
 80066c8:	f8b7 b000 	ldrh.w	fp, [r7]
 80066cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80066d0:	fb09 220b 	mla	r2, r9, fp, r2
 80066d4:	4452      	add	r2, sl
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066dc:	f84c 3b04 	str.w	r3, [ip], #4
 80066e0:	f857 3b04 	ldr.w	r3, [r7], #4
 80066e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066e8:	f8bc 3000 	ldrh.w	r3, [ip]
 80066ec:	fb09 330a 	mla	r3, r9, sl, r3
 80066f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066f4:	42bd      	cmp	r5, r7
 80066f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066fa:	d8e5      	bhi.n	80066c8 <__multiply+0xfc>
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	50a3      	str	r3, [r4, r2]
 8006700:	3404      	adds	r4, #4
 8006702:	e79f      	b.n	8006644 <__multiply+0x78>
 8006704:	3e01      	subs	r6, #1
 8006706:	e7a1      	b.n	800664c <__multiply+0x80>
 8006708:	080072aa 	.word	0x080072aa
 800670c:	080072bb 	.word	0x080072bb

08006710 <__pow5mult>:
 8006710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006714:	4615      	mov	r5, r2
 8006716:	f012 0203 	ands.w	r2, r2, #3
 800671a:	4607      	mov	r7, r0
 800671c:	460e      	mov	r6, r1
 800671e:	d007      	beq.n	8006730 <__pow5mult+0x20>
 8006720:	4c25      	ldr	r4, [pc, #148]	@ (80067b8 <__pow5mult+0xa8>)
 8006722:	3a01      	subs	r2, #1
 8006724:	2300      	movs	r3, #0
 8006726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800672a:	f7ff fea7 	bl	800647c <__multadd>
 800672e:	4606      	mov	r6, r0
 8006730:	10ad      	asrs	r5, r5, #2
 8006732:	d03d      	beq.n	80067b0 <__pow5mult+0xa0>
 8006734:	69fc      	ldr	r4, [r7, #28]
 8006736:	b97c      	cbnz	r4, 8006758 <__pow5mult+0x48>
 8006738:	2010      	movs	r0, #16
 800673a:	f7ff fd87 	bl	800624c <malloc>
 800673e:	4602      	mov	r2, r0
 8006740:	61f8      	str	r0, [r7, #28]
 8006742:	b928      	cbnz	r0, 8006750 <__pow5mult+0x40>
 8006744:	4b1d      	ldr	r3, [pc, #116]	@ (80067bc <__pow5mult+0xac>)
 8006746:	481e      	ldr	r0, [pc, #120]	@ (80067c0 <__pow5mult+0xb0>)
 8006748:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800674c:	f000 fc3e 	bl	8006fcc <__assert_func>
 8006750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006754:	6004      	str	r4, [r0, #0]
 8006756:	60c4      	str	r4, [r0, #12]
 8006758:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800675c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006760:	b94c      	cbnz	r4, 8006776 <__pow5mult+0x66>
 8006762:	f240 2171 	movw	r1, #625	@ 0x271
 8006766:	4638      	mov	r0, r7
 8006768:	f7ff ff1a 	bl	80065a0 <__i2b>
 800676c:	2300      	movs	r3, #0
 800676e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006772:	4604      	mov	r4, r0
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	f04f 0900 	mov.w	r9, #0
 800677a:	07eb      	lsls	r3, r5, #31
 800677c:	d50a      	bpl.n	8006794 <__pow5mult+0x84>
 800677e:	4631      	mov	r1, r6
 8006780:	4622      	mov	r2, r4
 8006782:	4638      	mov	r0, r7
 8006784:	f7ff ff22 	bl	80065cc <__multiply>
 8006788:	4631      	mov	r1, r6
 800678a:	4680      	mov	r8, r0
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fe53 	bl	8006438 <_Bfree>
 8006792:	4646      	mov	r6, r8
 8006794:	106d      	asrs	r5, r5, #1
 8006796:	d00b      	beq.n	80067b0 <__pow5mult+0xa0>
 8006798:	6820      	ldr	r0, [r4, #0]
 800679a:	b938      	cbnz	r0, 80067ac <__pow5mult+0x9c>
 800679c:	4622      	mov	r2, r4
 800679e:	4621      	mov	r1, r4
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff ff13 	bl	80065cc <__multiply>
 80067a6:	6020      	str	r0, [r4, #0]
 80067a8:	f8c0 9000 	str.w	r9, [r0]
 80067ac:	4604      	mov	r4, r0
 80067ae:	e7e4      	b.n	800677a <__pow5mult+0x6a>
 80067b0:	4630      	mov	r0, r6
 80067b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b6:	bf00      	nop
 80067b8:	08007384 	.word	0x08007384
 80067bc:	0800723b 	.word	0x0800723b
 80067c0:	080072bb 	.word	0x080072bb

080067c4 <__lshift>:
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	460c      	mov	r4, r1
 80067ca:	6849      	ldr	r1, [r1, #4]
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	4607      	mov	r7, r0
 80067d6:	4691      	mov	r9, r2
 80067d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067dc:	f108 0601 	add.w	r6, r8, #1
 80067e0:	42b3      	cmp	r3, r6
 80067e2:	db0b      	blt.n	80067fc <__lshift+0x38>
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff fde7 	bl	80063b8 <_Balloc>
 80067ea:	4605      	mov	r5, r0
 80067ec:	b948      	cbnz	r0, 8006802 <__lshift+0x3e>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b28      	ldr	r3, [pc, #160]	@ (8006894 <__lshift+0xd0>)
 80067f2:	4829      	ldr	r0, [pc, #164]	@ (8006898 <__lshift+0xd4>)
 80067f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067f8:	f000 fbe8 	bl	8006fcc <__assert_func>
 80067fc:	3101      	adds	r1, #1
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	e7ee      	b.n	80067e0 <__lshift+0x1c>
 8006802:	2300      	movs	r3, #0
 8006804:	f100 0114 	add.w	r1, r0, #20
 8006808:	f100 0210 	add.w	r2, r0, #16
 800680c:	4618      	mov	r0, r3
 800680e:	4553      	cmp	r3, sl
 8006810:	db33      	blt.n	800687a <__lshift+0xb6>
 8006812:	6920      	ldr	r0, [r4, #16]
 8006814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006818:	f104 0314 	add.w	r3, r4, #20
 800681c:	f019 091f 	ands.w	r9, r9, #31
 8006820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006828:	d02b      	beq.n	8006882 <__lshift+0xbe>
 800682a:	f1c9 0e20 	rsb	lr, r9, #32
 800682e:	468a      	mov	sl, r1
 8006830:	2200      	movs	r2, #0
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	fa00 f009 	lsl.w	r0, r0, r9
 8006838:	4310      	orrs	r0, r2
 800683a:	f84a 0b04 	str.w	r0, [sl], #4
 800683e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006842:	459c      	cmp	ip, r3
 8006844:	fa22 f20e 	lsr.w	r2, r2, lr
 8006848:	d8f3      	bhi.n	8006832 <__lshift+0x6e>
 800684a:	ebac 0304 	sub.w	r3, ip, r4
 800684e:	3b15      	subs	r3, #21
 8006850:	f023 0303 	bic.w	r3, r3, #3
 8006854:	3304      	adds	r3, #4
 8006856:	f104 0015 	add.w	r0, r4, #21
 800685a:	4560      	cmp	r0, ip
 800685c:	bf88      	it	hi
 800685e:	2304      	movhi	r3, #4
 8006860:	50ca      	str	r2, [r1, r3]
 8006862:	b10a      	cbz	r2, 8006868 <__lshift+0xa4>
 8006864:	f108 0602 	add.w	r6, r8, #2
 8006868:	3e01      	subs	r6, #1
 800686a:	4638      	mov	r0, r7
 800686c:	612e      	str	r6, [r5, #16]
 800686e:	4621      	mov	r1, r4
 8006870:	f7ff fde2 	bl	8006438 <_Bfree>
 8006874:	4628      	mov	r0, r5
 8006876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687a:	f842 0f04 	str.w	r0, [r2, #4]!
 800687e:	3301      	adds	r3, #1
 8006880:	e7c5      	b.n	800680e <__lshift+0x4a>
 8006882:	3904      	subs	r1, #4
 8006884:	f853 2b04 	ldr.w	r2, [r3], #4
 8006888:	f841 2f04 	str.w	r2, [r1, #4]!
 800688c:	459c      	cmp	ip, r3
 800688e:	d8f9      	bhi.n	8006884 <__lshift+0xc0>
 8006890:	e7ea      	b.n	8006868 <__lshift+0xa4>
 8006892:	bf00      	nop
 8006894:	080072aa 	.word	0x080072aa
 8006898:	080072bb 	.word	0x080072bb

0800689c <__mcmp>:
 800689c:	690a      	ldr	r2, [r1, #16]
 800689e:	4603      	mov	r3, r0
 80068a0:	6900      	ldr	r0, [r0, #16]
 80068a2:	1a80      	subs	r0, r0, r2
 80068a4:	b530      	push	{r4, r5, lr}
 80068a6:	d10e      	bne.n	80068c6 <__mcmp+0x2a>
 80068a8:	3314      	adds	r3, #20
 80068aa:	3114      	adds	r1, #20
 80068ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068bc:	4295      	cmp	r5, r2
 80068be:	d003      	beq.n	80068c8 <__mcmp+0x2c>
 80068c0:	d205      	bcs.n	80068ce <__mcmp+0x32>
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c6:	bd30      	pop	{r4, r5, pc}
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	d3f3      	bcc.n	80068b4 <__mcmp+0x18>
 80068cc:	e7fb      	b.n	80068c6 <__mcmp+0x2a>
 80068ce:	2001      	movs	r0, #1
 80068d0:	e7f9      	b.n	80068c6 <__mcmp+0x2a>
	...

080068d4 <__mdiff>:
 80068d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	4689      	mov	r9, r1
 80068da:	4606      	mov	r6, r0
 80068dc:	4611      	mov	r1, r2
 80068de:	4648      	mov	r0, r9
 80068e0:	4614      	mov	r4, r2
 80068e2:	f7ff ffdb 	bl	800689c <__mcmp>
 80068e6:	1e05      	subs	r5, r0, #0
 80068e8:	d112      	bne.n	8006910 <__mdiff+0x3c>
 80068ea:	4629      	mov	r1, r5
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff fd63 	bl	80063b8 <_Balloc>
 80068f2:	4602      	mov	r2, r0
 80068f4:	b928      	cbnz	r0, 8006902 <__mdiff+0x2e>
 80068f6:	4b3f      	ldr	r3, [pc, #252]	@ (80069f4 <__mdiff+0x120>)
 80068f8:	f240 2137 	movw	r1, #567	@ 0x237
 80068fc:	483e      	ldr	r0, [pc, #248]	@ (80069f8 <__mdiff+0x124>)
 80068fe:	f000 fb65 	bl	8006fcc <__assert_func>
 8006902:	2301      	movs	r3, #1
 8006904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006908:	4610      	mov	r0, r2
 800690a:	b003      	add	sp, #12
 800690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006910:	bfbc      	itt	lt
 8006912:	464b      	movlt	r3, r9
 8006914:	46a1      	movlt	r9, r4
 8006916:	4630      	mov	r0, r6
 8006918:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800691c:	bfba      	itte	lt
 800691e:	461c      	movlt	r4, r3
 8006920:	2501      	movlt	r5, #1
 8006922:	2500      	movge	r5, #0
 8006924:	f7ff fd48 	bl	80063b8 <_Balloc>
 8006928:	4602      	mov	r2, r0
 800692a:	b918      	cbnz	r0, 8006934 <__mdiff+0x60>
 800692c:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <__mdiff+0x120>)
 800692e:	f240 2145 	movw	r1, #581	@ 0x245
 8006932:	e7e3      	b.n	80068fc <__mdiff+0x28>
 8006934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006938:	6926      	ldr	r6, [r4, #16]
 800693a:	60c5      	str	r5, [r0, #12]
 800693c:	f109 0310 	add.w	r3, r9, #16
 8006940:	f109 0514 	add.w	r5, r9, #20
 8006944:	f104 0e14 	add.w	lr, r4, #20
 8006948:	f100 0b14 	add.w	fp, r0, #20
 800694c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006950:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	46d9      	mov	r9, fp
 8006958:	f04f 0c00 	mov.w	ip, #0
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006962:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	fa1f f38a 	uxth.w	r3, sl
 800696c:	4619      	mov	r1, r3
 800696e:	b283      	uxth	r3, r0
 8006970:	1acb      	subs	r3, r1, r3
 8006972:	0c00      	lsrs	r0, r0, #16
 8006974:	4463      	add	r3, ip
 8006976:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800697a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006984:	4576      	cmp	r6, lr
 8006986:	f849 3b04 	str.w	r3, [r9], #4
 800698a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800698e:	d8e5      	bhi.n	800695c <__mdiff+0x88>
 8006990:	1b33      	subs	r3, r6, r4
 8006992:	3b15      	subs	r3, #21
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	3415      	adds	r4, #21
 800699a:	3304      	adds	r3, #4
 800699c:	42a6      	cmp	r6, r4
 800699e:	bf38      	it	cc
 80069a0:	2304      	movcc	r3, #4
 80069a2:	441d      	add	r5, r3
 80069a4:	445b      	add	r3, fp
 80069a6:	461e      	mov	r6, r3
 80069a8:	462c      	mov	r4, r5
 80069aa:	4544      	cmp	r4, r8
 80069ac:	d30e      	bcc.n	80069cc <__mdiff+0xf8>
 80069ae:	f108 0103 	add.w	r1, r8, #3
 80069b2:	1b49      	subs	r1, r1, r5
 80069b4:	f021 0103 	bic.w	r1, r1, #3
 80069b8:	3d03      	subs	r5, #3
 80069ba:	45a8      	cmp	r8, r5
 80069bc:	bf38      	it	cc
 80069be:	2100      	movcc	r1, #0
 80069c0:	440b      	add	r3, r1
 80069c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069c6:	b191      	cbz	r1, 80069ee <__mdiff+0x11a>
 80069c8:	6117      	str	r7, [r2, #16]
 80069ca:	e79d      	b.n	8006908 <__mdiff+0x34>
 80069cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80069d0:	46e6      	mov	lr, ip
 80069d2:	0c08      	lsrs	r0, r1, #16
 80069d4:	fa1c fc81 	uxtah	ip, ip, r1
 80069d8:	4471      	add	r1, lr
 80069da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069de:	b289      	uxth	r1, r1
 80069e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069e4:	f846 1b04 	str.w	r1, [r6], #4
 80069e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069ec:	e7dd      	b.n	80069aa <__mdiff+0xd6>
 80069ee:	3f01      	subs	r7, #1
 80069f0:	e7e7      	b.n	80069c2 <__mdiff+0xee>
 80069f2:	bf00      	nop
 80069f4:	080072aa 	.word	0x080072aa
 80069f8:	080072bb 	.word	0x080072bb

080069fc <__d2b>:
 80069fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	460f      	mov	r7, r1
 8006a02:	2101      	movs	r1, #1
 8006a04:	ec59 8b10 	vmov	r8, r9, d0
 8006a08:	4616      	mov	r6, r2
 8006a0a:	f7ff fcd5 	bl	80063b8 <_Balloc>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b930      	cbnz	r0, 8006a20 <__d2b+0x24>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b23      	ldr	r3, [pc, #140]	@ (8006aa4 <__d2b+0xa8>)
 8006a16:	4824      	ldr	r0, [pc, #144]	@ (8006aa8 <__d2b+0xac>)
 8006a18:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a1c:	f000 fad6 	bl	8006fcc <__assert_func>
 8006a20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a28:	b10d      	cbz	r5, 8006a2e <__d2b+0x32>
 8006a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f1b8 0300 	subs.w	r3, r8, #0
 8006a34:	d023      	beq.n	8006a7e <__d2b+0x82>
 8006a36:	4668      	mov	r0, sp
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	f7ff fd84 	bl	8006546 <__lo0bits>
 8006a3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a42:	b1d0      	cbz	r0, 8006a7a <__d2b+0x7e>
 8006a44:	f1c0 0320 	rsb	r3, r0, #32
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	40c2      	lsrs	r2, r0
 8006a50:	6163      	str	r3, [r4, #20]
 8006a52:	9201      	str	r2, [sp, #4]
 8006a54:	9b01      	ldr	r3, [sp, #4]
 8006a56:	61a3      	str	r3, [r4, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2201      	moveq	r2, #1
 8006a5e:	2202      	movne	r2, #2
 8006a60:	6122      	str	r2, [r4, #16]
 8006a62:	b1a5      	cbz	r5, 8006a8e <__d2b+0x92>
 8006a64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a68:	4405      	add	r5, r0
 8006a6a:	603d      	str	r5, [r7, #0]
 8006a6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a70:	6030      	str	r0, [r6, #0]
 8006a72:	4620      	mov	r0, r4
 8006a74:	b003      	add	sp, #12
 8006a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a7a:	6161      	str	r1, [r4, #20]
 8006a7c:	e7ea      	b.n	8006a54 <__d2b+0x58>
 8006a7e:	a801      	add	r0, sp, #4
 8006a80:	f7ff fd61 	bl	8006546 <__lo0bits>
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	3020      	adds	r0, #32
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	e7e8      	b.n	8006a60 <__d2b+0x64>
 8006a8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a96:	6038      	str	r0, [r7, #0]
 8006a98:	6918      	ldr	r0, [r3, #16]
 8006a9a:	f7ff fd35 	bl	8006508 <__hi0bits>
 8006a9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aa2:	e7e5      	b.n	8006a70 <__d2b+0x74>
 8006aa4:	080072aa 	.word	0x080072aa
 8006aa8:	080072bb 	.word	0x080072bb

08006aac <__sfputc_r>:
 8006aac:	6893      	ldr	r3, [r2, #8]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	b410      	push	{r4}
 8006ab4:	6093      	str	r3, [r2, #8]
 8006ab6:	da08      	bge.n	8006aca <__sfputc_r+0x1e>
 8006ab8:	6994      	ldr	r4, [r2, #24]
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	db01      	blt.n	8006ac2 <__sfputc_r+0x16>
 8006abe:	290a      	cmp	r1, #10
 8006ac0:	d103      	bne.n	8006aca <__sfputc_r+0x1e>
 8006ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac6:	f7fe bc08 	b.w	80052da <__swbuf_r>
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	1c58      	adds	r0, r3, #1
 8006ace:	6010      	str	r0, [r2, #0]
 8006ad0:	7019      	strb	r1, [r3, #0]
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <__sfputs_r>:
 8006ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	18d5      	adds	r5, r2, r3
 8006ae4:	42ac      	cmp	r4, r5
 8006ae6:	d101      	bne.n	8006aec <__sfputs_r+0x12>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e007      	b.n	8006afc <__sfputs_r+0x22>
 8006aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af0:	463a      	mov	r2, r7
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7ff ffda 	bl	8006aac <__sfputc_r>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d1f3      	bne.n	8006ae4 <__sfputs_r+0xa>
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b00 <_vfiprintf_r>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	460d      	mov	r5, r1
 8006b06:	b09d      	sub	sp, #116	@ 0x74
 8006b08:	4614      	mov	r4, r2
 8006b0a:	4698      	mov	r8, r3
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	b118      	cbz	r0, 8006b18 <_vfiprintf_r+0x18>
 8006b10:	6a03      	ldr	r3, [r0, #32]
 8006b12:	b90b      	cbnz	r3, 8006b18 <_vfiprintf_r+0x18>
 8006b14:	f7fe faf8 	bl	8005108 <__sinit>
 8006b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b1a:	07d9      	lsls	r1, r3, #31
 8006b1c:	d405      	bmi.n	8006b2a <_vfiprintf_r+0x2a>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	059a      	lsls	r2, r3, #22
 8006b22:	d402      	bmi.n	8006b2a <_vfiprintf_r+0x2a>
 8006b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b26:	f7fe fcea 	bl	80054fe <__retarget_lock_acquire_recursive>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	071b      	lsls	r3, r3, #28
 8006b2e:	d501      	bpl.n	8006b34 <_vfiprintf_r+0x34>
 8006b30:	692b      	ldr	r3, [r5, #16]
 8006b32:	b99b      	cbnz	r3, 8006b5c <_vfiprintf_r+0x5c>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7fe fc0e 	bl	8005358 <__swsetup_r>
 8006b3c:	b170      	cbz	r0, 8006b5c <_vfiprintf_r+0x5c>
 8006b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b40:	07dc      	lsls	r4, r3, #31
 8006b42:	d504      	bpl.n	8006b4e <_vfiprintf_r+0x4e>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b48:	b01d      	add	sp, #116	@ 0x74
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	0598      	lsls	r0, r3, #22
 8006b52:	d4f7      	bmi.n	8006b44 <_vfiprintf_r+0x44>
 8006b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b56:	f7fe fcd3 	bl	8005500 <__retarget_lock_release_recursive>
 8006b5a:	e7f3      	b.n	8006b44 <_vfiprintf_r+0x44>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b60:	2320      	movs	r3, #32
 8006b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b6a:	2330      	movs	r3, #48	@ 0x30
 8006b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d1c <_vfiprintf_r+0x21c>
 8006b70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b74:	f04f 0901 	mov.w	r9, #1
 8006b78:	4623      	mov	r3, r4
 8006b7a:	469a      	mov	sl, r3
 8006b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b80:	b10a      	cbz	r2, 8006b86 <_vfiprintf_r+0x86>
 8006b82:	2a25      	cmp	r2, #37	@ 0x25
 8006b84:	d1f9      	bne.n	8006b7a <_vfiprintf_r+0x7a>
 8006b86:	ebba 0b04 	subs.w	fp, sl, r4
 8006b8a:	d00b      	beq.n	8006ba4 <_vfiprintf_r+0xa4>
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	4622      	mov	r2, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa1 	bl	8006ada <__sfputs_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f000 80a7 	beq.w	8006cec <_vfiprintf_r+0x1ec>
 8006b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ba0:	445a      	add	r2, fp
 8006ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 809f 	beq.w	8006cec <_vfiprintf_r+0x1ec>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	9307      	str	r3, [sp, #28]
 8006bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bc6:	4654      	mov	r4, sl
 8006bc8:	2205      	movs	r2, #5
 8006bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bce:	4853      	ldr	r0, [pc, #332]	@ (8006d1c <_vfiprintf_r+0x21c>)
 8006bd0:	f7f9 fb06 	bl	80001e0 <memchr>
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	b9d8      	cbnz	r0, 8006c10 <_vfiprintf_r+0x110>
 8006bd8:	06d1      	lsls	r1, r2, #27
 8006bda:	bf44      	itt	mi
 8006bdc:	2320      	movmi	r3, #32
 8006bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be2:	0713      	lsls	r3, r2, #28
 8006be4:	bf44      	itt	mi
 8006be6:	232b      	movmi	r3, #43	@ 0x2b
 8006be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bec:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf2:	d015      	beq.n	8006c20 <_vfiprintf_r+0x120>
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	4654      	mov	r4, sl
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f04f 0c0a 	mov.w	ip, #10
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c04:	3b30      	subs	r3, #48	@ 0x30
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d94b      	bls.n	8006ca2 <_vfiprintf_r+0x1a2>
 8006c0a:	b1b0      	cbz	r0, 8006c3a <_vfiprintf_r+0x13a>
 8006c0c:	9207      	str	r2, [sp, #28]
 8006c0e:	e014      	b.n	8006c3a <_vfiprintf_r+0x13a>
 8006c10:	eba0 0308 	sub.w	r3, r0, r8
 8006c14:	fa09 f303 	lsl.w	r3, r9, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	46a2      	mov	sl, r4
 8006c1e:	e7d2      	b.n	8006bc6 <_vfiprintf_r+0xc6>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	9103      	str	r1, [sp, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfbb      	ittet	lt
 8006c2c:	425b      	neglt	r3, r3
 8006c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c32:	9307      	strge	r3, [sp, #28]
 8006c34:	9307      	strlt	r3, [sp, #28]
 8006c36:	bfb8      	it	lt
 8006c38:	9204      	strlt	r2, [sp, #16]
 8006c3a:	7823      	ldrb	r3, [r4, #0]
 8006c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c3e:	d10a      	bne.n	8006c56 <_vfiprintf_r+0x156>
 8006c40:	7863      	ldrb	r3, [r4, #1]
 8006c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c44:	d132      	bne.n	8006cac <_vfiprintf_r+0x1ac>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	9203      	str	r2, [sp, #12]
 8006c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c52:	3402      	adds	r4, #2
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d2c <_vfiprintf_r+0x22c>
 8006c5a:	7821      	ldrb	r1, [r4, #0]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	4650      	mov	r0, sl
 8006c60:	f7f9 fabe 	bl	80001e0 <memchr>
 8006c64:	b138      	cbz	r0, 8006c76 <_vfiprintf_r+0x176>
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	eba0 000a 	sub.w	r0, r0, sl
 8006c6c:	2240      	movs	r2, #64	@ 0x40
 8006c6e:	4082      	lsls	r2, r0
 8006c70:	4313      	orrs	r3, r2
 8006c72:	3401      	adds	r4, #1
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7a:	4829      	ldr	r0, [pc, #164]	@ (8006d20 <_vfiprintf_r+0x220>)
 8006c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c80:	2206      	movs	r2, #6
 8006c82:	f7f9 faad 	bl	80001e0 <memchr>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d03f      	beq.n	8006d0a <_vfiprintf_r+0x20a>
 8006c8a:	4b26      	ldr	r3, [pc, #152]	@ (8006d24 <_vfiprintf_r+0x224>)
 8006c8c:	bb1b      	cbnz	r3, 8006cd6 <_vfiprintf_r+0x1d6>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	3307      	adds	r3, #7
 8006c92:	f023 0307 	bic.w	r3, r3, #7
 8006c96:	3308      	adds	r3, #8
 8006c98:	9303      	str	r3, [sp, #12]
 8006c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9c:	443b      	add	r3, r7
 8006c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ca0:	e76a      	b.n	8006b78 <_vfiprintf_r+0x78>
 8006ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	2001      	movs	r0, #1
 8006caa:	e7a8      	b.n	8006bfe <_vfiprintf_r+0xfe>
 8006cac:	2300      	movs	r3, #0
 8006cae:	3401      	adds	r4, #1
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f04f 0c0a 	mov.w	ip, #10
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cbe:	3a30      	subs	r2, #48	@ 0x30
 8006cc0:	2a09      	cmp	r2, #9
 8006cc2:	d903      	bls.n	8006ccc <_vfiprintf_r+0x1cc>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0c6      	beq.n	8006c56 <_vfiprintf_r+0x156>
 8006cc8:	9105      	str	r1, [sp, #20]
 8006cca:	e7c4      	b.n	8006c56 <_vfiprintf_r+0x156>
 8006ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7f0      	b.n	8006cb8 <_vfiprintf_r+0x1b8>
 8006cd6:	ab03      	add	r3, sp, #12
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	462a      	mov	r2, r5
 8006cdc:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <_vfiprintf_r+0x228>)
 8006cde:	a904      	add	r1, sp, #16
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7fd fdcf 	bl	8004884 <_printf_float>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	1c78      	adds	r0, r7, #1
 8006cea:	d1d6      	bne.n	8006c9a <_vfiprintf_r+0x19a>
 8006cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cee:	07d9      	lsls	r1, r3, #31
 8006cf0:	d405      	bmi.n	8006cfe <_vfiprintf_r+0x1fe>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	059a      	lsls	r2, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_vfiprintf_r+0x1fe>
 8006cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cfa:	f7fe fc01 	bl	8005500 <__retarget_lock_release_recursive>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	065b      	lsls	r3, r3, #25
 8006d02:	f53f af1f 	bmi.w	8006b44 <_vfiprintf_r+0x44>
 8006d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d08:	e71e      	b.n	8006b48 <_vfiprintf_r+0x48>
 8006d0a:	ab03      	add	r3, sp, #12
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <_vfiprintf_r+0x228>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7fe f84d 	bl	8004db4 <_printf_i>
 8006d1a:	e7e4      	b.n	8006ce6 <_vfiprintf_r+0x1e6>
 8006d1c:	08007314 	.word	0x08007314
 8006d20:	0800731e 	.word	0x0800731e
 8006d24:	08004885 	.word	0x08004885
 8006d28:	08006adb 	.word	0x08006adb
 8006d2c:	0800731a 	.word	0x0800731a

08006d30 <__sflush_r>:
 8006d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	0716      	lsls	r6, r2, #28
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	d454      	bmi.n	8006dea <__sflush_r+0xba>
 8006d40:	684b      	ldr	r3, [r1, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dc02      	bgt.n	8006d4c <__sflush_r+0x1c>
 8006d46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dd48      	ble.n	8006dde <__sflush_r+0xae>
 8006d4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	d045      	beq.n	8006dde <__sflush_r+0xae>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d58:	682f      	ldr	r7, [r5, #0]
 8006d5a:	6a21      	ldr	r1, [r4, #32]
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	d030      	beq.n	8006dc2 <__sflush_r+0x92>
 8006d60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	0759      	lsls	r1, r3, #29
 8006d66:	d505      	bpl.n	8006d74 <__sflush_r+0x44>
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d6e:	b10b      	cbz	r3, 8006d74 <__sflush_r+0x44>
 8006d70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d78:	6a21      	ldr	r1, [r4, #32]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b0      	blx	r6
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	d106      	bne.n	8006d92 <__sflush_r+0x62>
 8006d84:	6829      	ldr	r1, [r5, #0]
 8006d86:	291d      	cmp	r1, #29
 8006d88:	d82b      	bhi.n	8006de2 <__sflush_r+0xb2>
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e34 <__sflush_r+0x104>)
 8006d8c:	40ca      	lsrs	r2, r1
 8006d8e:	07d6      	lsls	r6, r2, #31
 8006d90:	d527      	bpl.n	8006de2 <__sflush_r+0xb2>
 8006d92:	2200      	movs	r2, #0
 8006d94:	6062      	str	r2, [r4, #4]
 8006d96:	04d9      	lsls	r1, r3, #19
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	d504      	bpl.n	8006da8 <__sflush_r+0x78>
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	d101      	bne.n	8006da6 <__sflush_r+0x76>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	b903      	cbnz	r3, 8006da8 <__sflush_r+0x78>
 8006da6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006daa:	602f      	str	r7, [r5, #0]
 8006dac:	b1b9      	cbz	r1, 8006dde <__sflush_r+0xae>
 8006dae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d002      	beq.n	8006dbc <__sflush_r+0x8c>
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7ff f9fe 	bl	80061b8 <_free_r>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dc0:	e00d      	b.n	8006dde <__sflush_r+0xae>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	4602      	mov	r2, r0
 8006dca:	1c50      	adds	r0, r2, #1
 8006dcc:	d1c9      	bne.n	8006d62 <__sflush_r+0x32>
 8006dce:	682b      	ldr	r3, [r5, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0c6      	beq.n	8006d62 <__sflush_r+0x32>
 8006dd4:	2b1d      	cmp	r3, #29
 8006dd6:	d001      	beq.n	8006ddc <__sflush_r+0xac>
 8006dd8:	2b16      	cmp	r3, #22
 8006dda:	d11e      	bne.n	8006e1a <__sflush_r+0xea>
 8006ddc:	602f      	str	r7, [r5, #0]
 8006dde:	2000      	movs	r0, #0
 8006de0:	e022      	b.n	8006e28 <__sflush_r+0xf8>
 8006de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	e01b      	b.n	8006e22 <__sflush_r+0xf2>
 8006dea:	690f      	ldr	r7, [r1, #16]
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	d0f6      	beq.n	8006dde <__sflush_r+0xae>
 8006df0:	0793      	lsls	r3, r2, #30
 8006df2:	680e      	ldr	r6, [r1, #0]
 8006df4:	bf08      	it	eq
 8006df6:	694b      	ldreq	r3, [r1, #20]
 8006df8:	600f      	str	r7, [r1, #0]
 8006dfa:	bf18      	it	ne
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	eba6 0807 	sub.w	r8, r6, r7
 8006e02:	608b      	str	r3, [r1, #8]
 8006e04:	f1b8 0f00 	cmp.w	r8, #0
 8006e08:	dde9      	ble.n	8006dde <__sflush_r+0xae>
 8006e0a:	6a21      	ldr	r1, [r4, #32]
 8006e0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e0e:	4643      	mov	r3, r8
 8006e10:	463a      	mov	r2, r7
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b0      	blx	r6
 8006e16:	2800      	cmp	r0, #0
 8006e18:	dc08      	bgt.n	8006e2c <__sflush_r+0xfc>
 8006e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	4407      	add	r7, r0
 8006e2e:	eba8 0800 	sub.w	r8, r8, r0
 8006e32:	e7e7      	b.n	8006e04 <__sflush_r+0xd4>
 8006e34:	20400001 	.word	0x20400001

08006e38 <_fflush_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b913      	cbnz	r3, 8006e48 <_fflush_r+0x10>
 8006e42:	2500      	movs	r5, #0
 8006e44:	4628      	mov	r0, r5
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	b118      	cbz	r0, 8006e52 <_fflush_r+0x1a>
 8006e4a:	6a03      	ldr	r3, [r0, #32]
 8006e4c:	b90b      	cbnz	r3, 8006e52 <_fflush_r+0x1a>
 8006e4e:	f7fe f95b 	bl	8005108 <__sinit>
 8006e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f3      	beq.n	8006e42 <_fflush_r+0xa>
 8006e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d404      	bmi.n	8006e6a <_fflush_r+0x32>
 8006e60:	0599      	lsls	r1, r3, #22
 8006e62:	d402      	bmi.n	8006e6a <_fflush_r+0x32>
 8006e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e66:	f7fe fb4a 	bl	80054fe <__retarget_lock_acquire_recursive>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f7ff ff5f 	bl	8006d30 <__sflush_r>
 8006e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e74:	07da      	lsls	r2, r3, #31
 8006e76:	4605      	mov	r5, r0
 8006e78:	d4e4      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	d4e1      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e82:	f7fe fb3d 	bl	8005500 <__retarget_lock_release_recursive>
 8006e86:	e7dd      	b.n	8006e44 <_fflush_r+0xc>

08006e88 <__swhatbuf_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	2900      	cmp	r1, #0
 8006e92:	b096      	sub	sp, #88	@ 0x58
 8006e94:	4615      	mov	r5, r2
 8006e96:	461e      	mov	r6, r3
 8006e98:	da0d      	bge.n	8006eb6 <__swhatbuf_r+0x2e>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2340      	movne	r3, #64	@ 0x40
 8006ea8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006eac:	2000      	movs	r0, #0
 8006eae:	6031      	str	r1, [r6, #0]
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	b016      	add	sp, #88	@ 0x58
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	466a      	mov	r2, sp
 8006eb8:	f000 f848 	bl	8006f4c <_fstat_r>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	dbec      	blt.n	8006e9a <__swhatbuf_r+0x12>
 8006ec0:	9901      	ldr	r1, [sp, #4]
 8006ec2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ec6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006eca:	4259      	negs	r1, r3
 8006ecc:	4159      	adcs	r1, r3
 8006ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ed2:	e7eb      	b.n	8006eac <__swhatbuf_r+0x24>

08006ed4 <__smakebuf_r>:
 8006ed4:	898b      	ldrh	r3, [r1, #12]
 8006ed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed8:	079d      	lsls	r5, r3, #30
 8006eda:	4606      	mov	r6, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	d507      	bpl.n	8006ef0 <__smakebuf_r+0x1c>
 8006ee0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	b003      	add	sp, #12
 8006eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef0:	ab01      	add	r3, sp, #4
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	f7ff ffc8 	bl	8006e88 <__swhatbuf_r>
 8006ef8:	9f00      	ldr	r7, [sp, #0]
 8006efa:	4605      	mov	r5, r0
 8006efc:	4639      	mov	r1, r7
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff f9ce 	bl	80062a0 <_malloc_r>
 8006f04:	b948      	cbnz	r0, 8006f1a <__smakebuf_r+0x46>
 8006f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0a:	059a      	lsls	r2, r3, #22
 8006f0c:	d4ee      	bmi.n	8006eec <__smakebuf_r+0x18>
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	f043 0302 	orr.w	r3, r3, #2
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	e7e2      	b.n	8006ee0 <__smakebuf_r+0xc>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	6020      	str	r0, [r4, #0]
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f2a:	b15b      	cbz	r3, 8006f44 <__smakebuf_r+0x70>
 8006f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f81d 	bl	8006f70 <_isatty_r>
 8006f36:	b128      	cbz	r0, 8006f44 <__smakebuf_r+0x70>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	431d      	orrs	r5, r3
 8006f48:	81a5      	strh	r5, [r4, #12]
 8006f4a:	e7cf      	b.n	8006eec <__smakebuf_r+0x18>

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	@ (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fc feac 	bl	8003cb6 <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000484 	.word	0x20000484

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	@ (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fd f800 	bl	8003f80 <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000484 	.word	0x20000484

08006f90 <_sbrk_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d06      	ldr	r5, [pc, #24]	@ (8006fac <_sbrk_r+0x1c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	f7fa fba2 	bl	80016e4 <_sbrk>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_sbrk_r+0x1a>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_sbrk_r+0x1a>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20000484 	.word	0x20000484

08006fb0 <memcpy>:
 8006fb0:	440a      	add	r2, r1
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006fb8:	d100      	bne.n	8006fbc <memcpy+0xc>
 8006fba:	4770      	bx	lr
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc6:	4291      	cmp	r1, r2
 8006fc8:	d1f9      	bne.n	8006fbe <memcpy+0xe>
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <__assert_func>:
 8006fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fce:	4614      	mov	r4, r2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <__assert_func+0x2c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	68d8      	ldr	r0, [r3, #12]
 8006fda:	b14c      	cbz	r4, 8006ff0 <__assert_func+0x24>
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <__assert_func+0x30>)
 8006fde:	9100      	str	r1, [sp, #0]
 8006fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fe4:	4906      	ldr	r1, [pc, #24]	@ (8007000 <__assert_func+0x34>)
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	f000 f842 	bl	8007070 <fiprintf>
 8006fec:	f000 f852 	bl	8007094 <abort>
 8006ff0:	4b04      	ldr	r3, [pc, #16]	@ (8007004 <__assert_func+0x38>)
 8006ff2:	461c      	mov	r4, r3
 8006ff4:	e7f3      	b.n	8006fde <__assert_func+0x12>
 8006ff6:	bf00      	nop
 8006ff8:	20000020 	.word	0x20000020
 8006ffc:	0800732f 	.word	0x0800732f
 8007000:	0800733c 	.word	0x0800733c
 8007004:	0800736a 	.word	0x0800736a

08007008 <_calloc_r>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	fba1 5402 	umull	r5, r4, r1, r2
 800700e:	b934      	cbnz	r4, 800701e <_calloc_r+0x16>
 8007010:	4629      	mov	r1, r5
 8007012:	f7ff f945 	bl	80062a0 <_malloc_r>
 8007016:	4606      	mov	r6, r0
 8007018:	b928      	cbnz	r0, 8007026 <_calloc_r+0x1e>
 800701a:	4630      	mov	r0, r6
 800701c:	bd70      	pop	{r4, r5, r6, pc}
 800701e:	220c      	movs	r2, #12
 8007020:	6002      	str	r2, [r0, #0]
 8007022:	2600      	movs	r6, #0
 8007024:	e7f9      	b.n	800701a <_calloc_r+0x12>
 8007026:	462a      	mov	r2, r5
 8007028:	4621      	mov	r1, r4
 800702a:	f7fe f9eb 	bl	8005404 <memset>
 800702e:	e7f4      	b.n	800701a <_calloc_r+0x12>

08007030 <__ascii_mbtowc>:
 8007030:	b082      	sub	sp, #8
 8007032:	b901      	cbnz	r1, 8007036 <__ascii_mbtowc+0x6>
 8007034:	a901      	add	r1, sp, #4
 8007036:	b142      	cbz	r2, 800704a <__ascii_mbtowc+0x1a>
 8007038:	b14b      	cbz	r3, 800704e <__ascii_mbtowc+0x1e>
 800703a:	7813      	ldrb	r3, [r2, #0]
 800703c:	600b      	str	r3, [r1, #0]
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	1e10      	subs	r0, r2, #0
 8007042:	bf18      	it	ne
 8007044:	2001      	movne	r0, #1
 8007046:	b002      	add	sp, #8
 8007048:	4770      	bx	lr
 800704a:	4610      	mov	r0, r2
 800704c:	e7fb      	b.n	8007046 <__ascii_mbtowc+0x16>
 800704e:	f06f 0001 	mvn.w	r0, #1
 8007052:	e7f8      	b.n	8007046 <__ascii_mbtowc+0x16>

08007054 <__ascii_wctomb>:
 8007054:	4603      	mov	r3, r0
 8007056:	4608      	mov	r0, r1
 8007058:	b141      	cbz	r1, 800706c <__ascii_wctomb+0x18>
 800705a:	2aff      	cmp	r2, #255	@ 0xff
 800705c:	d904      	bls.n	8007068 <__ascii_wctomb+0x14>
 800705e:	228a      	movs	r2, #138	@ 0x8a
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007066:	4770      	bx	lr
 8007068:	700a      	strb	r2, [r1, #0]
 800706a:	2001      	movs	r0, #1
 800706c:	4770      	bx	lr
	...

08007070 <fiprintf>:
 8007070:	b40e      	push	{r1, r2, r3}
 8007072:	b503      	push	{r0, r1, lr}
 8007074:	4601      	mov	r1, r0
 8007076:	ab03      	add	r3, sp, #12
 8007078:	4805      	ldr	r0, [pc, #20]	@ (8007090 <fiprintf+0x20>)
 800707a:	f853 2b04 	ldr.w	r2, [r3], #4
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	f7ff fd3d 	bl	8006b00 <_vfiprintf_r>
 8007086:	b002      	add	sp, #8
 8007088:	f85d eb04 	ldr.w	lr, [sp], #4
 800708c:	b003      	add	sp, #12
 800708e:	4770      	bx	lr
 8007090:	20000020 	.word	0x20000020

08007094 <abort>:
 8007094:	b508      	push	{r3, lr}
 8007096:	2006      	movs	r0, #6
 8007098:	f000 f82c 	bl	80070f4 <raise>
 800709c:	2001      	movs	r0, #1
 800709e:	f000 f84d 	bl	800713c <_exit>

080070a2 <_raise_r>:
 80070a2:	291f      	cmp	r1, #31
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4605      	mov	r5, r0
 80070a8:	460c      	mov	r4, r1
 80070aa:	d904      	bls.n	80070b6 <_raise_r+0x14>
 80070ac:	2316      	movs	r3, #22
 80070ae:	6003      	str	r3, [r0, #0]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070b4:	bd38      	pop	{r3, r4, r5, pc}
 80070b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070b8:	b112      	cbz	r2, 80070c0 <_raise_r+0x1e>
 80070ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070be:	b94b      	cbnz	r3, 80070d4 <_raise_r+0x32>
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 f831 	bl	8007128 <_getpid_r>
 80070c6:	4622      	mov	r2, r4
 80070c8:	4601      	mov	r1, r0
 80070ca:	4628      	mov	r0, r5
 80070cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d0:	f000 b818 	b.w	8007104 <_kill_r>
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d00a      	beq.n	80070ee <_raise_r+0x4c>
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	d103      	bne.n	80070e4 <_raise_r+0x42>
 80070dc:	2316      	movs	r3, #22
 80070de:	6003      	str	r3, [r0, #0]
 80070e0:	2001      	movs	r0, #1
 80070e2:	e7e7      	b.n	80070b4 <_raise_r+0x12>
 80070e4:	2100      	movs	r1, #0
 80070e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070ea:	4620      	mov	r0, r4
 80070ec:	4798      	blx	r3
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7e0      	b.n	80070b4 <_raise_r+0x12>
	...

080070f4 <raise>:
 80070f4:	4b02      	ldr	r3, [pc, #8]	@ (8007100 <raise+0xc>)
 80070f6:	4601      	mov	r1, r0
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f7ff bfd2 	b.w	80070a2 <_raise_r>
 80070fe:	bf00      	nop
 8007100:	20000020 	.word	0x20000020

08007104 <_kill_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	@ (8007124 <_kill_r+0x20>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	f000 f80b 	bl	800712c <_kill>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d102      	bne.n	8007120 <_kill_r+0x1c>
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	b103      	cbz	r3, 8007120 <_kill_r+0x1c>
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	bd38      	pop	{r3, r4, r5, pc}
 8007122:	bf00      	nop
 8007124:	20000484 	.word	0x20000484

08007128 <_getpid_r>:
 8007128:	f7fc bda2 	b.w	8003c70 <_getpid>

0800712c <_kill>:
 800712c:	4b02      	ldr	r3, [pc, #8]	@ (8007138 <_kill+0xc>)
 800712e:	2258      	movs	r2, #88	@ 0x58
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007136:	4770      	bx	lr
 8007138:	20000484 	.word	0x20000484

0800713c <_exit>:
 800713c:	e7fe      	b.n	800713c <_exit>
	...

08007140 <_init>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr

0800714c <_fini>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr
