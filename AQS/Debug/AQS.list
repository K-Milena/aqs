
AQS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800cd08  0800cd08  0000dd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d49c  0800d49c  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d49c  0800d49c  0000e49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4a4  0800d4a4  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4a4  0800d4a4  0000e4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4a8  0800d4a8  0000e4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800d4ac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001f4  0800d6a0  0000f1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800d6a0  0000f5f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017584  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d4  00000000  00000000  000267a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00029a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001146  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8e4  00000000  00000000  0002c1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb26  00000000  00000000  00046aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a10ad  00000000  00000000  000625c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000762c  00000000  00000000  001036b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010ace4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ccf0 	.word	0x0800ccf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800ccf0 	.word	0x0800ccf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f002 f9d5 	bl	80032e0 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000025c 	.word	0x2000025c

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	214e      	movs	r1, #78	@ 0x4e
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f002 f9a5 	bl	80032e0 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000025c 	.word	0x2000025c

08000fa4 <lcd_clear>:

void lcd_clear (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff9a 	bl	8000ee4 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e005      	b.n	8000fc2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fb6:	2020      	movs	r0, #32
 8000fb8:	f7ff ffc4 	bl	8000f44 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b63      	cmp	r3, #99	@ 0x63
 8000fc6:	ddf6      	ble.n	8000fb6 <lcd_clear+0x12>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <lcd_init>:

void lcd_init (void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fd6:	2032      	movs	r0, #50	@ 0x32
 8000fd8:	f001 f8b4 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fdc:	2030      	movs	r0, #48	@ 0x30
 8000fde:	f7ff ff81 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f001 f8ae 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fe8:	2030      	movs	r0, #48	@ 0x30
 8000fea:	f7ff ff7b 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f001 f8a8 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff4:	2030      	movs	r0, #48	@ 0x30
 8000ff6:	f7ff ff75 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f001 f8a2 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001000:	2020      	movs	r0, #32
 8001002:	f7ff ff6f 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f001 f89c 	bl	8002144 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800100c:	2028      	movs	r0, #40	@ 0x28
 800100e:	f7ff ff69 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 f896 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff ff63 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f890 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff ff5d 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f001 f88a 	bl	8002144 <HAL_Delay>
	HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f001 f887 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001036:	2006      	movs	r0, #6
 8001038:	f7ff ff54 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 f881 	bl	8002144 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001042:	200c      	movs	r0, #12
 8001044:	f7ff ff4e 	bl	8000ee4 <lcd_send_cmd>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001054:	e006      	b.n	8001064 <lcd_send_string+0x18>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff70 	bl	8000f44 <lcd_send_data>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f4      	bne.n	8001056 <lcd_send_string+0xa>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <Read_MQ135>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t Read_MQ135() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001082:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <Read_MQ135+0x38>)
 8001084:	f001 f8c6 	bl	8002214 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001088:	210a      	movs	r1, #10
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <Read_MQ135+0x38>)
 800108c:	f001 f9a9 	bl	80023e2 <HAL_ADC_PollForConversion>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <Read_MQ135+0x26>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <Read_MQ135+0x38>)
 8001098:	f001 fa2e 	bl	80024f8 <HAL_ADC_GetValue>
 800109c:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <Read_MQ135+0x38>)
 80010a0:	f001 f96c 	bl	800237c <HAL_ADC_Stop>
    return adc_value;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000214 	.word	0x20000214

080010b4 <update_measurement>:

void update_measurement(MQ135_Data *data) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    data->voltage = (Read_MQ135() * 2.97f) / 4095.0f;	// obliczenie napięcia 2.97 V VrefADC - voltomierz
 80010bc:	f7ff ffdc 	bl	8001078 <Read_MQ135>
 80010c0:	ee07 0a90 	vmov	s15, r0
 80010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80011ac <update_measurement+0xf8>
 80010cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80011b0 <update_measurement+0xfc>
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    data->Rs = ((5.0f - data->voltage) / data->voltage) * 10.0f;  // R_load = 10 kΩ - zmierzone omomierzem, 5V - Vcc
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edc3 7a01 	vstr	s15, [r3, #4]
    data->ppm = 116.602f * powf((data->Rs / R0), -2.769f);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edd3 7a01 	vldr	s15, [r3, #4]
 800110a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80011b4 <update_measurement+0x100>
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	eddf 0a29 	vldr	s1, [pc, #164]	@ 80011b8 <update_measurement+0x104>
 8001116:	eeb0 0a47 	vmov.f32	s0, s14
 800111a:	f008 faea 	bl	80096f2 <powf>
 800111e:	eef0 7a40 	vmov.f32	s15, s0
 8001122:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80011bc <update_measurement+0x108>
 8001126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	edc3 7a02 	vstr	s15, [r3, #8]

    // ograniczenie GCI do 20000
    if (data->ppm > 20000) data->ppm = 20000;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a02 	vldr	s15, [r3, #8]
 8001136:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80011c0 <update_measurement+0x10c>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	dd02      	ble.n	800114a <update_measurement+0x96>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <update_measurement+0x110>)
 8001148:	609a      	str	r2, [r3, #8]

    // klasyfikacja jakosci powietrza
    if (data->ppm < 700) data->air_quality_level = 0;       // :D Great
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001150:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80011c8 <update_measurement+0x114>
 8001154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d503      	bpl.n	8001166 <update_measurement+0xb2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	731a      	strb	r2, [r3, #12]
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
    else data->air_quality_level = 3;                       // :(	Bad
}
 8001164:	e01e      	b.n	80011a4 <update_measurement+0xf0>
    else if (data->ppm < 2000) data->air_quality_level = 1;  // :) Good
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edd3 7a02 	vldr	s15, [r3, #8]
 800116c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80011cc <update_measurement+0x118>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d503      	bpl.n	8001182 <update_measurement+0xce>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	731a      	strb	r2, [r3, #12]
}
 8001180:	e010      	b.n	80011a4 <update_measurement+0xf0>
    else if (data->ppm < 5000) data->air_quality_level = 2; // :|	Poor
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a02 	vldr	s15, [r3, #8]
 8001188:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011d0 <update_measurement+0x11c>
 800118c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d503      	bpl.n	800119e <update_measurement+0xea>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2202      	movs	r2, #2
 800119a:	731a      	strb	r2, [r3, #12]
}
 800119c:	e002      	b.n	80011a4 <update_measurement+0xf0>
    else data->air_quality_level = 3;                       // :(	Bad
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	731a      	strb	r2, [r3, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	403e147b 	.word	0x403e147b
 80011b0:	457ff000 	.word	0x457ff000
 80011b4:	4285051f 	.word	0x4285051f
 80011b8:	c031374c 	.word	0xc031374c
 80011bc:	42e93439 	.word	0x42e93439
 80011c0:	469c4000 	.word	0x469c4000
 80011c4:	469c4000 	.word	0x469c4000
 80011c8:	442f0000 	.word	0x442f0000
 80011cc:	44fa0000 	.word	0x44fa0000
 80011d0:	459c4000 	.word	0x459c4000

080011d4 <lcd_printf>:
            printf("Found device at 0x%02X\r\n", addr << 1);
        }
    }
}

void lcd_printf(const char *fmt, ...) {
 80011d4:	b40f      	push	{r0, r1, r2, r3}
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b092      	sub	sp, #72	@ 0x48
 80011da:	af00      	add	r7, sp, #0
    char buffer[64]; // zwiększ jeśli masz długie ciągi znakow
    va_list args;
    va_start(args, fmt);
 80011dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011e2:	f107 0008 	add.w	r0, r7, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80011ea:	2140      	movs	r1, #64	@ 0x40
 80011ec:	f009 fc98 	bl	800ab20 <vsniprintf>
    va_end(args);
    lcd_send_string(buffer);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff29 	bl	800104c <lcd_send_string>
}
 80011fa:	bf00      	nop
 80011fc:	3748      	adds	r7, #72	@ 0x48
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <run_heating_sequence>:
            DELAY_US(1000); \
        } \
    } while (0)

void run_heating_sequence(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	@ 0x50
 800120c:	af02      	add	r7, sp, #8
    uint32_t total_seconds = 300; // 5 minut = 300 sekund
 800120e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34

    lcd_clear();
 8001214:	f7ff fec6 	bl	8000fa4 <lcd_clear>
    lcd_send_cmd(0x80);
 8001218:	2080      	movs	r0, #128	@ 0x80
 800121a:	f7ff fe63 	bl	8000ee4 <lcd_send_cmd>
    lcd_send_string("Nagrzewanie...");
 800121e:	485c      	ldr	r0, [pc, #368]	@ (8001390 <run_heating_sequence+0x188>)
 8001220:	f7ff ff14 	bl	800104c <lcd_send_string>
    lcd_send_cmd(0xC0);
 8001224:	20c0      	movs	r0, #192	@ 0xc0
 8001226:	f7ff fe5d 	bl	8000ee4 <lcd_send_cmd>

    for (uint32_t remaining = total_seconds; remaining > 0; --remaining)
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
 800122e:	e07b      	b.n	8001328 <run_heating_sequence+0x120>
    {
        if (heating_skipped) {
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <run_heating_sequence+0x18c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d02c      	beq.n	8001294 <run_heating_sequence+0x8c>
            lcd_clear();
 800123a:	f7ff feb3 	bl	8000fa4 <lcd_clear>
            lcd_send_string("Pominieto...");
 800123e:	4856      	ldr	r0, [pc, #344]	@ (8001398 <run_heating_sequence+0x190>)
 8001240:	f7ff ff04 	bl	800104c <lcd_send_string>
            DELAY_MS(1000);
 8001244:	2300      	movs	r3, #0
 8001246:	643b      	str	r3, [r7, #64]	@ 0x40
 8001248:	e01f      	b.n	800128a <run_heating_sequence+0x82>
 800124a:	4b54      	ldr	r3, [pc, #336]	@ (800139c <run_heating_sequence+0x194>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <run_heating_sequence+0x198>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <run_heating_sequence+0x19c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001260:	fb03 f202 	mul.w	r2, r3, r2
 8001264:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <run_heating_sequence+0x198>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	494e      	ldr	r1, [pc, #312]	@ (80013a4 <run_heating_sequence+0x19c>)
 800126a:	fba1 1303 	umull	r1, r3, r1, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b49      	ldr	r3, [pc, #292]	@ (800139c <run_heating_sequence+0x194>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	6a3a      	ldr	r2, [r7, #32]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f8      	bhi.n	8001276 <run_heating_sequence+0x6e>
 8001284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001286:	3301      	adds	r3, #1
 8001288:	643b      	str	r3, [r7, #64]	@ 0x40
 800128a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800128c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001290:	d3db      	bcc.n	800124a <run_heating_sequence+0x42>
            break;
 8001292:	e04c      	b.n	800132e <run_heating_sequence+0x126>
        }

        uint32_t min = remaining / 60;
 8001294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001296:	4a44      	ldr	r2, [pc, #272]	@ (80013a8 <run_heating_sequence+0x1a0>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	095b      	lsrs	r3, r3, #5
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t sec = remaining % 60;
 80012a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012a2:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <run_heating_sequence+0x1a0>)
 80012a4:	fba3 1302 	umull	r1, r3, r3, r2
 80012a8:	0959      	lsrs	r1, r3, #5
 80012aa:	460b      	mov	r3, r1
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        char line2[16];
        snprintf(line2, sizeof(line2), "Czas: %02lu:%02lu", min, sec);
 80012b6:	1d38      	adds	r0, r7, #4
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012be:	4a3b      	ldr	r2, [pc, #236]	@ (80013ac <run_heating_sequence+0x1a4>)
 80012c0:	2110      	movs	r1, #16
 80012c2:	f009 fb63 	bl	800a98c <sniprintf>
        lcd_send_cmd(0xC0);
 80012c6:	20c0      	movs	r0, #192	@ 0xc0
 80012c8:	f7ff fe0c 	bl	8000ee4 <lcd_send_cmd>
        lcd_send_string(line2);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff febc 	bl	800104c <lcd_send_string>

        DELAY_MS(1000);
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d8:	e01f      	b.n	800131a <run_heating_sequence+0x112>
 80012da:	4b30      	ldr	r3, [pc, #192]	@ (800139c <run_heating_sequence+0x194>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <run_heating_sequence+0x198>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <run_heating_sequence+0x19c>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f0:	fb03 f202 	mul.w	r2, r3, r2
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <run_heating_sequence+0x198>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	492a      	ldr	r1, [pc, #168]	@ (80013a4 <run_heating_sequence+0x19c>)
 80012fa:	fba1 1303 	umull	r1, r3, r1, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <run_heating_sequence+0x194>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f8      	bhi.n	8001306 <run_heating_sequence+0xfe>
 8001314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001316:	3301      	adds	r3, #1
 8001318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800131c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001320:	d3db      	bcc.n	80012da <run_heating_sequence+0xd2>
    for (uint32_t remaining = total_seconds; remaining > 0; --remaining)
 8001322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001324:	3b01      	subs	r3, #1
 8001326:	647b      	str	r3, [r7, #68]	@ 0x44
 8001328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800132a:	2b00      	cmp	r3, #0
 800132c:	d180      	bne.n	8001230 <run_heating_sequence+0x28>
    }

    lcd_clear();
 800132e:	f7ff fe39 	bl	8000fa4 <lcd_clear>
    lcd_send_string("Gotowe!");
 8001332:	481f      	ldr	r0, [pc, #124]	@ (80013b0 <run_heating_sequence+0x1a8>)
 8001334:	f7ff fe8a 	bl	800104c <lcd_send_string>
    DELAY_MS(1000);
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800133c:	e01f      	b.n	800137e <run_heating_sequence+0x176>
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <run_heating_sequence+0x194>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <run_heating_sequence+0x198>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <run_heating_sequence+0x19c>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	fb03 f202 	mul.w	r2, r3, r2
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <run_heating_sequence+0x198>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4911      	ldr	r1, [pc, #68]	@ (80013a4 <run_heating_sequence+0x19c>)
 800135e:	fba1 1303 	umull	r1, r3, r1, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <run_heating_sequence+0x194>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f8      	bhi.n	800136a <run_heating_sequence+0x162>
 8001378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137a:	3301      	adds	r3, #1
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800137e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001384:	d3db      	bcc.n	800133e <run_heating_sequence+0x136>
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3748      	adds	r7, #72	@ 0x48
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	0800cd3c 	.word	0x0800cd3c
 8001394:	20000210 	.word	0x20000210
 8001398:	0800cd4c 	.word	0x0800cd4c
 800139c:	e000e010 	.word	0xe000e010
 80013a0:	20000000 	.word	0x20000000
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	88888889 	.word	0x88888889
 80013ac:	0800cd5c 	.word	0x0800cd5c
 80013b0:	0800cd70 	.word	0x0800cd70

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fe50 	bl	8002060 <HAL_Init>

  /* USER CODE BEGIN Init */
 initialise_monitor_handles();
 80013c0:	f008 f91a 	bl	80095f8 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f9b2 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 fb1e 	bl	8001a08 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013cc:	f000 fa18 	bl	8001800 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013d0:	f000 fa68 	bl	80018a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013d4:	f000 faee 	bl	80019b4 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80013d8:	f000 fac8 	bl	800196c <MX_TIM10_Init>
  MX_SPI1_Init();
 80013dc:	f000 fa90 	bl	8001900 <MX_SPI1_Init>
  MX_FATFS_Init();
 80013e0:	f004 fd80 	bl	8005ee4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
 // init timera do przerwań i przesyłu przez BT
	HAL_TIM_Base_Start_IT(&htim10);
 80013e4:	48ba      	ldr	r0, [pc, #744]	@ (80016d0 <main+0x31c>)
 80013e6:	f003 fc0f 	bl	8004c08 <HAL_TIM_Base_Start_IT>
  // inicjalizacja ekranu
  lcd_init();
 80013ea:	f7ff fdf2 	bl	8000fd2 <lcd_init>
  printf("SD card demo debugging \r\n\r\n");
 80013ee:	48b9      	ldr	r0, [pc, #740]	@ (80016d4 <main+0x320>)
 80013f0:	f009 fac4 	bl	800a97c <puts>
  run_heating_sequence();
 80013f4:	f7ff ff08 	bl	8001208 <run_heating_sequence>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80013f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013fc:	f000 fea2 	bl	8002144 <HAL_Delay>
   FATFS FatFs; 	//Fatfs handle
   FIL fil; 		//File handle
   FRESULT fres; //Result after operations

   //Open the file system
   printf("disk_status: %d\r\n", disk_status(0));
 8001400:	2000      	movs	r0, #0
 8001402:	f005 faef 	bl	80069e4 <disk_status>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	48b3      	ldr	r0, [pc, #716]	@ (80016d8 <main+0x324>)
 800140c:	f009 fa4e 	bl	800a8ac <iprintf>
   fres = f_mount(&FatFs, "", 0); //1=mount now przy 1 się wywala (3), a przy 0 leci dalej
 8001410:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001414:	2200      	movs	r2, #0
 8001416:	49b1      	ldr	r1, [pc, #708]	@ (80016dc <main+0x328>)
 8001418:	4618      	mov	r0, r3
 800141a:	f007 f821 	bl	8008460 <f_mount>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
   DELAY_MS(1000);
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 800142a:	e025      	b.n	8001478 <main+0xc4>
 800142c:	4bac      	ldr	r3, [pc, #688]	@ (80016e0 <main+0x32c>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 8001434:	4bab      	ldr	r3, [pc, #684]	@ (80016e4 <main+0x330>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4aab      	ldr	r2, [pc, #684]	@ (80016e8 <main+0x334>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001444:	fb03 f202 	mul.w	r2, r3, r2
 8001448:	4ba6      	ldr	r3, [pc, #664]	@ (80016e4 <main+0x330>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	49a6      	ldr	r1, [pc, #664]	@ (80016e8 <main+0x334>)
 800144e:	fba1 1303 	umull	r1, r3, r1, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 800145c:	4ba0      	ldr	r3, [pc, #640]	@ (80016e0 <main+0x32c>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f8d7 2494 	ldr.w	r2, [r7, #1172]	@ 0x494
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 800146a:	429a      	cmp	r2, r3
 800146c:	d8f6      	bhi.n	800145c <main+0xa8>
 800146e:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001472:	3301      	adds	r3, #1
 8001474:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 8001478:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001480:	d3d4      	bcc.n	800142c <main+0x78>

   if (fres != FR_OK) {
 8001482:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <main+0xe6>
 	printf("f_mount error (%i)\r\n", fres);
 800148a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800148e:	4619      	mov	r1, r3
 8001490:	4896      	ldr	r0, [pc, #600]	@ (80016ec <main+0x338>)
 8001492:	f009 fa0b 	bl	800a8ac <iprintf>
 	while(1);
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <main+0xe2>
   }
   printf("disk_status: %d\r\n", disk_status(0));
 800149a:	2000      	movs	r0, #0
 800149c:	f005 faa2 	bl	80069e4 <disk_status>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	488c      	ldr	r0, [pc, #560]	@ (80016d8 <main+0x324>)
 80014a6:	f009 fa01 	bl	800a8ac <iprintf>
   //Let's get some statistics from the SD card
   DWORD free_clusters, free_sectors, total_sectors;

   FATFS* getFreeFs;

   fres = f_getfree("", &free_clusters, &getFreeFs);
 80014aa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80014ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4889      	ldr	r0, [pc, #548]	@ (80016dc <main+0x328>)
 80014b6:	f007 fd2f 	bl	8008f18 <f_getfree>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
   if (fres != FR_OK) {
 80014c0:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <main+0x124>
 	printf("f_getfree error (%i)\r\n", fres);	// teraz tu się wywala (3)
 80014c8:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80014cc:	4619      	mov	r1, r3
 80014ce:	4888      	ldr	r0, [pc, #544]	@ (80016f0 <main+0x33c>)
 80014d0:	f009 f9ec 	bl	800a8ac <iprintf>
 	while(1);
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <main+0x120>
   }

   //Formula comes from ChaN's documentation
   total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80014d8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80014dc:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	3b02      	subs	r3, #2
 80014e6:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 80014ea:	f5a2 6292 	sub.w	r2, r2, #1168	@ 0x490
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	8952      	ldrh	r2, [r2, #10]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
   free_sectors = free_clusters * getFreeFs->csize;
 80014fa:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80014fe:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	895b      	ldrh	r3, [r3, #10]
 8001506:	461a      	mov	r2, r3
 8001508:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800150c:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4

   printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800151a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 800151e:	0859      	lsrs	r1, r3, #1
 8001520:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	461a      	mov	r2, r3
 8001528:	4872      	ldr	r0, [pc, #456]	@ (80016f4 <main+0x340>)
 800152a:	f009 f9bf 	bl	800a8ac <iprintf>

   //Now let's try to open file "test.txt"
   fres = f_open(&fil, "test.txt", FA_READ);
 800152e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001532:	2201      	movs	r2, #1
 8001534:	4970      	ldr	r1, [pc, #448]	@ (80016f8 <main+0x344>)
 8001536:	4618      	mov	r0, r3
 8001538:	f006 ffd8 	bl	80084ec <f_open>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
   if (fres != FR_OK) {
 8001542:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <main+0x1a6>
 	printf("f_open error (%i)\r\n", fres);
 800154a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800154e:	4619      	mov	r1, r3
 8001550:	486a      	ldr	r0, [pc, #424]	@ (80016fc <main+0x348>)
 8001552:	f009 f9ab 	bl	800a8ac <iprintf>
 	while(1);
 8001556:	bf00      	nop
 8001558:	e7fd      	b.n	8001556 <main+0x1a2>
   }
   printf("I was able to open 'test.txt' for reading!\r\n");
 800155a:	4869      	ldr	r0, [pc, #420]	@ (8001700 <main+0x34c>)
 800155c:	f009 fa0e 	bl	800a97c <puts>
   //Read 30 bytes from "test.txt" on the SD card
   BYTE readBuf[30];

   //We can either use f_read OR f_gets to get data out of files
   //f_gets is a wrapper on f_read that does some string formatting for us
   TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8001560:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	211e      	movs	r1, #30
 800156a:	4618      	mov	r0, r3
 800156c:	f007 fd89 	bl	8009082 <f_gets>
 8001570:	f8c7 04a0 	str.w	r0, [r7, #1184]	@ 0x4a0
   if(rres != 0) {
 8001574:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <main+0x1d6>
 	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4619      	mov	r1, r3
 8001582:	4860      	ldr	r0, [pc, #384]	@ (8001704 <main+0x350>)
 8001584:	f009 f992 	bl	800a8ac <iprintf>
 8001588:	e005      	b.n	8001596 <main+0x1e2>
   } else {
 	printf("f_gets error (%i)\r\n", fres);
 800158a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800158e:	4619      	mov	r1, r3
 8001590:	485d      	ldr	r0, [pc, #372]	@ (8001708 <main+0x354>)
 8001592:	f009 f98b 	bl	800a8ac <iprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 8001596:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800159a:	4618      	mov	r0, r3
 800159c:	f007 fc92 	bl	8008ec4 <f_close>

   //Now let's try and write a file "write.txt"
   fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80015a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015a4:	221a      	movs	r2, #26
 80015a6:	4959      	ldr	r1, [pc, #356]	@ (800170c <main+0x358>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 ff9f 	bl	80084ec <f_open>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
   if(fres == FR_OK) {
 80015b4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <main+0x210>
 	printf("I was able to open 'write.txt' for writing\r\n");
 80015bc:	4854      	ldr	r0, [pc, #336]	@ (8001710 <main+0x35c>)
 80015be:	f009 f9dd 	bl	800a97c <puts>
 80015c2:	e005      	b.n	80015d0 <main+0x21c>
   } else {
 	printf("f_open error (%i)\r\n", fres);
 80015c4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80015c8:	4619      	mov	r1, r3
 80015ca:	484c      	ldr	r0, [pc, #304]	@ (80016fc <main+0x348>)
 80015cc:	f009 f96e 	bl	800a8ac <iprintf>
   }

   //Copy in a string
   strncpy((char*)readBuf, "a new file is made!", 19);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001714 <main+0x360>)
 80015d6:	461c      	mov	r4, r3
 80015d8:	4615      	mov	r5, r2
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	8022      	strh	r2, [r4, #0]
 80015e4:	3402      	adds	r4, #2
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	7023      	strb	r3, [r4, #0]
   UINT bytesWrote;
   fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	f107 0108 	add.w	r1, r7, #8
 80015f0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80015f4:	2213      	movs	r2, #19
 80015f6:	f007 fa72 	bl	8008ade <f_write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
   if(fres == FR_OK) {
 8001600:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <main+0x268>
 	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8001608:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800160c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4840      	ldr	r0, [pc, #256]	@ (8001718 <main+0x364>)
 8001616:	f009 f949 	bl	800a8ac <iprintf>
 800161a:	e005      	b.n	8001628 <main+0x274>
   } else {
 	printf("f_write error (%i)\r\n", fres);
 800161c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001620:	4619      	mov	r1, r3
 8001622:	483e      	ldr	r0, [pc, #248]	@ (800171c <main+0x368>)
 8001624:	f009 f942 	bl	800a8ac <iprintf>
   }

   //Be a tidy kiwi - don't forget to close your file!
   f_close(&fil);
 8001628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800162c:	4618      	mov	r0, r3
 800162e:	f007 fc49 	bl	8008ec4 <f_close>

   //We're done, so de-mount the drive
   f_mount(NULL, "", 0);
 8001632:	2200      	movs	r2, #0
 8001634:	4929      	ldr	r1, [pc, #164]	@ (80016dc <main+0x328>)
 8001636:	2000      	movs	r0, #0
 8001638:	f006 ff12 	bl	8008460 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  update_measurement(&data);
 800163c:	4838      	ldr	r0, [pc, #224]	@ (8001720 <main+0x36c>)
 800163e:	f7ff fd39 	bl	80010b4 <update_measurement>
	  lcd_send_cmd (0x80|0x00);
 8001642:	2080      	movs	r0, #128	@ 0x80
 8001644:	f7ff fc4e 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("PPM: %.2f ", data.ppm);
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <main+0x36c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4833      	ldr	r0, [pc, #204]	@ (8001724 <main+0x370>)
 8001658:	f7ff fdbc 	bl	80011d4 <lcd_printf>

	  lcd_send_cmd(0x80 | 0x40);  // linia 2, kol
 800165c:	20c0      	movs	r0, #192	@ 0xc0
 800165e:	f7ff fc41 	bl	8000ee4 <lcd_send_cmd>
	  lcd_printf("Air Quality: %d ", data.air_quality_level);
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <main+0x36c>)
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	4619      	mov	r1, r3
 8001668:	482f      	ldr	r0, [pc, #188]	@ (8001728 <main+0x374>)
 800166a:	f7ff fdb3 	bl	80011d4 <lcd_printf>

	  DELAY_MS(1000);
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 8001674:	e025      	b.n	80016c2 <main+0x30e>
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <main+0x32c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <main+0x330>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <main+0x334>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800168e:	fb03 f202 	mul.w	r2, r3, r2
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <main+0x330>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4914      	ldr	r1, [pc, #80]	@ (80016e8 <main+0x334>)
 8001698:	fba1 1303 	umull	r1, r3, r1, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <main+0x32c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f8d7 249c 	ldr.w	r2, [r7, #1180]	@ 0x49c
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f8d7 2498 	ldr.w	r2, [r7, #1176]	@ 0x498
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f6      	bhi.n	80016a6 <main+0x2f2>
 80016b8:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80016bc:	3301      	adds	r3, #1
 80016be:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 80016c2:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ca:	d3d4      	bcc.n	8001676 <main+0x2c2>
	  update_measurement(&data);
 80016cc:	e7b6      	b.n	800163c <main+0x288>
 80016ce:	bf00      	nop
 80016d0:	20000308 	.word	0x20000308
 80016d4:	0800cd78 	.word	0x0800cd78
 80016d8:	0800cd94 	.word	0x0800cd94
 80016dc:	0800cda8 	.word	0x0800cda8
 80016e0:	e000e010 	.word	0xe000e010
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	0800cdac 	.word	0x0800cdac
 80016f0:	0800cdc4 	.word	0x0800cdc4
 80016f4:	0800cddc 	.word	0x0800cddc
 80016f8:	0800ce24 	.word	0x0800ce24
 80016fc:	0800ce30 	.word	0x0800ce30
 8001700:	0800ce44 	.word	0x0800ce44
 8001704:	0800ce70 	.word	0x0800ce70
 8001708:	0800ce9c 	.word	0x0800ce9c
 800170c:	0800ceb0 	.word	0x0800ceb0
 8001710:	0800cebc 	.word	0x0800cebc
 8001714:	0800cee8 	.word	0x0800cee8
 8001718:	0800cefc 	.word	0x0800cefc
 800171c:	0800cf20 	.word	0x0800cf20
 8001720:	20000398 	.word	0x20000398
 8001724:	0800cf38 	.word	0x0800cf38
 8001728:	0800cf44 	.word	0x0800cf44

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b094      	sub	sp, #80	@ 0x50
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2230      	movs	r2, #48	@ 0x30
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f009 fa92 	bl	800ac64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <SystemClock_Config+0xcc>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <SystemClock_Config+0xcc>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <SystemClock_Config+0xd0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <SystemClock_Config+0xd0>)
 8001776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	2310      	movs	r3, #16
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2302      	movs	r3, #2
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800179c:	2308      	movs	r3, #8
 800179e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017a0:	2360      	movs	r3, #96	@ 0x60
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017a8:	2308      	movs	r3, #8
 80017aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f8ef 	bl	8003994 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017bc:	f000 f9e0 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2302      	movs	r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2103      	movs	r1, #3
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fb50 	bl	8003e84 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ea:	f000 f9c9 	bl	8001b80 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3750      	adds	r7, #80	@ 0x50
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	@ (800189c <MX_ADC1_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_ADC1_Init+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_ADC1_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_ADC1_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001840:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <MX_ADC1_Init+0xa0>)
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_ADC1_Init+0x98>)
 800184c:	2201      	movs	r2, #1
 800184e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_ADC1_Init+0x98>)
 800185a:	2201      	movs	r2, #1
 800185c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185e:	480e      	ldr	r0, [pc, #56]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001860:	f000 fc94 	bl	800218c <HAL_ADC_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800186a:	f000 f989 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800186e:	2301      	movs	r3, #1
 8001870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	@ (8001898 <MX_ADC1_Init+0x98>)
 8001880:	f000 fe48 	bl	8002514 <HAL_ADC_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800188a:	f000 f979 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000214 	.word	0x20000214
 800189c:	40012000 	.word	0x40012000
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <MX_I2C1_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018b0:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <MX_I2C1_Init+0x58>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	@ (80018f4 <MX_I2C1_Init+0x50>)
 80018e2:	f001 fbb9 	bl	8003058 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 f948 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000025c 	.word	0x2000025c
 80018f8:	40005400 	.word	0x40005400
 80018fc:	000186a0 	.word	0x000186a0

08001900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001906:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <MX_SPI1_Init+0x68>)
 8001908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <MX_SPI1_Init+0x64>)
 800190c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <MX_SPI1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_SPI1_Init+0x64>)
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001934:	2238      	movs	r2, #56	@ 0x38
 8001936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <MX_SPI1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_SPI1_Init+0x64>)
 800194c:	220a      	movs	r2, #10
 800194e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <MX_SPI1_Init+0x64>)
 8001952:	f002 fcb7 	bl	80042c4 <HAL_SPI_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800195c:	f000 f910 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002b0 	.word	0x200002b0
 8001968:	40013000 	.word	0x40013000

0800196c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_TIM10_Init+0x40>)
 8001972:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <MX_TIM10_Init+0x44>)
 8001974:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <MX_TIM10_Init+0x40>)
 8001978:	f242 720f 	movw	r2, #9999	@ 0x270f
 800197c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <MX_TIM10_Init+0x40>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MX_TIM10_Init+0x40>)
 8001986:	f241 3287 	movw	r2, #4999	@ 0x1387
 800198a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <MX_TIM10_Init+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <MX_TIM10_Init+0x40>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_TIM10_Init+0x40>)
 800199a:	f003 f8e5 	bl	8004b68 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80019a4:	f000 f8ec 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000308 	.word	0x20000308
 80019b0:	40014400 	.word	0x40014400

080019b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <MX_USART1_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ec:	f003 fb26 	bl	800503c <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f000 f8c3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000350 	.word	0x20000350
 8001a04:	40011000 	.word	0x40011000

08001a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a33      	ldr	r2, [pc, #204]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <MX_GPIO_Init+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001a78:	481f      	ldr	r0, [pc, #124]	@ (8001af8 <MX_GPIO_Init+0xf0>)
 8001a7a:	f001 faa1 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2120      	movs	r1, #32
 8001a82:	481e      	ldr	r0, [pc, #120]	@ (8001afc <MX_GPIO_Init+0xf4>)
 8001a84:	f001 fa9c 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a92:	2302      	movs	r3, #2
 8001a94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4818      	ldr	r0, [pc, #96]	@ (8001b00 <MX_GPIO_Init+0xf8>)
 8001a9e:	f001 f90b 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001aa2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480f      	ldr	r0, [pc, #60]	@ (8001af8 <MX_GPIO_Init+0xf0>)
 8001abc:	f001 f8fc 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	@ (8001afc <MX_GPIO_Init+0xf4>)
 8001ad8:	f001 f8ee 	bl	8002cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2006      	movs	r0, #6
 8001ae2:	f001 f820 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ae6:	2006      	movs	r0, #6
 8001ae8:	f001 f839 	bl	8002b5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B_BUTTON_Pin) // PA0 przerwanie
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x16>
    {
        heating_skipped = true;
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x24>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000210 	.word	0x20000210

08001b2c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b090      	sub	sp, #64	@ 0x40
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 uint8_t msg_data[50];
 uint16_t size = 0; //rozmiar wiadomości
 8001b34:	2300      	movs	r3, #0
 8001b36:	87fb      	strh	r3, [r7, #62]	@ 0x3e

size = sprintf(msg_data,"Air Quality: %d.nr ", data.air_quality_level); // Stworzenie wiadomosci
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f008 ff57 	bl	800a9f8 <siprintf>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 HAL_UART_Transmit_IT(&huart1, msg_data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8001b4e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b58:	f003 fac0 	bl	80050dc <HAL_UART_Transmit_IT>
 HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin); // Zmiana stanu pinu na diodzie LED
 8001b5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b60:	4806      	ldr	r0, [pc, #24]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b62:	f001 fa46 	bl	8002ff2 <HAL_GPIO_TogglePin>
}
 8001b66:	bf00      	nop
 8001b68:	3740      	adds	r7, #64	@ 0x40
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000398 	.word	0x20000398
 8001b74:	0800cf58 	.word	0x0800cf58
 8001b78:	20000350 	.word	0x20000350
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bca:	2007      	movs	r0, #7
 8001bcc:	f000 ffa0 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a17      	ldr	r2, [pc, #92]	@ (8001c58 <HAL_ADC_MspInit+0x7c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d127      	bne.n	8001c4e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_ADC_MspInit+0x80>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_135_ADC_IN_Pin;
 8001c36:	2302      	movs	r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ_135_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_ADC_MspInit+0x84>)
 8001c4a:	f001 f835 	bl	8002cb8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40012000 	.word	0x40012000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_I2C_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12b      	bne.n	8001cde <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ca2:	23c0      	movs	r3, #192	@ 0xc0
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca6:	2312      	movs	r3, #18
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <HAL_I2C_MspInit+0x8c>)
 8001cbe:	f000 fffb 	bl	8002cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_I2C_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	@ 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_SPI_MspInit+0x84>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d12b      	bne.n	8001d6e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a17      	ldr	r2, [pc, #92]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d4e:	23e0      	movs	r3, #224	@ 0xe0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5e:	2305      	movs	r3, #5
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d6a:	f000 ffa5 	bl	8002cb8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	@ 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40013000 	.word	0x40013000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <HAL_TIM_Base_MspInit+0x48>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d115      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2019      	movs	r0, #25
 8001db8:	f000 feb5 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dbc:	2019      	movs	r0, #25
 8001dbe:	f000 fece 	bl	8002b5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40014400 	.word	0x40014400
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <HAL_UART_MspInit+0x94>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d134      	bne.n	8001e60 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e40:	2307      	movs	r3, #7
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <HAL_UART_MspInit+0x9c>)
 8001e4c:	f000 ff34 	bl	8002cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2025      	movs	r0, #37	@ 0x25
 8001e56:	f000 fe66 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5a:	2025      	movs	r0, #37	@ 0x25
 8001e5c:	f000 fe7f 	bl	8002b5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <SDTimer_Handler>:
/* USER CODE BEGIN EV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <SDTimer_Handler+0x40>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <SDTimer_Handler+0x40>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <SDTimer_Handler+0x40>)
 8001e8e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <SDTimer_Handler+0x44>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <SDTimer_Handler+0x34>
    Timer2--;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <SDTimer_Handler+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <SDTimer_Handler+0x44>)
 8001ea6:	701a      	strb	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200003a9 	.word	0x200003a9
 8001eb8:	200003aa 	.word	0x200003aa

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <SysTick_Handler+0x30>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <SysTick_Handler+0x30>)
 8001f20:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10) {
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <SysTick_Handler+0x30>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d904      	bls.n	8001f36 <SysTick_Handler+0x26>
	    FatFsCnt = 0;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <SysTick_Handler+0x30>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001f32:	f7ff ff9f 	bl	8001e74 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f36:	f000 f8e5 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200003a8 	.word	0x200003a8

08001f44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f001 f86d 	bl	8003028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f5a:	f002 feb7 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000308 	.word	0x20000308

08001f68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <USART1_IRQHandler+0x10>)
 8001f6e:	f003 f8eb 	bl	8005148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000350 	.word	0x20000350

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f008 feac 	bl	800ad08 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	200003ac 	.word	0x200003ac
 8001fe4:	200005f8 	.word	0x200005f8

08001fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002010:	f7ff ffea 	bl	8001fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	@ (800204c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	@ (8002058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f008 fe6b 	bl	800ad14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203e:	f7ff f9b9 	bl	80013b4 <main>
  bx  lr    
 8002042:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002050:	0800d4ac 	.word	0x0800d4ac
  ldr r2, =_sbss
 8002054:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002058:	200005f4 	.word	0x200005f4

0800205c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <HAL_Init+0x40>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800206e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_Init+0x40>)
 8002076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800207a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_Init+0x40>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a07      	ldr	r2, [pc, #28]	@ (80020a0 <HAL_Init+0x40>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 fd41 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f808 	bl	80020a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002094:	f7ff fd7a 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_InitTick+0x54>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_InitTick+0x58>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd59 	bl	8002b7a <HAL_SYSTICK_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00e      	b.n	80020f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d80a      	bhi.n	80020ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d8:	2200      	movs	r2, #0
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020e0:	f000 fd21 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e4:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <HAL_InitTick+0x5c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x20>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_IncTick+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <HAL_IncTick+0x24>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000008 	.word	0x20000008
 8002128:	200003b0 	.word	0x200003b0

0800212c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200003b0 	.word	0x200003b0

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff ffee 	bl	800212c <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800215c:	d005      	beq.n	800216a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_Delay+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216a:	bf00      	nop
 800216c:	f7ff ffde 	bl	800212c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d8f7      	bhi.n	800216c <HAL_Delay+0x28>
  {
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000008 	.word	0x20000008

0800218c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e033      	b.n	800220a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd16 	bl	8001bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021d2:	f023 0302 	bic.w	r3, r3, #2
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 faca 	bl	8002778 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80021fa:	e001      	b.n	8002200 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_ADC_Start+0x1a>
 800222a:	2302      	movs	r3, #2
 800222c:	e097      	b.n	800235e <HAL_ADC_Start+0x14a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d018      	beq.n	8002276 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002254:	4b45      	ldr	r3, [pc, #276]	@ (800236c <HAL_ADC_Start+0x158>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a45      	ldr	r2, [pc, #276]	@ (8002370 <HAL_ADC_Start+0x15c>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9a      	lsrs	r2, r3, #18
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002268:	e002      	b.n	8002270 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d15f      	bne.n	8002344 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e0:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_ADC_Start+0x160>)
 80022e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022ec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d129      	bne.n	800235c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e020      	b.n	800235c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <HAL_ADC_Start+0x164>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d11b      	bne.n	800235c <HAL_ADC_Start+0x148>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	e00b      	b.n	800235c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000
 8002370:	431bde83 	.word	0x431bde83
 8002374:	40012300 	.word	0x40012300
 8002378:	40012000 	.word	0x40012000

0800237c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Stop+0x16>
 800238e:	2302      	movs	r3, #2
 8002390:	e021      	b.n	80023d6 <HAL_ADC_Stop+0x5a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fe:	d113      	bne.n	8002428 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800240a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800240e:	d10b      	bne.n	8002428 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e063      	b.n	80024f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002428:	f7ff fe80 	bl	800212c <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800242e:	e021      	b.n	8002474 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002436:	d01d      	beq.n	8002474 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_PollForConversion+0x6c>
 800243e:	f7ff fe75 	bl	800212c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d212      	bcs.n	8002474 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d00b      	beq.n	8002474 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e03d      	b.n	80024f0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d1d6      	bne.n	8002430 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f06f 0212 	mvn.w	r2, #18
 800248a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d123      	bne.n	80024ee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11f      	bne.n	80024ee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1c>
 800252c:	2302      	movs	r3, #2
 800252e:	e113      	b.n	8002758 <HAL_ADC_ConfigChannel+0x244>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d925      	bls.n	800258c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68d9      	ldr	r1, [r3, #12]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	3b1e      	subs	r3, #30
 8002556:	2207      	movs	r2, #7
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43da      	mvns	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	400a      	ands	r2, r1
 8002564:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68d9      	ldr	r1, [r3, #12]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	4603      	mov	r3, r0
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4403      	add	r3, r0
 800257e:	3b1e      	subs	r3, #30
 8002580:	409a      	lsls	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	e022      	b.n	80025d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6919      	ldr	r1, [r3, #16]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	2207      	movs	r2, #7
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6919      	ldr	r1, [r3, #16]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4403      	add	r3, r0
 80025c8:	409a      	lsls	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d824      	bhi.n	8002624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	3b05      	subs	r3, #5
 80025ec:	221f      	movs	r2, #31
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b05      	subs	r3, #5
 8002616:	fa00 f203 	lsl.w	r2, r0, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	635a      	str	r2, [r3, #52]	@ 0x34
 8002622:	e04c      	b.n	80026be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d824      	bhi.n	8002676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	3b23      	subs	r3, #35	@ 0x23
 800263e:	221f      	movs	r2, #31
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43da      	mvns	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	400a      	ands	r2, r1
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b23      	subs	r3, #35	@ 0x23
 8002668:	fa00 f203 	lsl.w	r2, r0, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
 8002674:	e023      	b.n	80026be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b41      	subs	r3, #65	@ 0x41
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b41      	subs	r3, #65	@ 0x41
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026be:	4b29      	ldr	r3, [pc, #164]	@ (8002764 <HAL_ADC_ConfigChannel+0x250>)
 80026c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a28      	ldr	r2, [pc, #160]	@ (8002768 <HAL_ADC_ConfigChannel+0x254>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10f      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1d8>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b12      	cmp	r3, #18
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002768 <HAL_ADC_ConfigChannel+0x254>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d12b      	bne.n	800274e <HAL_ADC_ConfigChannel+0x23a>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_ADC_ConfigChannel+0x258>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x1f4>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b11      	cmp	r3, #17
 8002706:	d122      	bne.n	800274e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_ADC_ConfigChannel+0x258>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_ADC_ConfigChannel+0x25c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <HAL_ADC_ConfigChannel+0x260>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	0c9a      	lsrs	r2, r3, #18
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002740:	e002      	b.n	8002748 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40012300 	.word	0x40012300
 8002768:	40012000 	.word	0x40012000
 800276c:	10000012 	.word	0x10000012
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83

08002778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002780:	4b79      	ldr	r3, [pc, #484]	@ (8002968 <ADC_Init+0x1f0>)
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	021a      	lsls	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	4a58      	ldr	r2, [pc, #352]	@ (800296c <ADC_Init+0x1f4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800281e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	e00f      	b.n	8002876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002874:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0202 	bic.w	r2, r2, #2
 8002884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6899      	ldr	r1, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
 8002890:	005a      	lsls	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01b      	beq.n	80028dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	3b01      	subs	r3, #1
 80028d0:	035a      	lsls	r2, r3, #13
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	e007      	b.n	80028ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	3b01      	subs	r3, #1
 8002908:	051a      	lsls	r2, r3, #20
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800292e:	025a      	lsls	r2, r3, #9
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	029a      	lsls	r2, r3, #10
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40012300 	.word	0x40012300
 800296c:	0f000001 	.word	0x0f000001

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	@ (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	@ (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	@ (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	@ 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff29 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff3e 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff31 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa2 	bl	8002acc <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff fac4 	bl	800212c <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d008      	beq.n	8002bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e052      	b.n	8002c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0216 	bic.w	r2, r2, #22
 8002bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <HAL_DMA_Abort+0x62>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	e013      	b.n	8002c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c16:	f7ff fa89 	bl	800212c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d90c      	bls.n	8002c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e015      	b.n	8002c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e4      	bne.n	8002c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2280      	movs	r2, #128	@ 0x80
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e00c      	b.n	8002caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2205      	movs	r2, #5
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e159      	b.n	8002f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8148 	bne.w	8002f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d005      	beq.n	8002d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d130      	bne.n	8002d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a2 	beq.w	8002f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4a56      	ldr	r2, [pc, #344]	@ (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4e:	4b54      	ldr	r3, [pc, #336]	@ (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5a:	4a52      	ldr	r2, [pc, #328]	@ (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a49      	ldr	r2, [pc, #292]	@ (8002fa8 <HAL_GPIO_Init+0x2f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x202>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a48      	ldr	r2, [pc, #288]	@ (8002fac <HAL_GPIO_Init+0x2f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x1fe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a47      	ldr	r2, [pc, #284]	@ (8002fb0 <HAL_GPIO_Init+0x2f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x1fa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a46      	ldr	r2, [pc, #280]	@ (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x1f6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a45      	ldr	r2, [pc, #276]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x1f2>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	@ (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a24      	ldr	r2, [pc, #144]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2e:	4b23      	ldr	r3, [pc, #140]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f52:	4a1a      	ldr	r2, [pc, #104]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f aea2 	bls.w	8002cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	@ 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	041a      	lsls	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43d9      	mvns	r1, r3
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	400b      	ands	r3, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800303e:	4a05      	ldr	r2, [pc, #20]	@ (8003054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fd5c 	bl	8001b04 <HAL_GPIO_EXTI_Callback>
  }
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e12b      	b.n	80032c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fdf0 	bl	8001c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	@ 0x24
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030bc:	f001 f8da 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80030c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a81      	ldr	r2, [pc, #516]	@ (80032cc <HAL_I2C_Init+0x274>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d807      	bhi.n	80030dc <HAL_I2C_Init+0x84>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a80      	ldr	r2, [pc, #512]	@ (80032d0 <HAL_I2C_Init+0x278>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	bf94      	ite	ls
 80030d4:	2301      	movls	r3, #1
 80030d6:	2300      	movhi	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e006      	b.n	80030ea <HAL_I2C_Init+0x92>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a7d      	ldr	r2, [pc, #500]	@ (80032d4 <HAL_I2C_Init+0x27c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0e7      	b.n	80032c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a78      	ldr	r2, [pc, #480]	@ (80032d8 <HAL_I2C_Init+0x280>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0c9b      	lsrs	r3, r3, #18
 80030fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a6a      	ldr	r2, [pc, #424]	@ (80032cc <HAL_I2C_Init+0x274>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d802      	bhi.n	800312c <HAL_I2C_Init+0xd4>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3301      	adds	r3, #1
 800312a:	e009      	b.n	8003140 <HAL_I2C_Init+0xe8>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	4a69      	ldr	r2, [pc, #420]	@ (80032dc <HAL_I2C_Init+0x284>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	3301      	adds	r3, #1
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003152:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	495c      	ldr	r1, [pc, #368]	@ (80032cc <HAL_I2C_Init+0x274>)
 800315c:	428b      	cmp	r3, r1
 800315e:	d819      	bhi.n	8003194 <HAL_I2C_Init+0x13c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e59      	subs	r1, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fbb1 f3f3 	udiv	r3, r1, r3
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003174:	400b      	ands	r3, r1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_I2C_Init+0x138>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e59      	subs	r1, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fbb1 f3f3 	udiv	r3, r1, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318e:	e051      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003190:	2304      	movs	r3, #4
 8003192:	e04f      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d111      	bne.n	80031c0 <HAL_I2C_Init+0x168>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e58      	subs	r0, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e012      	b.n	80031e6 <HAL_I2C_Init+0x18e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Init+0x196>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e022      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10e      	bne.n	8003214 <HAL_I2C_Init+0x1bc>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e58      	subs	r0, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	fbb0 f3f3 	udiv	r3, r0, r3
 8003208:	3301      	adds	r3, #1
 800320a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003212:	e00f      	b.n	8003234 <HAL_I2C_Init+0x1dc>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	6809      	ldr	r1, [r1, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003262:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6911      	ldr	r1, [r2, #16]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68d2      	ldr	r2, [r2, #12]
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	430b      	orrs	r3, r1
 8003276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	000186a0 	.word	0x000186a0
 80032d0:	001e847f 	.word	0x001e847f
 80032d4:	003d08ff 	.word	0x003d08ff
 80032d8:	431bde83 	.word	0x431bde83
 80032dc:	10624dd3 	.word	0x10624dd3

080032e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	460b      	mov	r3, r1
 80032ee:	817b      	strh	r3, [r7, #10]
 80032f0:	4613      	mov	r3, r2
 80032f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7fe ff1a 	bl	800212c <HAL_GetTick>
 80032f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b20      	cmp	r3, #32
 8003304:	f040 80e0 	bne.w	80034c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2319      	movs	r3, #25
 800330e:	2201      	movs	r2, #1
 8003310:	4970      	ldr	r1, [pc, #448]	@ (80034d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f964 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800331e:	2302      	movs	r3, #2
 8003320:	e0d3      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2C_Master_Transmit+0x50>
 800332c:	2302      	movs	r3, #2
 800332e:	e0cc      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d007      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	@ 0x21
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2210      	movs	r2, #16
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f89c 	bl	80034dc <I2C_MasterRequestWrite>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e08d      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033c4:	e066      	b.n	8003494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa22 	bl	8003814 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06b      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b04      	cmp	r3, #4
 800342e:	d11b      	bne.n	8003468 <HAL_I2C_Master_Transmit+0x188>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d017      	beq.n	8003468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	6a39      	ldr	r1, [r7, #32]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fa19 	bl	80038a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	2b04      	cmp	r3, #4
 800347e:	d107      	bne.n	8003490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01a      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d194      	bne.n	80033c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	00100002 	.word	0x00100002
 80034d8:	ffff0000 	.word	0xffff0000

080034dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d006      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00b      	b.n	8003530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	2b12      	cmp	r3, #18
 800351e:	d107      	bne.n	8003530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f84f 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003556:	d103      	bne.n	8003560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e035      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800356c:	d108      	bne.n	8003580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	e01b      	b.n	80035b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	11db      	asrs	r3, r3, #7
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f063 030f 	orn	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <I2C_MasterRequestWrite+0xfc>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f898 	bl	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e010      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <I2C_MasterRequestWrite+0x100>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f888 	bl	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010008 	.word	0x00010008
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	e048      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f8:	d044      	beq.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fd97 	bl	800212c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d139      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10d      	bne.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x56>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	e00c      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d116      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e023      	b.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10d      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	e00c      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d093      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e2:	e071      	b.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d123      	bne.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003702:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800370c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e067      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003742:	d041      	beq.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fcf2 	bl	800212c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d136      	bne.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10c      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e00b      	b.n	8003796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e021      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10c      	bne.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	43da      	mvns	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e00b      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f af6d 	bne.w	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	e034      	b.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f886 	bl	8003934 <I2C_IsAcknowledgeFailed>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e034      	b.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003838:	d028      	beq.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe fc77 	bl	800212c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d016      	beq.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b80      	cmp	r3, #128	@ 0x80
 8003898:	d1c3      	bne.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b0:	e034      	b.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f83e 	bl	8003934 <I2C_IsAcknowledgeFailed>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e034      	b.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c8:	d028      	beq.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fc2f 	bl	800212c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11d      	bne.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d016      	beq.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e007      	b.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d1c3      	bne.n	80038b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d11b      	bne.n	8003984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e267      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d075      	beq.n	8003a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b85      	ldr	r3, [pc, #532]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d112      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b82      	ldr	r3, [pc, #520]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05b      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d157      	bne.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e242      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x74>
 80039fa:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b70      	ldr	r3, [pc, #448]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6f      	ldr	r2, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6c      	ldr	r2, [pc, #432]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	4b69      	ldr	r3, [pc, #420]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a68      	ldr	r2, [pc, #416]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a65      	ldr	r2, [pc, #404]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fb6e 	bl	800212c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fb6a 	bl	800212c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e207      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fb5a 	bl	800212c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fb56 	bl	800212c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1c7      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fb0f 	bl	800212c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fb0b 	bl	800212c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1a8      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe faee 	bl	800212c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fe faea 	bl	800212c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e187      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe face 	bl	800212c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe faca 	bl	800212c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e167      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x200>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fe fab7 	bl	800212c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fab3 	bl	800212c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e150      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b88      	ldr	r3, [pc, #544]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b81      	ldr	r3, [pc, #516]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a7c      	ldr	r2, [pc, #496]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b77      	ldr	r3, [pc, #476]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b74      	ldr	r3, [pc, #464]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fa73 	bl	800212c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fe fa6f 	bl	800212c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e10c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2ea>
 8003c70:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a63      	ldr	r2, [pc, #396]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x30c>
 8003c86:	4b5f      	ldr	r3, [pc, #380]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c92:	4b5c      	ldr	r3, [pc, #368]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003ca0:	4b58      	ldr	r3, [pc, #352]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cac:	4b55      	ldr	r3, [pc, #340]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a54      	ldr	r2, [pc, #336]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fa34 	bl	800212c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fa30 	bl	800212c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0cb      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b49      	ldr	r3, [pc, #292]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fe fa1e 	bl	800212c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fa1a 	bl	800212c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0b5      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	4a38      	ldr	r2, [pc, #224]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a1 	beq.w	8003e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d05c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d141      	bne.n	8003dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f9ee 	bl	800212c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe f9ea 	bl	800212c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e087      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	491b      	ldr	r1, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fe f9c3 	bl	800212c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe f9bf 	bl	800212c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e05c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x416>
 8003dc8:	e054      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f9ac 	bl	800212c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe f9a8 	bl	800212c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e045      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e038      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x4ec>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cc      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b68      	ldr	r3, [pc, #416]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b63      	ldr	r3, [pc, #396]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b50      	ldr	r3, [pc, #320]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b3f      	ldr	r3, [pc, #252]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e067      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4934      	ldr	r1, [pc, #208]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fe f8da 	bl	800212c <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fe f8d6 	bl	800212c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e04f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b25      	ldr	r3, [pc, #148]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d20c      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b22      	ldr	r3, [pc, #136]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800400a:	f000 f821 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	@ (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe f83a 	bl	80020a4 <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	0800d060 	.word	0x0800d060
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b094      	sub	sp, #80	@ 0x50
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b79      	ldr	r3, [pc, #484]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00d      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	2b08      	cmp	r3, #8
 8004076:	f200 80e1 	bhi.w	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 800407e:	2b04      	cmp	r3, #4
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x3a>
 8004082:	e0db      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004088:	e0db      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800408a:	4b73      	ldr	r3, [pc, #460]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x208>)
 800408c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800408e:	e0d8      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b6f      	ldr	r3, [pc, #444]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004098:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409a:	4b6d      	ldr	r3, [pc, #436]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d063      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d4:	0150      	lsls	r0, r2, #5
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4621      	mov	r1, r4
 80040dc:	1a51      	subs	r1, r2, r1
 80040de:	6139      	str	r1, [r7, #16]
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb63 0301 	sbc.w	r3, r3, r1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f4:	4659      	mov	r1, fp
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fe:	4651      	mov	r1, sl
 8004100:	018a      	lsls	r2, r1, #6
 8004102:	4651      	mov	r1, sl
 8004104:	ebb2 0801 	subs.w	r8, r2, r1
 8004108:	4659      	mov	r1, fp
 800410a:	eb63 0901 	sbc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	462b      	mov	r3, r5
 8004130:	eb49 0303 	adc.w	r3, r9, r3
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004142:	4629      	mov	r1, r5
 8004144:	024b      	lsls	r3, r1, #9
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414c:	4621      	mov	r1, r4
 800414e:	024a      	lsls	r2, r1, #9
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800415a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800415c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004160:	f7fc fd2a 	bl	8000bb8 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800416c:	e058      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	4618      	mov	r0, r3
 8004178:	4611      	mov	r1, r2
 800417a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
 8004184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	f04f 0000 	mov.w	r0, #0
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	0159      	lsls	r1, r3, #5
 8004196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419a:	0150      	lsls	r0, r2, #5
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4641      	mov	r1, r8
 80041a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041c0:	ebb2 040a 	subs.w	r4, r2, sl
 80041c4:	eb63 050b 	sbc.w	r5, r3, fp
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	464b      	mov	r3, r9
 80041e4:	eb45 0303 	adc.w	r3, r5, r3
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f6:	4629      	mov	r1, r5
 80041f8:	028b      	lsls	r3, r1, #10
 80041fa:	4621      	mov	r1, r4
 80041fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004200:	4621      	mov	r1, r4
 8004202:	028a      	lsls	r2, r1, #10
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420a:	2200      	movs	r2, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	61fa      	str	r2, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	f7fc fcd0 	bl	8000bb8 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004244:	4618      	mov	r0, r3
 8004246:	3750      	adds	r7, #80	@ 0x50
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200

0800425c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_RCC_GetHCLKFreq+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004278:	f7ff fff0 	bl	800425c <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	@ (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	0800d070 	.word	0x0800d070

0800429c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a0:	f7ff ffdc 	bl	800425c <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	0b5b      	lsrs	r3, r3, #13
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4903      	ldr	r1, [pc, #12]	@ (80042c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	0800d070 	.word	0x0800d070

080042c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07b      	b.n	80043ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042e6:	d009      	beq.n	80042fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]
 80042ee:	e005      	b.n	80042fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd fcec 	bl	8001cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004380:	ea42 0103 	orr.w	r1, r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0104 	and.w	r1, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	f003 0210 	and.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b088      	sub	sp, #32
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043e6:	f7fd fea1 	bl	800212c <HAL_GetTick>
 80043ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	e12a      	b.n	8004656 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_Transmit+0x36>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e122      	b.n	8004656 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_SPI_Transmit+0x48>
 800441a:	2302      	movs	r3, #2
 800441c:	e11b      	b.n	8004656 <HAL_SPI_Transmit+0x280>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2203      	movs	r2, #3
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446c:	d10f      	bne.n	800448e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800447c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800448c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d007      	beq.n	80044ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b4:	d152      	bne.n	800455c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_Transmit+0xee>
 80044be:	8b7b      	ldrh	r3, [r7, #26]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d145      	bne.n	8004550 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	881a      	ldrh	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e8:	e032      	b.n	8004550 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d112      	bne.n	800451e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800451c:	e018      	b.n	8004550 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451e:	f7fd fe05 	bl	800212c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d803      	bhi.n	8004536 <HAL_SPI_Transmit+0x160>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x166>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e082      	b.n	8004656 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1c7      	bne.n	80044ea <HAL_SPI_Transmit+0x114>
 800455a:	e053      	b.n	8004604 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_Transmit+0x194>
 8004564:	8b7b      	ldrh	r3, [r7, #26]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d147      	bne.n	80045fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004590:	e033      	b.n	80045fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d113      	bne.n	80045c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045c6:	e018      	b.n	80045fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c8:	f7fd fdb0 	bl	800212c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d803      	bhi.n	80045e0 <HAL_SPI_Transmit+0x20a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045de:	d102      	bne.n	80045e6 <HAL_SPI_Transmit+0x210>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e02d      	b.n	8004656 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1c6      	bne.n	8004592 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fa59 	bl	8004ac0 <SPI_EndRxTxTransaction>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004654:	2300      	movs	r3, #0
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08a      	sub	sp, #40	@ 0x28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800466c:	2301      	movs	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004670:	f7fd fd5c 	bl	800212c <HAL_GetTick>
 8004674:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800467c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004688:	7ffb      	ldrb	r3, [r7, #31]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d00c      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0x4a>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004694:	d106      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x46>
 800469e:	7ffb      	ldrb	r3, [r7, #31]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d001      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
 80046a6:	e17f      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_SPI_TransmitReceive+0x5c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_SPI_TransmitReceive+0x5c>
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e174      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x6e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e16d      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d003      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2205      	movs	r2, #5
 80046e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	887a      	ldrh	r2, [r7, #2]
 80046fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	887a      	ldrh	r2, [r7, #2]
 800470a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d007      	beq.n	800473c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004744:	d17e      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_TransmitReceive+0xf6>
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d16c      	bne.n	800482e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	1c9a      	adds	r2, r3, #2
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004778:	e059      	b.n	800482e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11b      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x162>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x162>
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d119      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x1a4>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d014      	beq.n	8004802 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	b292      	uxth	r2, r2
 80047e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047fe:	2301      	movs	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004802:	f7fd fc93 	bl	800212c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800480e:	429a      	cmp	r2, r3
 8004810:	d80d      	bhi.n	800482e <HAL_SPI_TransmitReceive+0x1d0>
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004818:	d009      	beq.n	800482e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0bc      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1a0      	bne.n	800477a <HAL_SPI_TransmitReceive+0x11c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d19b      	bne.n	800477a <HAL_SPI_TransmitReceive+0x11c>
 8004842:	e082      	b.n	800494a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x1f4>
 800484c:	8afb      	ldrh	r3, [r7, #22]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d171      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004878:	e05d      	b.n	8004936 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d11c      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x264>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x264>
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b01      	cmp	r3, #1
 8004896:	d114      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d119      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x2a6>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d014      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004900:	2301      	movs	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004904:	f7fd fc12 	bl	800212c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004910:	429a      	cmp	r2, r3
 8004912:	d803      	bhi.n	800491c <HAL_SPI_TransmitReceive+0x2be>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800491a:	d102      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x2c4>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e038      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d19c      	bne.n	800487a <HAL_SPI_TransmitReceive+0x21c>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d197      	bne.n	800487a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800494a:	6a3a      	ldr	r2, [r7, #32]
 800494c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f8b6 	bl	8004ac0 <SPI_EndRxTxTransaction>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01d      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3728      	adds	r7, #40	@ 0x28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049c0:	f7fd fbb4 	bl	800212c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049d0:	f7fd fbac 	bl	800212c <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049d6:	4b39      	ldr	r3, [pc, #228]	@ (8004abc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	015b      	lsls	r3, r3, #5
 80049dc:	0d1b      	lsrs	r3, r3, #20
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e6:	e054      	b.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ee:	d050      	beq.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049f0:	f7fd fb9c 	bl	800212c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d902      	bls.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d13d      	bne.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1e:	d111      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a28:	d004      	beq.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a32:	d107      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4c:	d10f      	bne.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e017      	b.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d19b      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000000 	.word	0x20000000

08004ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff ff6a 	bl	80049b0 <SPI_WaitFlagStateUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e032      	b.n	8004b58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004af2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <SPI_EndRxTxTransaction+0xa0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b64 <SPI_EndRxTxTransaction+0xa4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	0d5b      	lsrs	r3, r3, #21
 8004afe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b10:	d112      	bne.n	8004b38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2180      	movs	r1, #128	@ 0x80
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ff47 	bl	80049b0 <SPI_WaitFlagStateUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d016      	beq.n	8004b56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e00f      	b.n	8004b58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4e:	2b80      	cmp	r3, #128	@ 0x80
 8004b50:	d0f2      	beq.n	8004b38 <SPI_EndRxTxTransaction+0x78>
 8004b52:	e000      	b.n	8004b56 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b54:	bf00      	nop
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000000 	.word	0x20000000
 8004b64:	165e9f81 	.word	0x165e9f81

08004b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e041      	b.n	8004bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd f8f8 	bl	8001d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 f9a8 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d001      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e044      	b.n	8004caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4a:	d013      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a19      	ldr	r2, [pc, #100]	@ (8004cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d010      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0202 	mvn.w	r2, #2
 8004d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8d2 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8c4 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8d5 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8ac 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f89e 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8af 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0208 	mvn.w	r2, #8
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f886 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f878 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f889 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0210 	mvn.w	r2, #16
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2208      	movs	r2, #8
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f860 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f852 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f863 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0201 	mvn.w	r2, #1
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fe7a 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8e6 	bl	8005028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f834 	bl	8004ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0220 	mvn.w	r2, #32
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8b8 	bl	8005014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8004ff8 <TIM_Base_SetConfig+0xfc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a37      	ldr	r2, [pc, #220]	@ (8004ffc <TIM_Base_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a36      	ldr	r2, [pc, #216]	@ (8005000 <TIM_Base_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a35      	ldr	r2, [pc, #212]	@ (8005004 <TIM_Base_SetConfig+0x108>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff8 <TIM_Base_SetConfig+0xfc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01b      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d017      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a28      	ldr	r2, [pc, #160]	@ (8004ffc <TIM_Base_SetConfig+0x100>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a27      	ldr	r2, [pc, #156]	@ (8005000 <TIM_Base_SetConfig+0x104>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a26      	ldr	r2, [pc, #152]	@ (8005004 <TIM_Base_SetConfig+0x108>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a25      	ldr	r2, [pc, #148]	@ (8005008 <TIM_Base_SetConfig+0x10c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a24      	ldr	r2, [pc, #144]	@ (800500c <TIM_Base_SetConfig+0x110>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a23      	ldr	r2, [pc, #140]	@ (8005010 <TIM_Base_SetConfig+0x114>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d108      	bne.n	8004f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <TIM_Base_SetConfig+0xfc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f023 0201 	bic.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]
  }
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e042      	b.n	80050d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc feb6 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800507e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fcbb 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d121      	bne.n	800513a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_Transmit_IT+0x26>
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01a      	b.n	800513c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2221      	movs	r2, #33	@ 0x21
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005134:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e000      	b.n	800513c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800513a:	2302      	movs	r3, #2
  }
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b0ba      	sub	sp, #232	@ 0xe8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800516e:	2300      	movs	r3, #0
 8005170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_UART_IRQHandler+0x66>
 800519a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb69 	bl	800587e <UART_Receive_IT>
      return;
 80051ac:	e25b      	b.n	8005666 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80de 	beq.w	8005374 <HAL_UART_IRQHandler+0x22c>
 80051b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80d1 	beq.w	8005374 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_UART_IRQHandler+0xae>
 80051de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_UART_IRQHandler+0xd2>
 8005202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_UART_IRQHandler+0xf6>
 8005226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <HAL_UART_IRQHandler+0x126>
 800524a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d105      	bne.n	8005262 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	f043 0208 	orr.w	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 81f2 	beq.w	800565c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_IRQHandler+0x14e>
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 faf4 	bl	800587e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <HAL_UART_IRQHandler+0x17a>
 80052ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04f      	beq.n	8005362 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9fc 	bl	80056c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d141      	bne.n	800535a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3314      	adds	r3, #20
 80052dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005302:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800530e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800531a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1d9      	bne.n	80052d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d013      	beq.n	8005352 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532e:	4a7e      	ldr	r2, [pc, #504]	@ (8005528 <HAL_UART_IRQHandler+0x3e0>)
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005336:	4618      	mov	r0, r3
 8005338:	f7fd fc9b 	bl	8002c72 <HAL_DMA_Abort_IT>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	e00e      	b.n	8005370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f99e 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005358:	e00a      	b.n	8005370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f99a 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e006      	b.n	8005370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f996 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800536e:	e175      	b.n	800565c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	bf00      	nop
    return;
 8005372:	e173      	b.n	800565c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	2b01      	cmp	r3, #1
 800537a:	f040 814f 	bne.w	800561c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8148 	beq.w	800561c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8141 	beq.w	800561c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ba:	2b40      	cmp	r3, #64	@ 0x40
 80053bc:	f040 80b6 	bne.w	800552c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8145 	beq.w	8005660 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053de:	429a      	cmp	r2, r3
 80053e0:	f080 813e 	bcs.w	8005660 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f6:	f000 8088 	beq.w	800550a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800542a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1d9      	bne.n	80053fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800546a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800546e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005472:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800547c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e1      	bne.n	8005446 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e3      	bne.n	8005482 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e3      	bne.n	80054c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd fb44 	bl	8002b92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f8c1 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005526:	e09b      	b.n	8005660 <HAL_UART_IRQHandler+0x518>
 8005528:	08005787 	.word	0x08005787
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005534:	b29b      	uxth	r3, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 808e 	beq.w	8005664 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8089 	beq.w	8005664 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005576:	647a      	str	r2, [r7, #68]	@ 0x44
 8005578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800557c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e3      	bne.n	8005552 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	623b      	str	r3, [r7, #32]
   return(result);
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3314      	adds	r3, #20
 80055aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e3      	bne.n	800558a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0310 	bic.w	r3, r3, #16
 80055e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055f4:	61fa      	str	r2, [r7, #28]
 80055f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	69b9      	ldr	r1, [r7, #24]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	617b      	str	r3, [r7, #20]
   return(result);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e3      	bne.n	80055d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800560e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f847 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561a:	e023      	b.n	8005664 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005624:	2b00      	cmp	r3, #0
 8005626:	d009      	beq.n	800563c <HAL_UART_IRQHandler+0x4f4>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8ba 	bl	80057ae <UART_Transmit_IT>
    return;
 800563a:	e014      	b.n	8005666 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <HAL_UART_IRQHandler+0x51e>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f8fa 	bl	800584e <UART_EndTransmit_IT>
    return;
 800565a:	e004      	b.n	8005666 <HAL_UART_IRQHandler+0x51e>
    return;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <HAL_UART_IRQHandler+0x51e>
      return;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <HAL_UART_IRQHandler+0x51e>
      return;
 8005664:	bf00      	nop
  }
}
 8005666:	37e8      	adds	r7, #232	@ 0xe8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b095      	sub	sp, #84	@ 0x54
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800571c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d119      	bne.n	800576c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60bb      	str	r3, [r7, #8]
   return(result);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005758:	61ba      	str	r2, [r7, #24]
 800575a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	613b      	str	r3, [r7, #16]
   return(result);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800577a:	bf00      	nop
 800577c:	3754      	adds	r7, #84	@ 0x54
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ff77 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b21      	cmp	r3, #33	@ 0x21
 80057c0:	d13e      	bne.n	8005840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	d114      	bne.n	80057f6 <UART_Transmit_IT+0x48>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]
 80057f4:	e008      	b.n	8005808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6211      	str	r1, [r2, #32]
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10f      	bne.n	800583c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800582a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800583a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fefc 	bl	800566c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b08c      	sub	sp, #48	@ 0x30
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b22      	cmp	r3, #34	@ 0x22
 8005890:	f040 80ae 	bne.w	80059f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800589c:	d117      	bne.n	80058ce <UART_Receive_IT+0x50>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d113      	bne.n	80058ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	1c9a      	adds	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80058cc:	e026      	b.n	800591c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e0:	d007      	beq.n	80058f2 <UART_Receive_IT+0x74>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <UART_Receive_IT+0x82>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e008      	b.n	8005912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4619      	mov	r1, r3
 800592a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800592c:	2b00      	cmp	r3, #0
 800592e:	d15d      	bne.n	80059ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0220 	bic.w	r2, r2, #32
 800593e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800594e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	2b01      	cmp	r3, #1
 8005974:	d135      	bne.n	80059e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599c:	623a      	str	r2, [r7, #32]
 800599e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d10a      	bne.n	80059d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fe64 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
 80059e0:	e002      	b.n	80059e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe4c 	bl	8005680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e002      	b.n	80059f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a00:	b0c0      	sub	sp, #256	@ 0x100
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	ea40 0301 	orr.w	r3, r0, r1
 8005a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a54:	f021 010c 	bic.w	r1, r1, #12
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a76:	6999      	ldr	r1, [r3, #24]
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	ea40 0301 	orr.w	r3, r0, r1
 8005a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <UART_SetConfig+0xa0>
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b8d      	ldr	r3, [pc, #564]	@ (8005ccc <UART_SetConfig+0x2d0>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d104      	bne.n	8005aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fe fbfe 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 8005aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005aa4:	e003      	b.n	8005aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7fe fbe5 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	f040 810c 	bne.w	8005cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ade:	4621      	mov	r1, r4
 8005ae0:	eb12 0801 	adds.w	r8, r2, r1
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb43 0901 	adc.w	r9, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afe:	4690      	mov	r8, r2
 8005b00:	4699      	mov	r9, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb18 0303 	adds.w	r3, r8, r3
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	eb49 0303 	adc.w	r3, r9, r3
 8005b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	18db      	adds	r3, r3, r3
 8005b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b30:	4613      	mov	r3, r2
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b40:	f7fb f83a 	bl	8000bb8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b61      	ldr	r3, [pc, #388]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b74:	4641      	mov	r1, r8
 8005b76:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b94:	4692      	mov	sl, r2
 8005b96:	469b      	mov	fp, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	18db      	adds	r3, r3, r3
 8005bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bd6:	f7fa ffef 	bl	8000bb8 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005be2:	fba3 2301 	umull	r2, r3, r3, r1
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2264      	movs	r2, #100	@ 0x64
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	1acb      	subs	r3, r1, r3
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c20:	415b      	adcs	r3, r3
 8005c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c28:	4641      	mov	r1, r8
 8005c2a:	1851      	adds	r1, r2, r1
 8005c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c2e:	4649      	mov	r1, r9
 8005c30:	414b      	adcs	r3, r1
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c40:	4659      	mov	r1, fp
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	4651      	mov	r1, sl
 8005c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	00ca      	lsls	r2, r1, #3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	4642      	mov	r2, r8
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	460a      	mov	r2, r1
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	18db      	adds	r3, r3, r3
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c82:	4613      	mov	r3, r2
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c92:	f7fa ff91 	bl	8000bb8 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	2164      	movs	r1, #100	@ 0x64
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	3332      	adds	r3, #50	@ 0x32
 8005cae:	4a08      	ldr	r2, [pc, #32]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f003 0207 	and.w	r2, r3, #7
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4422      	add	r2, r4
 8005cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc4:	e106      	b.n	8005ed4 <UART_SetConfig+0x4d8>
 8005cc6:	bf00      	nop
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	6239      	str	r1, [r7, #32]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1854      	adds	r4, r2, r1
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	eb43 0501 	adc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	eb45 0303 	adc.w	r3, r5, r3
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d42:	4629      	mov	r1, r5
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	4621      	mov	r1, r4
 8005d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	008a      	lsls	r2, r1, #2
 8005d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d54:	f7fa ff30 	bl	8000bb8 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b60      	ldr	r3, [pc, #384]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	61b9      	str	r1, [r7, #24]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6139      	str	r1, [r7, #16]
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005de0:	4649      	mov	r1, r9
 8005de2:	008b      	lsls	r3, r1, #2
 8005de4:	4641      	mov	r1, r8
 8005de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dea:	4641      	mov	r1, r8
 8005dec:	008a      	lsls	r2, r1, #2
 8005dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005df2:	f7fa fee1 	bl	8000bb8 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b38      	ldr	r3, [pc, #224]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	@ 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	@ 0x32
 8005e10:	4a33      	ldr	r2, [pc, #204]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e1c:	441c      	add	r4, r3
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	415b      	adcs	r3, r3
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	1851      	adds	r1, r2, r1
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	4649      	mov	r1, r9
 8005e44:	414b      	adcs	r3, r1
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e54:	4659      	mov	r1, fp
 8005e56:	00cb      	lsls	r3, r1, #3
 8005e58:	4651      	mov	r1, sl
 8005e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5e:	4651      	mov	r1, sl
 8005e60:	00ca      	lsls	r2, r1, #3
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	4642      	mov	r2, r8
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e6e:	464b      	mov	r3, r9
 8005e70:	460a      	mov	r2, r1
 8005e72:	eb42 0303 	adc.w	r3, r2, r3
 8005e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e90:	4649      	mov	r1, r9
 8005e92:	008b      	lsls	r3, r1, #2
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	008a      	lsls	r2, r1, #2
 8005e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ea2:	f7fa fe89 	bl	8000bb8 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	@ 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	@ 0x32
 8005ebe:	4a08      	ldr	r2, [pc, #32]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4422      	add	r2, r4
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eda:	46bd      	mov	sp, r7
 8005edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ee8:	4904      	ldr	r1, [pc, #16]	@ (8005efc <MX_FATFS_Init+0x18>)
 8005eea:	4805      	ldr	r0, [pc, #20]	@ (8005f00 <MX_FATFS_Init+0x1c>)
 8005eec:	f003 f954 	bl	8009198 <FATFS_LinkDriver>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b03      	ldr	r3, [pc, #12]	@ (8005f04 <MX_FATFS_Init+0x20>)
 8005ef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ef8:	bf00      	nop
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	200003b8 	.word	0x200003b8
 8005f00:	2000000c 	.word	0x2000000c
 8005f04:	200003b4 	.word	0x200003b4

08005f08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f9df 	bl	80062e8 <USER_SPI_initialize>
 8005f2a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	printf("disk_status called, pdrv=%d, Stat=%d\r\n", pdrv, Stat);
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	4a07      	ldr	r2, [pc, #28]	@ (8005f60 <USER_status+0x2c>)
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	4806      	ldr	r0, [pc, #24]	@ (8005f64 <USER_status+0x30>)
 8005f4a:	f004 fcaf 	bl	800a8ac <iprintf>
	return USER_SPI_status(pdrv);
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fadf 	bl	8006514 <USER_SPI_status>
 8005f56:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000020 	.word	0x20000020
 8005f64:	0800cf6c 	.word	0x0800cf6c

08005f68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8005f78:	7bf8      	ldrb	r0, [r7, #15]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	f000 fade 	bl	8006540 <USER_SPI_read>
 8005f84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005f9e:	7bf8      	ldrb	r0, [r7, #15]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	f000 fb31 	bl	800660c <USER_SPI_write>
 8005faa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	603a      	str	r2, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005fc4:	79b9      	ldrb	r1, [r7, #6]
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fb9a 	bl	8006704 <USER_SPI_ioctl>
 8005fd0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005fe4:	f7fc f8a2 	bl	800212c <HAL_GetTick>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4a04      	ldr	r2, [pc, #16]	@ (8005ffc <SPI_Timer_On+0x20>)
 8005fec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005fee:	4a04      	ldr	r2, [pc, #16]	@ (8006000 <SPI_Timer_On+0x24>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200003c0 	.word	0x200003c0
 8006000:	200003c4 	.word	0x200003c4

08006004 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006008:	f7fc f890 	bl	800212c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <SPI_Timer_Status+0x24>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <SPI_Timer_Status+0x28>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	bf34      	ite	cc
 800601c:	2301      	movcc	r3, #1
 800601e:	2300      	movcs	r3, #0
 8006020:	b2db      	uxtb	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200003c0 	.word	0x200003c0
 800602c:	200003c4 	.word	0x200003c4

08006030 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af02      	add	r7, sp, #8
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800603a:	f107 020f 	add.w	r2, r7, #15
 800603e:	1df9      	adds	r1, r7, #7
 8006040:	2332      	movs	r3, #50	@ 0x32
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2301      	movs	r3, #1
 8006046:	4804      	ldr	r0, [pc, #16]	@ (8006058 <xchg_spi+0x28>)
 8006048:	f7fe fb09 	bl	800465e <HAL_SPI_TransmitReceive>
    return rxDat;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200002b0 	.word	0x200002b0

0800605c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e00a      	b.n	8006082 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	18d4      	adds	r4, r2, r3
 8006072:	20ff      	movs	r0, #255	@ 0xff
 8006074:	f7ff ffdc 	bl	8006030 <xchg_spi>
 8006078:	4603      	mov	r3, r0
 800607a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3f0      	bcc.n	800606c <rcvr_spi_multi+0x10>
	}
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}

08006094 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4803      	ldr	r0, [pc, #12]	@ (80060b8 <xmit_spi_multi+0x24>)
 80060aa:	f7fe f994 	bl	80043d6 <HAL_SPI_Transmit>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200002b0 	.word	0x200002b0

080060bc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80060c4:	f7fc f832 	bl	800212c <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80060ce:	20ff      	movs	r0, #255	@ 0xff
 80060d0:	f7ff ffae 	bl	8006030 <xchg_spi>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2bff      	cmp	r3, #255	@ 0xff
 80060dc:	d007      	beq.n	80060ee <wait_ready+0x32>
 80060de:	f7fc f825 	bl	800212c <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d8ef      	bhi.n	80060ce <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2bff      	cmp	r3, #255	@ 0xff
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006108:	2201      	movs	r2, #1
 800610a:	2120      	movs	r1, #32
 800610c:	4803      	ldr	r0, [pc, #12]	@ (800611c <despiselect+0x18>)
 800610e:	f7fc ff57 	bl	8002fc0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006112:	20ff      	movs	r0, #255	@ 0xff
 8006114:	f7ff ff8c 	bl	8006030 <xchg_spi>

}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40020400 	.word	0x40020400

08006120 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006124:	2200      	movs	r2, #0
 8006126:	2120      	movs	r1, #32
 8006128:	4809      	ldr	r0, [pc, #36]	@ (8006150 <spiselect+0x30>)
 800612a:	f7fc ff49 	bl	8002fc0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800612e:	20ff      	movs	r0, #255	@ 0xff
 8006130:	f7ff ff7e 	bl	8006030 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006134:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006138:	f7ff ffc0 	bl	80060bc <wait_ready>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <spiselect+0x26>
 8006142:	2301      	movs	r3, #1
 8006144:	e002      	b.n	800614c <spiselect+0x2c>

	despiselect();
 8006146:	f7ff ffdd 	bl	8006104 <despiselect>
	return 0;	/* Timeout */
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40020400 	.word	0x40020400

08006154 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800615e:	20c8      	movs	r0, #200	@ 0xc8
 8006160:	f7ff ff3c 	bl	8005fdc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006164:	20ff      	movs	r0, #255	@ 0xff
 8006166:	f7ff ff63 	bl	8006030 <xchg_spi>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2bff      	cmp	r3, #255	@ 0xff
 8006172:	d104      	bne.n	800617e <rcvr_datablock+0x2a>
 8006174:	f7ff ff46 	bl	8006004 <SPI_Timer_Status>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f2      	bne.n	8006164 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2bfe      	cmp	r3, #254	@ 0xfe
 8006182:	d001      	beq.n	8006188 <rcvr_datablock+0x34>
 8006184:	2300      	movs	r3, #0
 8006186:	e00a      	b.n	800619e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ff66 	bl	800605c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006190:	20ff      	movs	r0, #255	@ 0xff
 8006192:	f7ff ff4d 	bl	8006030 <xchg_spi>
 8006196:	20ff      	movs	r0, #255	@ 0xff
 8006198:	f7ff ff4a 	bl	8006030 <xchg_spi>

	return 1;						/* Function succeeded */
 800619c:	2301      	movs	r3, #1
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80061b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80061b6:	f7ff ff81 	bl	80060bc <wait_ready>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <xmit_datablock+0x1e>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e01e      	b.n	8006202 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff ff32 	bl	8006030 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2bfd      	cmp	r3, #253	@ 0xfd
 80061d0:	d016      	beq.n	8006200 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80061d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff5c 	bl	8006094 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80061dc:	20ff      	movs	r0, #255	@ 0xff
 80061de:	f7ff ff27 	bl	8006030 <xchg_spi>
 80061e2:	20ff      	movs	r0, #255	@ 0xff
 80061e4:	f7ff ff24 	bl	8006030 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80061e8:	20ff      	movs	r0, #255	@ 0xff
 80061ea:	f7ff ff21 	bl	8006030 <xchg_spi>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d001      	beq.n	8006200 <xmit_datablock+0x5a>
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <xmit_datablock+0x5c>
	}
	return 1;
 8006200:	2301      	movs	r3, #1
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	4603      	mov	r3, r0
 8006212:	6039      	str	r1, [r7, #0]
 8006214:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0e      	bge.n	800623c <send_cmd+0x32>
		cmd &= 0x7F;
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006224:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006226:	2100      	movs	r1, #0
 8006228:	2037      	movs	r0, #55	@ 0x37
 800622a:	f7ff ffee 	bl	800620a <send_cmd>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d901      	bls.n	800623c <send_cmd+0x32>
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	e051      	b.n	80062e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d008      	beq.n	8006254 <send_cmd+0x4a>
		despiselect();
 8006242:	f7ff ff5f 	bl	8006104 <despiselect>
		if (!spiselect()) return 0xFF;
 8006246:	f7ff ff6b 	bl	8006120 <spiselect>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <send_cmd+0x4a>
 8006250:	23ff      	movs	r3, #255	@ 0xff
 8006252:	e045      	b.n	80062e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fee7 	bl	8006030 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	0e1b      	lsrs	r3, r3, #24
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fee1 	bl	8006030 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fedb 	bl	8006030 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	b2db      	uxtb	r3, r3
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fed5 	bl	8006030 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fed0 	bl	8006030 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <send_cmd+0x94>
 800629a:	2395      	movs	r3, #149	@ 0x95
 800629c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d101      	bne.n	80062a8 <send_cmd+0x9e>
 80062a4:	2387      	movs	r3, #135	@ 0x87
 80062a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fec0 	bl	8006030 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d102      	bne.n	80062bc <send_cmd+0xb2>
 80062b6:	20ff      	movs	r0, #255	@ 0xff
 80062b8:	f7ff feba 	bl	8006030 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80062bc:	230a      	movs	r3, #10
 80062be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80062c0:	20ff      	movs	r0, #255	@ 0xff
 80062c2:	f7ff feb5 	bl	8006030 <xchg_spi>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80062ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da05      	bge.n	80062de <send_cmd+0xd4>
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80062de:	7bbb      	ldrb	r3, [r7, #14]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	printf("USER_SPI_initialize start, Stat = %d\r\n", Stat);
 80062f2:	4b81      	ldr	r3, [pc, #516]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4619      	mov	r1, r3
 80062fa:	4880      	ldr	r0, [pc, #512]	@ (80064fc <USER_SPI_initialize+0x214>)
 80062fc:	f004 fad6 	bl	800a8ac <iprintf>

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <USER_SPI_initialize+0x22>
 8006306:	2301      	movs	r3, #1
 8006308:	e0f1      	b.n	80064ee <USER_SPI_initialize+0x206>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800630a:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <USER_SPI_initialize+0x210>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <USER_SPI_initialize+0x38>
 8006318:	4b77      	ldr	r3, [pc, #476]	@ (80064f8 <USER_SPI_initialize+0x210>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	e0e6      	b.n	80064ee <USER_SPI_initialize+0x206>

	FCLK_SLOW();
 8006320:	4b77      	ldr	r3, [pc, #476]	@ (8006500 <USER_SPI_initialize+0x218>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800632a:	4b75      	ldr	r3, [pc, #468]	@ (8006500 <USER_SPI_initialize+0x218>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006332:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006334:	230a      	movs	r3, #10
 8006336:	75fb      	strb	r3, [r7, #23]
 8006338:	e005      	b.n	8006346 <USER_SPI_initialize+0x5e>
 800633a:	20ff      	movs	r0, #255	@ 0xff
 800633c:	f7ff fe78 	bl	8006030 <xchg_spi>
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	3b01      	subs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f6      	bne.n	800633a <USER_SPI_initialize+0x52>

	uint32_t retries = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
	ty = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	757b      	strb	r3, [r7, #21]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006354:	2100      	movs	r1, #0
 8006356:	2000      	movs	r0, #0
 8006358:	f7ff ff57 	bl	800620a <send_cmd>
 800635c:	4603      	mov	r3, r0
 800635e:	2b01      	cmp	r3, #1
 8006360:	f040 8096 	bne.w	8006490 <USER_SPI_initialize+0x1a8>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006368:	f7ff fe38 	bl	8005fdc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800636c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006370:	2008      	movs	r0, #8
 8006372:	f7ff ff4a 	bl	800620a <send_cmd>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d15c      	bne.n	8006436 <USER_SPI_initialize+0x14e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800637c:	2300      	movs	r3, #0
 800637e:	75fb      	strb	r3, [r7, #23]
 8006380:	e00d      	b.n	800639e <USER_SPI_initialize+0xb6>
 8006382:	7dfc      	ldrb	r4, [r7, #23]
 8006384:	20ff      	movs	r0, #255	@ 0xff
 8006386:	f7ff fe53 	bl	8006030 <xchg_spi>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	f104 0318 	add.w	r3, r4, #24
 8006392:	443b      	add	r3, r7
 8006394:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	3301      	adds	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d9ee      	bls.n	8006382 <USER_SPI_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d172      	bne.n	8006490 <USER_SPI_initialize+0x1a8>
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2baa      	cmp	r3, #170	@ 0xaa
 80063ae:	d16f      	bne.n	8006490 <USER_SPI_initialize+0x1a8>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) {
 80063b0:	e00a      	b.n	80063c8 <USER_SPI_initialize+0xe0>
					retries ++;				/* Wait for end of initialization with ACMD41(HCS) */
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
					if (retries>5000){
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d902      	bls.n	80063c8 <USER_SPI_initialize+0xe0>
						printf("ACMD42 timeout \r\n");
 80063c2:	4850      	ldr	r0, [pc, #320]	@ (8006504 <USER_SPI_initialize+0x21c>)
 80063c4:	f004 fada 	bl	800a97c <puts>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) {
 80063c8:	f7ff fe1c 	bl	8006004 <SPI_Timer_Status>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <USER_SPI_initialize+0xfa>
 80063d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80063d6:	20a9      	movs	r0, #169	@ 0xa9
 80063d8:	f7ff ff17 	bl	800620a <send_cmd>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e7      	bne.n	80063b2 <USER_SPI_initialize+0xca>
					}
				}
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80063e2:	f7ff fe0f 	bl	8006004 <SPI_Timer_Status>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d051      	beq.n	8006490 <USER_SPI_initialize+0x1a8>
 80063ec:	2100      	movs	r1, #0
 80063ee:	203a      	movs	r0, #58	@ 0x3a
 80063f0:	f7ff ff0b 	bl	800620a <send_cmd>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d14a      	bne.n	8006490 <USER_SPI_initialize+0x1a8>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
 80063fe:	e00d      	b.n	800641c <USER_SPI_initialize+0x134>
 8006400:	7dfc      	ldrb	r4, [r7, #23]
 8006402:	20ff      	movs	r0, #255	@ 0xff
 8006404:	f7ff fe14 	bl	8006030 <xchg_spi>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	f104 0318 	add.w	r3, r4, #24
 8006410:	443b      	add	r3, r7
 8006412:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	3301      	adds	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d9ee      	bls.n	8006400 <USER_SPI_initialize+0x118>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006422:	7b3b      	ldrb	r3, [r7, #12]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USER_SPI_initialize+0x148>
 800642c:	230c      	movs	r3, #12
 800642e:	e000      	b.n	8006432 <USER_SPI_initialize+0x14a>
 8006430:	2304      	movs	r3, #4
 8006432:	757b      	strb	r3, [r7, #21]
 8006434:	e02c      	b.n	8006490 <USER_SPI_initialize+0x1a8>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006436:	2100      	movs	r1, #0
 8006438:	20a9      	movs	r0, #169	@ 0xa9
 800643a:	f7ff fee6 	bl	800620a <send_cmd>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d804      	bhi.n	800644e <USER_SPI_initialize+0x166>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006444:	2302      	movs	r3, #2
 8006446:	757b      	strb	r3, [r7, #21]
 8006448:	23a9      	movs	r3, #169	@ 0xa9
 800644a:	75bb      	strb	r3, [r7, #22]
 800644c:	e003      	b.n	8006456 <USER_SPI_initialize+0x16e>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800644e:	2301      	movs	r3, #1
 8006450:	757b      	strb	r3, [r7, #21]
 8006452:	2301      	movs	r3, #1
 8006454:	75bb      	strb	r3, [r7, #22]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006456:	bf00      	nop
 8006458:	f7ff fdd4 	bl	8006004 <SPI_Timer_Status>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <USER_SPI_initialize+0x18a>
 8006462:	7dbb      	ldrb	r3, [r7, #22]
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fecf 	bl	800620a <send_cmd>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f2      	bne.n	8006458 <USER_SPI_initialize+0x170>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006472:	f7ff fdc7 	bl	8006004 <SPI_Timer_Status>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <USER_SPI_initialize+0x1a4>
 800647c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006480:	2010      	movs	r0, #16
 8006482:	f7ff fec2 	bl	800620a <send_cmd>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USER_SPI_initialize+0x1a8>
				ty = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	757b      	strb	r3, [r7, #21]
		}
	}
	CardType = ty;	/* Card type */
 8006490:	4a1d      	ldr	r2, [pc, #116]	@ (8006508 <USER_SPI_initialize+0x220>)
 8006492:	7d7b      	ldrb	r3, [r7, #21]
 8006494:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006496:	f7ff fe35 	bl	8006104 <despiselect>

	if (ty) {			/* OK */
 800649a:	7d7b      	ldrb	r3, [r7, #21]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d019      	beq.n	80064d4 <USER_SPI_initialize+0x1ec>
		FCLK_FAST();			/* Set fast clock */
 80064a0:	4b17      	ldr	r3, [pc, #92]	@ (8006500 <USER_SPI_initialize+0x218>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <USER_SPI_initialize+0x218>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0210 	orr.w	r2, r2, #16
 80064b2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80064b4:	4b10      	ldr	r3, [pc, #64]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064c2:	701a      	strb	r2, [r3, #0]
		printf("USER_SPI_initialize OK, Stat = %d\r\n", Stat);
 80064c4:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	4619      	mov	r1, r3
 80064cc:	480f      	ldr	r0, [pc, #60]	@ (800650c <USER_SPI_initialize+0x224>)
 80064ce:	f004 f9ed 	bl	800a8ac <iprintf>
 80064d2:	e009      	b.n	80064e8 <USER_SPI_initialize+0x200>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80064d4:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
		printf("USER_SPI_initialize FAILED, Stat = %d\r\n", Stat);
 80064da:	4b07      	ldr	r3, [pc, #28]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	480b      	ldr	r0, [pc, #44]	@ (8006510 <USER_SPI_initialize+0x228>)
 80064e4:	f004 f9e2 	bl	800a8ac <iprintf>
	}

	return Stat;
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <USER_SPI_initialize+0x210>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd90      	pop	{r4, r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000020 	.word	0x20000020
 80064fc:	0800cf94 	.word	0x0800cf94
 8006500:	200002b0 	.word	0x200002b0
 8006504:	0800cfbc 	.word	0x0800cfbc
 8006508:	200003bc 	.word	0x200003bc
 800650c:	0800cfd0 	.word	0x0800cfd0
 8006510:	0800cff4 	.word	0x0800cff4

08006514 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <USER_SPI_status+0x14>
 8006524:	2301      	movs	r3, #1
 8006526:	e002      	b.n	800652e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006528:	4b04      	ldr	r3, [pc, #16]	@ (800653c <USER_SPI_status+0x28>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	b2db      	uxtb	r3, r3
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000020 	.word	0x20000020

08006540 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <USER_SPI_read+0x1c>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <USER_SPI_read+0x20>
 800655c:	2304      	movs	r3, #4
 800655e:	e04d      	b.n	80065fc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006560:	4b28      	ldr	r3, [pc, #160]	@ (8006604 <USER_SPI_read+0xc4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <USER_SPI_read+0x32>
 800656e:	2303      	movs	r3, #3
 8006570:	e044      	b.n	80065fc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006572:	4b25      	ldr	r3, [pc, #148]	@ (8006608 <USER_SPI_read+0xc8>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <USER_SPI_read+0x44>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	025b      	lsls	r3, r3, #9
 8006582:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d111      	bne.n	80065ae <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	2011      	movs	r0, #17
 800658e:	f7ff fe3c 	bl	800620a <send_cmd>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d129      	bne.n	80065ec <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800659c:	68b8      	ldr	r0, [r7, #8]
 800659e:	f7ff fdd9 	bl	8006154 <rcvr_datablock>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d021      	beq.n	80065ec <USER_SPI_read+0xac>
			count = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	e01e      	b.n	80065ec <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	2012      	movs	r0, #18
 80065b2:	f7ff fe2a 	bl	800620a <send_cmd>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d117      	bne.n	80065ec <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80065bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f7ff fdc7 	bl	8006154 <rcvr_datablock>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <USER_SPI_read+0xa2>
				buff += 512;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80065d2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ed      	bne.n	80065bc <USER_SPI_read+0x7c>
 80065e0:	e000      	b.n	80065e4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80065e2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80065e4:	2100      	movs	r1, #0
 80065e6:	200c      	movs	r0, #12
 80065e8:	f7ff fe0f 	bl	800620a <send_cmd>
		}
	}
	despiselect();
 80065ec:	f7ff fd8a 	bl	8006104 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000020 	.word	0x20000020
 8006608:	200003bc 	.word	0x200003bc

0800660c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <USER_SPI_write+0x1c>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USER_SPI_write+0x20>
 8006628:	2304      	movs	r3, #4
 800662a:	e063      	b.n	80066f4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800662c:	4b33      	ldr	r3, [pc, #204]	@ (80066fc <USER_SPI_write+0xf0>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <USER_SPI_write+0x32>
 800663a:	2303      	movs	r3, #3
 800663c:	e05a      	b.n	80066f4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800663e:	4b2f      	ldr	r3, [pc, #188]	@ (80066fc <USER_SPI_write+0xf0>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USER_SPI_write+0x44>
 800664c:	2302      	movs	r3, #2
 800664e:	e051      	b.n	80066f4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006650:	4b2b      	ldr	r3, [pc, #172]	@ (8006700 <USER_SPI_write+0xf4>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <USER_SPI_write+0x56>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	025b      	lsls	r3, r3, #9
 8006660:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d110      	bne.n	800668a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	2018      	movs	r0, #24
 800666c:	f7ff fdcd 	bl	800620a <send_cmd>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d136      	bne.n	80066e4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006676:	21fe      	movs	r1, #254	@ 0xfe
 8006678:	68b8      	ldr	r0, [r7, #8]
 800667a:	f7ff fd94 	bl	80061a6 <xmit_datablock>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02f      	beq.n	80066e4 <USER_SPI_write+0xd8>
			count = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	e02c      	b.n	80066e4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800668a:	4b1d      	ldr	r3, [pc, #116]	@ (8006700 <USER_SPI_write+0xf4>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 0306 	and.w	r3, r3, #6
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <USER_SPI_write+0x92>
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	2097      	movs	r0, #151	@ 0x97
 800669a:	f7ff fdb6 	bl	800620a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	2019      	movs	r0, #25
 80066a2:	f7ff fdb2 	bl	800620a <send_cmd>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11b      	bne.n	80066e4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80066ac:	21fc      	movs	r1, #252	@ 0xfc
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f7ff fd79 	bl	80061a6 <xmit_datablock>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <USER_SPI_write+0xc4>
				buff += 512;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80066c0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ee      	bne.n	80066ac <USER_SPI_write+0xa0>
 80066ce:	e000      	b.n	80066d2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80066d0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80066d2:	21fd      	movs	r1, #253	@ 0xfd
 80066d4:	2000      	movs	r0, #0
 80066d6:	f7ff fd66 	bl	80061a6 <xmit_datablock>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USER_SPI_write+0xd8>
 80066e0:	2301      	movs	r3, #1
 80066e2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80066e4:	f7ff fd0e 	bl	8006104 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000020 	.word	0x20000020
 8006700:	200003bc 	.word	0x200003bc

08006704 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	@ 0x30
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	603a      	str	r2, [r7, #0]
 800670e:	71fb      	strb	r3, [r7, #7]
 8006710:	460b      	mov	r3, r1
 8006712:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <USER_SPI_ioctl+0x1a>
 800671a:	2304      	movs	r3, #4
 800671c:	e15a      	b.n	80069d4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800671e:	4baf      	ldr	r3, [pc, #700]	@ (80069dc <USER_SPI_ioctl+0x2d8>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USER_SPI_ioctl+0x2c>
 800672c:	2303      	movs	r3, #3
 800672e:	e151      	b.n	80069d4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006736:	79bb      	ldrb	r3, [r7, #6]
 8006738:	2b04      	cmp	r3, #4
 800673a:	f200 8136 	bhi.w	80069aa <USER_SPI_ioctl+0x2a6>
 800673e:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <USER_SPI_ioctl+0x40>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006759 	.word	0x08006759
 8006748:	0800676d 	.word	0x0800676d
 800674c:	080069ab 	.word	0x080069ab
 8006750:	08006819 	.word	0x08006819
 8006754:	0800690f 	.word	0x0800690f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006758:	f7ff fce2 	bl	8006120 <spiselect>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8127 	beq.w	80069b2 <USER_SPI_ioctl+0x2ae>
 8006764:	2300      	movs	r3, #0
 8006766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800676a:	e122      	b.n	80069b2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800676c:	2100      	movs	r1, #0
 800676e:	2009      	movs	r0, #9
 8006770:	f7ff fd4b 	bl	800620a <send_cmd>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 811d 	bne.w	80069b6 <USER_SPI_ioctl+0x2b2>
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	2110      	movs	r1, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fce6 	bl	8006154 <rcvr_datablock>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8113 	beq.w	80069b6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006790:	7b3b      	ldrb	r3, [r7, #12]
 8006792:	099b      	lsrs	r3, r3, #6
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d111      	bne.n	80067be <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800679a:	7d7b      	ldrb	r3, [r7, #21]
 800679c:	461a      	mov	r2, r3
 800679e:	7d3b      	ldrb	r3, [r7, #20]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	4413      	add	r3, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	7cfb      	ldrb	r3, [r7, #19]
 80067a8:	041b      	lsls	r3, r3, #16
 80067aa:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80067ae:	4413      	add	r3, r2
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	029a      	lsls	r2, r3, #10
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e028      	b.n	8006810 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80067be:	7c7b      	ldrb	r3, [r7, #17]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	7dbb      	ldrb	r3, [r7, #22]
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	7d7b      	ldrb	r3, [r7, #21]
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0306 	and.w	r3, r3, #6
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4413      	add	r3, r2
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	3302      	adds	r3, #2
 80067e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80067e6:	7d3b      	ldrb	r3, [r7, #20]
 80067e8:	099b      	lsrs	r3, r3, #6
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	7cbb      	ldrb	r3, [r7, #18]
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067fc:	4413      	add	r3, r2
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006806:	3b09      	subs	r3, #9
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	409a      	lsls	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006816:	e0ce      	b.n	80069b6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006818:	4b71      	ldr	r3, [pc, #452]	@ (80069e0 <USER_SPI_ioctl+0x2dc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d031      	beq.n	8006888 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006824:	2100      	movs	r1, #0
 8006826:	208d      	movs	r0, #141	@ 0x8d
 8006828:	f7ff fcef 	bl	800620a <send_cmd>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 80c3 	bne.w	80069ba <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006834:	20ff      	movs	r0, #255	@ 0xff
 8006836:	f7ff fbfb 	bl	8006030 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800683a:	f107 030c 	add.w	r3, r7, #12
 800683e:	2110      	movs	r1, #16
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fc87 	bl	8006154 <rcvr_datablock>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80b6 	beq.w	80069ba <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800684e:	2330      	movs	r3, #48	@ 0x30
 8006850:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006854:	e007      	b.n	8006866 <USER_SPI_ioctl+0x162>
 8006856:	20ff      	movs	r0, #255	@ 0xff
 8006858:	f7ff fbea 	bl	8006030 <xchg_spi>
 800685c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006860:	3b01      	subs	r3, #1
 8006862:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006866:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f3      	bne.n	8006856 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800686e:	7dbb      	ldrb	r3, [r7, #22]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	2310      	movs	r3, #16
 8006878:	fa03 f202 	lsl.w	r2, r3, r2
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006886:	e098      	b.n	80069ba <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006888:	2100      	movs	r1, #0
 800688a:	2009      	movs	r0, #9
 800688c:	f7ff fcbd 	bl	800620a <send_cmd>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 8091 	bne.w	80069ba <USER_SPI_ioctl+0x2b6>
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	2110      	movs	r1, #16
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fc58 	bl	8006154 <rcvr_datablock>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8087 	beq.w	80069ba <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80068ac:	4b4c      	ldr	r3, [pc, #304]	@ (80069e0 <USER_SPI_ioctl+0x2dc>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80068b8:	7dbb      	ldrb	r3, [r7, #22]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80068c0:	7dfa      	ldrb	r2, [r7, #23]
 80068c2:	09d2      	lsrs	r2, r2, #7
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	4413      	add	r3, r2
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	7e7b      	ldrb	r3, [r7, #25]
 80068cc:	099b      	lsrs	r3, r3, #6
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e013      	b.n	8006906 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80068de:	7dbb      	ldrb	r3, [r7, #22]
 80068e0:	109b      	asrs	r3, r3, #2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	3301      	adds	r3, #1
 80068ea:	7dfa      	ldrb	r2, [r7, #23]
 80068ec:	00d2      	lsls	r2, r2, #3
 80068ee:	f002 0218 	and.w	r2, r2, #24
 80068f2:	7df9      	ldrb	r1, [r7, #23]
 80068f4:	0949      	lsrs	r1, r1, #5
 80068f6:	b2c9      	uxtb	r1, r1
 80068f8:	440a      	add	r2, r1
 80068fa:	3201      	adds	r2, #1
 80068fc:	fb02 f303 	mul.w	r3, r2, r3
 8006900:	461a      	mov	r2, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800690c:	e055      	b.n	80069ba <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800690e:	4b34      	ldr	r3, [pc, #208]	@ (80069e0 <USER_SPI_ioctl+0x2dc>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f003 0306 	and.w	r3, r3, #6
 8006916:	2b00      	cmp	r3, #0
 8006918:	d051      	beq.n	80069be <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800691a:	f107 020c 	add.w	r2, r7, #12
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	210b      	movs	r1, #11
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff feee 	bl	8006704 <USER_SPI_ioctl>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d149      	bne.n	80069c2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800692e:	7b3b      	ldrb	r3, [r7, #12]
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <USER_SPI_ioctl+0x23e>
 8006938:	7dbb      	ldrb	r3, [r7, #22]
 800693a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d041      	beq.n	80069c6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006952:	4b23      	ldr	r3, [pc, #140]	@ (80069e0 <USER_SPI_ioctl+0x2dc>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	025b      	lsls	r3, r3, #9
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	025b      	lsls	r3, r3, #9
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800696a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696c:	2020      	movs	r0, #32
 800696e:	f7ff fc4c 	bl	800620a <send_cmd>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d128      	bne.n	80069ca <USER_SPI_ioctl+0x2c6>
 8006978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800697a:	2021      	movs	r0, #33	@ 0x21
 800697c:	f7ff fc45 	bl	800620a <send_cmd>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d121      	bne.n	80069ca <USER_SPI_ioctl+0x2c6>
 8006986:	2100      	movs	r1, #0
 8006988:	2026      	movs	r0, #38	@ 0x26
 800698a:	f7ff fc3e 	bl	800620a <send_cmd>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <USER_SPI_ioctl+0x2c6>
 8006994:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006998:	f7ff fb90 	bl	80060bc <wait_ready>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80069a2:	2300      	movs	r3, #0
 80069a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80069a8:	e00f      	b.n	80069ca <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80069aa:	2304      	movs	r3, #4
 80069ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80069b0:	e00c      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		break;
 80069b2:	bf00      	nop
 80069b4:	e00a      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		break;
 80069b6:	bf00      	nop
 80069b8:	e008      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		break;
 80069ba:	bf00      	nop
 80069bc:	e006      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80069be:	bf00      	nop
 80069c0:	e004      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <USER_SPI_ioctl+0x2c8>
		break;
 80069ca:	bf00      	nop
	}

	despiselect();
 80069cc:	f7ff fb9a 	bl	8006104 <despiselect>

	return res;
 80069d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3730      	adds	r7, #48	@ 0x30
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000020 	.word	0x20000020
 80069e0:	200003bc 	.word	0x200003bc

080069e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	4a08      	ldr	r2, [pc, #32]	@ (8006a14 <disk_status+0x30>)
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	79fa      	ldrb	r2, [r7, #7]
 80069fc:	4905      	ldr	r1, [pc, #20]	@ (8006a14 <disk_status+0x30>)
 80069fe:	440a      	add	r2, r1
 8006a00:	7a12      	ldrb	r2, [r2, #8]
 8006a02:	4610      	mov	r0, r2
 8006a04:	4798      	blx	r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200003f0 	.word	0x200003f0

08006a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <disk_initialize+0x4c>)
 8006a2a:	5cd3      	ldrb	r3, [r2, r3]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d114      	bne.n	8006a5a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	4a0c      	ldr	r2, [pc, #48]	@ (8006a64 <disk_initialize+0x4c>)
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	4909      	ldr	r1, [pc, #36]	@ (8006a64 <disk_initialize+0x4c>)
 8006a40:	440a      	add	r2, r1
 8006a42:	7a12      	ldrb	r2, [r2, #8]
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4a03      	ldr	r2, [pc, #12]	@ (8006a64 <disk_initialize+0x4c>)
 8006a56:	2101      	movs	r1, #1
 8006a58:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	200003f0 	.word	0x200003f0

08006a68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa4 <disk_read+0x3c>)
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	689c      	ldr	r4, [r3, #8]
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <disk_read+0x3c>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	7a18      	ldrb	r0, [r3, #8]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	47a0      	blx	r4
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd90      	pop	{r4, r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	200003f0 	.word	0x200003f0

08006aa8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006aa8:	b590      	push	{r4, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae4 <disk_write+0x3c>)
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68dc      	ldr	r4, [r3, #12]
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	4a07      	ldr	r2, [pc, #28]	@ (8006ae4 <disk_write+0x3c>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	7a18      	ldrb	r0, [r3, #8]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	47a0      	blx	r4
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200003f0 	.word	0x200003f0

08006ae8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	603a      	str	r2, [r7, #0]
 8006af2:	71fb      	strb	r3, [r7, #7]
 8006af4:	460b      	mov	r3, r1
 8006af6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	4a09      	ldr	r2, [pc, #36]	@ (8006b20 <disk_ioctl+0x38>)
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	79fa      	ldrb	r2, [r7, #7]
 8006b06:	4906      	ldr	r1, [pc, #24]	@ (8006b20 <disk_ioctl+0x38>)
 8006b08:	440a      	add	r2, r1
 8006b0a:	7a10      	ldrb	r0, [r2, #8]
 8006b0c:	79b9      	ldrb	r1, [r7, #6]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200003f0 	.word	0x200003f0

08006b24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	4313      	orrs	r3, r2
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b48:	89fb      	ldrh	r3, [r7, #14]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3303      	adds	r3, #3
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	887a      	ldrh	r2, [r7, #2]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	0a1b      	lsrs	r3, r3, #8
 8006bec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	1c53      	adds	r3, r2, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	6179      	str	r1, [r7, #20]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f1      	bne.n	8006c44 <mem_cpy+0x1a>
	}
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	617a      	str	r2, [r7, #20]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f3      	bne.n	8006c7c <mem_set+0x10>
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ca2:	b480      	push	{r7}
 8006ca4:	b089      	sub	sp, #36	@ 0x24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	61fa      	str	r2, [r7, #28]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	61ba      	str	r2, [r7, #24]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	1acb      	subs	r3, r1, r3
 8006cce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <mem_cmp+0x40>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0eb      	beq.n	8006cba <mem_cmp+0x18>

	return r;
 8006ce2:	697b      	ldr	r3, [r7, #20]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3724      	adds	r7, #36	@ 0x24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cfa:	e002      	b.n	8006d02 <chk_chr+0x12>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	607b      	str	r3, [r7, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <chk_chr+0x26>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d1f2      	bne.n	8006cfc <chk_chr+0xc>
	return *str;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	781b      	ldrb	r3, [r3, #0]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e029      	b.n	8006d90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d3c:	4a27      	ldr	r2, [pc, #156]	@ (8006ddc <chk_lock+0xb4>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	4413      	add	r3, r2
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01d      	beq.n	8006d86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d4a:	4a24      	ldr	r2, [pc, #144]	@ (8006ddc <chk_lock+0xb4>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4413      	add	r3, r2
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d116      	bne.n	8006d8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <chk_lock+0xb4>)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	4413      	add	r3, r2
 8006d64:	3304      	adds	r3, #4
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10c      	bne.n	8006d8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d70:	4a1a      	ldr	r2, [pc, #104]	@ (8006ddc <chk_lock+0xb4>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4413      	add	r3, r2
 8006d78:	3308      	adds	r3, #8
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d102      	bne.n	8006d8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d84:	e007      	b.n	8006d96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d86:	2301      	movs	r3, #1
 8006d88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d9d2      	bls.n	8006d3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d109      	bne.n	8006db0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <chk_lock+0x80>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d101      	bne.n	8006dac <chk_lock+0x84>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e010      	b.n	8006dce <chk_lock+0xa6>
 8006dac:	2312      	movs	r3, #18
 8006dae:	e00e      	b.n	8006dce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <chk_lock+0xa0>
 8006db6:	4a09      	ldr	r2, [pc, #36]	@ (8006ddc <chk_lock+0xb4>)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4413      	add	r3, r2
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc6:	d101      	bne.n	8006dcc <chk_lock+0xa4>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	e000      	b.n	8006dce <chk_lock+0xa6>
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	200003d0 	.word	0x200003d0

08006de0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	e002      	b.n	8006df2 <enq_lock+0x12>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3301      	adds	r3, #1
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d806      	bhi.n	8006e06 <enq_lock+0x26>
 8006df8:	4a09      	ldr	r2, [pc, #36]	@ (8006e20 <enq_lock+0x40>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	4413      	add	r3, r2
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f2      	bne.n	8006dec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	bf14      	ite	ne
 8006e0c:	2301      	movne	r3, #1
 8006e0e:	2300      	moveq	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	200003d0 	.word	0x200003d0

08006e24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	e01f      	b.n	8006e74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e34:	4a41      	ldr	r2, [pc, #260]	@ (8006f3c <inc_lock+0x118>)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	4413      	add	r3, r2
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d113      	bne.n	8006e6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e46:	4a3d      	ldr	r2, [pc, #244]	@ (8006f3c <inc_lock+0x118>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d109      	bne.n	8006e6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e5a:	4a38      	ldr	r2, [pc, #224]	@ (8006f3c <inc_lock+0x118>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	4413      	add	r3, r2
 8006e62:	3308      	adds	r3, #8
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d006      	beq.n	8006e7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d9dc      	bls.n	8006e34 <inc_lock+0x10>
 8006e7a:	e000      	b.n	8006e7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d132      	bne.n	8006eea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e002      	b.n	8006e90 <inc_lock+0x6c>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d806      	bhi.n	8006ea4 <inc_lock+0x80>
 8006e96:	4a29      	ldr	r2, [pc, #164]	@ (8006f3c <inc_lock+0x118>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	4413      	add	r3, r2
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f2      	bne.n	8006e8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d101      	bne.n	8006eae <inc_lock+0x8a>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e040      	b.n	8006f30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4922      	ldr	r1, [pc, #136]	@ (8006f3c <inc_lock+0x118>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	440b      	add	r3, r1
 8006eba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	491e      	ldr	r1, [pc, #120]	@ (8006f3c <inc_lock+0x118>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3304      	adds	r3, #4
 8006eca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	491a      	ldr	r1, [pc, #104]	@ (8006f3c <inc_lock+0x118>)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3308      	adds	r3, #8
 8006eda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006edc:	4a17      	ldr	r2, [pc, #92]	@ (8006f3c <inc_lock+0x118>)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <inc_lock+0xe0>
 8006ef0:	4a12      	ldr	r2, [pc, #72]	@ (8006f3c <inc_lock+0x118>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	4413      	add	r3, r2
 8006ef8:	330c      	adds	r3, #12
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <inc_lock+0xe0>
 8006f00:	2300      	movs	r3, #0
 8006f02:	e015      	b.n	8006f30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d108      	bne.n	8006f1c <inc_lock+0xf8>
 8006f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f3c <inc_lock+0x118>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	4413      	add	r3, r2
 8006f12:	330c      	adds	r3, #12
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	e001      	b.n	8006f20 <inc_lock+0xfc>
 8006f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f20:	4906      	ldr	r1, [pc, #24]	@ (8006f3c <inc_lock+0x118>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	440b      	add	r3, r1
 8006f28:	330c      	adds	r3, #12
 8006f2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	200003d0 	.word	0x200003d0

08006f40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d825      	bhi.n	8006fa0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f54:	4a17      	ldr	r2, [pc, #92]	@ (8006fb4 <dec_lock+0x74>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	4413      	add	r3, r2
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f62:	89fb      	ldrh	r3, [r7, #14]
 8006f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f68:	d101      	bne.n	8006f6e <dec_lock+0x2e>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f6e:	89fb      	ldrh	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <dec_lock+0x3a>
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb4 <dec_lock+0x74>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	4413      	add	r3, r2
 8006f82:	330c      	adds	r3, #12
 8006f84:	89fa      	ldrh	r2, [r7, #14]
 8006f86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f88:	89fb      	ldrh	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d105      	bne.n	8006f9a <dec_lock+0x5a>
 8006f8e:	4a09      	ldr	r2, [pc, #36]	@ (8006fb4 <dec_lock+0x74>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	4413      	add	r3, r2
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	737b      	strb	r3, [r7, #13]
 8006f9e:	e001      	b.n	8006fa4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006fa4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	200003d0 	.word	0x200003d0

08006fb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e010      	b.n	8006fe8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006ffc <clear_lock+0x44>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	4413      	add	r3, r2
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d105      	bne.n	8006fe2 <clear_lock+0x2a>
 8006fd6:	4a09      	ldr	r2, [pc, #36]	@ (8006ffc <clear_lock+0x44>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	4413      	add	r3, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d9eb      	bls.n	8006fc6 <clear_lock+0xe>
	}
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	200003d0 	.word	0x200003d0

08007000 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78db      	ldrb	r3, [r3, #3]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d034      	beq.n	800707e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7858      	ldrb	r0, [r3, #1]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007024:	2301      	movs	r3, #1
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	f7ff fd3e 	bl	8006aa8 <disk_write>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
 8007036:	e022      	b.n	800707e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	429a      	cmp	r2, r3
 800704c:	d217      	bcs.n	800707e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	789b      	ldrb	r3, [r3, #2]
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	e010      	b.n	8007078 <sync_window+0x78>
					wsect += fs->fsize;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4413      	add	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7858      	ldrb	r0, [r3, #1]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800706a:	2301      	movs	r3, #1
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	f7ff fd1b 	bl	8006aa8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3b01      	subs	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d8eb      	bhi.n	8007056 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d01b      	beq.n	80070d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ffad 	bl	8007000 <sync_window>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d113      	bne.n	80070d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7858      	ldrb	r0, [r3, #1]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070ba:	2301      	movs	r3, #1
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	f7ff fcd3 	bl	8006a68 <disk_read>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff87 	bl	8007000 <sync_window>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d158      	bne.n	80071ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d148      	bne.n	8007196 <sync_fs+0xb2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	791b      	ldrb	r3, [r3, #4]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d144      	bne.n	8007196 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3330      	adds	r3, #48	@ 0x30
 8007110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fda8 	bl	8006c6c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3330      	adds	r3, #48	@ 0x30
 8007120:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007124:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fd37 	bl	8006b9c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3330      	adds	r3, #48	@ 0x30
 8007132:	4921      	ldr	r1, [pc, #132]	@ (80071b8 <sync_fs+0xd4>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fd4c 	bl	8006bd2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3330      	adds	r3, #48	@ 0x30
 800713e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007142:	491e      	ldr	r1, [pc, #120]	@ (80071bc <sync_fs+0xd8>)
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fd44 	bl	8006bd2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3330      	adds	r3, #48	@ 0x30
 800714e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7ff fd3a 	bl	8006bd2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3330      	adds	r3, #48	@ 0x30
 8007162:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f7ff fd30 	bl	8006bd2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7858      	ldrb	r0, [r3, #1]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718a:	2301      	movs	r3, #1
 800718c:	f7ff fc8c 	bl	8006aa8 <disk_write>
			fs->fsi_flag = 0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fca2 	bl	8006ae8 <disk_ioctl>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <sync_fs+0xca>
 80071aa:	2301      	movs	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	41615252 	.word	0x41615252
 80071bc:	61417272 	.word	0x61417272

080071c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	3b02      	subs	r3, #2
 80071ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	3b02      	subs	r3, #2
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d301      	bcc.n	80071e0 <clust2sect+0x20>
 80071dc:	2300      	movs	r3, #0
 80071de:	e008      	b.n	80071f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	895b      	ldrh	r3, [r3, #10]
 80071e4:	461a      	mov	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	fb03 f202 	mul.w	r2, r3, r2
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f0:	4413      	add	r3, r2
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d904      	bls.n	800721e <get_fat+0x20>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <get_fat+0x26>
		val = 1;	/* Internal error */
 800721e:	2301      	movs	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	e08e      	b.n	8007342 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007224:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007228:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b03      	cmp	r3, #3
 8007230:	d061      	beq.n	80072f6 <get_fat+0xf8>
 8007232:	2b03      	cmp	r3, #3
 8007234:	dc7b      	bgt.n	800732e <get_fat+0x130>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d002      	beq.n	8007240 <get_fat+0x42>
 800723a:	2b02      	cmp	r3, #2
 800723c:	d041      	beq.n	80072c2 <get_fat+0xc4>
 800723e:	e076      	b.n	800732e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6a1a      	ldr	r2, [r3, #32]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	0a5b      	lsrs	r3, r3, #9
 8007256:	4413      	add	r3, r2
 8007258:	4619      	mov	r1, r3
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f7ff ff14 	bl	8007088 <move_window>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d166      	bne.n	8007334 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	60fa      	str	r2, [r7, #12]
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007278:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6a1a      	ldr	r2, [r3, #32]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	0a5b      	lsrs	r3, r3, #9
 8007282:	4413      	add	r3, r2
 8007284:	4619      	mov	r1, r3
 8007286:	6938      	ldr	r0, [r7, #16]
 8007288:	f7ff fefe 	bl	8007088 <move_window>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d152      	bne.n	8007338 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <get_fat+0xba>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	e002      	b.n	80072be <get_fat+0xc0>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072be:	617b      	str	r3, [r7, #20]
			break;
 80072c0:	e03f      	b.n	8007342 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	4413      	add	r3, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	6938      	ldr	r0, [r7, #16]
 80072d0:	f7ff feda 	bl	8007088 <move_window>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d130      	bne.n	800733c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80072e8:	4413      	add	r3, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fc1a 	bl	8006b24 <ld_word>
 80072f0:	4603      	mov	r3, r0
 80072f2:	617b      	str	r3, [r7, #20]
			break;
 80072f4:	e025      	b.n	8007342 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	09db      	lsrs	r3, r3, #7
 80072fe:	4413      	add	r3, r2
 8007300:	4619      	mov	r1, r3
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f7ff fec0 	bl	8007088 <move_window>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d118      	bne.n	8007340 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800731c:	4413      	add	r3, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fc19 	bl	8006b56 <ld_dword>
 8007324:	4603      	mov	r3, r0
 8007326:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800732a:	617b      	str	r3, [r7, #20]
			break;
 800732c:	e009      	b.n	8007342 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e006      	b.n	8007342 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007334:	bf00      	nop
 8007336:	e004      	b.n	8007342 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007338:	bf00      	nop
 800733a:	e002      	b.n	8007342 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007340:	bf00      	nop
		}
	}

	return val;
 8007342:	697b      	ldr	r3, [r7, #20]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b089      	sub	sp, #36	@ 0x24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007358:	2302      	movs	r3, #2
 800735a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b01      	cmp	r3, #1
 8007360:	f240 80d9 	bls.w	8007516 <put_fat+0x1ca>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	f080 80d3 	bcs.w	8007516 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b03      	cmp	r3, #3
 8007376:	f000 8096 	beq.w	80074a6 <put_fat+0x15a>
 800737a:	2b03      	cmp	r3, #3
 800737c:	f300 80cb 	bgt.w	8007516 <put_fat+0x1ca>
 8007380:	2b01      	cmp	r3, #1
 8007382:	d002      	beq.n	800738a <put_fat+0x3e>
 8007384:	2b02      	cmp	r3, #2
 8007386:	d06e      	beq.n	8007466 <put_fat+0x11a>
 8007388:	e0c5      	b.n	8007516 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	4413      	add	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	0a5b      	lsrs	r3, r3, #9
 80073a0:	4413      	add	r3, r2
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fe6f 	bl	8007088 <move_window>
 80073aa:	4603      	mov	r3, r0
 80073ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 80a9 	bne.w	8007508 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	61b9      	str	r1, [r7, #24]
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	4413      	add	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <put_fat+0xa4>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b25b      	sxtb	r3, r3
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	b25a      	sxtb	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b25b      	sxtb	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	e001      	b.n	80073f4 <put_fat+0xa8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	0a5b      	lsrs	r3, r3, #9
 8007406:	4413      	add	r3, r2
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fe3c 	bl	8007088 <move_window>
 8007410:	4603      	mov	r3, r0
 8007412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007414:	7ffb      	ldrb	r3, [r7, #31]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d178      	bne.n	800750c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	4413      	add	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <put_fat+0xf0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e00e      	b.n	800745a <put_fat+0x10e>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	b25a      	sxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b25b      	sxtb	r3, r3
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	b25b      	sxtb	r3, r3
 8007454:	4313      	orrs	r3, r2
 8007456:	b25b      	sxtb	r3, r3
 8007458:	b2db      	uxtb	r3, r3
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	70da      	strb	r2, [r3, #3]
			break;
 8007464:	e057      	b.n	8007516 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	0a1b      	lsrs	r3, r3, #8
 800746e:	4413      	add	r3, r2
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fe08 	bl	8007088 <move_window>
 8007478:	4603      	mov	r3, r0
 800747a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800747c:	7ffb      	ldrb	r3, [r7, #31]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d146      	bne.n	8007510 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007490:	4413      	add	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	b292      	uxth	r2, r2
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fb7f 	bl	8006b9c <st_word>
			fs->wflag = 1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	70da      	strb	r2, [r3, #3]
			break;
 80074a4:	e037      	b.n	8007516 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	09db      	lsrs	r3, r3, #7
 80074ae:	4413      	add	r3, r2
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fde8 	bl	8007088 <move_window>
 80074b8:	4603      	mov	r3, r0
 80074ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074bc:	7ffb      	ldrb	r3, [r7, #31]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d128      	bne.n	8007514 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074d6:	4413      	add	r3, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f7ff fb3c 	bl	8006b56 <ld_dword>
 80074de:	4603      	mov	r3, r0
 80074e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80074e4:	4323      	orrs	r3, r4
 80074e6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074f6:	4413      	add	r3, r2
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fb69 	bl	8006bd2 <st_dword>
			fs->wflag = 1;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	70da      	strb	r2, [r3, #3]
			break;
 8007506:	e006      	b.n	8007516 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007508:	bf00      	nop
 800750a:	e004      	b.n	8007516 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007514:	bf00      	nop
		}
	}
	return res;
 8007516:	7ffb      	ldrb	r3, [r7, #31]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3724      	adds	r7, #36	@ 0x24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd90      	pop	{r4, r7, pc}

08007520 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d904      	bls.n	8007546 <remove_chain+0x26>
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d301      	bcc.n	800754a <remove_chain+0x2a>
 8007546:	2302      	movs	r3, #2
 8007548:	e04b      	b.n	80075e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	69b8      	ldr	r0, [r7, #24]
 8007558:	f7ff fef8 	bl	800734c <put_fat>
 800755c:	4603      	mov	r3, r0
 800755e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <remove_chain+0x4a>
 8007566:	7ffb      	ldrb	r3, [r7, #31]
 8007568:	e03b      	b.n	80075e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff fe46 	bl	80071fe <get_fat>
 8007572:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d031      	beq.n	80075de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <remove_chain+0x64>
 8007580:	2302      	movs	r3, #2
 8007582:	e02e      	b.n	80075e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800758a:	d101      	bne.n	8007590 <remove_chain+0x70>
 800758c:	2301      	movs	r3, #1
 800758e:	e028      	b.n	80075e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007590:	2200      	movs	r2, #0
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	69b8      	ldr	r0, [r7, #24]
 8007596:	f7ff fed9 	bl	800734c <put_fat>
 800759a:	4603      	mov	r3, r0
 800759c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800759e:	7ffb      	ldrb	r3, [r7, #31]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <remove_chain+0x88>
 80075a4:	7ffb      	ldrb	r3, [r7, #31]
 80075a6:	e01c      	b.n	80075e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	3b02      	subs	r3, #2
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d20b      	bcs.n	80075ce <remove_chain+0xae>
			fs->free_clst++;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d3c6      	bcc.n	800756a <remove_chain+0x4a>
 80075dc:	e000      	b.n	80075e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10d      	bne.n	800761c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <create_chain+0x2c>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	429a      	cmp	r2, r3
 8007614:	d31b      	bcc.n	800764e <create_chain+0x64>
 8007616:	2301      	movs	r3, #1
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	e018      	b.n	800764e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fded 	bl	80071fe <get_fat>
 8007624:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d801      	bhi.n	8007630 <create_chain+0x46>
 800762c:	2301      	movs	r3, #1
 800762e:	e070      	b.n	8007712 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007636:	d101      	bne.n	800763c <create_chain+0x52>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	e06a      	b.n	8007712 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	429a      	cmp	r2, r3
 8007644:	d201      	bcs.n	800764a <create_chain+0x60>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	e063      	b.n	8007712 <create_chain+0x128>
		scl = clst;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	429a      	cmp	r2, r3
 8007660:	d307      	bcc.n	8007672 <create_chain+0x88>
				ncl = 2;
 8007662:	2302      	movs	r3, #2
 8007664:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	429a      	cmp	r2, r3
 800766c:	d901      	bls.n	8007672 <create_chain+0x88>
 800766e:	2300      	movs	r3, #0
 8007670:	e04f      	b.n	8007712 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fdc2 	bl	80071fe <get_fat>
 800767a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d003      	beq.n	8007690 <create_chain+0xa6>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800768e:	d101      	bne.n	8007694 <create_chain+0xaa>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	e03e      	b.n	8007712 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	429a      	cmp	r2, r3
 800769a:	d1da      	bne.n	8007652 <create_chain+0x68>
 800769c:	2300      	movs	r3, #0
 800769e:	e038      	b.n	8007712 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80076a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	6938      	ldr	r0, [r7, #16]
 80076aa:	f7ff fe4f 	bl	800734c <put_fat>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <create_chain+0xe2>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d006      	beq.n	80076cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6938      	ldr	r0, [r7, #16]
 80076c4:	f7ff fe42 	bl	800734c <put_fat>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d116      	bne.n	8007700 <create_chain+0x116>
		fs->last_clst = ncl;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	3b02      	subs	r3, #2
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d804      	bhi.n	80076f0 <create_chain+0x106>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	1e5a      	subs	r2, r3, #1
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	f043 0301 	orr.w	r3, r3, #1
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	711a      	strb	r2, [r3, #4]
 80076fe:	e007      	b.n	8007710 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d102      	bne.n	800770c <create_chain+0x122>
 8007706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800770a:	e000      	b.n	800770e <create_chain+0x124>
 800770c:	2301      	movs	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007710:	69fb      	ldr	r3, [r7, #28]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800771a:	b480      	push	{r7}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	3304      	adds	r3, #4
 8007730:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	0a5b      	lsrs	r3, r3, #9
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	8952      	ldrh	r2, [r2, #10]
 800773a:	fbb3 f3f2 	udiv	r3, r3, r2
 800773e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	613a      	str	r2, [r7, #16]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <clmt_clust+0x3a>
 8007750:	2300      	movs	r3, #0
 8007752:	e010      	b.n	8007776 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	429a      	cmp	r2, r3
 800775a:	d307      	bcc.n	800776c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3304      	adds	r3, #4
 8007768:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800776a:	e7e9      	b.n	8007740 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800776c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4413      	add	r3, r2
}
 8007776:	4618      	mov	r0, r3
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007798:	d204      	bcs.n	80077a4 <dir_sdi+0x22>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80077a4:	2302      	movs	r3, #2
 80077a6:	e063      	b.n	8007870 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <dir_sdi+0x46>
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d902      	bls.n	80077c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10c      	bne.n	80077e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	8912      	ldrh	r2, [r2, #8]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d301      	bcc.n	80077de <dir_sdi+0x5c>
 80077da:	2302      	movs	r3, #2
 80077dc:	e048      	b.n	8007870 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	61da      	str	r2, [r3, #28]
 80077e6:	e029      	b.n	800783c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	895b      	ldrh	r3, [r3, #10]
 80077ec:	025b      	lsls	r3, r3, #9
 80077ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077f0:	e019      	b.n	8007826 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fd01 	bl	80071fe <get_fat>
 80077fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007804:	d101      	bne.n	800780a <dir_sdi+0x88>
 8007806:	2301      	movs	r3, #1
 8007808:	e032      	b.n	8007870 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d904      	bls.n	800781a <dir_sdi+0x98>
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	429a      	cmp	r2, r3
 8007818:	d301      	bcc.n	800781e <dir_sdi+0x9c>
 800781a:	2302      	movs	r3, #2
 800781c:	e028      	b.n	8007870 <dir_sdi+0xee>
			ofs -= csz;
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	429a      	cmp	r2, r3
 800782c:	d2e1      	bcs.n	80077f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	6938      	ldr	r0, [r7, #16]
 8007832:	f7ff fcc5 	bl	80071c0 <clust2sect>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <dir_sdi+0xcc>
 800784a:	2302      	movs	r3, #2
 800784c:	e010      	b.n	8007870 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	0a5b      	lsrs	r3, r3, #9
 8007856:	441a      	add	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007868:	441a      	add	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	3320      	adds	r3, #32
 800788e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <dir_next+0x28>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800789e:	d301      	bcc.n	80078a4 <dir_next+0x2c>
 80078a0:	2304      	movs	r3, #4
 80078a2:	e0aa      	b.n	80079fa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f040 8098 	bne.w	80079e0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	8912      	ldrh	r2, [r2, #8]
 80078ca:	4293      	cmp	r3, r2
 80078cc:	f0c0 8088 	bcc.w	80079e0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	61da      	str	r2, [r3, #28]
 80078d6:	2304      	movs	r3, #4
 80078d8:	e08f      	b.n	80079fa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	0a5b      	lsrs	r3, r3, #9
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	8952      	ldrh	r2, [r2, #10]
 80078e2:	3a01      	subs	r2, #1
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d17a      	bne.n	80079e0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7ff fc83 	bl	80071fe <get_fat>
 80078f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d801      	bhi.n	8007904 <dir_next+0x8c>
 8007900:	2302      	movs	r3, #2
 8007902:	e07a      	b.n	80079fa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800790a:	d101      	bne.n	8007910 <dir_next+0x98>
 800790c:	2301      	movs	r3, #1
 800790e:	e074      	b.n	80079fa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	429a      	cmp	r2, r3
 8007918:	d358      	bcc.n	80079cc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	61da      	str	r2, [r3, #28]
 8007926:	2304      	movs	r3, #4
 8007928:	e067      	b.n	80079fa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7ff fe59 	bl	80075ea <create_chain>
 8007938:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <dir_next+0xcc>
 8007940:	2307      	movs	r3, #7
 8007942:	e05a      	b.n	80079fa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <dir_next+0xd6>
 800794a:	2302      	movs	r3, #2
 800794c:	e055      	b.n	80079fa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007954:	d101      	bne.n	800795a <dir_next+0xe2>
 8007956:	2301      	movs	r3, #1
 8007958:	e04f      	b.n	80079fa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fb50 	bl	8007000 <sync_window>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <dir_next+0xf2>
 8007966:	2301      	movs	r3, #1
 8007968:	e047      	b.n	80079fa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3330      	adds	r3, #48	@ 0x30
 800796e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff f979 	bl	8006c6c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	6979      	ldr	r1, [r7, #20]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fc1d 	bl	80071c0 <clust2sect>
 8007986:	4602      	mov	r2, r0
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800798c:	e012      	b.n	80079b4 <dir_next+0x13c>
						fs->wflag = 1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fb33 	bl	8007000 <sync_window>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <dir_next+0x12c>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e02a      	b.n	80079fa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	3301      	adds	r3, #1
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	895b      	ldrh	r3, [r3, #10]
 80079b8:	461a      	mov	r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4293      	cmp	r3, r2
 80079be:	d3e6      	bcc.n	800798e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079d2:	6979      	ldr	r1, [r7, #20]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff fbf3 	bl	80071c0 <clust2sect>
 80079da:	4602      	mov	r2, r0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	441a      	add	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a12:	2100      	movs	r1, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff feb4 	bl	8007782 <dir_sdi>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d12b      	bne.n	8007a7c <dir_alloc+0x7a>
		n = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fb2a 	bl	8007088 <move_window>
 8007a34:	4603      	mov	r3, r0
 8007a36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d11d      	bne.n	8007a7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2be5      	cmp	r3, #229	@ 0xe5
 8007a46:	d004      	beq.n	8007a52 <dir_alloc+0x50>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3301      	adds	r3, #1
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d102      	bne.n	8007a66 <dir_alloc+0x64>
 8007a60:	e00c      	b.n	8007a7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a62:	2300      	movs	r3, #0
 8007a64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a66:	2101      	movs	r1, #1
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff05 	bl	8007878 <dir_next>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0d7      	beq.n	8007a28 <dir_alloc+0x26>
 8007a78:	e000      	b.n	8007a7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d101      	bne.n	8007a86 <dir_alloc+0x84>
 8007a82:	2307      	movs	r3, #7
 8007a84:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	331a      	adds	r3, #26
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f840 	bl	8006b24 <ld_word>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d109      	bne.n	8007ac4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff f835 	bl	8006b24 <ld_word>
 8007aba:	4603      	mov	r3, r0
 8007abc:	041b      	lsls	r3, r3, #16
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	331a      	adds	r3, #26
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	b292      	uxth	r2, r2
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff f859 	bl	8006b9c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d109      	bne.n	8007b06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f103 0214 	add.w	r2, r3, #20
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	0c1b      	lsrs	r3, r3, #16
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f7ff f84b 	bl	8006b9c <st_word>
	}
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff fe2f 	bl	8007782 <dir_sdi>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <dir_find+0x24>
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	e03e      	b.n	8007bb0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6938      	ldr	r0, [r7, #16]
 8007b3a:	f7ff faa5 	bl	8007088 <move_window>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d12f      	bne.n	8007ba8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <dir_find+0x4e>
 8007b56:	2304      	movs	r3, #4
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e028      	b.n	8007bae <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	330b      	adds	r3, #11
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	330b      	adds	r3, #11
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <dir_find+0x86>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a18      	ldr	r0, [r3, #32]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3324      	adds	r3, #36	@ 0x24
 8007b86:	220b      	movs	r2, #11
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7ff f88a 	bl	8006ca2 <mem_cmp>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fe6e 	bl	8007878 <dir_next>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c5      	beq.n	8007b32 <dir_find+0x24>
 8007ba6:	e002      	b.n	8007bae <dir_find+0xa0>
		if (res != FR_OK) break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007bac:	bf00      	nop

	return res;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ff1a 	bl	8007a02 <dir_alloc>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11c      	bne.n	8007c12 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	68b8      	ldr	r0, [r7, #8]
 8007be0:	f7ff fa52 	bl	8007088 <move_window>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d111      	bne.n	8007c12 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f838 	bl	8006c6c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a18      	ldr	r0, [r3, #32]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3324      	adds	r3, #36	@ 0x24
 8007c04:	220b      	movs	r2, #11
 8007c06:	4619      	mov	r1, r3
 8007c08:	f7ff f80f 	bl	8006c2a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3324      	adds	r3, #36	@ 0x24
 8007c30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c32:	220b      	movs	r2, #11
 8007c34:	2120      	movs	r1, #32
 8007c36:	68b8      	ldr	r0, [r7, #8]
 8007c38:	f7ff f818 	bl	8006c6c <mem_set>
	si = i = 0; ni = 8;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	2308      	movs	r3, #8
 8007c46:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	61fa      	str	r2, [r7, #28]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c56:	7efb      	ldrb	r3, [r7, #27]
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d94e      	bls.n	8007cfa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c5c:	7efb      	ldrb	r3, [r7, #27]
 8007c5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c60:	d006      	beq.n	8007c70 <create_name+0x54>
 8007c62:	7efb      	ldrb	r3, [r7, #27]
 8007c64:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c66:	d110      	bne.n	8007c8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c68:	e002      	b.n	8007c70 <create_name+0x54>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c7a:	d0f6      	beq.n	8007c6a <create_name+0x4e>
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c86:	d0f0      	beq.n	8007c6a <create_name+0x4e>
			break;
 8007c88:	e038      	b.n	8007cfc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007c8a:	7efb      	ldrb	r3, [r7, #27]
 8007c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c8e:	d003      	beq.n	8007c98 <create_name+0x7c>
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d30c      	bcc.n	8007cb2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b0b      	cmp	r3, #11
 8007c9c:	d002      	beq.n	8007ca4 <create_name+0x88>
 8007c9e:	7efb      	ldrb	r3, [r7, #27]
 8007ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ca2:	d001      	beq.n	8007ca8 <create_name+0x8c>
 8007ca4:	2306      	movs	r3, #6
 8007ca6:	e044      	b.n	8007d32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007ca8:	2308      	movs	r3, #8
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	230b      	movs	r3, #11
 8007cae:	617b      	str	r3, [r7, #20]
			continue;
 8007cb0:	e022      	b.n	8007cf8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007cb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da04      	bge.n	8007cc4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007cba:	7efb      	ldrb	r3, [r7, #27]
 8007cbc:	3b80      	subs	r3, #128	@ 0x80
 8007cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007d3c <create_name+0x120>)
 8007cc0:	5cd3      	ldrb	r3, [r2, r3]
 8007cc2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cc4:	7efb      	ldrb	r3, [r7, #27]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	481d      	ldr	r0, [pc, #116]	@ (8007d40 <create_name+0x124>)
 8007cca:	f7ff f811 	bl	8006cf0 <chk_chr>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <create_name+0xbc>
 8007cd4:	2306      	movs	r3, #6
 8007cd6:	e02c      	b.n	8007d32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007cd8:	7efb      	ldrb	r3, [r7, #27]
 8007cda:	2b60      	cmp	r3, #96	@ 0x60
 8007cdc:	d905      	bls.n	8007cea <create_name+0xce>
 8007cde:	7efb      	ldrb	r3, [r7, #27]
 8007ce0:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ce2:	d802      	bhi.n	8007cea <create_name+0xce>
 8007ce4:	7efb      	ldrb	r3, [r7, #27]
 8007ce6:	3b20      	subs	r3, #32
 8007ce8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	613a      	str	r2, [r7, #16]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	7efa      	ldrb	r2, [r7, #27]
 8007cf6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007cf8:	e7a6      	b.n	8007c48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007cfa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	441a      	add	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <create_name+0xf4>
 8007d0c:	2306      	movs	r3, #6
 8007d0e:	e010      	b.n	8007d32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2be5      	cmp	r3, #229	@ 0xe5
 8007d16:	d102      	bne.n	8007d1e <create_name+0x102>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2205      	movs	r2, #5
 8007d1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d1e:	7efb      	ldrb	r3, [r7, #27]
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d801      	bhi.n	8007d28 <create_name+0x10c>
 8007d24:	2204      	movs	r2, #4
 8007d26:	e000      	b.n	8007d2a <create_name+0x10e>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	330b      	adds	r3, #11
 8007d2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	0800d078 	.word	0x0800d078
 8007d40:	0800d01c 	.word	0x0800d01c

08007d44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d58:	e002      	b.n	8007d60 <follow_path+0x1c>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d66:	d0f8      	beq.n	8007d5a <follow_path+0x16>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d6e:	d0f4      	beq.n	8007d5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2200      	movs	r2, #0
 8007d74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b1f      	cmp	r3, #31
 8007d7c:	d80a      	bhi.n	8007d94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007d86:	2100      	movs	r1, #0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fcfa 	bl	8007782 <dir_sdi>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]
 8007d92:	e043      	b.n	8007e1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d94:	463b      	mov	r3, r7
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff3f 	bl	8007c1c <create_name>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d134      	bne.n	8007e12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff feb0 	bl	8007b0e <dir_find>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007db8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d127      	bne.n	8007e16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d122      	bne.n	8007e16 <follow_path+0xd2>
 8007dd0:	2305      	movs	r3, #5
 8007dd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dd4:	e01f      	b.n	8007e16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11c      	bne.n	8007e1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	799b      	ldrb	r3, [r3, #6]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007dec:	2305      	movs	r3, #5
 8007dee:	75fb      	strb	r3, [r7, #23]
 8007df0:	e014      	b.n	8007e1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e00:	4413      	add	r3, r2
 8007e02:	4619      	mov	r1, r3
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff fe43 	bl	8007a90 <ld_clust>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e10:	e7c0      	b.n	8007d94 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <follow_path+0xd8>
				break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e1a:	bf00      	nop
			}
		}
	}

	return res;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b087      	sub	sp, #28
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d031      	beq.n	8007ea0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e002      	b.n	8007e4a <get_ldnumber+0x24>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	3301      	adds	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d903      	bls.n	8007e5a <get_ldnumber+0x34>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e58:	d1f4      	bne.n	8007e44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e60:	d11c      	bne.n	8007e9c <get_ldnumber+0x76>
			tp = *path;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	60fa      	str	r2, [r7, #12]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	3b30      	subs	r3, #48	@ 0x30
 8007e72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	d80e      	bhi.n	8007e98 <get_ldnumber+0x72>
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d10a      	bne.n	8007e98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <get_ldnumber+0x72>
					vol = (int)i;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	e002      	b.n	8007ea2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ea0:	693b      	ldr	r3, [r7, #16]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	70da      	strb	r2, [r3, #3]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff f8dc 	bl	8007088 <move_window>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <check_fs+0x2a>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	e038      	b.n	8007f4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3330      	adds	r3, #48	@ 0x30
 8007ede:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fe1e 	bl	8006b24 <ld_word>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <check_fs+0x48>
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e029      	b.n	8007f4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007efe:	2be9      	cmp	r3, #233	@ 0xe9
 8007f00:	d009      	beq.n	8007f16 <check_fs+0x66>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f08:	2beb      	cmp	r3, #235	@ 0xeb
 8007f0a:	d11e      	bne.n	8007f4a <check_fs+0x9a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007f12:	2b90      	cmp	r3, #144	@ 0x90
 8007f14:	d119      	bne.n	8007f4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3330      	adds	r3, #48	@ 0x30
 8007f1a:	3336      	adds	r3, #54	@ 0x36
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fe1a 	bl	8006b56 <ld_dword>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f28:	4a0a      	ldr	r2, [pc, #40]	@ (8007f54 <check_fs+0xa4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <check_fs+0x82>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e00c      	b.n	8007f4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3330      	adds	r3, #48	@ 0x30
 8007f36:	3352      	adds	r3, #82	@ 0x52
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fe0c 	bl	8006b56 <ld_dword>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4a05      	ldr	r2, [pc, #20]	@ (8007f58 <check_fs+0xa8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d101      	bne.n	8007f4a <check_fs+0x9a>
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f4a:	2302      	movs	r3, #2
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	00544146 	.word	0x00544146
 8007f58:	33544146 	.word	0x33544146

08007f5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b096      	sub	sp, #88	@ 0x58
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff ff58 	bl	8007e26 <get_ldnumber>
 8007f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da01      	bge.n	8007f82 <find_volume+0x26>
 8007f7e:	230b      	movs	r3, #11
 8007f80:	e22d      	b.n	80083de <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f82:	4aa1      	ldr	r2, [pc, #644]	@ (8008208 <find_volume+0x2ac>)
 8007f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <find_volume+0x3a>
 8007f92:	230c      	movs	r3, #12
 8007f94:	e223      	b.n	80083de <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fd17 	bl	80069e4 <disk_status>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <find_volume+0x82>
 8007fce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fda:	230a      	movs	r3, #10
 8007fdc:	e1ff      	b.n	80083de <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e1fd      	b.n	80083de <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fd0f 	bl	8006a18 <disk_initialize>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008000:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800800c:	2303      	movs	r3, #3
 800800e:	e1e6      	b.n	80083de <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <find_volume+0xca>
 8008016:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008022:	230a      	movs	r3, #10
 8008024:	e1db      	b.n	80083de <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800802a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800802c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800802e:	f7ff ff3f 	bl	8007eb0 <check_fs>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008038:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800803c:	2b02      	cmp	r3, #2
 800803e:	d149      	bne.n	80080d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008040:	2300      	movs	r3, #0
 8008042:	643b      	str	r3, [r7, #64]	@ 0x40
 8008044:	e01e      	b.n	8008084 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800804c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008054:	4413      	add	r3, r2
 8008056:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	3304      	adds	r3, #4
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <find_volume+0x114>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	3308      	adds	r3, #8
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fd75 	bl	8006b56 <ld_dword>
 800806c:	4602      	mov	r2, r0
 800806e:	e000      	b.n	8008072 <find_volume+0x116>
 8008070:	2200      	movs	r2, #0
 8008072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	3358      	adds	r3, #88	@ 0x58
 8008078:	443b      	add	r3, r7
 800807a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	3301      	adds	r3, #1
 8008082:	643b      	str	r3, [r7, #64]	@ 0x40
 8008084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008086:	2b03      	cmp	r3, #3
 8008088:	d9dd      	bls.n	8008046 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800808a:	2300      	movs	r3, #0
 800808c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800808e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <find_volume+0x13e>
 8008094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008096:	3b01      	subs	r3, #1
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800809a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	3358      	adds	r3, #88	@ 0x58
 80080a0:	443b      	add	r3, r7
 80080a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80080a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <find_volume+0x15e>
 80080ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080b2:	f7ff fefd 	bl	8007eb0 <check_fs>
 80080b6:	4603      	mov	r3, r0
 80080b8:	e000      	b.n	80080bc <find_volume+0x160>
 80080ba:	2303      	movs	r3, #3
 80080bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d905      	bls.n	80080d4 <find_volume+0x178>
 80080c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ca:	3301      	adds	r3, #1
 80080cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d9e2      	bls.n	800809a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d101      	bne.n	80080e0 <find_volume+0x184>
 80080dc:	2301      	movs	r3, #1
 80080de:	e17e      	b.n	80083de <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d901      	bls.n	80080ec <find_volume+0x190>
 80080e8:	230d      	movs	r3, #13
 80080ea:	e178      	b.n	80083de <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	3330      	adds	r3, #48	@ 0x30
 80080f0:	330b      	adds	r3, #11
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fd16 	bl	8006b24 <ld_word>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fe:	d001      	beq.n	8008104 <find_volume+0x1a8>
 8008100:	230d      	movs	r3, #13
 8008102:	e16c      	b.n	80083de <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	3330      	adds	r3, #48	@ 0x30
 8008108:	3316      	adds	r3, #22
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fd0a 	bl	8006b24 <ld_word>
 8008110:	4603      	mov	r3, r0
 8008112:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <find_volume+0x1cc>
 800811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811c:	3330      	adds	r3, #48	@ 0x30
 800811e:	3324      	adds	r3, #36	@ 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fd18 	bl	8006b56 <ld_dword>
 8008126:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800812c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d005      	beq.n	800814c <find_volume+0x1f0>
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	789b      	ldrb	r3, [r3, #2]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d001      	beq.n	800814c <find_volume+0x1f0>
 8008148:	230d      	movs	r3, #13
 800814a:	e148      	b.n	80083de <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	461a      	mov	r2, r3
 8008152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008160:	461a      	mov	r2, r3
 8008162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008164:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <find_volume+0x224>
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	895b      	ldrh	r3, [r3, #10]
 8008172:	461a      	mov	r2, r3
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	895b      	ldrh	r3, [r3, #10]
 8008178:	3b01      	subs	r3, #1
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <find_volume+0x228>
 8008180:	230d      	movs	r3, #13
 8008182:	e12c      	b.n	80083de <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	3330      	adds	r3, #48	@ 0x30
 8008188:	3311      	adds	r3, #17
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fcca 	bl	8006b24 <ld_word>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	891b      	ldrh	r3, [r3, #8]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <find_volume+0x24e>
 80081a6:	230d      	movs	r3, #13
 80081a8:	e119      	b.n	80083de <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	3330      	adds	r3, #48	@ 0x30
 80081ae:	3313      	adds	r3, #19
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fcb7 	bl	8006b24 <ld_word>
 80081b6:	4603      	mov	r3, r0
 80081b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <find_volume+0x272>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	3330      	adds	r3, #48	@ 0x30
 80081c4:	3320      	adds	r3, #32
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fcc5 	bl	8006b56 <ld_dword>
 80081cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d0:	3330      	adds	r3, #48	@ 0x30
 80081d2:	330e      	adds	r3, #14
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fca5 	bl	8006b24 <ld_word>
 80081da:	4603      	mov	r3, r0
 80081dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <find_volume+0x28c>
 80081e4:	230d      	movs	r3, #13
 80081e6:	e0fa      	b.n	80083de <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80081ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ec:	4413      	add	r3, r2
 80081ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f0:	8912      	ldrh	r2, [r2, #8]
 80081f2:	0912      	lsrs	r2, r2, #4
 80081f4:	b292      	uxth	r2, r2
 80081f6:	4413      	add	r3, r2
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	429a      	cmp	r2, r3
 8008200:	d204      	bcs.n	800820c <find_volume+0x2b0>
 8008202:	230d      	movs	r3, #13
 8008204:	e0eb      	b.n	80083de <find_volume+0x482>
 8008206:	bf00      	nop
 8008208:	200003c8 	.word	0x200003c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800820c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008214:	8952      	ldrh	r2, [r2, #10]
 8008216:	fbb3 f3f2 	udiv	r3, r3, r2
 800821a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <find_volume+0x2ca>
 8008222:	230d      	movs	r3, #13
 8008224:	e0db      	b.n	80083de <find_volume+0x482>
		fmt = FS_FAT32;
 8008226:	2303      	movs	r3, #3
 8008228:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008232:	4293      	cmp	r3, r2
 8008234:	d802      	bhi.n	800823c <find_volume+0x2e0>
 8008236:	2302      	movs	r3, #2
 8008238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008242:	4293      	cmp	r3, r2
 8008244:	d802      	bhi.n	800824c <find_volume+0x2f0>
 8008246:	2301      	movs	r3, #1
 8008248:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008258:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800825a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800825c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825e:	441a      	add	r2, r3
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008264:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	441a      	add	r2, r3
 800826a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800826e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008272:	2b03      	cmp	r3, #3
 8008274:	d11e      	bne.n	80082b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	3330      	adds	r3, #48	@ 0x30
 800827a:	332a      	adds	r3, #42	@ 0x2a
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe fc51 	bl	8006b24 <ld_word>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <find_volume+0x330>
 8008288:	230d      	movs	r3, #13
 800828a:	e0a8      	b.n	80083de <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800828c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828e:	891b      	ldrh	r3, [r3, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <find_volume+0x33c>
 8008294:	230d      	movs	r3, #13
 8008296:	e0a2      	b.n	80083de <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	3330      	adds	r3, #48	@ 0x30
 800829c:	332c      	adds	r3, #44	@ 0x2c
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fc59 	bl	8006b56 <ld_dword>
 80082a4:	4602      	mov	r2, r0
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b2:	e01f      	b.n	80082f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	891b      	ldrh	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <find_volume+0x364>
 80082bc:	230d      	movs	r3, #13
 80082be:	e08e      	b.n	80083de <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	6a1a      	ldr	r2, [r3, #32]
 80082c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c6:	441a      	add	r2, r3
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d103      	bne.n	80082dc <find_volume+0x380>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	e00a      	b.n	80082f2 <find_volume+0x396>
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	4613      	mov	r3, r2
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	4413      	add	r3, r2
 80082e6:	085a      	lsrs	r2, r3, #1
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80082fe:	0a5b      	lsrs	r3, r3, #9
 8008300:	429a      	cmp	r2, r3
 8008302:	d201      	bcs.n	8008308 <find_volume+0x3ac>
 8008304:	230d      	movs	r3, #13
 8008306:	e06a      	b.n	80083de <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800830e:	611a      	str	r2, [r3, #16]
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008316:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831a:	2280      	movs	r2, #128	@ 0x80
 800831c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800831e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008322:	2b03      	cmp	r3, #3
 8008324:	d149      	bne.n	80083ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	3330      	adds	r3, #48	@ 0x30
 800832a:	3330      	adds	r3, #48	@ 0x30
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fbf9 	bl	8006b24 <ld_word>
 8008332:	4603      	mov	r3, r0
 8008334:	2b01      	cmp	r3, #1
 8008336:	d140      	bne.n	80083ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800833a:	3301      	adds	r3, #1
 800833c:	4619      	mov	r1, r3
 800833e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008340:	f7fe fea2 	bl	8007088 <move_window>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d137      	bne.n	80083ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	2200      	movs	r2, #0
 800834e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	3330      	adds	r3, #48	@ 0x30
 8008354:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fbe3 	bl	8006b24 <ld_word>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008366:	429a      	cmp	r2, r3
 8008368:	d127      	bne.n	80083ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	3330      	adds	r3, #48	@ 0x30
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fbf1 	bl	8006b56 <ld_dword>
 8008374:	4603      	mov	r3, r0
 8008376:	4a1c      	ldr	r2, [pc, #112]	@ (80083e8 <find_volume+0x48c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d11e      	bne.n	80083ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800837c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837e:	3330      	adds	r3, #48	@ 0x30
 8008380:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fbe6 	bl	8006b56 <ld_dword>
 800838a:	4603      	mov	r3, r0
 800838c:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <find_volume+0x490>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d113      	bne.n	80083ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	3330      	adds	r3, #48	@ 0x30
 8008396:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fbdb 	bl	8006b56 <ld_dword>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	3330      	adds	r3, #48	@ 0x30
 80083aa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fbd1 	bl	8006b56 <ld_dword>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80083c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083c2:	4b0b      	ldr	r3, [pc, #44]	@ (80083f0 <find_volume+0x494>)
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <find_volume+0x494>)
 80083cc:	801a      	strh	r2, [r3, #0]
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <find_volume+0x494>)
 80083d0:	881a      	ldrh	r2, [r3, #0]
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083d8:	f7fe fdee 	bl	8006fb8 <clear_lock>
#endif
	return FR_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3758      	adds	r7, #88	@ 0x58
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	41615252 	.word	0x41615252
 80083ec:	61417272 	.word	0x61417272
 80083f0:	200003cc 	.word	0x200003cc

080083f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083fe:	2309      	movs	r3, #9
 8008400:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01c      	beq.n	8008442 <validate+0x4e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <validate+0x4e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d013      	beq.n	8008442 <validate+0x4e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	889a      	ldrh	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	88db      	ldrh	r3, [r3, #6]
 8008424:	429a      	cmp	r2, r3
 8008426:	d10c      	bne.n	8008442 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fad8 	bl	80069e4 <disk_status>
 8008434:	4603      	mov	r3, r0
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <validate+0x4e>
			res = FR_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <validate+0x5a>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	e000      	b.n	8008450 <validate+0x5c>
 800844e:	2300      	movs	r3, #0
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	6013      	str	r3, [r2, #0]
	return res;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008472:	f107 0310 	add.w	r3, r7, #16
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff fcd5 	bl	8007e26 <get_ldnumber>
 800847c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da01      	bge.n	8008488 <f_mount+0x28>
 8008484:	230b      	movs	r3, #11
 8008486:	e02b      	b.n	80084e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <f_mount+0x88>)
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008490:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008498:	69b8      	ldr	r0, [r7, #24]
 800849a:	f7fe fd8d 	bl	8006fb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	490d      	ldr	r1, [pc, #52]	@ (80084e8 <f_mount+0x88>)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <f_mount+0x66>
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d001      	beq.n	80084ca <f_mount+0x6a>
 80084c6:	2300      	movs	r3, #0
 80084c8:	e00a      	b.n	80084e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084ca:	f107 010c 	add.w	r1, r7, #12
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	2200      	movs	r2, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff fd41 	bl	8007f5c <find_volume>
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084de:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	200003c8 	.word	0x200003c8

080084ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b098      	sub	sp, #96	@ 0x60
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <f_open+0x18>
 8008500:	2309      	movs	r3, #9
 8008502:	e1a9      	b.n	8008858 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800850a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800850c:	79fa      	ldrb	r2, [r7, #7]
 800850e:	f107 0110 	add.w	r1, r7, #16
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fd20 	bl	8007f5c <find_volume>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008522:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008526:	2b00      	cmp	r3, #0
 8008528:	f040 818d 	bne.w	8008846 <f_open+0x35a>
		dj.obj.fs = fs;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	f107 0314 	add.w	r3, r7, #20
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fc03 	bl	8007d44 <follow_path>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008544:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008548:	2b00      	cmp	r3, #0
 800854a:	d118      	bne.n	800857e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800854c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008550:	b25b      	sxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	da03      	bge.n	800855e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008556:	2306      	movs	r3, #6
 8008558:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800855c:	e00f      	b.n	800857e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b01      	cmp	r3, #1
 8008562:	bf8c      	ite	hi
 8008564:	2301      	movhi	r3, #1
 8008566:	2300      	movls	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fbd8 	bl	8006d28 <chk_lock>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	f003 031c 	and.w	r3, r3, #28
 8008584:	2b00      	cmp	r3, #0
 8008586:	d07f      	beq.n	8008688 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008588:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800858c:	2b00      	cmp	r3, #0
 800858e:	d017      	beq.n	80085c0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008590:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008594:	2b04      	cmp	r3, #4
 8008596:	d10e      	bne.n	80085b6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008598:	f7fe fc22 	bl	8006de0 <enq_lock>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d006      	beq.n	80085b0 <f_open+0xc4>
 80085a2:	f107 0314 	add.w	r3, r7, #20
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fb06 	bl	8007bb8 <dir_register>
 80085ac:	4603      	mov	r3, r0
 80085ae:	e000      	b.n	80085b2 <f_open+0xc6>
 80085b0:	2312      	movs	r3, #18
 80085b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	f043 0308 	orr.w	r3, r3, #8
 80085bc:	71fb      	strb	r3, [r7, #7]
 80085be:	e010      	b.n	80085e2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085c0:	7ebb      	ldrb	r3, [r7, #26]
 80085c2:	f003 0311 	and.w	r3, r3, #17
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <f_open+0xe6>
					res = FR_DENIED;
 80085ca:	2307      	movs	r3, #7
 80085cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80085d0:	e007      	b.n	80085e2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <f_open+0xf6>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d168      	bne.n	80086bc <f_open+0x1d0>
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d063      	beq.n	80086bc <f_open+0x1d0>
				dw = GET_FATTIME();
 80085f4:	f7fd fc88 	bl	8005f08 <get_fattime>
 80085f8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fc:	330e      	adds	r3, #14
 80085fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fae6 	bl	8006bd2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	3316      	adds	r3, #22
 800860a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fae0 	bl	8006bd2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008614:	330b      	adds	r3, #11
 8008616:	2220      	movs	r2, #32
 8008618:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fa35 	bl	8007a90 <ld_clust>
 8008626:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800862c:	2200      	movs	r2, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fa4d 	bl	8007ace <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	331c      	adds	r3, #28
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fac9 	bl	8006bd2 <st_dword>
					fs->wflag = 1;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2201      	movs	r2, #1
 8008644:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d037      	beq.n	80086bc <f_open+0x1d0>
						dw = fs->winsect;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008652:	f107 0314 	add.w	r3, r7, #20
 8008656:	2200      	movs	r2, #0
 8008658:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe ff60 	bl	8007520 <remove_chain>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008666:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800866a:	2b00      	cmp	r3, #0
 800866c:	d126      	bne.n	80086bc <f_open+0x1d0>
							res = move_window(fs, dw);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fd08 	bl	8007088 <move_window>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008682:	3a01      	subs	r2, #1
 8008684:	60da      	str	r2, [r3, #12]
 8008686:	e019      	b.n	80086bc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008688:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800868c:	2b00      	cmp	r3, #0
 800868e:	d115      	bne.n	80086bc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008690:	7ebb      	ldrb	r3, [r7, #26]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800869a:	2304      	movs	r3, #4
 800869c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80086a0:	e00c      	b.n	80086bc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <f_open+0x1d0>
 80086ac:	7ebb      	ldrb	r3, [r7, #26]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <f_open+0x1d0>
						res = FR_DENIED;
 80086b6:	2307      	movs	r3, #7
 80086b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80086bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d126      	bne.n	8008712 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80086de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	bf8c      	ite	hi
 80086ea:	2301      	movhi	r3, #1
 80086ec:	2300      	movls	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	f107 0314 	add.w	r3, r7, #20
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fb93 	bl	8006e24 <inc_lock>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <f_open+0x226>
 800870c:	2302      	movs	r3, #2
 800870e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008716:	2b00      	cmp	r3, #0
 8008718:	f040 8095 	bne.w	8008846 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f9b4 	bl	8007a90 <ld_clust>
 8008728:	4602      	mov	r2, r0
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800872e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008730:	331c      	adds	r3, #28
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fa0f 	bl	8006b56 <ld_dword>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	88da      	ldrh	r2, [r3, #6]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	79fa      	ldrb	r2, [r7, #7]
 8008756:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3330      	adds	r3, #48	@ 0x30
 800876e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fa79 	bl	8006c6c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b00      	cmp	r3, #0
 8008782:	d060      	beq.n	8008846 <f_open+0x35a>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05c      	beq.n	8008846 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	895b      	ldrh	r3, [r3, #10]
 8008798:	025b      	lsls	r3, r3, #9
 800879a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80087a8:	e016      	b.n	80087d8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fd25 	bl	80071fe <get_fat>
 80087b4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80087b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d802      	bhi.n	80087c2 <f_open+0x2d6>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087c8:	d102      	bne.n	80087d0 <f_open+0x2e4>
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80087d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <f_open+0x2fc>
 80087e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d8e0      	bhi.n	80087aa <f_open+0x2be>
				}
				fp->clust = clst;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d127      	bne.n	8008846 <f_open+0x35a>
 80087f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d022      	beq.n	8008846 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fcdb 	bl	80071c0 <clust2sect>
 800880a:	6478      	str	r0, [r7, #68]	@ 0x44
 800880c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <f_open+0x32e>
						res = FR_INT_ERR;
 8008812:	2302      	movs	r3, #2
 8008814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008818:	e015      	b.n	8008846 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800881a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800881c:	0a5a      	lsrs	r2, r3, #9
 800881e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	7858      	ldrb	r0, [r3, #1]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	2301      	movs	r3, #1
 8008836:	f7fe f917 	bl	8006a68 <disk_read>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <f_open+0x35a>
 8008840:	2301      	movs	r3, #1
 8008842:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <f_open+0x368>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008854:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008858:	4618      	mov	r0, r3
 800885a:	3760      	adds	r7, #96	@ 0x60
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08e      	sub	sp, #56	@ 0x38
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f107 0214 	add.w	r2, r7, #20
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fdb7 	bl	80083f4 <validate>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800888c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008890:	2b00      	cmp	r3, #0
 8008892:	d107      	bne.n	80088a4 <f_read+0x44>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	7d5b      	ldrb	r3, [r3, #21]
 8008898:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800889c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <f_read+0x4a>
 80088a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088a8:	e115      	b.n	8008ad6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7d1b      	ldrb	r3, [r3, #20]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <f_read+0x5a>
 80088b6:	2307      	movs	r3, #7
 80088b8:	e10d      	b.n	8008ad6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	f240 80fe 	bls.w	8008acc <f_read+0x26c>
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80088d4:	e0fa      	b.n	8008acc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 80c6 	bne.w	8008a70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	0a5b      	lsrs	r3, r3, #9
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	8952      	ldrh	r2, [r2, #10]
 80088ee:	3a01      	subs	r2, #1
 80088f0:	4013      	ands	r3, r2
 80088f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d12f      	bne.n	800895a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	633b      	str	r3, [r7, #48]	@ 0x30
 8008908:	e013      	b.n	8008932 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	4619      	mov	r1, r3
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7fe fefe 	bl	800771a <clmt_clust>
 800891e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008920:	e007      	b.n	8008932 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fc67 	bl	80071fe <get_fat>
 8008930:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2b01      	cmp	r3, #1
 8008936:	d804      	bhi.n	8008942 <f_read+0xe2>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2202      	movs	r2, #2
 800893c:	755a      	strb	r2, [r3, #21]
 800893e:	2302      	movs	r3, #2
 8008940:	e0c9      	b.n	8008ad6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008948:	d104      	bne.n	8008954 <f_read+0xf4>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	755a      	strb	r2, [r3, #21]
 8008950:	2301      	movs	r3, #1
 8008952:	e0c0      	b.n	8008ad6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008958:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	4619      	mov	r1, r3
 8008962:	4610      	mov	r0, r2
 8008964:	f7fe fc2c 	bl	80071c0 <clust2sect>
 8008968:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <f_read+0x11a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2202      	movs	r2, #2
 8008974:	755a      	strb	r2, [r3, #21]
 8008976:	2302      	movs	r3, #2
 8008978:	e0ad      	b.n	8008ad6 <f_read+0x276>
			sect += csect;
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d039      	beq.n	8008a02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008992:	4413      	add	r3, r2
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	8952      	ldrh	r2, [r2, #10]
 8008998:	4293      	cmp	r3, r2
 800899a:	d905      	bls.n	80089a8 <f_read+0x148>
					cc = fs->csize - csect;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	895b      	ldrh	r3, [r3, #10]
 80089a0:	461a      	mov	r2, r3
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	7858      	ldrb	r0, [r3, #1]
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089b2:	f7fe f859 	bl	8006a68 <disk_read>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <f_read+0x166>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	755a      	strb	r2, [r3, #21]
 80089c2:	2301      	movs	r3, #1
 80089c4:	e087      	b.n	8008ad6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	7d1b      	ldrb	r3, [r3, #20]
 80089ca:	b25b      	sxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da14      	bge.n	80089fa <f_read+0x19a>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089da:	429a      	cmp	r2, r3
 80089dc:	d90d      	bls.n	80089fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	025b      	lsls	r3, r3, #9
 80089e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ea:	18d0      	adds	r0, r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3330      	adds	r3, #48	@ 0x30
 80089f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7fe f918 	bl	8006c2a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	025b      	lsls	r3, r3, #9
 80089fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008a00:	e050      	b.n	8008aa4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d02e      	beq.n	8008a6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7d1b      	ldrb	r3, [r3, #20]
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da18      	bge.n	8008a48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	7858      	ldrb	r0, [r3, #1]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	2301      	movs	r3, #1
 8008a26:	f7fe f83f 	bl	8006aa8 <disk_write>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <f_read+0x1da>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	755a      	strb	r2, [r3, #21]
 8008a36:	2301      	movs	r3, #1
 8008a38:	e04d      	b.n	8008ad6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	7d1b      	ldrb	r3, [r3, #20]
 8008a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	7858      	ldrb	r0, [r3, #1]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a52:	2301      	movs	r3, #1
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	f7fe f807 	bl	8006a68 <disk_read>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <f_read+0x20a>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	755a      	strb	r2, [r3, #21]
 8008a66:	2301      	movs	r3, #1
 8008a68:	e035      	b.n	8008ad6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a78:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d901      	bls.n	8008a8a <f_read+0x22a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a98:	4413      	add	r3, r2
 8008a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008aa0:	f7fe f8c3 	bl	8006c2a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	4413      	add	r3, r2
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	441a      	add	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	619a      	str	r2, [r3, #24]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	441a      	add	r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f af01 	bne.w	80088d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3738      	adds	r7, #56	@ 0x38
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b08c      	sub	sp, #48	@ 0x30
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f107 0210 	add.w	r2, r7, #16
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fc78 	bl	80083f4 <validate>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <f_write+0x44>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	7d5b      	ldrb	r3, [r3, #21]
 8008b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <f_write+0x4a>
 8008b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b26:	e14b      	b.n	8008dc0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	7d1b      	ldrb	r3, [r3, #20]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <f_write+0x5a>
 8008b34:	2307      	movs	r3, #7
 8008b36:	e143      	b.n	8008dc0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	f080 812d 	bcs.w	8008da4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b52:	e127      	b.n	8008da4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80e3 	bne.w	8008d28 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	0a5b      	lsrs	r3, r3, #9
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	8952      	ldrh	r2, [r2, #10]
 8008b6c:	3a01      	subs	r2, #1
 8008b6e:	4013      	ands	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d143      	bne.n	8008c00 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10c      	bne.n	8008b9a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d11a      	bne.n	8008bc2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fd2a 	bl	80075ea <create_chain>
 8008b96:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008b98:	e013      	b.n	8008bc2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7fe fdb6 	bl	800771a <clmt_clust>
 8008bae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008bb0:	e007      	b.n	8008bc2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7fe fd15 	bl	80075ea <create_chain>
 8008bc0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80f2 	beq.w	8008dae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d104      	bne.n	8008bda <f_write+0xfc>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	755a      	strb	r2, [r3, #21]
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	e0f2      	b.n	8008dc0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008be0:	d104      	bne.n	8008bec <f_write+0x10e>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	755a      	strb	r2, [r3, #21]
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0e9      	b.n	8008dc0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bf0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <f_write+0x122>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	b25b      	sxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da18      	bge.n	8008c3c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	7858      	ldrb	r0, [r3, #1]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f7fd ff45 	bl	8006aa8 <disk_write>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <f_write+0x150>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	755a      	strb	r2, [r3, #21]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e0c8      	b.n	8008dc0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	7d1b      	ldrb	r3, [r3, #20]
 8008c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe fabb 	bl	80071c0 <clust2sect>
 8008c4a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <f_write+0x17e>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2202      	movs	r2, #2
 8008c56:	755a      	strb	r2, [r3, #21]
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0b1      	b.n	8008dc0 <f_write+0x2e2>
			sect += csect;
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	4413      	add	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	0a5b      	lsrs	r3, r3, #9
 8008c68:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d03c      	beq.n	8008cea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	4413      	add	r3, r2
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	8952      	ldrh	r2, [r2, #10]
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d905      	bls.n	8008c8a <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	895b      	ldrh	r3, [r3, #10]
 8008c82:	461a      	mov	r2, r3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	7858      	ldrb	r0, [r3, #1]
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	f7fd ff08 	bl	8006aa8 <disk_write>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d004      	beq.n	8008ca8 <f_write+0x1ca>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	755a      	strb	r2, [r3, #21]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e08b      	b.n	8008dc0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	6a3a      	ldr	r2, [r7, #32]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d915      	bls.n	8008ce2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	025b      	lsls	r3, r3, #9
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f7fd ffab 	bl	8006c2a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	7d1b      	ldrb	r3, [r3, #20]
 8008cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	025b      	lsls	r3, r3, #9
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008ce8:	e03f      	b.n	8008d6a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d016      	beq.n	8008d22 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699a      	ldr	r2, [r3, #24]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d210      	bcs.n	8008d22 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	7858      	ldrb	r0, [r3, #1]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	f7fd feab 	bl	8006a68 <disk_read>
 8008d12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	755a      	strb	r2, [r3, #21]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e04e      	b.n	8008dc0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d30:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008d34:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d901      	bls.n	8008d42 <f_write+0x264>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d50:	4413      	add	r3, r2
 8008d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fd ff67 	bl	8006c2a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	7d1b      	ldrb	r3, [r3, #20]
 8008d60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	4413      	add	r3, r2
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	619a      	str	r2, [r3, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	bf38      	it	cc
 8008d8a:	461a      	movcc	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	60da      	str	r2, [r3, #12]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	441a      	add	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f47f aed4 	bne.w	8008b54 <f_write+0x76>
 8008dac:	e000      	b.n	8008db0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3730      	adds	r7, #48	@ 0x30
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f107 0208 	add.w	r2, r7, #8
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fb0b 	bl	80083f4 <validate>
 8008dde:	4603      	mov	r3, r0
 8008de0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d168      	bne.n	8008eba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7d1b      	ldrb	r3, [r3, #20]
 8008dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d062      	beq.n	8008eba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	7d1b      	ldrb	r3, [r3, #20]
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da15      	bge.n	8008e2a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	7858      	ldrb	r0, [r3, #1]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1a      	ldr	r2, [r3, #32]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f7fd fe4b 	bl	8006aa8 <disk_write>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <f_sync+0x54>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e04f      	b.n	8008ebc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7d1b      	ldrb	r3, [r3, #20]
 8008e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e2a:	f7fd f86d 	bl	8005f08 <get_fattime>
 8008e2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f7fe f925 	bl	8007088 <move_window>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d138      	bne.n	8008eba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	330b      	adds	r3, #11
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	330b      	adds	r3, #11
 8008e58:	f042 0220 	orr.w	r2, r2, #32
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	f7fe fe2f 	bl	8007ace <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f103 021c 	add.w	r2, r3, #28
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fd fea8 	bl	8006bd2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3316      	adds	r3, #22
 8008e86:	6939      	ldr	r1, [r7, #16]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fd fea2 	bl	8006bd2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3312      	adds	r3, #18
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd fe81 	bl	8006b9c <st_word>
					fs->wflag = 1;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe f91e 	bl	80070e4 <sync_fs>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7d1b      	ldrb	r3, [r3, #20]
 8008eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff ff7b 	bl	8008dc8 <f_sync>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d118      	bne.n	8008f0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f107 0208 	add.w	r2, r7, #8
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fa85 	bl	80083f4 <validate>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10c      	bne.n	8008f0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe f821 	bl	8006f40 <dec_lock>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b092      	sub	sp, #72	@ 0x48
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008f24:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008f28:	f107 030c 	add.w	r3, r7, #12
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff f814 	bl	8007f5c <find_volume>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008f3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 8099 	bne.w	8009076 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	3b02      	subs	r3, #2
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d804      	bhi.n	8008f62 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e089      	b.n	8009076 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d128      	bne.n	8008fc0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008f6e:	2302      	movs	r3, #2
 8008f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008f76:	f107 0314 	add.w	r3, r7, #20
 8008f7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe f93e 	bl	80071fe <get_fat>
 8008f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f8a:	d103      	bne.n	8008f94 <f_getfree+0x7c>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f92:	e063      	b.n	800905c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d103      	bne.n	8008fa2 <f_getfree+0x8a>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fa0:	e05c      	b.n	800905c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <f_getfree+0x96>
 8008fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008faa:	3301      	adds	r3, #1
 8008fac:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d3db      	bcc.n	8008f76 <f_getfree+0x5e>
 8008fbe:	e04d      	b.n	800905c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d113      	bne.n	8009002 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f7fe f850 	bl	8007088 <move_window>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008fee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d131      	bne.n	800905a <f_getfree+0x142>
							p = fs->win;
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	3330      	adds	r3, #48	@ 0x30
 8008ffa:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d10f      	bne.n	800902a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800900a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800900c:	f7fd fd8a 	bl	8006b24 <ld_word>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <f_getfree+0x104>
 8009016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009018:	3301      	adds	r3, #1
 800901a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	3302      	adds	r3, #2
 8009020:	633b      	str	r3, [r7, #48]	@ 0x30
 8009022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009024:	3b02      	subs	r3, #2
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
 8009028:	e010      	b.n	800904c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800902a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800902c:	f7fd fd93 	bl	8006b56 <ld_dword>
 8009030:	4603      	mov	r3, r0
 8009032:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d102      	bne.n	8009040 <f_getfree+0x128>
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	3301      	adds	r3, #1
 800903e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	3304      	adds	r3, #4
 8009044:	633b      	str	r3, [r7, #48]	@ 0x30
 8009046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009048:	3b04      	subs	r3, #4
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800904c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904e:	3b01      	subs	r3, #1
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1bd      	bne.n	8008fd4 <f_getfree+0xbc>
 8009058:	e000      	b.n	800905c <f_getfree+0x144>
							if (res != FR_OK) break;
 800905a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009060:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009066:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906a:	791a      	ldrb	r2, [r3, #4]
 800906c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009076:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800907a:	4618      	mov	r0, r3
 800907c:	3748      	adds	r7, #72	@ 0x48
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b088      	sub	sp, #32
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009096:	e01c      	b.n	80090d2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009098:	f107 0310 	add.w	r3, r7, #16
 800909c:	f107 0114 	add.w	r1, r7, #20
 80090a0:	2201      	movs	r2, #1
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff fbdc 	bl	8008860 <f_read>
		if (rc != 1) break;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d117      	bne.n	80090de <f_gets+0x5c>
		c = s[0];
 80090ae:	7d3b      	ldrb	r3, [r7, #20]
 80090b0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b0d      	cmp	r3, #13
 80090b6:	d00b      	beq.n	80090d0 <f_gets+0x4e>
		*p++ = c;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	61ba      	str	r2, [r7, #24]
 80090be:	7dfa      	ldrb	r2, [r7, #23]
 80090c0:	701a      	strb	r2, [r3, #0]
		n++;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3301      	adds	r3, #1
 80090c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	2b0a      	cmp	r3, #10
 80090cc:	d009      	beq.n	80090e2 <f_gets+0x60>
 80090ce:	e000      	b.n	80090d2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80090d0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	429a      	cmp	r2, r3
 80090da:	dbdd      	blt.n	8009098 <f_gets+0x16>
 80090dc:	e002      	b.n	80090e4 <f_gets+0x62>
		if (rc != 1) break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80090e2:	bf00      	nop
	}
	*p = 0;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <f_gets+0x72>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	e000      	b.n	80090f6 <f_gets+0x74>
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800910e:	2301      	movs	r3, #1
 8009110:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009116:	4b1f      	ldr	r3, [pc, #124]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009118:	7a5b      	ldrb	r3, [r3, #9]
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d131      	bne.n	8009184 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009120:	4b1c      	ldr	r3, [pc, #112]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009122:	7a5b      	ldrb	r3, [r3, #9]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 800912a:	2100      	movs	r1, #0
 800912c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800912e:	4b19      	ldr	r3, [pc, #100]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009130:	7a5b      	ldrb	r3, [r3, #9]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800913e:	4b15      	ldr	r3, [pc, #84]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009140:	7a5b      	ldrb	r3, [r3, #9]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009148:	4413      	add	r3, r2
 800914a:	79fa      	ldrb	r2, [r7, #7]
 800914c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800914e:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 8009150:	7a5b      	ldrb	r3, [r3, #9]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	b2d1      	uxtb	r1, r2
 8009158:	4a0e      	ldr	r2, [pc, #56]	@ (8009194 <FATFS_LinkDriverEx+0x94>)
 800915a:	7251      	strb	r1, [r2, #9]
 800915c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800915e:	7dbb      	ldrb	r3, [r7, #22]
 8009160:	3330      	adds	r3, #48	@ 0x30
 8009162:	b2da      	uxtb	r2, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	3301      	adds	r3, #1
 800916c:	223a      	movs	r2, #58	@ 0x3a
 800916e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3302      	adds	r3, #2
 8009174:	222f      	movs	r2, #47	@ 0x2f
 8009176:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3303      	adds	r3, #3
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
}
 8009186:	4618      	mov	r0, r3
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	200003f0 	.word	0x200003f0

08009198 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091a2:	2200      	movs	r2, #0
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ffaa 	bl	8009100 <FATFS_LinkDriverEx>
 80091ac:	4603      	mov	r3, r0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
	...

080091b8 <findslot>:
 80091b8:	4b0a      	ldr	r3, [pc, #40]	@ (80091e4 <findslot+0x2c>)
 80091ba:	b510      	push	{r4, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	b118      	cbz	r0, 80091ca <findslot+0x12>
 80091c2:	6a03      	ldr	r3, [r0, #32]
 80091c4:	b90b      	cbnz	r3, 80091ca <findslot+0x12>
 80091c6:	f001 fb3b 	bl	800a840 <__sinit>
 80091ca:	2c13      	cmp	r4, #19
 80091cc:	d807      	bhi.n	80091de <findslot+0x26>
 80091ce:	4806      	ldr	r0, [pc, #24]	@ (80091e8 <findslot+0x30>)
 80091d0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80091d4:	3201      	adds	r2, #1
 80091d6:	d002      	beq.n	80091de <findslot+0x26>
 80091d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	2000      	movs	r0, #0
 80091e0:	e7fc      	b.n	80091dc <findslot+0x24>
 80091e2:	bf00      	nop
 80091e4:	20000038 	.word	0x20000038
 80091e8:	20000408 	.word	0x20000408

080091ec <error>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	f001 fd8a 	bl	800ad08 <__errno>
 80091f4:	2613      	movs	r6, #19
 80091f6:	4605      	mov	r5, r0
 80091f8:	2700      	movs	r7, #0
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	beab      	bkpt	0x00ab
 8009200:	4606      	mov	r6, r0
 8009202:	602e      	str	r6, [r5, #0]
 8009204:	4620      	mov	r0, r4
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009208 <checkerror>:
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d101      	bne.n	8009210 <checkerror+0x8>
 800920c:	f7ff bfee 	b.w	80091ec <error>
 8009210:	4770      	bx	lr

08009212 <_swiread>:
 8009212:	b530      	push	{r4, r5, lr}
 8009214:	b085      	sub	sp, #20
 8009216:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800921a:	9203      	str	r2, [sp, #12]
 800921c:	2406      	movs	r4, #6
 800921e:	ad01      	add	r5, sp, #4
 8009220:	4620      	mov	r0, r4
 8009222:	4629      	mov	r1, r5
 8009224:	beab      	bkpt	0x00ab
 8009226:	4604      	mov	r4, r0
 8009228:	4620      	mov	r0, r4
 800922a:	f7ff ffed 	bl	8009208 <checkerror>
 800922e:	b005      	add	sp, #20
 8009230:	bd30      	pop	{r4, r5, pc}

08009232 <_read>:
 8009232:	b570      	push	{r4, r5, r6, lr}
 8009234:	460e      	mov	r6, r1
 8009236:	4614      	mov	r4, r2
 8009238:	f7ff ffbe 	bl	80091b8 <findslot>
 800923c:	4605      	mov	r5, r0
 800923e:	b930      	cbnz	r0, 800924e <_read+0x1c>
 8009240:	f001 fd62 	bl	800ad08 <__errno>
 8009244:	2309      	movs	r3, #9
 8009246:	6003      	str	r3, [r0, #0]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800924c:	bd70      	pop	{r4, r5, r6, pc}
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	4622      	mov	r2, r4
 8009252:	4631      	mov	r1, r6
 8009254:	f7ff ffdd 	bl	8009212 <_swiread>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d0f5      	beq.n	8009248 <_read+0x16>
 800925c:	686b      	ldr	r3, [r5, #4]
 800925e:	1a20      	subs	r0, r4, r0
 8009260:	4403      	add	r3, r0
 8009262:	606b      	str	r3, [r5, #4]
 8009264:	e7f2      	b.n	800924c <_read+0x1a>

08009266 <_swilseek>:
 8009266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	4616      	mov	r6, r2
 800926c:	f7ff ffa4 	bl	80091b8 <findslot>
 8009270:	4605      	mov	r5, r0
 8009272:	b940      	cbnz	r0, 8009286 <_swilseek+0x20>
 8009274:	f001 fd48 	bl	800ad08 <__errno>
 8009278:	2309      	movs	r3, #9
 800927a:	6003      	str	r3, [r0, #0]
 800927c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009280:	4620      	mov	r0, r4
 8009282:	b003      	add	sp, #12
 8009284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009286:	2e02      	cmp	r6, #2
 8009288:	d903      	bls.n	8009292 <_swilseek+0x2c>
 800928a:	f001 fd3d 	bl	800ad08 <__errno>
 800928e:	2316      	movs	r3, #22
 8009290:	e7f3      	b.n	800927a <_swilseek+0x14>
 8009292:	2e01      	cmp	r6, #1
 8009294:	d112      	bne.n	80092bc <_swilseek+0x56>
 8009296:	6843      	ldr	r3, [r0, #4]
 8009298:	18e4      	adds	r4, r4, r3
 800929a:	d4f6      	bmi.n	800928a <_swilseek+0x24>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	260a      	movs	r6, #10
 80092a0:	e9cd 3400 	strd	r3, r4, [sp]
 80092a4:	466f      	mov	r7, sp
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	beab      	bkpt	0x00ab
 80092ac:	4606      	mov	r6, r0
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ffaa 	bl	8009208 <checkerror>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dbe1      	blt.n	800927c <_swilseek+0x16>
 80092b8:	606c      	str	r4, [r5, #4]
 80092ba:	e7e1      	b.n	8009280 <_swilseek+0x1a>
 80092bc:	2e02      	cmp	r6, #2
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	d1ec      	bne.n	800929c <_swilseek+0x36>
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	260c      	movs	r6, #12
 80092c6:	466f      	mov	r7, sp
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	beab      	bkpt	0x00ab
 80092ce:	4606      	mov	r6, r0
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ff99 	bl	8009208 <checkerror>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d0d0      	beq.n	800927c <_swilseek+0x16>
 80092da:	4404      	add	r4, r0
 80092dc:	e7de      	b.n	800929c <_swilseek+0x36>

080092de <_lseek>:
 80092de:	f7ff bfc2 	b.w	8009266 <_swilseek>

080092e2 <_swiwrite>:
 80092e2:	b530      	push	{r4, r5, lr}
 80092e4:	b085      	sub	sp, #20
 80092e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80092ea:	9203      	str	r2, [sp, #12]
 80092ec:	2405      	movs	r4, #5
 80092ee:	ad01      	add	r5, sp, #4
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	beab      	bkpt	0x00ab
 80092f6:	4604      	mov	r4, r0
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7ff ff85 	bl	8009208 <checkerror>
 80092fe:	b005      	add	sp, #20
 8009300:	bd30      	pop	{r4, r5, pc}

08009302 <_write>:
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	460e      	mov	r6, r1
 8009306:	4615      	mov	r5, r2
 8009308:	f7ff ff56 	bl	80091b8 <findslot>
 800930c:	4604      	mov	r4, r0
 800930e:	b930      	cbnz	r0, 800931e <_write+0x1c>
 8009310:	f001 fcfa 	bl	800ad08 <__errno>
 8009314:	2309      	movs	r3, #9
 8009316:	6003      	str	r3, [r0, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4631      	mov	r1, r6
 8009324:	f7ff ffdd 	bl	80092e2 <_swiwrite>
 8009328:	1e03      	subs	r3, r0, #0
 800932a:	dbf5      	blt.n	8009318 <_write+0x16>
 800932c:	6862      	ldr	r2, [r4, #4]
 800932e:	1ae8      	subs	r0, r5, r3
 8009330:	4402      	add	r2, r0
 8009332:	42ab      	cmp	r3, r5
 8009334:	6062      	str	r2, [r4, #4]
 8009336:	d1f1      	bne.n	800931c <_write+0x1a>
 8009338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800933c:	2000      	movs	r0, #0
 800933e:	f7ff bf55 	b.w	80091ec <error>

08009342 <_swiclose>:
 8009342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009344:	2402      	movs	r4, #2
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	ad01      	add	r5, sp, #4
 800934a:	4620      	mov	r0, r4
 800934c:	4629      	mov	r1, r5
 800934e:	beab      	bkpt	0x00ab
 8009350:	4604      	mov	r4, r0
 8009352:	4620      	mov	r0, r4
 8009354:	f7ff ff58 	bl	8009208 <checkerror>
 8009358:	b003      	add	sp, #12
 800935a:	bd30      	pop	{r4, r5, pc}

0800935c <_close>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	f7ff ff2a 	bl	80091b8 <findslot>
 8009364:	4604      	mov	r4, r0
 8009366:	b930      	cbnz	r0, 8009376 <_close+0x1a>
 8009368:	f001 fcce 	bl	800ad08 <__errno>
 800936c:	2309      	movs	r3, #9
 800936e:	6003      	str	r3, [r0, #0]
 8009370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	3d01      	subs	r5, #1
 8009378:	2d01      	cmp	r5, #1
 800937a:	d809      	bhi.n	8009390 <_close+0x34>
 800937c:	4b09      	ldr	r3, [pc, #36]	@ (80093a4 <_close+0x48>)
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	429a      	cmp	r2, r3
 8009384:	d104      	bne.n	8009390 <_close+0x34>
 8009386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800938a:	6003      	str	r3, [r0, #0]
 800938c:	2000      	movs	r0, #0
 800938e:	e7f1      	b.n	8009374 <_close+0x18>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	f7ff ffd6 	bl	8009342 <_swiclose>
 8009396:	2800      	cmp	r0, #0
 8009398:	d1ec      	bne.n	8009374 <_close+0x18>
 800939a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	e7e8      	b.n	8009374 <_close+0x18>
 80093a2:	bf00      	nop
 80093a4:	20000408 	.word	0x20000408

080093a8 <_getpid>:
 80093a8:	2001      	movs	r0, #1
 80093aa:	4770      	bx	lr

080093ac <_swistat>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	460c      	mov	r4, r1
 80093b0:	f7ff ff02 	bl	80091b8 <findslot>
 80093b4:	4605      	mov	r5, r0
 80093b6:	b930      	cbnz	r0, 80093c6 <_swistat+0x1a>
 80093b8:	f001 fca6 	bl	800ad08 <__errno>
 80093bc:	2309      	movs	r3, #9
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093d2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093d4:	260c      	movs	r6, #12
 80093d6:	4630      	mov	r0, r6
 80093d8:	4629      	mov	r1, r5
 80093da:	beab      	bkpt	0x00ab
 80093dc:	4605      	mov	r5, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f7ff ff12 	bl	8009208 <checkerror>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d0eb      	beq.n	80093c0 <_swistat+0x14>
 80093e8:	6120      	str	r0, [r4, #16]
 80093ea:	2000      	movs	r0, #0
 80093ec:	e7ea      	b.n	80093c4 <_swistat+0x18>

080093ee <_fstat>:
 80093ee:	460b      	mov	r3, r1
 80093f0:	b510      	push	{r4, lr}
 80093f2:	2100      	movs	r1, #0
 80093f4:	4604      	mov	r4, r0
 80093f6:	2258      	movs	r2, #88	@ 0x58
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 fc33 	bl	800ac64 <memset>
 80093fe:	4601      	mov	r1, r0
 8009400:	4620      	mov	r0, r4
 8009402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009406:	f7ff bfd1 	b.w	80093ac <_swistat>

0800940a <_stat>:
 800940a:	b538      	push	{r3, r4, r5, lr}
 800940c:	460d      	mov	r5, r1
 800940e:	4604      	mov	r4, r0
 8009410:	2258      	movs	r2, #88	@ 0x58
 8009412:	2100      	movs	r1, #0
 8009414:	4628      	mov	r0, r5
 8009416:	f001 fc25 	bl	800ac64 <memset>
 800941a:	4620      	mov	r0, r4
 800941c:	2100      	movs	r1, #0
 800941e:	f000 f811 	bl	8009444 <_swiopen>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	4604      	mov	r4, r0
 8009426:	d00b      	beq.n	8009440 <_stat+0x36>
 8009428:	686b      	ldr	r3, [r5, #4]
 800942a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800942e:	606b      	str	r3, [r5, #4]
 8009430:	4629      	mov	r1, r5
 8009432:	f7ff ffbb 	bl	80093ac <_swistat>
 8009436:	4605      	mov	r5, r0
 8009438:	4620      	mov	r0, r4
 800943a:	f7ff ff8f 	bl	800935c <_close>
 800943e:	462c      	mov	r4, r5
 8009440:	4620      	mov	r0, r4
 8009442:	bd38      	pop	{r3, r4, r5, pc}

08009444 <_swiopen>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80094f4 <_swiopen+0xb0>
 800944c:	b096      	sub	sp, #88	@ 0x58
 800944e:	4607      	mov	r7, r0
 8009450:	460e      	mov	r6, r1
 8009452:	2400      	movs	r4, #0
 8009454:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8009458:	3301      	adds	r3, #1
 800945a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800945e:	d032      	beq.n	80094c6 <_swiopen+0x82>
 8009460:	3401      	adds	r4, #1
 8009462:	2c14      	cmp	r4, #20
 8009464:	d1f6      	bne.n	8009454 <_swiopen+0x10>
 8009466:	f001 fc4f 	bl	800ad08 <__errno>
 800946a:	2318      	movs	r3, #24
 800946c:	e03a      	b.n	80094e4 <_swiopen+0xa0>
 800946e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8009472:	f240 6301 	movw	r3, #1537	@ 0x601
 8009476:	07b2      	lsls	r2, r6, #30
 8009478:	bf48      	it	mi
 800947a:	f045 0502 	orrmi.w	r5, r5, #2
 800947e:	421e      	tst	r6, r3
 8009480:	bf18      	it	ne
 8009482:	f045 0504 	orrne.w	r5, r5, #4
 8009486:	0733      	lsls	r3, r6, #28
 8009488:	bf48      	it	mi
 800948a:	f025 0504 	bicmi.w	r5, r5, #4
 800948e:	4638      	mov	r0, r7
 8009490:	bf48      	it	mi
 8009492:	f045 0508 	orrmi.w	r5, r5, #8
 8009496:	9700      	str	r7, [sp, #0]
 8009498:	f7f6 fef2 	bl	8000280 <strlen>
 800949c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80094a0:	2501      	movs	r5, #1
 80094a2:	4628      	mov	r0, r5
 80094a4:	4651      	mov	r1, sl
 80094a6:	beab      	bkpt	0x00ab
 80094a8:	4605      	mov	r5, r0
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	db06      	blt.n	80094bc <_swiopen+0x78>
 80094ae:	44c8      	add	r8, r9
 80094b0:	2300      	movs	r3, #0
 80094b2:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80094b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80094ba:	e016      	b.n	80094ea <_swiopen+0xa6>
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff fe95 	bl	80091ec <error>
 80094c2:	4604      	mov	r4, r0
 80094c4:	e011      	b.n	80094ea <_swiopen+0xa6>
 80094c6:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80094ca:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80094ce:	46ea      	mov	sl, sp
 80094d0:	d1cd      	bne.n	800946e <_swiopen+0x2a>
 80094d2:	4651      	mov	r1, sl
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff ff98 	bl	800940a <_stat>
 80094da:	3001      	adds	r0, #1
 80094dc:	d0c7      	beq.n	800946e <_swiopen+0x2a>
 80094de:	f001 fc13 	bl	800ad08 <__errno>
 80094e2:	2311      	movs	r3, #17
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80094ea:	4620      	mov	r0, r4
 80094ec:	b016      	add	sp, #88	@ 0x58
 80094ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f2:	bf00      	nop
 80094f4:	20000408 	.word	0x20000408

080094f8 <_get_semihosting_exts>:
 80094f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	4829      	ldr	r0, [pc, #164]	@ (80095a8 <_get_semihosting_exts+0xb0>)
 8009502:	2100      	movs	r1, #0
 8009504:	4615      	mov	r5, r2
 8009506:	f7ff ff9d 	bl	8009444 <_swiopen>
 800950a:	462a      	mov	r2, r5
 800950c:	4604      	mov	r4, r0
 800950e:	2100      	movs	r1, #0
 8009510:	4630      	mov	r0, r6
 8009512:	f001 fba7 	bl	800ac64 <memset>
 8009516:	1c63      	adds	r3, r4, #1
 8009518:	d014      	beq.n	8009544 <_get_semihosting_exts+0x4c>
 800951a:	4620      	mov	r0, r4
 800951c:	f7ff fe4c 	bl	80091b8 <findslot>
 8009520:	f04f 080c 	mov.w	r8, #12
 8009524:	4681      	mov	r9, r0
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	beab      	bkpt	0x00ab
 800952c:	4680      	mov	r8, r0
 800952e:	4640      	mov	r0, r8
 8009530:	f7ff fe6a 	bl	8009208 <checkerror>
 8009534:	2803      	cmp	r0, #3
 8009536:	dd02      	ble.n	800953e <_get_semihosting_exts+0x46>
 8009538:	1ec3      	subs	r3, r0, #3
 800953a:	42ab      	cmp	r3, r5
 800953c:	dc07      	bgt.n	800954e <_get_semihosting_exts+0x56>
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff ff0c 	bl	800935c <_close>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009548:	b003      	add	sp, #12
 800954a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800954e:	2204      	movs	r2, #4
 8009550:	eb0d 0102 	add.w	r1, sp, r2
 8009554:	4620      	mov	r0, r4
 8009556:	f7ff fe6c 	bl	8009232 <_read>
 800955a:	2803      	cmp	r0, #3
 800955c:	ddef      	ble.n	800953e <_get_semihosting_exts+0x46>
 800955e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009562:	2b53      	cmp	r3, #83	@ 0x53
 8009564:	d1eb      	bne.n	800953e <_get_semihosting_exts+0x46>
 8009566:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800956a:	2b48      	cmp	r3, #72	@ 0x48
 800956c:	d1e7      	bne.n	800953e <_get_semihosting_exts+0x46>
 800956e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009572:	2b46      	cmp	r3, #70	@ 0x46
 8009574:	d1e3      	bne.n	800953e <_get_semihosting_exts+0x46>
 8009576:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800957a:	2b42      	cmp	r3, #66	@ 0x42
 800957c:	d1df      	bne.n	800953e <_get_semihosting_exts+0x46>
 800957e:	2201      	movs	r2, #1
 8009580:	4639      	mov	r1, r7
 8009582:	4620      	mov	r0, r4
 8009584:	f7ff fe6f 	bl	8009266 <_swilseek>
 8009588:	2800      	cmp	r0, #0
 800958a:	dbd8      	blt.n	800953e <_get_semihosting_exts+0x46>
 800958c:	462a      	mov	r2, r5
 800958e:	4631      	mov	r1, r6
 8009590:	4620      	mov	r0, r4
 8009592:	f7ff fe4e 	bl	8009232 <_read>
 8009596:	4605      	mov	r5, r0
 8009598:	4620      	mov	r0, r4
 800959a:	f7ff fedf 	bl	800935c <_close>
 800959e:	4628      	mov	r0, r5
 80095a0:	f7ff fe32 	bl	8009208 <checkerror>
 80095a4:	e7d0      	b.n	8009548 <_get_semihosting_exts+0x50>
 80095a6:	bf00      	nop
 80095a8:	0800d0f8 	.word	0x0800d0f8

080095ac <initialise_semihosting_exts>:
 80095ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ae:	4d0a      	ldr	r5, [pc, #40]	@ (80095d8 <initialise_semihosting_exts+0x2c>)
 80095b0:	4c0a      	ldr	r4, [pc, #40]	@ (80095dc <initialise_semihosting_exts+0x30>)
 80095b2:	2100      	movs	r1, #0
 80095b4:	2201      	movs	r2, #1
 80095b6:	a801      	add	r0, sp, #4
 80095b8:	6029      	str	r1, [r5, #0]
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	f7ff ff9c 	bl	80094f8 <_get_semihosting_exts>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	dd07      	ble.n	80095d4 <initialise_semihosting_exts+0x28>
 80095c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80095c8:	f003 0201 	and.w	r2, r3, #1
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	b003      	add	sp, #12
 80095d6:	bd30      	pop	{r4, r5, pc}
 80095d8:	20000028 	.word	0x20000028
 80095dc:	20000024 	.word	0x20000024

080095e0 <_has_ext_stdout_stderr>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	4c04      	ldr	r4, [pc, #16]	@ (80095f4 <_has_ext_stdout_stderr+0x14>)
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	da01      	bge.n	80095ee <_has_ext_stdout_stderr+0xe>
 80095ea:	f7ff ffdf 	bl	80095ac <initialise_semihosting_exts>
 80095ee:	6820      	ldr	r0, [r4, #0]
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	20000024 	.word	0x20000024

080095f8 <initialise_monitor_handles>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	b085      	sub	sp, #20
 80095fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80096b0 <initialise_monitor_handles+0xb8>
 8009602:	f8cd 9004 	str.w	r9, [sp, #4]
 8009606:	2303      	movs	r3, #3
 8009608:	2400      	movs	r4, #0
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	af01      	add	r7, sp, #4
 800960e:	9402      	str	r4, [sp, #8]
 8009610:	2501      	movs	r5, #1
 8009612:	4628      	mov	r0, r5
 8009614:	4639      	mov	r1, r7
 8009616:	beab      	bkpt	0x00ab
 8009618:	4605      	mov	r5, r0
 800961a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80096b4 <initialise_monitor_handles+0xbc>
 800961e:	4623      	mov	r3, r4
 8009620:	4c20      	ldr	r4, [pc, #128]	@ (80096a4 <initialise_monitor_handles+0xac>)
 8009622:	f8c8 5000 	str.w	r5, [r8]
 8009626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800962a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800962e:	3301      	adds	r3, #1
 8009630:	2b14      	cmp	r3, #20
 8009632:	d1fa      	bne.n	800962a <initialise_monitor_handles+0x32>
 8009634:	f7ff ffd4 	bl	80095e0 <_has_ext_stdout_stderr>
 8009638:	4d1b      	ldr	r5, [pc, #108]	@ (80096a8 <initialise_monitor_handles+0xb0>)
 800963a:	b1d0      	cbz	r0, 8009672 <initialise_monitor_handles+0x7a>
 800963c:	f04f 0a03 	mov.w	sl, #3
 8009640:	2304      	movs	r3, #4
 8009642:	f8cd 9004 	str.w	r9, [sp, #4]
 8009646:	2601      	movs	r6, #1
 8009648:	f8cd a00c 	str.w	sl, [sp, #12]
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	4630      	mov	r0, r6
 8009650:	4639      	mov	r1, r7
 8009652:	beab      	bkpt	0x00ab
 8009654:	4683      	mov	fp, r0
 8009656:	4b15      	ldr	r3, [pc, #84]	@ (80096ac <initialise_monitor_handles+0xb4>)
 8009658:	f8cd 9004 	str.w	r9, [sp, #4]
 800965c:	f8c3 b000 	str.w	fp, [r3]
 8009660:	2308      	movs	r3, #8
 8009662:	f8cd a00c 	str.w	sl, [sp, #12]
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	beab      	bkpt	0x00ab
 800966e:	4606      	mov	r6, r0
 8009670:	602e      	str	r6, [r5, #0]
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	3301      	adds	r3, #1
 8009676:	bf02      	ittt	eq
 8009678:	4b0c      	ldreq	r3, [pc, #48]	@ (80096ac <initialise_monitor_handles+0xb4>)
 800967a:	681b      	ldreq	r3, [r3, #0]
 800967c:	602b      	streq	r3, [r5, #0]
 800967e:	2600      	movs	r6, #0
 8009680:	f8d8 3000 	ldr.w	r3, [r8]
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	6066      	str	r6, [r4, #4]
 8009688:	f7ff ffaa 	bl	80095e0 <_has_ext_stdout_stderr>
 800968c:	b130      	cbz	r0, 800969c <initialise_monitor_handles+0xa4>
 800968e:	4b07      	ldr	r3, [pc, #28]	@ (80096ac <initialise_monitor_handles+0xb4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800969c:	b005      	add	sp, #20
 800969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a2:	bf00      	nop
 80096a4:	20000408 	.word	0x20000408
 80096a8:	200003fc 	.word	0x200003fc
 80096ac:	20000400 	.word	0x20000400
 80096b0:	0800d10e 	.word	0x0800d10e
 80096b4:	20000404 	.word	0x20000404

080096b8 <_isatty>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	f7ff fd7d 	bl	80091b8 <findslot>
 80096be:	2409      	movs	r4, #9
 80096c0:	4605      	mov	r5, r0
 80096c2:	b920      	cbnz	r0, 80096ce <_isatty+0x16>
 80096c4:	f001 fb20 	bl	800ad08 <__errno>
 80096c8:	6004      	str	r4, [r0, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	beab      	bkpt	0x00ab
 80096d4:	4604      	mov	r4, r0
 80096d6:	2c01      	cmp	r4, #1
 80096d8:	4620      	mov	r0, r4
 80096da:	d0f7      	beq.n	80096cc <_isatty+0x14>
 80096dc:	f001 fb14 	bl	800ad08 <__errno>
 80096e0:	2513      	movs	r5, #19
 80096e2:	4604      	mov	r4, r0
 80096e4:	2600      	movs	r6, #0
 80096e6:	4628      	mov	r0, r5
 80096e8:	4631      	mov	r1, r6
 80096ea:	beab      	bkpt	0x00ab
 80096ec:	4605      	mov	r5, r0
 80096ee:	6025      	str	r5, [r4, #0]
 80096f0:	e7eb      	b.n	80096ca <_isatty+0x12>

080096f2 <powf>:
 80096f2:	b508      	push	{r3, lr}
 80096f4:	ed2d 8b04 	vpush	{d8-d9}
 80096f8:	eeb0 8a60 	vmov.f32	s16, s1
 80096fc:	eeb0 9a40 	vmov.f32	s18, s0
 8009700:	f000 f858 	bl	80097b4 <__ieee754_powf>
 8009704:	eeb4 8a48 	vcmp.f32	s16, s16
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	eef0 8a40 	vmov.f32	s17, s0
 8009710:	d63e      	bvs.n	8009790 <powf+0x9e>
 8009712:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971a:	d112      	bne.n	8009742 <powf+0x50>
 800971c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009724:	d039      	beq.n	800979a <powf+0xa8>
 8009726:	eeb0 0a48 	vmov.f32	s0, s16
 800972a:	f000 f839 	bl	80097a0 <finitef>
 800972e:	b378      	cbz	r0, 8009790 <powf+0x9e>
 8009730:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	d52a      	bpl.n	8009790 <powf+0x9e>
 800973a:	f001 fae5 	bl	800ad08 <__errno>
 800973e:	2322      	movs	r3, #34	@ 0x22
 8009740:	e014      	b.n	800976c <powf+0x7a>
 8009742:	f000 f82d 	bl	80097a0 <finitef>
 8009746:	b998      	cbnz	r0, 8009770 <powf+0x7e>
 8009748:	eeb0 0a49 	vmov.f32	s0, s18
 800974c:	f000 f828 	bl	80097a0 <finitef>
 8009750:	b170      	cbz	r0, 8009770 <powf+0x7e>
 8009752:	eeb0 0a48 	vmov.f32	s0, s16
 8009756:	f000 f823 	bl	80097a0 <finitef>
 800975a:	b148      	cbz	r0, 8009770 <powf+0x7e>
 800975c:	eef4 8a68 	vcmp.f32	s17, s17
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	d7e9      	bvc.n	800973a <powf+0x48>
 8009766:	f001 facf 	bl	800ad08 <__errno>
 800976a:	2321      	movs	r3, #33	@ 0x21
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	e00f      	b.n	8009790 <powf+0x9e>
 8009770:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009778:	d10a      	bne.n	8009790 <powf+0x9e>
 800977a:	eeb0 0a49 	vmov.f32	s0, s18
 800977e:	f000 f80f 	bl	80097a0 <finitef>
 8009782:	b128      	cbz	r0, 8009790 <powf+0x9e>
 8009784:	eeb0 0a48 	vmov.f32	s0, s16
 8009788:	f000 f80a 	bl	80097a0 <finitef>
 800978c:	2800      	cmp	r0, #0
 800978e:	d1d4      	bne.n	800973a <powf+0x48>
 8009790:	eeb0 0a68 	vmov.f32	s0, s17
 8009794:	ecbd 8b04 	vpop	{d8-d9}
 8009798:	bd08      	pop	{r3, pc}
 800979a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800979e:	e7f7      	b.n	8009790 <powf+0x9e>

080097a0 <finitef>:
 80097a0:	ee10 3a10 	vmov	r3, s0
 80097a4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80097a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80097ac:	bfac      	ite	ge
 80097ae:	2000      	movge	r0, #0
 80097b0:	2001      	movlt	r0, #1
 80097b2:	4770      	bx	lr

080097b4 <__ieee754_powf>:
 80097b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	ee10 4a90 	vmov	r4, s1
 80097bc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80097c0:	ed2d 8b02 	vpush	{d8}
 80097c4:	ee10 6a10 	vmov	r6, s0
 80097c8:	eeb0 8a40 	vmov.f32	s16, s0
 80097cc:	eef0 8a60 	vmov.f32	s17, s1
 80097d0:	d10c      	bne.n	80097ec <__ieee754_powf+0x38>
 80097d2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80097d6:	0076      	lsls	r6, r6, #1
 80097d8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80097dc:	f240 8274 	bls.w	8009cc8 <__ieee754_powf+0x514>
 80097e0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80097e4:	ecbd 8b02 	vpop	{d8}
 80097e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ec:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80097f0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80097f4:	d802      	bhi.n	80097fc <__ieee754_powf+0x48>
 80097f6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80097fa:	d908      	bls.n	800980e <__ieee754_powf+0x5a>
 80097fc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009800:	d1ee      	bne.n	80097e0 <__ieee754_powf+0x2c>
 8009802:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009806:	0064      	lsls	r4, r4, #1
 8009808:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800980c:	e7e6      	b.n	80097dc <__ieee754_powf+0x28>
 800980e:	2e00      	cmp	r6, #0
 8009810:	da1f      	bge.n	8009852 <__ieee754_powf+0x9e>
 8009812:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009816:	f080 8260 	bcs.w	8009cda <__ieee754_powf+0x526>
 800981a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800981e:	d32f      	bcc.n	8009880 <__ieee754_powf+0xcc>
 8009820:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009824:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009828:	fa49 f503 	asr.w	r5, r9, r3
 800982c:	fa05 f303 	lsl.w	r3, r5, r3
 8009830:	454b      	cmp	r3, r9
 8009832:	d123      	bne.n	800987c <__ieee754_powf+0xc8>
 8009834:	f005 0501 	and.w	r5, r5, #1
 8009838:	f1c5 0502 	rsb	r5, r5, #2
 800983c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009840:	d11f      	bne.n	8009882 <__ieee754_powf+0xce>
 8009842:	2c00      	cmp	r4, #0
 8009844:	f280 8246 	bge.w	8009cd4 <__ieee754_powf+0x520>
 8009848:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800984c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009850:	e7c8      	b.n	80097e4 <__ieee754_powf+0x30>
 8009852:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009856:	d111      	bne.n	800987c <__ieee754_powf+0xc8>
 8009858:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800985c:	f000 8234 	beq.w	8009cc8 <__ieee754_powf+0x514>
 8009860:	d906      	bls.n	8009870 <__ieee754_powf+0xbc>
 8009862:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009b78 <__ieee754_powf+0x3c4>
 8009866:	2c00      	cmp	r4, #0
 8009868:	bfa8      	it	ge
 800986a:	eeb0 0a68 	vmovge.f32	s0, s17
 800986e:	e7b9      	b.n	80097e4 <__ieee754_powf+0x30>
 8009870:	2c00      	cmp	r4, #0
 8009872:	f280 822c 	bge.w	8009cce <__ieee754_powf+0x51a>
 8009876:	eeb1 0a68 	vneg.f32	s0, s17
 800987a:	e7b3      	b.n	80097e4 <__ieee754_powf+0x30>
 800987c:	2500      	movs	r5, #0
 800987e:	e7dd      	b.n	800983c <__ieee754_powf+0x88>
 8009880:	2500      	movs	r5, #0
 8009882:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009886:	d102      	bne.n	800988e <__ieee754_powf+0xda>
 8009888:	ee28 0a08 	vmul.f32	s0, s16, s16
 800988c:	e7aa      	b.n	80097e4 <__ieee754_powf+0x30>
 800988e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009892:	f040 8227 	bne.w	8009ce4 <__ieee754_powf+0x530>
 8009896:	2e00      	cmp	r6, #0
 8009898:	f2c0 8224 	blt.w	8009ce4 <__ieee754_powf+0x530>
 800989c:	eeb0 0a48 	vmov.f32	s0, s16
 80098a0:	ecbd 8b02 	vpop	{d8}
 80098a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	f000 bae6 	b.w	8009e78 <__ieee754_sqrtf>
 80098ac:	2d01      	cmp	r5, #1
 80098ae:	d199      	bne.n	80097e4 <__ieee754_powf+0x30>
 80098b0:	eeb1 0a40 	vneg.f32	s0, s0
 80098b4:	e796      	b.n	80097e4 <__ieee754_powf+0x30>
 80098b6:	0ff0      	lsrs	r0, r6, #31
 80098b8:	3801      	subs	r0, #1
 80098ba:	ea55 0300 	orrs.w	r3, r5, r0
 80098be:	d104      	bne.n	80098ca <__ieee754_powf+0x116>
 80098c0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80098c4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80098c8:	e78c      	b.n	80097e4 <__ieee754_powf+0x30>
 80098ca:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80098ce:	d96d      	bls.n	80099ac <__ieee754_powf+0x1f8>
 80098d0:	4baa      	ldr	r3, [pc, #680]	@ (8009b7c <__ieee754_powf+0x3c8>)
 80098d2:	4598      	cmp	r8, r3
 80098d4:	d808      	bhi.n	80098e8 <__ieee754_powf+0x134>
 80098d6:	2c00      	cmp	r4, #0
 80098d8:	da0b      	bge.n	80098f2 <__ieee754_powf+0x13e>
 80098da:	2000      	movs	r0, #0
 80098dc:	ecbd 8b02 	vpop	{d8}
 80098e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e4:	f000 bac2 	b.w	8009e6c <__math_oflowf>
 80098e8:	4ba5      	ldr	r3, [pc, #660]	@ (8009b80 <__ieee754_powf+0x3cc>)
 80098ea:	4598      	cmp	r8, r3
 80098ec:	d908      	bls.n	8009900 <__ieee754_powf+0x14c>
 80098ee:	2c00      	cmp	r4, #0
 80098f0:	dcf3      	bgt.n	80098da <__ieee754_powf+0x126>
 80098f2:	2000      	movs	r0, #0
 80098f4:	ecbd 8b02 	vpop	{d8}
 80098f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	f000 bab0 	b.w	8009e60 <__math_uflowf>
 8009900:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009904:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009908:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009b84 <__ieee754_powf+0x3d0>
 800990c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009910:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009914:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009918:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800991c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009920:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009b88 <__ieee754_powf+0x3d4>
 8009924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009928:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009b8c <__ieee754_powf+0x3d8>
 800992c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009930:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009b90 <__ieee754_powf+0x3dc>
 8009934:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009938:	eeb0 7a67 	vmov.f32	s14, s15
 800993c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8009940:	ee17 3a10 	vmov	r3, s14
 8009944:	f36f 030b 	bfc	r3, #0, #12
 8009948:	ee07 3a10 	vmov	s14, r3
 800994c:	eeb0 6a47 	vmov.f32	s12, s14
 8009950:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009954:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009958:	3d01      	subs	r5, #1
 800995a:	4305      	orrs	r5, r0
 800995c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009960:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009964:	f36f 040b 	bfc	r4, #0, #12
 8009968:	bf18      	it	ne
 800996a:	eeb0 8a66 	vmovne.f32	s16, s13
 800996e:	ee06 4a90 	vmov	s13, r4
 8009972:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009976:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800997a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800997e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8009982:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009986:	ee17 1a10 	vmov	r1, s14
 800998a:	2900      	cmp	r1, #0
 800998c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009990:	f340 80dd 	ble.w	8009b4e <__ieee754_powf+0x39a>
 8009994:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009998:	f240 80ca 	bls.w	8009b30 <__ieee754_powf+0x37c>
 800999c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80099a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a4:	bf4c      	ite	mi
 80099a6:	2001      	movmi	r0, #1
 80099a8:	2000      	movpl	r0, #0
 80099aa:	e797      	b.n	80098dc <__ieee754_powf+0x128>
 80099ac:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80099b0:	bf01      	itttt	eq
 80099b2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009b94 <__ieee754_powf+0x3e0>
 80099b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80099ba:	f06f 0317 	mvneq.w	r3, #23
 80099be:	ee17 7a90 	vmoveq	r7, s15
 80099c2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80099c6:	bf18      	it	ne
 80099c8:	2300      	movne	r3, #0
 80099ca:	3a7f      	subs	r2, #127	@ 0x7f
 80099cc:	441a      	add	r2, r3
 80099ce:	4b72      	ldr	r3, [pc, #456]	@ (8009b98 <__ieee754_powf+0x3e4>)
 80099d0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80099d4:	429f      	cmp	r7, r3
 80099d6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80099da:	dd06      	ble.n	80099ea <__ieee754_powf+0x236>
 80099dc:	4b6f      	ldr	r3, [pc, #444]	@ (8009b9c <__ieee754_powf+0x3e8>)
 80099de:	429f      	cmp	r7, r3
 80099e0:	f340 80a4 	ble.w	8009b2c <__ieee754_powf+0x378>
 80099e4:	3201      	adds	r2, #1
 80099e6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80099ea:	2600      	movs	r6, #0
 80099ec:	4b6c      	ldr	r3, [pc, #432]	@ (8009ba0 <__ieee754_powf+0x3ec>)
 80099ee:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80099f2:	ee07 1a10 	vmov	s14, r1
 80099f6:	edd3 5a00 	vldr	s11, [r3]
 80099fa:	4b6a      	ldr	r3, [pc, #424]	@ (8009ba4 <__ieee754_powf+0x3f0>)
 80099fc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009a00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a04:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009a08:	1049      	asrs	r1, r1, #1
 8009a0a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009a0e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009a12:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009a16:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009a1a:	ee07 1a90 	vmov	s15, r1
 8009a1e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009a22:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009a26:	ee15 7a10 	vmov	r7, s10
 8009a2a:	401f      	ands	r7, r3
 8009a2c:	ee06 7a90 	vmov	s13, r7
 8009a30:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009a34:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009a38:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009a3c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009a40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009ba8 <__ieee754_powf+0x3f4>
 8009a44:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009bac <__ieee754_powf+0x3f8>
 8009a48:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009a4c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009bb0 <__ieee754_powf+0x3fc>
 8009a50:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009a54:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009b84 <__ieee754_powf+0x3d0>
 8009a58:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009a5c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009bb4 <__ieee754_powf+0x400>
 8009a60:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009a64:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009bb8 <__ieee754_powf+0x404>
 8009a68:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009a6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009a70:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009a74:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009a78:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009a7c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009a80:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009a84:	eef0 5a67 	vmov.f32	s11, s15
 8009a88:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009a8c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009a90:	ee15 1a90 	vmov	r1, s11
 8009a94:	4019      	ands	r1, r3
 8009a96:	ee05 1a90 	vmov	s11, r1
 8009a9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009a9e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aa6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009aaa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009aae:	eeb0 6a67 	vmov.f32	s12, s15
 8009ab2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009ab6:	ee16 1a10 	vmov	r1, s12
 8009aba:	4019      	ands	r1, r3
 8009abc:	ee06 1a10 	vmov	s12, r1
 8009ac0:	eeb0 7a46 	vmov.f32	s14, s12
 8009ac4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009ac8:	493c      	ldr	r1, [pc, #240]	@ (8009bbc <__ieee754_powf+0x408>)
 8009aca:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ad2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009bc0 <__ieee754_powf+0x40c>
 8009ad6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009bc4 <__ieee754_powf+0x410>
 8009ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ade:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009bc8 <__ieee754_powf+0x414>
 8009ae2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009ae6:	ed91 7a00 	vldr	s14, [r1]
 8009aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009aee:	ee07 2a10 	vmov	s14, r2
 8009af2:	4a36      	ldr	r2, [pc, #216]	@ (8009bcc <__ieee754_powf+0x418>)
 8009af4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009af8:	eeb0 7a67 	vmov.f32	s14, s15
 8009afc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009b00:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009b04:	ed92 5a00 	vldr	s10, [r2]
 8009b08:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009b0c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009b10:	ee17 2a10 	vmov	r2, s14
 8009b14:	401a      	ands	r2, r3
 8009b16:	ee07 2a10 	vmov	s14, r2
 8009b1a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009b1e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009b22:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b2a:	e715      	b.n	8009958 <__ieee754_powf+0x1a4>
 8009b2c:	2601      	movs	r6, #1
 8009b2e:	e75d      	b.n	80099ec <__ieee754_powf+0x238>
 8009b30:	d152      	bne.n	8009bd8 <__ieee754_powf+0x424>
 8009b32:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009bd0 <__ieee754_powf+0x41c>
 8009b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b3a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009b3e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	f73f af29 	bgt.w	800999c <__ieee754_powf+0x1e8>
 8009b4a:	2386      	movs	r3, #134	@ 0x86
 8009b4c:	e048      	b.n	8009be0 <__ieee754_powf+0x42c>
 8009b4e:	4a21      	ldr	r2, [pc, #132]	@ (8009bd4 <__ieee754_powf+0x420>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d907      	bls.n	8009b64 <__ieee754_powf+0x3b0>
 8009b54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5c:	bf4c      	ite	mi
 8009b5e:	2001      	movmi	r0, #1
 8009b60:	2000      	movpl	r0, #0
 8009b62:	e6c7      	b.n	80098f4 <__ieee754_powf+0x140>
 8009b64:	d138      	bne.n	8009bd8 <__ieee754_powf+0x424>
 8009b66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b6a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	dbea      	blt.n	8009b4a <__ieee754_powf+0x396>
 8009b74:	e7ee      	b.n	8009b54 <__ieee754_powf+0x3a0>
 8009b76:	bf00      	nop
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	3f7ffff3 	.word	0x3f7ffff3
 8009b80:	3f800007 	.word	0x3f800007
 8009b84:	3eaaaaab 	.word	0x3eaaaaab
 8009b88:	3fb8aa00 	.word	0x3fb8aa00
 8009b8c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009b90:	36eca570 	.word	0x36eca570
 8009b94:	4b800000 	.word	0x4b800000
 8009b98:	001cc471 	.word	0x001cc471
 8009b9c:	005db3d6 	.word	0x005db3d6
 8009ba0:	0800d294 	.word	0x0800d294
 8009ba4:	fffff000 	.word	0xfffff000
 8009ba8:	3e6c3255 	.word	0x3e6c3255
 8009bac:	3e53f142 	.word	0x3e53f142
 8009bb0:	3e8ba305 	.word	0x3e8ba305
 8009bb4:	3edb6db7 	.word	0x3edb6db7
 8009bb8:	3f19999a 	.word	0x3f19999a
 8009bbc:	0800d284 	.word	0x0800d284
 8009bc0:	3f76384f 	.word	0x3f76384f
 8009bc4:	3f763800 	.word	0x3f763800
 8009bc8:	369dc3a0 	.word	0x369dc3a0
 8009bcc:	0800d28c 	.word	0x0800d28c
 8009bd0:	3338aa3c 	.word	0x3338aa3c
 8009bd4:	43160000 	.word	0x43160000
 8009bd8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009bdc:	d96f      	bls.n	8009cbe <__ieee754_powf+0x50a>
 8009bde:	15db      	asrs	r3, r3, #23
 8009be0:	3b7e      	subs	r3, #126	@ 0x7e
 8009be2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009be6:	4118      	asrs	r0, r3
 8009be8:	4408      	add	r0, r1
 8009bea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009bee:	4a4e      	ldr	r2, [pc, #312]	@ (8009d28 <__ieee754_powf+0x574>)
 8009bf0:	3b7f      	subs	r3, #127	@ 0x7f
 8009bf2:	411a      	asrs	r2, r3
 8009bf4:	4002      	ands	r2, r0
 8009bf6:	ee07 2a10 	vmov	s14, r2
 8009bfa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009c02:	f1c3 0317 	rsb	r3, r3, #23
 8009c06:	4118      	asrs	r0, r3
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c0e:	bfb8      	it	lt
 8009c10:	4240      	neglt	r0, r0
 8009c12:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009c16:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009d2c <__ieee754_powf+0x578>
 8009c1a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009d30 <__ieee754_powf+0x57c>
 8009c1e:	ee16 3a90 	vmov	r3, s13
 8009c22:	f36f 030b 	bfc	r3, #0, #12
 8009c26:	ee06 3a90 	vmov	s13, r3
 8009c2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c2e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009c32:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009c36:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009d34 <__ieee754_powf+0x580>
 8009c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c3e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009c42:	eeb0 7a67 	vmov.f32	s14, s15
 8009c46:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009c4a:	eef0 5a47 	vmov.f32	s11, s14
 8009c4e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009c52:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009c56:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009c5a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009d38 <__ieee754_powf+0x584>
 8009c5e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009d3c <__ieee754_powf+0x588>
 8009c62:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009c66:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009d40 <__ieee754_powf+0x58c>
 8009c6a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009c6e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009d44 <__ieee754_powf+0x590>
 8009c72:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009c76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d48 <__ieee754_powf+0x594>
 8009c7a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8009c7e:	eeb0 6a47 	vmov.f32	s12, s14
 8009c82:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009c86:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009c8a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8009c8e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009c92:	eee7 7a27 	vfma.f32	s15, s14, s15
 8009c96:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8009c9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ca2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ca6:	ee10 3a10 	vmov	r3, s0
 8009caa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009cae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009cb2:	da06      	bge.n	8009cc2 <__ieee754_powf+0x50e>
 8009cb4:	f000 f854 	bl	8009d60 <scalbnf>
 8009cb8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009cbc:	e592      	b.n	80097e4 <__ieee754_powf+0x30>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e7a7      	b.n	8009c12 <__ieee754_powf+0x45e>
 8009cc2:	ee00 3a10 	vmov	s0, r3
 8009cc6:	e7f7      	b.n	8009cb8 <__ieee754_powf+0x504>
 8009cc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009ccc:	e58a      	b.n	80097e4 <__ieee754_powf+0x30>
 8009cce:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009d4c <__ieee754_powf+0x598>
 8009cd2:	e587      	b.n	80097e4 <__ieee754_powf+0x30>
 8009cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cd8:	e584      	b.n	80097e4 <__ieee754_powf+0x30>
 8009cda:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009cde:	f43f adbb 	beq.w	8009858 <__ieee754_powf+0xa4>
 8009ce2:	2502      	movs	r5, #2
 8009ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ce8:	f000 f832 	bl	8009d50 <fabsf>
 8009cec:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009cf0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009cf4:	4647      	mov	r7, r8
 8009cf6:	d003      	beq.n	8009d00 <__ieee754_powf+0x54c>
 8009cf8:	f1b8 0f00 	cmp.w	r8, #0
 8009cfc:	f47f addb 	bne.w	80098b6 <__ieee754_powf+0x102>
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	bfbc      	itt	lt
 8009d04:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009d08:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	f6bf ad69 	bge.w	80097e4 <__ieee754_powf+0x30>
 8009d12:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009d16:	ea58 0805 	orrs.w	r8, r8, r5
 8009d1a:	f47f adc7 	bne.w	80098ac <__ieee754_powf+0xf8>
 8009d1e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009d22:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009d26:	e55d      	b.n	80097e4 <__ieee754_powf+0x30>
 8009d28:	ff800000 	.word	0xff800000
 8009d2c:	3f317218 	.word	0x3f317218
 8009d30:	3f317200 	.word	0x3f317200
 8009d34:	35bfbe8c 	.word	0x35bfbe8c
 8009d38:	b5ddea0e 	.word	0xb5ddea0e
 8009d3c:	3331bb4c 	.word	0x3331bb4c
 8009d40:	388ab355 	.word	0x388ab355
 8009d44:	bb360b61 	.word	0xbb360b61
 8009d48:	3e2aaaab 	.word	0x3e2aaaab
 8009d4c:	00000000 	.word	0x00000000

08009d50 <fabsf>:
 8009d50:	ee10 3a10 	vmov	r3, s0
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d58:	ee00 3a10 	vmov	s0, r3
 8009d5c:	4770      	bx	lr
	...

08009d60 <scalbnf>:
 8009d60:	ee10 3a10 	vmov	r3, s0
 8009d64:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009d68:	d02b      	beq.n	8009dc2 <scalbnf+0x62>
 8009d6a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009d6e:	d302      	bcc.n	8009d76 <scalbnf+0x16>
 8009d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d74:	4770      	bx	lr
 8009d76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009d7a:	d123      	bne.n	8009dc4 <scalbnf+0x64>
 8009d7c:	4b24      	ldr	r3, [pc, #144]	@ (8009e10 <scalbnf+0xb0>)
 8009d7e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009e14 <scalbnf+0xb4>
 8009d82:	4298      	cmp	r0, r3
 8009d84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d88:	db17      	blt.n	8009dba <scalbnf+0x5a>
 8009d8a:	ee10 3a10 	vmov	r3, s0
 8009d8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d92:	3a19      	subs	r2, #25
 8009d94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009d98:	4288      	cmp	r0, r1
 8009d9a:	dd15      	ble.n	8009dc8 <scalbnf+0x68>
 8009d9c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009e18 <scalbnf+0xb8>
 8009da0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009e1c <scalbnf+0xbc>
 8009da4:	ee10 3a10 	vmov	r3, s0
 8009da8:	eeb0 7a67 	vmov.f32	s14, s15
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfb8      	it	lt
 8009db0:	eef0 7a66 	vmovlt.f32	s15, s13
 8009db4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009db8:	4770      	bx	lr
 8009dba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009e20 <scalbnf+0xc0>
 8009dbe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009dc2:	4770      	bx	lr
 8009dc4:	0dd2      	lsrs	r2, r2, #23
 8009dc6:	e7e5      	b.n	8009d94 <scalbnf+0x34>
 8009dc8:	4410      	add	r0, r2
 8009dca:	28fe      	cmp	r0, #254	@ 0xfe
 8009dcc:	dce6      	bgt.n	8009d9c <scalbnf+0x3c>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dd06      	ble.n	8009de0 <scalbnf+0x80>
 8009dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009dd6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009dda:	ee00 3a10 	vmov	s0, r3
 8009dde:	4770      	bx	lr
 8009de0:	f110 0f16 	cmn.w	r0, #22
 8009de4:	da09      	bge.n	8009dfa <scalbnf+0x9a>
 8009de6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009e20 <scalbnf+0xc0>
 8009dea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009e24 <scalbnf+0xc4>
 8009dee:	ee10 3a10 	vmov	r3, s0
 8009df2:	eeb0 7a67 	vmov.f32	s14, s15
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	e7d9      	b.n	8009dae <scalbnf+0x4e>
 8009dfa:	3019      	adds	r0, #25
 8009dfc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009e00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009e04:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009e28 <scalbnf+0xc8>
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	e7d7      	b.n	8009dbe <scalbnf+0x5e>
 8009e0e:	bf00      	nop
 8009e10:	ffff3cb0 	.word	0xffff3cb0
 8009e14:	4c000000 	.word	0x4c000000
 8009e18:	7149f2ca 	.word	0x7149f2ca
 8009e1c:	f149f2ca 	.word	0xf149f2ca
 8009e20:	0da24260 	.word	0x0da24260
 8009e24:	8da24260 	.word	0x8da24260
 8009e28:	33000000 	.word	0x33000000

08009e2c <with_errnof>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	ed2d 8b02 	vpush	{d8}
 8009e32:	eeb0 8a40 	vmov.f32	s16, s0
 8009e36:	4604      	mov	r4, r0
 8009e38:	f000 ff66 	bl	800ad08 <__errno>
 8009e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e40:	ecbd 8b02 	vpop	{d8}
 8009e44:	6004      	str	r4, [r0, #0]
 8009e46:	bd10      	pop	{r4, pc}

08009e48 <xflowf>:
 8009e48:	b130      	cbz	r0, 8009e58 <xflowf+0x10>
 8009e4a:	eef1 7a40 	vneg.f32	s15, s0
 8009e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009e52:	2022      	movs	r0, #34	@ 0x22
 8009e54:	f7ff bfea 	b.w	8009e2c <with_errnof>
 8009e58:	eef0 7a40 	vmov.f32	s15, s0
 8009e5c:	e7f7      	b.n	8009e4e <xflowf+0x6>
	...

08009e60 <__math_uflowf>:
 8009e60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009e68 <__math_uflowf+0x8>
 8009e64:	f7ff bff0 	b.w	8009e48 <xflowf>
 8009e68:	10000000 	.word	0x10000000

08009e6c <__math_oflowf>:
 8009e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009e74 <__math_oflowf+0x8>
 8009e70:	f7ff bfea 	b.w	8009e48 <xflowf>
 8009e74:	70000000 	.word	0x70000000

08009e78 <__ieee754_sqrtf>:
 8009e78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e7c:	4770      	bx	lr

08009e7e <__cvt>:
 8009e7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e82:	ec57 6b10 	vmov	r6, r7, d0
 8009e86:	2f00      	cmp	r7, #0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	bfbb      	ittet	lt
 8009e90:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e94:	461f      	movlt	r7, r3
 8009e96:	2300      	movge	r3, #0
 8009e98:	232d      	movlt	r3, #45	@ 0x2d
 8009e9a:	700b      	strb	r3, [r1, #0]
 8009e9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e9e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	f023 0820 	bic.w	r8, r3, #32
 8009ea8:	bfbc      	itt	lt
 8009eaa:	4632      	movlt	r2, r6
 8009eac:	4616      	movlt	r6, r2
 8009eae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009eb2:	d005      	beq.n	8009ec0 <__cvt+0x42>
 8009eb4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009eb8:	d100      	bne.n	8009ebc <__cvt+0x3e>
 8009eba:	3401      	adds	r4, #1
 8009ebc:	2102      	movs	r1, #2
 8009ebe:	e000      	b.n	8009ec2 <__cvt+0x44>
 8009ec0:	2103      	movs	r1, #3
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	ab02      	add	r3, sp, #8
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	ec47 6b10 	vmov	d0, r6, r7
 8009ece:	4653      	mov	r3, sl
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	f000 ffd1 	bl	800ae78 <_dtoa_r>
 8009ed6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009eda:	4605      	mov	r5, r0
 8009edc:	d119      	bne.n	8009f12 <__cvt+0x94>
 8009ede:	f019 0f01 	tst.w	r9, #1
 8009ee2:	d00e      	beq.n	8009f02 <__cvt+0x84>
 8009ee4:	eb00 0904 	add.w	r9, r0, r4
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	4630      	mov	r0, r6
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f6 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ef4:	b108      	cbz	r0, 8009efa <__cvt+0x7c>
 8009ef6:	f8cd 900c 	str.w	r9, [sp, #12]
 8009efa:	2230      	movs	r2, #48	@ 0x30
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	454b      	cmp	r3, r9
 8009f00:	d31e      	bcc.n	8009f40 <__cvt+0xc2>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f06:	1b5b      	subs	r3, r3, r5
 8009f08:	4628      	mov	r0, r5
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	b004      	add	sp, #16
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f16:	eb00 0904 	add.w	r9, r0, r4
 8009f1a:	d1e5      	bne.n	8009ee8 <__cvt+0x6a>
 8009f1c:	7803      	ldrb	r3, [r0, #0]
 8009f1e:	2b30      	cmp	r3, #48	@ 0x30
 8009f20:	d10a      	bne.n	8009f38 <__cvt+0xba>
 8009f22:	2200      	movs	r2, #0
 8009f24:	2300      	movs	r3, #0
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f2e:	b918      	cbnz	r0, 8009f38 <__cvt+0xba>
 8009f30:	f1c4 0401 	rsb	r4, r4, #1
 8009f34:	f8ca 4000 	str.w	r4, [sl]
 8009f38:	f8da 3000 	ldr.w	r3, [sl]
 8009f3c:	4499      	add	r9, r3
 8009f3e:	e7d3      	b.n	8009ee8 <__cvt+0x6a>
 8009f40:	1c59      	adds	r1, r3, #1
 8009f42:	9103      	str	r1, [sp, #12]
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e7d9      	b.n	8009efc <__cvt+0x7e>

08009f48 <__exponent>:
 8009f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	bfba      	itte	lt
 8009f4e:	4249      	neglt	r1, r1
 8009f50:	232d      	movlt	r3, #45	@ 0x2d
 8009f52:	232b      	movge	r3, #43	@ 0x2b
 8009f54:	2909      	cmp	r1, #9
 8009f56:	7002      	strb	r2, [r0, #0]
 8009f58:	7043      	strb	r3, [r0, #1]
 8009f5a:	dd29      	ble.n	8009fb0 <__exponent+0x68>
 8009f5c:	f10d 0307 	add.w	r3, sp, #7
 8009f60:	461d      	mov	r5, r3
 8009f62:	270a      	movs	r7, #10
 8009f64:	461a      	mov	r2, r3
 8009f66:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f6a:	fb07 1416 	mls	r4, r7, r6, r1
 8009f6e:	3430      	adds	r4, #48	@ 0x30
 8009f70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f74:	460c      	mov	r4, r1
 8009f76:	2c63      	cmp	r4, #99	@ 0x63
 8009f78:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	dcf1      	bgt.n	8009f64 <__exponent+0x1c>
 8009f80:	3130      	adds	r1, #48	@ 0x30
 8009f82:	1e94      	subs	r4, r2, #2
 8009f84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f88:	1c41      	adds	r1, r0, #1
 8009f8a:	4623      	mov	r3, r4
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	d30a      	bcc.n	8009fa6 <__exponent+0x5e>
 8009f90:	f10d 0309 	add.w	r3, sp, #9
 8009f94:	1a9b      	subs	r3, r3, r2
 8009f96:	42ac      	cmp	r4, r5
 8009f98:	bf88      	it	hi
 8009f9a:	2300      	movhi	r3, #0
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	4403      	add	r3, r0
 8009fa0:	1a18      	subs	r0, r3, r0
 8009fa2:	b003      	add	sp, #12
 8009fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009faa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fae:	e7ed      	b.n	8009f8c <__exponent+0x44>
 8009fb0:	2330      	movs	r3, #48	@ 0x30
 8009fb2:	3130      	adds	r1, #48	@ 0x30
 8009fb4:	7083      	strb	r3, [r0, #2]
 8009fb6:	70c1      	strb	r1, [r0, #3]
 8009fb8:	1d03      	adds	r3, r0, #4
 8009fba:	e7f1      	b.n	8009fa0 <__exponent+0x58>

08009fbc <_printf_float>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	b08d      	sub	sp, #52	@ 0x34
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fc8:	4616      	mov	r6, r2
 8009fca:	461f      	mov	r7, r3
 8009fcc:	4605      	mov	r5, r0
 8009fce:	f000 fe51 	bl	800ac74 <_localeconv_r>
 8009fd2:	6803      	ldr	r3, [r0, #0]
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7f6 f952 	bl	8000280 <strlen>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe4:	9005      	str	r0, [sp, #20]
 8009fe6:	3307      	adds	r3, #7
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	f103 0208 	add.w	r2, r3, #8
 8009ff0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ff4:	f8d4 b000 	ldr.w	fp, [r4]
 8009ff8:	f8c8 2000 	str.w	r2, [r8]
 8009ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a000:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a004:	9307      	str	r3, [sp, #28]
 800a006:	f8cd 8018 	str.w	r8, [sp, #24]
 800a00a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a012:	4b9c      	ldr	r3, [pc, #624]	@ (800a284 <_printf_float+0x2c8>)
 800a014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a018:	f7f6 fd90 	bl	8000b3c <__aeabi_dcmpun>
 800a01c:	bb70      	cbnz	r0, 800a07c <_printf_float+0xc0>
 800a01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a022:	4b98      	ldr	r3, [pc, #608]	@ (800a284 <_printf_float+0x2c8>)
 800a024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a028:	f7f6 fd6a 	bl	8000b00 <__aeabi_dcmple>
 800a02c:	bb30      	cbnz	r0, 800a07c <_printf_float+0xc0>
 800a02e:	2200      	movs	r2, #0
 800a030:	2300      	movs	r3, #0
 800a032:	4640      	mov	r0, r8
 800a034:	4649      	mov	r1, r9
 800a036:	f7f6 fd59 	bl	8000aec <__aeabi_dcmplt>
 800a03a:	b110      	cbz	r0, 800a042 <_printf_float+0x86>
 800a03c:	232d      	movs	r3, #45	@ 0x2d
 800a03e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a042:	4a91      	ldr	r2, [pc, #580]	@ (800a288 <_printf_float+0x2cc>)
 800a044:	4b91      	ldr	r3, [pc, #580]	@ (800a28c <_printf_float+0x2d0>)
 800a046:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a04a:	bf8c      	ite	hi
 800a04c:	4690      	movhi	r8, r2
 800a04e:	4698      	movls	r8, r3
 800a050:	2303      	movs	r3, #3
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	f02b 0304 	bic.w	r3, fp, #4
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	f04f 0900 	mov.w	r9, #0
 800a05e:	9700      	str	r7, [sp, #0]
 800a060:	4633      	mov	r3, r6
 800a062:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f9d2 	bl	800a410 <_printf_common>
 800a06c:	3001      	adds	r0, #1
 800a06e:	f040 808d 	bne.w	800a18c <_printf_float+0x1d0>
 800a072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a076:	b00d      	add	sp, #52	@ 0x34
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fd5a 	bl	8000b3c <__aeabi_dcmpun>
 800a088:	b140      	cbz	r0, 800a09c <_printf_float+0xe0>
 800a08a:	464b      	mov	r3, r9
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfbc      	itt	lt
 800a090:	232d      	movlt	r3, #45	@ 0x2d
 800a092:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a096:	4a7e      	ldr	r2, [pc, #504]	@ (800a290 <_printf_float+0x2d4>)
 800a098:	4b7e      	ldr	r3, [pc, #504]	@ (800a294 <_printf_float+0x2d8>)
 800a09a:	e7d4      	b.n	800a046 <_printf_float+0x8a>
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0a2:	9206      	str	r2, [sp, #24]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	d13b      	bne.n	800a120 <_printf_float+0x164>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	9303      	str	r3, [sp, #12]
 800a0b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	6861      	ldr	r1, [r4, #4]
 800a0c2:	ec49 8b10 	vmov	d0, r8, r9
 800a0c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff fed7 	bl	8009e7e <__cvt>
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d4:	2b47      	cmp	r3, #71	@ 0x47
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	d129      	bne.n	800a12e <_printf_float+0x172>
 800a0da:	1cc8      	adds	r0, r1, #3
 800a0dc:	db02      	blt.n	800a0e4 <_printf_float+0x128>
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	dd41      	ble.n	800a168 <_printf_float+0x1ac>
 800a0e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a0ec:	3901      	subs	r1, #1
 800a0ee:	4652      	mov	r2, sl
 800a0f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0f6:	f7ff ff27 	bl	8009f48 <__exponent>
 800a0fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0fc:	1813      	adds	r3, r2, r0
 800a0fe:	2a01      	cmp	r2, #1
 800a100:	4681      	mov	r9, r0
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	dc02      	bgt.n	800a10c <_printf_float+0x150>
 800a106:	6822      	ldr	r2, [r4, #0]
 800a108:	07d2      	lsls	r2, r2, #31
 800a10a:	d501      	bpl.n	800a110 <_printf_float+0x154>
 800a10c:	3301      	adds	r3, #1
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0a2      	beq.n	800a05e <_printf_float+0xa2>
 800a118:	232d      	movs	r3, #45	@ 0x2d
 800a11a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11e:	e79e      	b.n	800a05e <_printf_float+0xa2>
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	2a47      	cmp	r2, #71	@ 0x47
 800a124:	d1c2      	bne.n	800a0ac <_printf_float+0xf0>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1c0      	bne.n	800a0ac <_printf_float+0xf0>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7bd      	b.n	800a0aa <_printf_float+0xee>
 800a12e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a132:	d9db      	bls.n	800a0ec <_printf_float+0x130>
 800a134:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a138:	d118      	bne.n	800a16c <_printf_float+0x1b0>
 800a13a:	2900      	cmp	r1, #0
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	dd0b      	ble.n	800a158 <_printf_float+0x19c>
 800a140:	6121      	str	r1, [r4, #16]
 800a142:	b913      	cbnz	r3, 800a14a <_printf_float+0x18e>
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	07d0      	lsls	r0, r2, #31
 800a148:	d502      	bpl.n	800a150 <_printf_float+0x194>
 800a14a:	3301      	adds	r3, #1
 800a14c:	440b      	add	r3, r1
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	e7db      	b.n	800a110 <_printf_float+0x154>
 800a158:	b913      	cbnz	r3, 800a160 <_printf_float+0x1a4>
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	07d2      	lsls	r2, r2, #31
 800a15e:	d501      	bpl.n	800a164 <_printf_float+0x1a8>
 800a160:	3302      	adds	r3, #2
 800a162:	e7f4      	b.n	800a14e <_printf_float+0x192>
 800a164:	2301      	movs	r3, #1
 800a166:	e7f2      	b.n	800a14e <_printf_float+0x192>
 800a168:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	4299      	cmp	r1, r3
 800a170:	db05      	blt.n	800a17e <_printf_float+0x1c2>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	6121      	str	r1, [r4, #16]
 800a176:	07d8      	lsls	r0, r3, #31
 800a178:	d5ea      	bpl.n	800a150 <_printf_float+0x194>
 800a17a:	1c4b      	adds	r3, r1, #1
 800a17c:	e7e7      	b.n	800a14e <_printf_float+0x192>
 800a17e:	2900      	cmp	r1, #0
 800a180:	bfd4      	ite	le
 800a182:	f1c1 0202 	rsble	r2, r1, #2
 800a186:	2201      	movgt	r2, #1
 800a188:	4413      	add	r3, r2
 800a18a:	e7e0      	b.n	800a14e <_printf_float+0x192>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	055a      	lsls	r2, r3, #21
 800a190:	d407      	bmi.n	800a1a2 <_printf_float+0x1e6>
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	4642      	mov	r2, r8
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	d12b      	bne.n	800a1f8 <_printf_float+0x23c>
 800a1a0:	e767      	b.n	800a072 <_printf_float+0xb6>
 800a1a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1a6:	f240 80dd 	bls.w	800a364 <_printf_float+0x3a8>
 800a1aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f7f6 fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d033      	beq.n	800a222 <_printf_float+0x266>
 800a1ba:	4a37      	ldr	r2, [pc, #220]	@ (800a298 <_printf_float+0x2dc>)
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	f43f af54 	beq.w	800a072 <_printf_float+0xb6>
 800a1ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ce:	4543      	cmp	r3, r8
 800a1d0:	db02      	blt.n	800a1d8 <_printf_float+0x21c>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	07d8      	lsls	r0, r3, #31
 800a1d6:	d50f      	bpl.n	800a1f8 <_printf_float+0x23c>
 800a1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f af45 	beq.w	800a072 <_printf_float+0xb6>
 800a1e8:	f04f 0900 	mov.w	r9, #0
 800a1ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a1f0:	f104 0a1a 	add.w	sl, r4, #26
 800a1f4:	45c8      	cmp	r8, r9
 800a1f6:	dc09      	bgt.n	800a20c <_printf_float+0x250>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	079b      	lsls	r3, r3, #30
 800a1fc:	f100 8103 	bmi.w	800a406 <_printf_float+0x44a>
 800a200:	68e0      	ldr	r0, [r4, #12]
 800a202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a204:	4298      	cmp	r0, r3
 800a206:	bfb8      	it	lt
 800a208:	4618      	movlt	r0, r3
 800a20a:	e734      	b.n	800a076 <_printf_float+0xba>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af2b 	beq.w	800a072 <_printf_float+0xb6>
 800a21c:	f109 0901 	add.w	r9, r9, #1
 800a220:	e7e8      	b.n	800a1f4 <_printf_float+0x238>
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	dc39      	bgt.n	800a29c <_printf_float+0x2e0>
 800a228:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <_printf_float+0x2dc>)
 800a22a:	2301      	movs	r3, #1
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f af1d 	beq.w	800a072 <_printf_float+0xb6>
 800a238:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a23c:	ea59 0303 	orrs.w	r3, r9, r3
 800a240:	d102      	bne.n	800a248 <_printf_float+0x28c>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d5d7      	bpl.n	800a1f8 <_printf_float+0x23c>
 800a248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f af0d 	beq.w	800a072 <_printf_float+0xb6>
 800a258:	f04f 0a00 	mov.w	sl, #0
 800a25c:	f104 0b1a 	add.w	fp, r4, #26
 800a260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a262:	425b      	negs	r3, r3
 800a264:	4553      	cmp	r3, sl
 800a266:	dc01      	bgt.n	800a26c <_printf_float+0x2b0>
 800a268:	464b      	mov	r3, r9
 800a26a:	e793      	b.n	800a194 <_printf_float+0x1d8>
 800a26c:	2301      	movs	r3, #1
 800a26e:	465a      	mov	r2, fp
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	47b8      	blx	r7
 800a276:	3001      	adds	r0, #1
 800a278:	f43f aefb 	beq.w	800a072 <_printf_float+0xb6>
 800a27c:	f10a 0a01 	add.w	sl, sl, #1
 800a280:	e7ee      	b.n	800a260 <_printf_float+0x2a4>
 800a282:	bf00      	nop
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	0800d116 	.word	0x0800d116
 800a28c:	0800d112 	.word	0x0800d112
 800a290:	0800d11e 	.word	0x0800d11e
 800a294:	0800d11a 	.word	0x0800d11a
 800a298:	0800d122 	.word	0x0800d122
 800a29c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a29e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2a2:	4553      	cmp	r3, sl
 800a2a4:	bfa8      	it	ge
 800a2a6:	4653      	movge	r3, sl
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	4699      	mov	r9, r3
 800a2ac:	dc36      	bgt.n	800a31c <_printf_float+0x360>
 800a2ae:	f04f 0b00 	mov.w	fp, #0
 800a2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2b6:	f104 021a 	add.w	r2, r4, #26
 800a2ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2bc:	9306      	str	r3, [sp, #24]
 800a2be:	eba3 0309 	sub.w	r3, r3, r9
 800a2c2:	455b      	cmp	r3, fp
 800a2c4:	dc31      	bgt.n	800a32a <_printf_float+0x36e>
 800a2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c8:	459a      	cmp	sl, r3
 800a2ca:	dc3a      	bgt.n	800a342 <_printf_float+0x386>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	07da      	lsls	r2, r3, #31
 800a2d0:	d437      	bmi.n	800a342 <_printf_float+0x386>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	ebaa 0303 	sub.w	r3, sl, r3
 800a2de:	4599      	cmp	r9, r3
 800a2e0:	bfa8      	it	ge
 800a2e2:	4699      	movge	r9, r3
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	dc33      	bgt.n	800a352 <_printf_float+0x396>
 800a2ea:	f04f 0800 	mov.w	r8, #0
 800a2ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2f2:	f104 0b1a 	add.w	fp, r4, #26
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a2fc:	eba3 0309 	sub.w	r3, r3, r9
 800a300:	4543      	cmp	r3, r8
 800a302:	f77f af79 	ble.w	800a1f8 <_printf_float+0x23c>
 800a306:	2301      	movs	r3, #1
 800a308:	465a      	mov	r2, fp
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f aeae 	beq.w	800a072 <_printf_float+0xb6>
 800a316:	f108 0801 	add.w	r8, r8, #1
 800a31a:	e7ec      	b.n	800a2f6 <_printf_float+0x33a>
 800a31c:	4642      	mov	r2, r8
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	47b8      	blx	r7
 800a324:	3001      	adds	r0, #1
 800a326:	d1c2      	bne.n	800a2ae <_printf_float+0x2f2>
 800a328:	e6a3      	b.n	800a072 <_printf_float+0xb6>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	9206      	str	r2, [sp, #24]
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	f43f ae9c 	beq.w	800a072 <_printf_float+0xb6>
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	f10b 0b01 	add.w	fp, fp, #1
 800a340:	e7bb      	b.n	800a2ba <_printf_float+0x2fe>
 800a342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	d1c0      	bne.n	800a2d2 <_printf_float+0x316>
 800a350:	e68f      	b.n	800a072 <_printf_float+0xb6>
 800a352:	9a06      	ldr	r2, [sp, #24]
 800a354:	464b      	mov	r3, r9
 800a356:	4442      	add	r2, r8
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	d1c3      	bne.n	800a2ea <_printf_float+0x32e>
 800a362:	e686      	b.n	800a072 <_printf_float+0xb6>
 800a364:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a368:	f1ba 0f01 	cmp.w	sl, #1
 800a36c:	dc01      	bgt.n	800a372 <_printf_float+0x3b6>
 800a36e:	07db      	lsls	r3, r3, #31
 800a370:	d536      	bpl.n	800a3e0 <_printf_float+0x424>
 800a372:	2301      	movs	r3, #1
 800a374:	4642      	mov	r2, r8
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	f43f ae78 	beq.w	800a072 <_printf_float+0xb6>
 800a382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae70 	beq.w	800a072 <_printf_float+0xb6>
 800a392:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a396:	2200      	movs	r2, #0
 800a398:	2300      	movs	r3, #0
 800a39a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a39e:	f7f6 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3a2:	b9c0      	cbnz	r0, 800a3d6 <_printf_float+0x41a>
 800a3a4:	4653      	mov	r3, sl
 800a3a6:	f108 0201 	add.w	r2, r8, #1
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d10c      	bne.n	800a3ce <_printf_float+0x412>
 800a3b4:	e65d      	b.n	800a072 <_printf_float+0xb6>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	465a      	mov	r2, fp
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f ae56 	beq.w	800a072 <_printf_float+0xb6>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	45d0      	cmp	r8, sl
 800a3cc:	dbf3      	blt.n	800a3b6 <_printf_float+0x3fa>
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3d4:	e6df      	b.n	800a196 <_printf_float+0x1da>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	f104 0b1a 	add.w	fp, r4, #26
 800a3de:	e7f4      	b.n	800a3ca <_printf_float+0x40e>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4642      	mov	r2, r8
 800a3e4:	e7e1      	b.n	800a3aa <_printf_float+0x3ee>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	464a      	mov	r2, r9
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f43f ae3e 	beq.w	800a072 <_printf_float+0xb6>
 800a3f6:	f108 0801 	add.w	r8, r8, #1
 800a3fa:	68e3      	ldr	r3, [r4, #12]
 800a3fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	4543      	cmp	r3, r8
 800a402:	dcf0      	bgt.n	800a3e6 <_printf_float+0x42a>
 800a404:	e6fc      	b.n	800a200 <_printf_float+0x244>
 800a406:	f04f 0800 	mov.w	r8, #0
 800a40a:	f104 0919 	add.w	r9, r4, #25
 800a40e:	e7f4      	b.n	800a3fa <_printf_float+0x43e>

0800a410 <_printf_common>:
 800a410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	4616      	mov	r6, r2
 800a416:	4698      	mov	r8, r3
 800a418:	688a      	ldr	r2, [r1, #8]
 800a41a:	690b      	ldr	r3, [r1, #16]
 800a41c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a420:	4293      	cmp	r3, r2
 800a422:	bfb8      	it	lt
 800a424:	4613      	movlt	r3, r2
 800a426:	6033      	str	r3, [r6, #0]
 800a428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a42c:	4607      	mov	r7, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	b10a      	cbz	r2, 800a436 <_printf_common+0x26>
 800a432:	3301      	adds	r3, #1
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	0699      	lsls	r1, r3, #26
 800a43a:	bf42      	ittt	mi
 800a43c:	6833      	ldrmi	r3, [r6, #0]
 800a43e:	3302      	addmi	r3, #2
 800a440:	6033      	strmi	r3, [r6, #0]
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	f015 0506 	ands.w	r5, r5, #6
 800a448:	d106      	bne.n	800a458 <_printf_common+0x48>
 800a44a:	f104 0a19 	add.w	sl, r4, #25
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	6832      	ldr	r2, [r6, #0]
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	42ab      	cmp	r3, r5
 800a456:	dc26      	bgt.n	800a4a6 <_printf_common+0x96>
 800a458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	3b00      	subs	r3, #0
 800a460:	bf18      	it	ne
 800a462:	2301      	movne	r3, #1
 800a464:	0692      	lsls	r2, r2, #26
 800a466:	d42b      	bmi.n	800a4c0 <_printf_common+0xb0>
 800a468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a46c:	4641      	mov	r1, r8
 800a46e:	4638      	mov	r0, r7
 800a470:	47c8      	blx	r9
 800a472:	3001      	adds	r0, #1
 800a474:	d01e      	beq.n	800a4b4 <_printf_common+0xa4>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	f003 0306 	and.w	r3, r3, #6
 800a47e:	2b04      	cmp	r3, #4
 800a480:	bf02      	ittt	eq
 800a482:	68e5      	ldreq	r5, [r4, #12]
 800a484:	6833      	ldreq	r3, [r6, #0]
 800a486:	1aed      	subeq	r5, r5, r3
 800a488:	68a3      	ldr	r3, [r4, #8]
 800a48a:	bf0c      	ite	eq
 800a48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a490:	2500      	movne	r5, #0
 800a492:	4293      	cmp	r3, r2
 800a494:	bfc4      	itt	gt
 800a496:	1a9b      	subgt	r3, r3, r2
 800a498:	18ed      	addgt	r5, r5, r3
 800a49a:	2600      	movs	r6, #0
 800a49c:	341a      	adds	r4, #26
 800a49e:	42b5      	cmp	r5, r6
 800a4a0:	d11a      	bne.n	800a4d8 <_printf_common+0xc8>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e008      	b.n	800a4b8 <_printf_common+0xa8>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	4641      	mov	r1, r8
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	47c8      	blx	r9
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d103      	bne.n	800a4bc <_printf_common+0xac>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4bc:	3501      	adds	r5, #1
 800a4be:	e7c6      	b.n	800a44e <_printf_common+0x3e>
 800a4c0:	18e1      	adds	r1, r4, r3
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	2030      	movs	r0, #48	@ 0x30
 800a4c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ca:	4422      	add	r2, r4
 800a4cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d4:	3302      	adds	r3, #2
 800a4d6:	e7c7      	b.n	800a468 <_printf_common+0x58>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4641      	mov	r1, r8
 800a4de:	4638      	mov	r0, r7
 800a4e0:	47c8      	blx	r9
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d0e6      	beq.n	800a4b4 <_printf_common+0xa4>
 800a4e6:	3601      	adds	r6, #1
 800a4e8:	e7d9      	b.n	800a49e <_printf_common+0x8e>
	...

0800a4ec <_printf_i>:
 800a4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	7e0f      	ldrb	r7, [r1, #24]
 800a4f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f4:	2f78      	cmp	r7, #120	@ 0x78
 800a4f6:	4691      	mov	r9, r2
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	469a      	mov	sl, r3
 800a4fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a502:	d807      	bhi.n	800a514 <_printf_i+0x28>
 800a504:	2f62      	cmp	r7, #98	@ 0x62
 800a506:	d80a      	bhi.n	800a51e <_printf_i+0x32>
 800a508:	2f00      	cmp	r7, #0
 800a50a:	f000 80d1 	beq.w	800a6b0 <_printf_i+0x1c4>
 800a50e:	2f58      	cmp	r7, #88	@ 0x58
 800a510:	f000 80b8 	beq.w	800a684 <_printf_i+0x198>
 800a514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a51c:	e03a      	b.n	800a594 <_printf_i+0xa8>
 800a51e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a522:	2b15      	cmp	r3, #21
 800a524:	d8f6      	bhi.n	800a514 <_printf_i+0x28>
 800a526:	a101      	add	r1, pc, #4	@ (adr r1, 800a52c <_printf_i+0x40>)
 800a528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a52c:	0800a585 	.word	0x0800a585
 800a530:	0800a599 	.word	0x0800a599
 800a534:	0800a515 	.word	0x0800a515
 800a538:	0800a515 	.word	0x0800a515
 800a53c:	0800a515 	.word	0x0800a515
 800a540:	0800a515 	.word	0x0800a515
 800a544:	0800a599 	.word	0x0800a599
 800a548:	0800a515 	.word	0x0800a515
 800a54c:	0800a515 	.word	0x0800a515
 800a550:	0800a515 	.word	0x0800a515
 800a554:	0800a515 	.word	0x0800a515
 800a558:	0800a697 	.word	0x0800a697
 800a55c:	0800a5c3 	.word	0x0800a5c3
 800a560:	0800a651 	.word	0x0800a651
 800a564:	0800a515 	.word	0x0800a515
 800a568:	0800a515 	.word	0x0800a515
 800a56c:	0800a6b9 	.word	0x0800a6b9
 800a570:	0800a515 	.word	0x0800a515
 800a574:	0800a5c3 	.word	0x0800a5c3
 800a578:	0800a515 	.word	0x0800a515
 800a57c:	0800a515 	.word	0x0800a515
 800a580:	0800a659 	.word	0x0800a659
 800a584:	6833      	ldr	r3, [r6, #0]
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6032      	str	r2, [r6, #0]
 800a58c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a594:	2301      	movs	r3, #1
 800a596:	e09c      	b.n	800a6d2 <_printf_i+0x1e6>
 800a598:	6833      	ldr	r3, [r6, #0]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1d19      	adds	r1, r3, #4
 800a59e:	6031      	str	r1, [r6, #0]
 800a5a0:	0606      	lsls	r6, r0, #24
 800a5a2:	d501      	bpl.n	800a5a8 <_printf_i+0xbc>
 800a5a4:	681d      	ldr	r5, [r3, #0]
 800a5a6:	e003      	b.n	800a5b0 <_printf_i+0xc4>
 800a5a8:	0645      	lsls	r5, r0, #25
 800a5aa:	d5fb      	bpl.n	800a5a4 <_printf_i+0xb8>
 800a5ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	da03      	bge.n	800a5bc <_printf_i+0xd0>
 800a5b4:	232d      	movs	r3, #45	@ 0x2d
 800a5b6:	426d      	negs	r5, r5
 800a5b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5bc:	4858      	ldr	r0, [pc, #352]	@ (800a720 <_printf_i+0x234>)
 800a5be:	230a      	movs	r3, #10
 800a5c0:	e011      	b.n	800a5e6 <_printf_i+0xfa>
 800a5c2:	6821      	ldr	r1, [r4, #0]
 800a5c4:	6833      	ldr	r3, [r6, #0]
 800a5c6:	0608      	lsls	r0, r1, #24
 800a5c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5cc:	d402      	bmi.n	800a5d4 <_printf_i+0xe8>
 800a5ce:	0649      	lsls	r1, r1, #25
 800a5d0:	bf48      	it	mi
 800a5d2:	b2ad      	uxthmi	r5, r5
 800a5d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5d6:	4852      	ldr	r0, [pc, #328]	@ (800a720 <_printf_i+0x234>)
 800a5d8:	6033      	str	r3, [r6, #0]
 800a5da:	bf14      	ite	ne
 800a5dc:	230a      	movne	r3, #10
 800a5de:	2308      	moveq	r3, #8
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5e6:	6866      	ldr	r6, [r4, #4]
 800a5e8:	60a6      	str	r6, [r4, #8]
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	db05      	blt.n	800a5fa <_printf_i+0x10e>
 800a5ee:	6821      	ldr	r1, [r4, #0]
 800a5f0:	432e      	orrs	r6, r5
 800a5f2:	f021 0104 	bic.w	r1, r1, #4
 800a5f6:	6021      	str	r1, [r4, #0]
 800a5f8:	d04b      	beq.n	800a692 <_printf_i+0x1a6>
 800a5fa:	4616      	mov	r6, r2
 800a5fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a600:	fb03 5711 	mls	r7, r3, r1, r5
 800a604:	5dc7      	ldrb	r7, [r0, r7]
 800a606:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a60a:	462f      	mov	r7, r5
 800a60c:	42bb      	cmp	r3, r7
 800a60e:	460d      	mov	r5, r1
 800a610:	d9f4      	bls.n	800a5fc <_printf_i+0x110>
 800a612:	2b08      	cmp	r3, #8
 800a614:	d10b      	bne.n	800a62e <_printf_i+0x142>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	07df      	lsls	r7, r3, #31
 800a61a:	d508      	bpl.n	800a62e <_printf_i+0x142>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	6861      	ldr	r1, [r4, #4]
 800a620:	4299      	cmp	r1, r3
 800a622:	bfde      	ittt	le
 800a624:	2330      	movle	r3, #48	@ 0x30
 800a626:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a62a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a62e:	1b92      	subs	r2, r2, r6
 800a630:	6122      	str	r2, [r4, #16]
 800a632:	f8cd a000 	str.w	sl, [sp]
 800a636:	464b      	mov	r3, r9
 800a638:	aa03      	add	r2, sp, #12
 800a63a:	4621      	mov	r1, r4
 800a63c:	4640      	mov	r0, r8
 800a63e:	f7ff fee7 	bl	800a410 <_printf_common>
 800a642:	3001      	adds	r0, #1
 800a644:	d14a      	bne.n	800a6dc <_printf_i+0x1f0>
 800a646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a64a:	b004      	add	sp, #16
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	f043 0320 	orr.w	r3, r3, #32
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	4832      	ldr	r0, [pc, #200]	@ (800a724 <_printf_i+0x238>)
 800a65a:	2778      	movs	r7, #120	@ 0x78
 800a65c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	6831      	ldr	r1, [r6, #0]
 800a664:	061f      	lsls	r7, r3, #24
 800a666:	f851 5b04 	ldr.w	r5, [r1], #4
 800a66a:	d402      	bmi.n	800a672 <_printf_i+0x186>
 800a66c:	065f      	lsls	r7, r3, #25
 800a66e:	bf48      	it	mi
 800a670:	b2ad      	uxthmi	r5, r5
 800a672:	6031      	str	r1, [r6, #0]
 800a674:	07d9      	lsls	r1, r3, #31
 800a676:	bf44      	itt	mi
 800a678:	f043 0320 	orrmi.w	r3, r3, #32
 800a67c:	6023      	strmi	r3, [r4, #0]
 800a67e:	b11d      	cbz	r5, 800a688 <_printf_i+0x19c>
 800a680:	2310      	movs	r3, #16
 800a682:	e7ad      	b.n	800a5e0 <_printf_i+0xf4>
 800a684:	4826      	ldr	r0, [pc, #152]	@ (800a720 <_printf_i+0x234>)
 800a686:	e7e9      	b.n	800a65c <_printf_i+0x170>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	f023 0320 	bic.w	r3, r3, #32
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	e7f6      	b.n	800a680 <_printf_i+0x194>
 800a692:	4616      	mov	r6, r2
 800a694:	e7bd      	b.n	800a612 <_printf_i+0x126>
 800a696:	6833      	ldr	r3, [r6, #0]
 800a698:	6825      	ldr	r5, [r4, #0]
 800a69a:	6961      	ldr	r1, [r4, #20]
 800a69c:	1d18      	adds	r0, r3, #4
 800a69e:	6030      	str	r0, [r6, #0]
 800a6a0:	062e      	lsls	r6, r5, #24
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	d501      	bpl.n	800a6aa <_printf_i+0x1be>
 800a6a6:	6019      	str	r1, [r3, #0]
 800a6a8:	e002      	b.n	800a6b0 <_printf_i+0x1c4>
 800a6aa:	0668      	lsls	r0, r5, #25
 800a6ac:	d5fb      	bpl.n	800a6a6 <_printf_i+0x1ba>
 800a6ae:	8019      	strh	r1, [r3, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	e7bc      	b.n	800a632 <_printf_i+0x146>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	1d1a      	adds	r2, r3, #4
 800a6bc:	6032      	str	r2, [r6, #0]
 800a6be:	681e      	ldr	r6, [r3, #0]
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f7f5 fd8b 	bl	80001e0 <memchr>
 800a6ca:	b108      	cbz	r0, 800a6d0 <_printf_i+0x1e4>
 800a6cc:	1b80      	subs	r0, r0, r6
 800a6ce:	6060      	str	r0, [r4, #4]
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6da:	e7aa      	b.n	800a632 <_printf_i+0x146>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	47d0      	blx	sl
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d0ad      	beq.n	800a646 <_printf_i+0x15a>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	079b      	lsls	r3, r3, #30
 800a6ee:	d413      	bmi.n	800a718 <_printf_i+0x22c>
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	bfb8      	it	lt
 800a6f8:	4618      	movlt	r0, r3
 800a6fa:	e7a6      	b.n	800a64a <_printf_i+0x15e>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4632      	mov	r2, r6
 800a700:	4649      	mov	r1, r9
 800a702:	4640      	mov	r0, r8
 800a704:	47d0      	blx	sl
 800a706:	3001      	adds	r0, #1
 800a708:	d09d      	beq.n	800a646 <_printf_i+0x15a>
 800a70a:	3501      	adds	r5, #1
 800a70c:	68e3      	ldr	r3, [r4, #12]
 800a70e:	9903      	ldr	r1, [sp, #12]
 800a710:	1a5b      	subs	r3, r3, r1
 800a712:	42ab      	cmp	r3, r5
 800a714:	dcf2      	bgt.n	800a6fc <_printf_i+0x210>
 800a716:	e7eb      	b.n	800a6f0 <_printf_i+0x204>
 800a718:	2500      	movs	r5, #0
 800a71a:	f104 0619 	add.w	r6, r4, #25
 800a71e:	e7f5      	b.n	800a70c <_printf_i+0x220>
 800a720:	0800d124 	.word	0x0800d124
 800a724:	0800d135 	.word	0x0800d135

0800a728 <std>:
 800a728:	2300      	movs	r3, #0
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	e9c0 3300 	strd	r3, r3, [r0]
 800a732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a736:	6083      	str	r3, [r0, #8]
 800a738:	8181      	strh	r1, [r0, #12]
 800a73a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a73c:	81c2      	strh	r2, [r0, #14]
 800a73e:	6183      	str	r3, [r0, #24]
 800a740:	4619      	mov	r1, r3
 800a742:	2208      	movs	r2, #8
 800a744:	305c      	adds	r0, #92	@ 0x5c
 800a746:	f000 fa8d 	bl	800ac64 <memset>
 800a74a:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <std+0x58>)
 800a74c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a74e:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <std+0x5c>)
 800a750:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <std+0x60>)
 800a754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <std+0x64>)
 800a758:	6323      	str	r3, [r4, #48]	@ 0x30
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <std+0x68>)
 800a75c:	6224      	str	r4, [r4, #32]
 800a75e:	429c      	cmp	r4, r3
 800a760:	d006      	beq.n	800a770 <std+0x48>
 800a762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a766:	4294      	cmp	r4, r2
 800a768:	d002      	beq.n	800a770 <std+0x48>
 800a76a:	33d0      	adds	r3, #208	@ 0xd0
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d105      	bne.n	800a77c <std+0x54>
 800a770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a778:	f000 baf0 	b.w	800ad5c <__retarget_lock_init_recursive>
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	bf00      	nop
 800a780:	0800aa3d 	.word	0x0800aa3d
 800a784:	0800aa5f 	.word	0x0800aa5f
 800a788:	0800aa97 	.word	0x0800aa97
 800a78c:	0800aabb 	.word	0x0800aabb
 800a790:	200004a8 	.word	0x200004a8

0800a794 <stdio_exit_handler>:
 800a794:	4a02      	ldr	r2, [pc, #8]	@ (800a7a0 <stdio_exit_handler+0xc>)
 800a796:	4903      	ldr	r1, [pc, #12]	@ (800a7a4 <stdio_exit_handler+0x10>)
 800a798:	4803      	ldr	r0, [pc, #12]	@ (800a7a8 <stdio_exit_handler+0x14>)
 800a79a:	f000 b869 	b.w	800a870 <_fwalk_sglue>
 800a79e:	bf00      	nop
 800a7a0:	2000002c 	.word	0x2000002c
 800a7a4:	0800c949 	.word	0x0800c949
 800a7a8:	2000003c 	.word	0x2000003c

0800a7ac <cleanup_stdio>:
 800a7ac:	6841      	ldr	r1, [r0, #4]
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e0 <cleanup_stdio+0x34>)
 800a7b0:	4299      	cmp	r1, r3
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	d001      	beq.n	800a7bc <cleanup_stdio+0x10>
 800a7b8:	f002 f8c6 	bl	800c948 <_fflush_r>
 800a7bc:	68a1      	ldr	r1, [r4, #8]
 800a7be:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <cleanup_stdio+0x38>)
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	d002      	beq.n	800a7ca <cleanup_stdio+0x1e>
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f002 f8bf 	bl	800c948 <_fflush_r>
 800a7ca:	68e1      	ldr	r1, [r4, #12]
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <cleanup_stdio+0x3c>)
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d004      	beq.n	800a7dc <cleanup_stdio+0x30>
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d8:	f002 b8b6 	b.w	800c948 <_fflush_r>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	bf00      	nop
 800a7e0:	200004a8 	.word	0x200004a8
 800a7e4:	20000510 	.word	0x20000510
 800a7e8:	20000578 	.word	0x20000578

0800a7ec <global_stdio_init.part.0>:
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a81c <global_stdio_init.part.0+0x30>)
 800a7f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a820 <global_stdio_init.part.0+0x34>)
 800a7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a824 <global_stdio_init.part.0+0x38>)
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2104      	movs	r1, #4
 800a7fc:	f7ff ff94 	bl	800a728 <std>
 800a800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a804:	2201      	movs	r2, #1
 800a806:	2109      	movs	r1, #9
 800a808:	f7ff ff8e 	bl	800a728 <std>
 800a80c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a810:	2202      	movs	r2, #2
 800a812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a816:	2112      	movs	r1, #18
 800a818:	f7ff bf86 	b.w	800a728 <std>
 800a81c:	200005e0 	.word	0x200005e0
 800a820:	200004a8 	.word	0x200004a8
 800a824:	0800a795 	.word	0x0800a795

0800a828 <__sfp_lock_acquire>:
 800a828:	4801      	ldr	r0, [pc, #4]	@ (800a830 <__sfp_lock_acquire+0x8>)
 800a82a:	f000 ba98 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800a82e:	bf00      	nop
 800a830:	200005e9 	.word	0x200005e9

0800a834 <__sfp_lock_release>:
 800a834:	4801      	ldr	r0, [pc, #4]	@ (800a83c <__sfp_lock_release+0x8>)
 800a836:	f000 ba93 	b.w	800ad60 <__retarget_lock_release_recursive>
 800a83a:	bf00      	nop
 800a83c:	200005e9 	.word	0x200005e9

0800a840 <__sinit>:
 800a840:	b510      	push	{r4, lr}
 800a842:	4604      	mov	r4, r0
 800a844:	f7ff fff0 	bl	800a828 <__sfp_lock_acquire>
 800a848:	6a23      	ldr	r3, [r4, #32]
 800a84a:	b11b      	cbz	r3, 800a854 <__sinit+0x14>
 800a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a850:	f7ff bff0 	b.w	800a834 <__sfp_lock_release>
 800a854:	4b04      	ldr	r3, [pc, #16]	@ (800a868 <__sinit+0x28>)
 800a856:	6223      	str	r3, [r4, #32]
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <__sinit+0x2c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f5      	bne.n	800a84c <__sinit+0xc>
 800a860:	f7ff ffc4 	bl	800a7ec <global_stdio_init.part.0>
 800a864:	e7f2      	b.n	800a84c <__sinit+0xc>
 800a866:	bf00      	nop
 800a868:	0800a7ad 	.word	0x0800a7ad
 800a86c:	200005e0 	.word	0x200005e0

0800a870 <_fwalk_sglue>:
 800a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a874:	4607      	mov	r7, r0
 800a876:	4688      	mov	r8, r1
 800a878:	4614      	mov	r4, r2
 800a87a:	2600      	movs	r6, #0
 800a87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a880:	f1b9 0901 	subs.w	r9, r9, #1
 800a884:	d505      	bpl.n	800a892 <_fwalk_sglue+0x22>
 800a886:	6824      	ldr	r4, [r4, #0]
 800a888:	2c00      	cmp	r4, #0
 800a88a:	d1f7      	bne.n	800a87c <_fwalk_sglue+0xc>
 800a88c:	4630      	mov	r0, r6
 800a88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d907      	bls.n	800a8a8 <_fwalk_sglue+0x38>
 800a898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a89c:	3301      	adds	r3, #1
 800a89e:	d003      	beq.n	800a8a8 <_fwalk_sglue+0x38>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	47c0      	blx	r8
 800a8a6:	4306      	orrs	r6, r0
 800a8a8:	3568      	adds	r5, #104	@ 0x68
 800a8aa:	e7e9      	b.n	800a880 <_fwalk_sglue+0x10>

0800a8ac <iprintf>:
 800a8ac:	b40f      	push	{r0, r1, r2, r3}
 800a8ae:	b507      	push	{r0, r1, r2, lr}
 800a8b0:	4906      	ldr	r1, [pc, #24]	@ (800a8cc <iprintf+0x20>)
 800a8b2:	ab04      	add	r3, sp, #16
 800a8b4:	6808      	ldr	r0, [r1, #0]
 800a8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ba:	6881      	ldr	r1, [r0, #8]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f001 fea7 	bl	800c610 <_vfiprintf_r>
 800a8c2:	b003      	add	sp, #12
 800a8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c8:	b004      	add	sp, #16
 800a8ca:	4770      	bx	lr
 800a8cc:	20000038 	.word	0x20000038

0800a8d0 <_puts_r>:
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b570      	push	{r4, r5, r6, lr}
 800a8d4:	6884      	ldr	r4, [r0, #8]
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	460e      	mov	r6, r1
 800a8da:	b90b      	cbnz	r3, 800a8e0 <_puts_r+0x10>
 800a8dc:	f7ff ffb0 	bl	800a840 <__sinit>
 800a8e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8e2:	07db      	lsls	r3, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_puts_r+0x22>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	0598      	lsls	r0, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_puts_r+0x22>
 800a8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ee:	f000 fa36 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	d502      	bpl.n	800a8fe <_puts_r+0x2e>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d135      	bne.n	800a96a <_puts_r+0x9a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f000 f959 	bl	800abb8 <__swsetup_r>
 800a906:	b380      	cbz	r0, 800a96a <_puts_r+0x9a>
 800a908:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a90c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d405      	bmi.n	800a91e <_puts_r+0x4e>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	059b      	lsls	r3, r3, #22
 800a916:	d402      	bmi.n	800a91e <_puts_r+0x4e>
 800a918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a91a:	f000 fa21 	bl	800ad60 <__retarget_lock_release_recursive>
 800a91e:	4628      	mov	r0, r5
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	2b00      	cmp	r3, #0
 800a924:	da04      	bge.n	800a930 <_puts_r+0x60>
 800a926:	69a2      	ldr	r2, [r4, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	dc17      	bgt.n	800a95c <_puts_r+0x8c>
 800a92c:	290a      	cmp	r1, #10
 800a92e:	d015      	beq.n	800a95c <_puts_r+0x8c>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	6022      	str	r2, [r4, #0]
 800a936:	7019      	strb	r1, [r3, #0]
 800a938:	68a3      	ldr	r3, [r4, #8]
 800a93a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a93e:	3b01      	subs	r3, #1
 800a940:	60a3      	str	r3, [r4, #8]
 800a942:	2900      	cmp	r1, #0
 800a944:	d1ed      	bne.n	800a922 <_puts_r+0x52>
 800a946:	2b00      	cmp	r3, #0
 800a948:	da11      	bge.n	800a96e <_puts_r+0x9e>
 800a94a:	4622      	mov	r2, r4
 800a94c:	210a      	movs	r1, #10
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f8f4 	bl	800ab3c <__swbuf_r>
 800a954:	3001      	adds	r0, #1
 800a956:	d0d7      	beq.n	800a908 <_puts_r+0x38>
 800a958:	250a      	movs	r5, #10
 800a95a:	e7d7      	b.n	800a90c <_puts_r+0x3c>
 800a95c:	4622      	mov	r2, r4
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 f8ec 	bl	800ab3c <__swbuf_r>
 800a964:	3001      	adds	r0, #1
 800a966:	d1e7      	bne.n	800a938 <_puts_r+0x68>
 800a968:	e7ce      	b.n	800a908 <_puts_r+0x38>
 800a96a:	3e01      	subs	r6, #1
 800a96c:	e7e4      	b.n	800a938 <_puts_r+0x68>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	6022      	str	r2, [r4, #0]
 800a974:	220a      	movs	r2, #10
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	e7ee      	b.n	800a958 <_puts_r+0x88>
	...

0800a97c <puts>:
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <puts+0xc>)
 800a97e:	4601      	mov	r1, r0
 800a980:	6818      	ldr	r0, [r3, #0]
 800a982:	f7ff bfa5 	b.w	800a8d0 <_puts_r>
 800a986:	bf00      	nop
 800a988:	20000038 	.word	0x20000038

0800a98c <sniprintf>:
 800a98c:	b40c      	push	{r2, r3}
 800a98e:	b530      	push	{r4, r5, lr}
 800a990:	4b18      	ldr	r3, [pc, #96]	@ (800a9f4 <sniprintf+0x68>)
 800a992:	1e0c      	subs	r4, r1, #0
 800a994:	681d      	ldr	r5, [r3, #0]
 800a996:	b09d      	sub	sp, #116	@ 0x74
 800a998:	da08      	bge.n	800a9ac <sniprintf+0x20>
 800a99a:	238b      	movs	r3, #139	@ 0x8b
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9a2:	b01d      	add	sp, #116	@ 0x74
 800a9a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a8:	b002      	add	sp, #8
 800a9aa:	4770      	bx	lr
 800a9ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9b4:	f04f 0300 	mov.w	r3, #0
 800a9b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a9ba:	bf14      	ite	ne
 800a9bc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a9c0:	4623      	moveq	r3, r4
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	9307      	str	r3, [sp, #28]
 800a9c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9ca:	9002      	str	r0, [sp, #8]
 800a9cc:	9006      	str	r0, [sp, #24]
 800a9ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a9d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a9d4:	ab21      	add	r3, sp, #132	@ 0x84
 800a9d6:	a902      	add	r1, sp, #8
 800a9d8:	4628      	mov	r0, r5
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	f001 fcf2 	bl	800c3c4 <_svfiprintf_r>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	bfbc      	itt	lt
 800a9e4:	238b      	movlt	r3, #139	@ 0x8b
 800a9e6:	602b      	strlt	r3, [r5, #0]
 800a9e8:	2c00      	cmp	r4, #0
 800a9ea:	d0da      	beq.n	800a9a2 <sniprintf+0x16>
 800a9ec:	9b02      	ldr	r3, [sp, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e7d6      	b.n	800a9a2 <sniprintf+0x16>
 800a9f4:	20000038 	.word	0x20000038

0800a9f8 <siprintf>:
 800a9f8:	b40e      	push	{r1, r2, r3}
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	b09d      	sub	sp, #116	@ 0x74
 800a9fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aa00:	9002      	str	r0, [sp, #8]
 800aa02:	9006      	str	r0, [sp, #24]
 800aa04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa08:	480a      	ldr	r0, [pc, #40]	@ (800aa34 <siprintf+0x3c>)
 800aa0a:	9107      	str	r1, [sp, #28]
 800aa0c:	9104      	str	r1, [sp, #16]
 800aa0e:	490a      	ldr	r1, [pc, #40]	@ (800aa38 <siprintf+0x40>)
 800aa10:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa14:	9105      	str	r1, [sp, #20]
 800aa16:	2400      	movs	r4, #0
 800aa18:	a902      	add	r1, sp, #8
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aa20:	f001 fcd0 	bl	800c3c4 <_svfiprintf_r>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	701c      	strb	r4, [r3, #0]
 800aa28:	b01d      	add	sp, #116	@ 0x74
 800aa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2e:	b003      	add	sp, #12
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000038 	.word	0x20000038
 800aa38:	ffff0208 	.word	0xffff0208

0800aa3c <__sread>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa44:	f000 f93c 	bl	800acc0 <_read_r>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	bfab      	itete	ge
 800aa4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa4e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa50:	181b      	addge	r3, r3, r0
 800aa52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa56:	bfac      	ite	ge
 800aa58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa5a:	81a3      	strhlt	r3, [r4, #12]
 800aa5c:	bd10      	pop	{r4, pc}

0800aa5e <__swrite>:
 800aa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa62:	461f      	mov	r7, r3
 800aa64:	898b      	ldrh	r3, [r1, #12]
 800aa66:	05db      	lsls	r3, r3, #23
 800aa68:	4605      	mov	r5, r0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	d505      	bpl.n	800aa7c <__swrite+0x1e>
 800aa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa74:	2302      	movs	r3, #2
 800aa76:	2200      	movs	r2, #0
 800aa78:	f000 f910 	bl	800ac9c <_lseek_r>
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	4632      	mov	r2, r6
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa92:	f000 b927 	b.w	800ace4 <_write_r>

0800aa96 <__sseek>:
 800aa96:	b510      	push	{r4, lr}
 800aa98:	460c      	mov	r4, r1
 800aa9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9e:	f000 f8fd 	bl	800ac9c <_lseek_r>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	bf15      	itete	ne
 800aaa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aaaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aaae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aab2:	81a3      	strheq	r3, [r4, #12]
 800aab4:	bf18      	it	ne
 800aab6:	81a3      	strhne	r3, [r4, #12]
 800aab8:	bd10      	pop	{r4, pc}

0800aaba <__sclose>:
 800aaba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aabe:	f000 b8dd 	b.w	800ac7c <_close_r>

0800aac2 <_vsniprintf_r>:
 800aac2:	b530      	push	{r4, r5, lr}
 800aac4:	4614      	mov	r4, r2
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	b09b      	sub	sp, #108	@ 0x6c
 800aaca:	4605      	mov	r5, r0
 800aacc:	461a      	mov	r2, r3
 800aace:	da05      	bge.n	800aadc <_vsniprintf_r+0x1a>
 800aad0:	238b      	movs	r3, #139	@ 0x8b
 800aad2:	6003      	str	r3, [r0, #0]
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aad8:	b01b      	add	sp, #108	@ 0x6c
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aae0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aaea:	bf14      	ite	ne
 800aaec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800aaf0:	4623      	moveq	r3, r4
 800aaf2:	9302      	str	r3, [sp, #8]
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aafa:	9100      	str	r1, [sp, #0]
 800aafc:	9104      	str	r1, [sp, #16]
 800aafe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab02:	4669      	mov	r1, sp
 800ab04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ab06:	f001 fc5d 	bl	800c3c4 <_svfiprintf_r>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	bfbc      	itt	lt
 800ab0e:	238b      	movlt	r3, #139	@ 0x8b
 800ab10:	602b      	strlt	r3, [r5, #0]
 800ab12:	2c00      	cmp	r4, #0
 800ab14:	d0e0      	beq.n	800aad8 <_vsniprintf_r+0x16>
 800ab16:	9b00      	ldr	r3, [sp, #0]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
 800ab1c:	e7dc      	b.n	800aad8 <_vsniprintf_r+0x16>
	...

0800ab20 <vsniprintf>:
 800ab20:	b507      	push	{r0, r1, r2, lr}
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4613      	mov	r3, r2
 800ab26:	460a      	mov	r2, r1
 800ab28:	4601      	mov	r1, r0
 800ab2a:	4803      	ldr	r0, [pc, #12]	@ (800ab38 <vsniprintf+0x18>)
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	f7ff ffc8 	bl	800aac2 <_vsniprintf_r>
 800ab32:	b003      	add	sp, #12
 800ab34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab38:	20000038 	.word	0x20000038

0800ab3c <__swbuf_r>:
 800ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3e:	460e      	mov	r6, r1
 800ab40:	4614      	mov	r4, r2
 800ab42:	4605      	mov	r5, r0
 800ab44:	b118      	cbz	r0, 800ab4e <__swbuf_r+0x12>
 800ab46:	6a03      	ldr	r3, [r0, #32]
 800ab48:	b90b      	cbnz	r3, 800ab4e <__swbuf_r+0x12>
 800ab4a:	f7ff fe79 	bl	800a840 <__sinit>
 800ab4e:	69a3      	ldr	r3, [r4, #24]
 800ab50:	60a3      	str	r3, [r4, #8]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	071a      	lsls	r2, r3, #28
 800ab56:	d501      	bpl.n	800ab5c <__swbuf_r+0x20>
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	b943      	cbnz	r3, 800ab6e <__swbuf_r+0x32>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 f82a 	bl	800abb8 <__swsetup_r>
 800ab64:	b118      	cbz	r0, 800ab6e <__swbuf_r+0x32>
 800ab66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	6922      	ldr	r2, [r4, #16]
 800ab72:	1a98      	subs	r0, r3, r2
 800ab74:	6963      	ldr	r3, [r4, #20]
 800ab76:	b2f6      	uxtb	r6, r6
 800ab78:	4283      	cmp	r3, r0
 800ab7a:	4637      	mov	r7, r6
 800ab7c:	dc05      	bgt.n	800ab8a <__swbuf_r+0x4e>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4628      	mov	r0, r5
 800ab82:	f001 fee1 	bl	800c948 <_fflush_r>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1ed      	bne.n	800ab66 <__swbuf_r+0x2a>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	701e      	strb	r6, [r3, #0]
 800ab98:	6962      	ldr	r2, [r4, #20]
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d004      	beq.n	800abaa <__swbuf_r+0x6e>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	07db      	lsls	r3, r3, #31
 800aba4:	d5e1      	bpl.n	800ab6a <__swbuf_r+0x2e>
 800aba6:	2e0a      	cmp	r6, #10
 800aba8:	d1df      	bne.n	800ab6a <__swbuf_r+0x2e>
 800abaa:	4621      	mov	r1, r4
 800abac:	4628      	mov	r0, r5
 800abae:	f001 fecb 	bl	800c948 <_fflush_r>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0d9      	beq.n	800ab6a <__swbuf_r+0x2e>
 800abb6:	e7d6      	b.n	800ab66 <__swbuf_r+0x2a>

0800abb8 <__swsetup_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4b29      	ldr	r3, [pc, #164]	@ (800ac60 <__swsetup_r+0xa8>)
 800abbc:	4605      	mov	r5, r0
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	460c      	mov	r4, r1
 800abc2:	b118      	cbz	r0, 800abcc <__swsetup_r+0x14>
 800abc4:	6a03      	ldr	r3, [r0, #32]
 800abc6:	b90b      	cbnz	r3, 800abcc <__swsetup_r+0x14>
 800abc8:	f7ff fe3a 	bl	800a840 <__sinit>
 800abcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd0:	0719      	lsls	r1, r3, #28
 800abd2:	d422      	bmi.n	800ac1a <__swsetup_r+0x62>
 800abd4:	06da      	lsls	r2, r3, #27
 800abd6:	d407      	bmi.n	800abe8 <__swsetup_r+0x30>
 800abd8:	2209      	movs	r2, #9
 800abda:	602a      	str	r2, [r5, #0]
 800abdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abe0:	81a3      	strh	r3, [r4, #12]
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abe6:	e033      	b.n	800ac50 <__swsetup_r+0x98>
 800abe8:	0758      	lsls	r0, r3, #29
 800abea:	d512      	bpl.n	800ac12 <__swsetup_r+0x5a>
 800abec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abee:	b141      	cbz	r1, 800ac02 <__swsetup_r+0x4a>
 800abf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abf4:	4299      	cmp	r1, r3
 800abf6:	d002      	beq.n	800abfe <__swsetup_r+0x46>
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 ff0d 	bl	800ba18 <_free_r>
 800abfe:	2300      	movs	r3, #0
 800ac00:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f043 0308 	orr.w	r3, r3, #8
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	6923      	ldr	r3, [r4, #16]
 800ac1c:	b94b      	cbnz	r3, 800ac32 <__swsetup_r+0x7a>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac28:	d003      	beq.n	800ac32 <__swsetup_r+0x7a>
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f001 fed9 	bl	800c9e4 <__smakebuf_r>
 800ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac36:	f013 0201 	ands.w	r2, r3, #1
 800ac3a:	d00a      	beq.n	800ac52 <__swsetup_r+0x9a>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	60a2      	str	r2, [r4, #8]
 800ac40:	6962      	ldr	r2, [r4, #20]
 800ac42:	4252      	negs	r2, r2
 800ac44:	61a2      	str	r2, [r4, #24]
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	b942      	cbnz	r2, 800ac5c <__swsetup_r+0xa4>
 800ac4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac4e:	d1c5      	bne.n	800abdc <__swsetup_r+0x24>
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
 800ac52:	0799      	lsls	r1, r3, #30
 800ac54:	bf58      	it	pl
 800ac56:	6962      	ldrpl	r2, [r4, #20]
 800ac58:	60a2      	str	r2, [r4, #8]
 800ac5a:	e7f4      	b.n	800ac46 <__swsetup_r+0x8e>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7f7      	b.n	800ac50 <__swsetup_r+0x98>
 800ac60:	20000038 	.word	0x20000038

0800ac64 <memset>:
 800ac64:	4402      	add	r2, r0
 800ac66:	4603      	mov	r3, r0
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d100      	bne.n	800ac6e <memset+0xa>
 800ac6c:	4770      	bx	lr
 800ac6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac72:	e7f9      	b.n	800ac68 <memset+0x4>

0800ac74 <_localeconv_r>:
 800ac74:	4800      	ldr	r0, [pc, #0]	@ (800ac78 <_localeconv_r+0x4>)
 800ac76:	4770      	bx	lr
 800ac78:	20000178 	.word	0x20000178

0800ac7c <_close_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d06      	ldr	r5, [pc, #24]	@ (800ac98 <_close_r+0x1c>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7fe fb68 	bl	800935c <_close>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_close_r+0x1a>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_close_r+0x1a>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	200005e4 	.word	0x200005e4

0800ac9c <_lseek_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4d07      	ldr	r5, [pc, #28]	@ (800acbc <_lseek_r+0x20>)
 800aca0:	4604      	mov	r4, r0
 800aca2:	4608      	mov	r0, r1
 800aca4:	4611      	mov	r1, r2
 800aca6:	2200      	movs	r2, #0
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f7fe fb17 	bl	80092de <_lseek>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_lseek_r+0x1e>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_lseek_r+0x1e>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	200005e4 	.word	0x200005e4

0800acc0 <_read_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d07      	ldr	r5, [pc, #28]	@ (800ace0 <_read_r+0x20>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7fe faaf 	bl	8009232 <_read>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_read_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_read_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	200005e4 	.word	0x200005e4

0800ace4 <_write_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	@ (800ad04 <_write_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7fe fb05 	bl	8009302 <_write>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_write_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_write_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	200005e4 	.word	0x200005e4

0800ad08 <__errno>:
 800ad08:	4b01      	ldr	r3, [pc, #4]	@ (800ad10 <__errno+0x8>)
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20000038 	.word	0x20000038

0800ad14 <__libc_init_array>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	4d0d      	ldr	r5, [pc, #52]	@ (800ad4c <__libc_init_array+0x38>)
 800ad18:	4c0d      	ldr	r4, [pc, #52]	@ (800ad50 <__libc_init_array+0x3c>)
 800ad1a:	1b64      	subs	r4, r4, r5
 800ad1c:	10a4      	asrs	r4, r4, #2
 800ad1e:	2600      	movs	r6, #0
 800ad20:	42a6      	cmp	r6, r4
 800ad22:	d109      	bne.n	800ad38 <__libc_init_array+0x24>
 800ad24:	4d0b      	ldr	r5, [pc, #44]	@ (800ad54 <__libc_init_array+0x40>)
 800ad26:	4c0c      	ldr	r4, [pc, #48]	@ (800ad58 <__libc_init_array+0x44>)
 800ad28:	f001 ffe2 	bl	800ccf0 <_init>
 800ad2c:	1b64      	subs	r4, r4, r5
 800ad2e:	10a4      	asrs	r4, r4, #2
 800ad30:	2600      	movs	r6, #0
 800ad32:	42a6      	cmp	r6, r4
 800ad34:	d105      	bne.n	800ad42 <__libc_init_array+0x2e>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad3c:	4798      	blx	r3
 800ad3e:	3601      	adds	r6, #1
 800ad40:	e7ee      	b.n	800ad20 <__libc_init_array+0xc>
 800ad42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad46:	4798      	blx	r3
 800ad48:	3601      	adds	r6, #1
 800ad4a:	e7f2      	b.n	800ad32 <__libc_init_array+0x1e>
 800ad4c:	0800d4a4 	.word	0x0800d4a4
 800ad50:	0800d4a4 	.word	0x0800d4a4
 800ad54:	0800d4a4 	.word	0x0800d4a4
 800ad58:	0800d4a8 	.word	0x0800d4a8

0800ad5c <__retarget_lock_init_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_acquire_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__retarget_lock_release_recursive>:
 800ad60:	4770      	bx	lr

0800ad62 <quorem>:
 800ad62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad66:	6903      	ldr	r3, [r0, #16]
 800ad68:	690c      	ldr	r4, [r1, #16]
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	db7e      	blt.n	800ae6e <quorem+0x10c>
 800ad70:	3c01      	subs	r4, #1
 800ad72:	f101 0814 	add.w	r8, r1, #20
 800ad76:	00a3      	lsls	r3, r4, #2
 800ad78:	f100 0514 	add.w	r5, r0, #20
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad94:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad98:	d32e      	bcc.n	800adf8 <quorem+0x96>
 800ad9a:	f04f 0a00 	mov.w	sl, #0
 800ad9e:	46c4      	mov	ip, r8
 800ada0:	46ae      	mov	lr, r5
 800ada2:	46d3      	mov	fp, sl
 800ada4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ada8:	b298      	uxth	r0, r3
 800adaa:	fb06 a000 	mla	r0, r6, r0, sl
 800adae:	0c02      	lsrs	r2, r0, #16
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	fb06 2303 	mla	r3, r6, r3, r2
 800adb6:	f8de 2000 	ldr.w	r2, [lr]
 800adba:	b280      	uxth	r0, r0
 800adbc:	b292      	uxth	r2, r2
 800adbe:	1a12      	subs	r2, r2, r0
 800adc0:	445a      	add	r2, fp
 800adc2:	f8de 0000 	ldr.w	r0, [lr]
 800adc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800add0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800add4:	b292      	uxth	r2, r2
 800add6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800adda:	45e1      	cmp	r9, ip
 800addc:	f84e 2b04 	str.w	r2, [lr], #4
 800ade0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ade4:	d2de      	bcs.n	800ada4 <quorem+0x42>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	58eb      	ldr	r3, [r5, r3]
 800adea:	b92b      	cbnz	r3, 800adf8 <quorem+0x96>
 800adec:	9b01      	ldr	r3, [sp, #4]
 800adee:	3b04      	subs	r3, #4
 800adf0:	429d      	cmp	r5, r3
 800adf2:	461a      	mov	r2, r3
 800adf4:	d32f      	bcc.n	800ae56 <quorem+0xf4>
 800adf6:	613c      	str	r4, [r7, #16]
 800adf8:	4638      	mov	r0, r7
 800adfa:	f001 f97f 	bl	800c0fc <__mcmp>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	db25      	blt.n	800ae4e <quorem+0xec>
 800ae02:	4629      	mov	r1, r5
 800ae04:	2000      	movs	r0, #0
 800ae06:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae0a:	f8d1 c000 	ldr.w	ip, [r1]
 800ae0e:	fa1f fe82 	uxth.w	lr, r2
 800ae12:	fa1f f38c 	uxth.w	r3, ip
 800ae16:	eba3 030e 	sub.w	r3, r3, lr
 800ae1a:	4403      	add	r3, r0
 800ae1c:	0c12      	lsrs	r2, r2, #16
 800ae1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae2c:	45c1      	cmp	r9, r8
 800ae2e:	f841 3b04 	str.w	r3, [r1], #4
 800ae32:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae36:	d2e6      	bcs.n	800ae06 <quorem+0xa4>
 800ae38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae40:	b922      	cbnz	r2, 800ae4c <quorem+0xea>
 800ae42:	3b04      	subs	r3, #4
 800ae44:	429d      	cmp	r5, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	d30b      	bcc.n	800ae62 <quorem+0x100>
 800ae4a:	613c      	str	r4, [r7, #16]
 800ae4c:	3601      	adds	r6, #1
 800ae4e:	4630      	mov	r0, r6
 800ae50:	b003      	add	sp, #12
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	6812      	ldr	r2, [r2, #0]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	2a00      	cmp	r2, #0
 800ae5c:	d1cb      	bne.n	800adf6 <quorem+0x94>
 800ae5e:	3c01      	subs	r4, #1
 800ae60:	e7c6      	b.n	800adf0 <quorem+0x8e>
 800ae62:	6812      	ldr	r2, [r2, #0]
 800ae64:	3b04      	subs	r3, #4
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	d1ef      	bne.n	800ae4a <quorem+0xe8>
 800ae6a:	3c01      	subs	r4, #1
 800ae6c:	e7ea      	b.n	800ae44 <quorem+0xe2>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	e7ee      	b.n	800ae50 <quorem+0xee>
 800ae72:	0000      	movs	r0, r0
 800ae74:	0000      	movs	r0, r0
	...

0800ae78 <_dtoa_r>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	69c7      	ldr	r7, [r0, #28]
 800ae7e:	b097      	sub	sp, #92	@ 0x5c
 800ae80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ae84:	ec55 4b10 	vmov	r4, r5, d0
 800ae88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ae8a:	9107      	str	r1, [sp, #28]
 800ae8c:	4681      	mov	r9, r0
 800ae8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae92:	b97f      	cbnz	r7, 800aeb4 <_dtoa_r+0x3c>
 800ae94:	2010      	movs	r0, #16
 800ae96:	f000 fe09 	bl	800baac <malloc>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800aea0:	b920      	cbnz	r0, 800aeac <_dtoa_r+0x34>
 800aea2:	4ba9      	ldr	r3, [pc, #676]	@ (800b148 <_dtoa_r+0x2d0>)
 800aea4:	21ef      	movs	r1, #239	@ 0xef
 800aea6:	48a9      	ldr	r0, [pc, #676]	@ (800b14c <_dtoa_r+0x2d4>)
 800aea8:	f001 fe32 	bl	800cb10 <__assert_func>
 800aeac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aeb0:	6007      	str	r7, [r0, #0]
 800aeb2:	60c7      	str	r7, [r0, #12]
 800aeb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aeb8:	6819      	ldr	r1, [r3, #0]
 800aeba:	b159      	cbz	r1, 800aed4 <_dtoa_r+0x5c>
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	604a      	str	r2, [r1, #4]
 800aec0:	2301      	movs	r3, #1
 800aec2:	4093      	lsls	r3, r2
 800aec4:	608b      	str	r3, [r1, #8]
 800aec6:	4648      	mov	r0, r9
 800aec8:	f000 fee6 	bl	800bc98 <_Bfree>
 800aecc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	1e2b      	subs	r3, r5, #0
 800aed6:	bfb9      	ittee	lt
 800aed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aedc:	9305      	strlt	r3, [sp, #20]
 800aede:	2300      	movge	r3, #0
 800aee0:	6033      	strge	r3, [r6, #0]
 800aee2:	9f05      	ldr	r7, [sp, #20]
 800aee4:	4b9a      	ldr	r3, [pc, #616]	@ (800b150 <_dtoa_r+0x2d8>)
 800aee6:	bfbc      	itt	lt
 800aee8:	2201      	movlt	r2, #1
 800aeea:	6032      	strlt	r2, [r6, #0]
 800aeec:	43bb      	bics	r3, r7
 800aeee:	d112      	bne.n	800af16 <_dtoa_r+0x9e>
 800aef0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aefc:	4323      	orrs	r3, r4
 800aefe:	f000 855a 	beq.w	800b9b6 <_dtoa_r+0xb3e>
 800af02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b164 <_dtoa_r+0x2ec>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 855c 	beq.w	800b9c6 <_dtoa_r+0xb4e>
 800af0e:	f10a 0303 	add.w	r3, sl, #3
 800af12:	f000 bd56 	b.w	800b9c2 <_dtoa_r+0xb4a>
 800af16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800af1a:	2200      	movs	r2, #0
 800af1c:	ec51 0b17 	vmov	r0, r1, d7
 800af20:	2300      	movs	r3, #0
 800af22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800af26:	f7f5 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800af2a:	4680      	mov	r8, r0
 800af2c:	b158      	cbz	r0, 800af46 <_dtoa_r+0xce>
 800af2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800af30:	2301      	movs	r3, #1
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af36:	b113      	cbz	r3, 800af3e <_dtoa_r+0xc6>
 800af38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800af3a:	4b86      	ldr	r3, [pc, #536]	@ (800b154 <_dtoa_r+0x2dc>)
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b168 <_dtoa_r+0x2f0>
 800af42:	f000 bd40 	b.w	800b9c6 <_dtoa_r+0xb4e>
 800af46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800af4a:	aa14      	add	r2, sp, #80	@ 0x50
 800af4c:	a915      	add	r1, sp, #84	@ 0x54
 800af4e:	4648      	mov	r0, r9
 800af50:	f001 f984 	bl	800c25c <__d2b>
 800af54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af58:	9002      	str	r0, [sp, #8]
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d078      	beq.n	800b050 <_dtoa_r+0x1d8>
 800af5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800af64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af78:	4619      	mov	r1, r3
 800af7a:	2200      	movs	r2, #0
 800af7c:	4b76      	ldr	r3, [pc, #472]	@ (800b158 <_dtoa_r+0x2e0>)
 800af7e:	f7f5 f98b 	bl	8000298 <__aeabi_dsub>
 800af82:	a36b      	add	r3, pc, #428	@ (adr r3, 800b130 <_dtoa_r+0x2b8>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb3e 	bl	8000608 <__aeabi_dmul>
 800af8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b138 <_dtoa_r+0x2c0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 f983 	bl	800029c <__adddf3>
 800af96:	4604      	mov	r4, r0
 800af98:	4630      	mov	r0, r6
 800af9a:	460d      	mov	r5, r1
 800af9c:	f7f5 faca 	bl	8000534 <__aeabi_i2d>
 800afa0:	a367      	add	r3, pc, #412	@ (adr r3, 800b140 <_dtoa_r+0x2c8>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 f973 	bl	800029c <__adddf3>
 800afb6:	4604      	mov	r4, r0
 800afb8:	460d      	mov	r5, r1
 800afba:	f7f5 fdd5 	bl	8000b68 <__aeabi_d2iz>
 800afbe:	2200      	movs	r2, #0
 800afc0:	4607      	mov	r7, r0
 800afc2:	2300      	movs	r3, #0
 800afc4:	4620      	mov	r0, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	f7f5 fd90 	bl	8000aec <__aeabi_dcmplt>
 800afcc:	b140      	cbz	r0, 800afe0 <_dtoa_r+0x168>
 800afce:	4638      	mov	r0, r7
 800afd0:	f7f5 fab0 	bl	8000534 <__aeabi_i2d>
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	f7f5 fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800afdc:	b900      	cbnz	r0, 800afe0 <_dtoa_r+0x168>
 800afde:	3f01      	subs	r7, #1
 800afe0:	2f16      	cmp	r7, #22
 800afe2:	d852      	bhi.n	800b08a <_dtoa_r+0x212>
 800afe4:	4b5d      	ldr	r3, [pc, #372]	@ (800b15c <_dtoa_r+0x2e4>)
 800afe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aff2:	f7f5 fd7b 	bl	8000aec <__aeabi_dcmplt>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d049      	beq.n	800b08e <_dtoa_r+0x216>
 800affa:	3f01      	subs	r7, #1
 800affc:	2300      	movs	r3, #0
 800affe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b002:	1b9b      	subs	r3, r3, r6
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	bf45      	ittet	mi
 800b008:	f1c3 0301 	rsbmi	r3, r3, #1
 800b00c:	9300      	strmi	r3, [sp, #0]
 800b00e:	2300      	movpl	r3, #0
 800b010:	2300      	movmi	r3, #0
 800b012:	9206      	str	r2, [sp, #24]
 800b014:	bf54      	ite	pl
 800b016:	9300      	strpl	r3, [sp, #0]
 800b018:	9306      	strmi	r3, [sp, #24]
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	db39      	blt.n	800b092 <_dtoa_r+0x21a>
 800b01e:	9b06      	ldr	r3, [sp, #24]
 800b020:	970d      	str	r7, [sp, #52]	@ 0x34
 800b022:	443b      	add	r3, r7
 800b024:	9306      	str	r3, [sp, #24]
 800b026:	2300      	movs	r3, #0
 800b028:	9308      	str	r3, [sp, #32]
 800b02a:	9b07      	ldr	r3, [sp, #28]
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d863      	bhi.n	800b0f8 <_dtoa_r+0x280>
 800b030:	2b05      	cmp	r3, #5
 800b032:	bfc4      	itt	gt
 800b034:	3b04      	subgt	r3, #4
 800b036:	9307      	strgt	r3, [sp, #28]
 800b038:	9b07      	ldr	r3, [sp, #28]
 800b03a:	f1a3 0302 	sub.w	r3, r3, #2
 800b03e:	bfcc      	ite	gt
 800b040:	2400      	movgt	r4, #0
 800b042:	2401      	movle	r4, #1
 800b044:	2b03      	cmp	r3, #3
 800b046:	d863      	bhi.n	800b110 <_dtoa_r+0x298>
 800b048:	e8df f003 	tbb	[pc, r3]
 800b04c:	2b375452 	.word	0x2b375452
 800b050:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b054:	441e      	add	r6, r3
 800b056:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b05a:	2b20      	cmp	r3, #32
 800b05c:	bfc1      	itttt	gt
 800b05e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b062:	409f      	lslgt	r7, r3
 800b064:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b068:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b06c:	bfd6      	itet	le
 800b06e:	f1c3 0320 	rsble	r3, r3, #32
 800b072:	ea47 0003 	orrgt.w	r0, r7, r3
 800b076:	fa04 f003 	lslle.w	r0, r4, r3
 800b07a:	f7f5 fa4b 	bl	8000514 <__aeabi_ui2d>
 800b07e:	2201      	movs	r2, #1
 800b080:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b084:	3e01      	subs	r6, #1
 800b086:	9212      	str	r2, [sp, #72]	@ 0x48
 800b088:	e776      	b.n	800af78 <_dtoa_r+0x100>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e7b7      	b.n	800affe <_dtoa_r+0x186>
 800b08e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b090:	e7b6      	b.n	800b000 <_dtoa_r+0x188>
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	1bdb      	subs	r3, r3, r7
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	427b      	negs	r3, r7
 800b09a:	9308      	str	r3, [sp, #32]
 800b09c:	2300      	movs	r3, #0
 800b09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b0a0:	e7c3      	b.n	800b02a <_dtoa_r+0x1b2>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0a8:	eb07 0b03 	add.w	fp, r7, r3
 800b0ac:	f10b 0301 	add.w	r3, fp, #1
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	bfb8      	it	lt
 800b0b6:	2301      	movlt	r3, #1
 800b0b8:	e006      	b.n	800b0c8 <_dtoa_r+0x250>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dd28      	ble.n	800b116 <_dtoa_r+0x29e>
 800b0c4:	469b      	mov	fp, r3
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	2204      	movs	r2, #4
 800b0d0:	f102 0514 	add.w	r5, r2, #20
 800b0d4:	429d      	cmp	r5, r3
 800b0d6:	d926      	bls.n	800b126 <_dtoa_r+0x2ae>
 800b0d8:	6041      	str	r1, [r0, #4]
 800b0da:	4648      	mov	r0, r9
 800b0dc:	f000 fd9c 	bl	800bc18 <_Balloc>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d142      	bne.n	800b16c <_dtoa_r+0x2f4>
 800b0e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b160 <_dtoa_r+0x2e8>)
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0ee:	e6da      	b.n	800aea6 <_dtoa_r+0x2e>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e7e3      	b.n	800b0bc <_dtoa_r+0x244>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e7d5      	b.n	800b0a4 <_dtoa_r+0x22c>
 800b0f8:	2401      	movs	r4, #1
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9307      	str	r3, [sp, #28]
 800b0fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800b100:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b104:	2200      	movs	r2, #0
 800b106:	f8cd b00c 	str.w	fp, [sp, #12]
 800b10a:	2312      	movs	r3, #18
 800b10c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b10e:	e7db      	b.n	800b0c8 <_dtoa_r+0x250>
 800b110:	2301      	movs	r3, #1
 800b112:	9309      	str	r3, [sp, #36]	@ 0x24
 800b114:	e7f4      	b.n	800b100 <_dtoa_r+0x288>
 800b116:	f04f 0b01 	mov.w	fp, #1
 800b11a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b11e:	465b      	mov	r3, fp
 800b120:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b124:	e7d0      	b.n	800b0c8 <_dtoa_r+0x250>
 800b126:	3101      	adds	r1, #1
 800b128:	0052      	lsls	r2, r2, #1
 800b12a:	e7d1      	b.n	800b0d0 <_dtoa_r+0x258>
 800b12c:	f3af 8000 	nop.w
 800b130:	636f4361 	.word	0x636f4361
 800b134:	3fd287a7 	.word	0x3fd287a7
 800b138:	8b60c8b3 	.word	0x8b60c8b3
 800b13c:	3fc68a28 	.word	0x3fc68a28
 800b140:	509f79fb 	.word	0x509f79fb
 800b144:	3fd34413 	.word	0x3fd34413
 800b148:	0800d153 	.word	0x0800d153
 800b14c:	0800d16a 	.word	0x0800d16a
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	0800d123 	.word	0x0800d123
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0800d2d0 	.word	0x0800d2d0
 800b160:	0800d1c2 	.word	0x0800d1c2
 800b164:	0800d14f 	.word	0x0800d14f
 800b168:	0800d122 	.word	0x0800d122
 800b16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b170:	6018      	str	r0, [r3, #0]
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	2b0e      	cmp	r3, #14
 800b176:	f200 80a1 	bhi.w	800b2bc <_dtoa_r+0x444>
 800b17a:	2c00      	cmp	r4, #0
 800b17c:	f000 809e 	beq.w	800b2bc <_dtoa_r+0x444>
 800b180:	2f00      	cmp	r7, #0
 800b182:	dd33      	ble.n	800b1ec <_dtoa_r+0x374>
 800b184:	4b9c      	ldr	r3, [pc, #624]	@ (800b3f8 <_dtoa_r+0x580>)
 800b186:	f007 020f 	and.w	r2, r7, #15
 800b18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b18e:	ed93 7b00 	vldr	d7, [r3]
 800b192:	05f8      	lsls	r0, r7, #23
 800b194:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b19c:	d516      	bpl.n	800b1cc <_dtoa_r+0x354>
 800b19e:	4b97      	ldr	r3, [pc, #604]	@ (800b3fc <_dtoa_r+0x584>)
 800b1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a8:	f7f5 fb58 	bl	800085c <__aeabi_ddiv>
 800b1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1b0:	f004 040f 	and.w	r4, r4, #15
 800b1b4:	2603      	movs	r6, #3
 800b1b6:	4d91      	ldr	r5, [pc, #580]	@ (800b3fc <_dtoa_r+0x584>)
 800b1b8:	b954      	cbnz	r4, 800b1d0 <_dtoa_r+0x358>
 800b1ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1c2:	f7f5 fb4b 	bl	800085c <__aeabi_ddiv>
 800b1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ca:	e028      	b.n	800b21e <_dtoa_r+0x3a6>
 800b1cc:	2602      	movs	r6, #2
 800b1ce:	e7f2      	b.n	800b1b6 <_dtoa_r+0x33e>
 800b1d0:	07e1      	lsls	r1, r4, #31
 800b1d2:	d508      	bpl.n	800b1e6 <_dtoa_r+0x36e>
 800b1d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1dc:	f7f5 fa14 	bl	8000608 <__aeabi_dmul>
 800b1e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	1064      	asrs	r4, r4, #1
 800b1e8:	3508      	adds	r5, #8
 800b1ea:	e7e5      	b.n	800b1b8 <_dtoa_r+0x340>
 800b1ec:	f000 80af 	beq.w	800b34e <_dtoa_r+0x4d6>
 800b1f0:	427c      	negs	r4, r7
 800b1f2:	4b81      	ldr	r3, [pc, #516]	@ (800b3f8 <_dtoa_r+0x580>)
 800b1f4:	4d81      	ldr	r5, [pc, #516]	@ (800b3fc <_dtoa_r+0x584>)
 800b1f6:	f004 020f 	and.w	r2, r4, #15
 800b1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b206:	f7f5 f9ff 	bl	8000608 <__aeabi_dmul>
 800b20a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b20e:	1124      	asrs	r4, r4, #4
 800b210:	2300      	movs	r3, #0
 800b212:	2602      	movs	r6, #2
 800b214:	2c00      	cmp	r4, #0
 800b216:	f040 808f 	bne.w	800b338 <_dtoa_r+0x4c0>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1d3      	bne.n	800b1c6 <_dtoa_r+0x34e>
 800b21e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 8094 	beq.w	800b352 <_dtoa_r+0x4da>
 800b22a:	4b75      	ldr	r3, [pc, #468]	@ (800b400 <_dtoa_r+0x588>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	4620      	mov	r0, r4
 800b230:	4629      	mov	r1, r5
 800b232:	f7f5 fc5b 	bl	8000aec <__aeabi_dcmplt>
 800b236:	2800      	cmp	r0, #0
 800b238:	f000 808b 	beq.w	800b352 <_dtoa_r+0x4da>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 8087 	beq.w	800b352 <_dtoa_r+0x4da>
 800b244:	f1bb 0f00 	cmp.w	fp, #0
 800b248:	dd34      	ble.n	800b2b4 <_dtoa_r+0x43c>
 800b24a:	4620      	mov	r0, r4
 800b24c:	4b6d      	ldr	r3, [pc, #436]	@ (800b404 <_dtoa_r+0x58c>)
 800b24e:	2200      	movs	r2, #0
 800b250:	4629      	mov	r1, r5
 800b252:	f7f5 f9d9 	bl	8000608 <__aeabi_dmul>
 800b256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b25a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b25e:	3601      	adds	r6, #1
 800b260:	465c      	mov	r4, fp
 800b262:	4630      	mov	r0, r6
 800b264:	f7f5 f966 	bl	8000534 <__aeabi_i2d>
 800b268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b26c:	f7f5 f9cc 	bl	8000608 <__aeabi_dmul>
 800b270:	4b65      	ldr	r3, [pc, #404]	@ (800b408 <_dtoa_r+0x590>)
 800b272:	2200      	movs	r2, #0
 800b274:	f7f5 f812 	bl	800029c <__adddf3>
 800b278:	4605      	mov	r5, r0
 800b27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d16a      	bne.n	800b358 <_dtoa_r+0x4e0>
 800b282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b286:	4b61      	ldr	r3, [pc, #388]	@ (800b40c <_dtoa_r+0x594>)
 800b288:	2200      	movs	r2, #0
 800b28a:	f7f5 f805 	bl	8000298 <__aeabi_dsub>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b296:	462a      	mov	r2, r5
 800b298:	4633      	mov	r3, r6
 800b29a:	f7f5 fc45 	bl	8000b28 <__aeabi_dcmpgt>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f040 8298 	bne.w	800b7d4 <_dtoa_r+0x95c>
 800b2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2ae:	f7f5 fc1d 	bl	8000aec <__aeabi_dcmplt>
 800b2b2:	bb38      	cbnz	r0, 800b304 <_dtoa_r+0x48c>
 800b2b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b2b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f2c0 8157 	blt.w	800b572 <_dtoa_r+0x6fa>
 800b2c4:	2f0e      	cmp	r7, #14
 800b2c6:	f300 8154 	bgt.w	800b572 <_dtoa_r+0x6fa>
 800b2ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b3f8 <_dtoa_r+0x580>)
 800b2cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2d0:	ed93 7b00 	vldr	d7, [r3]
 800b2d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	ed8d 7b00 	vstr	d7, [sp]
 800b2dc:	f280 80e5 	bge.w	800b4aa <_dtoa_r+0x632>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f300 80e1 	bgt.w	800b4aa <_dtoa_r+0x632>
 800b2e8:	d10c      	bne.n	800b304 <_dtoa_r+0x48c>
 800b2ea:	4b48      	ldr	r3, [pc, #288]	@ (800b40c <_dtoa_r+0x594>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	ec51 0b17 	vmov	r0, r1, d7
 800b2f2:	f7f5 f989 	bl	8000608 <__aeabi_dmul>
 800b2f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fa:	f7f5 fc0b 	bl	8000b14 <__aeabi_dcmpge>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f000 8266 	beq.w	800b7d0 <_dtoa_r+0x958>
 800b304:	2400      	movs	r4, #0
 800b306:	4625      	mov	r5, r4
 800b308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b30a:	4656      	mov	r6, sl
 800b30c:	ea6f 0803 	mvn.w	r8, r3
 800b310:	2700      	movs	r7, #0
 800b312:	4621      	mov	r1, r4
 800b314:	4648      	mov	r0, r9
 800b316:	f000 fcbf 	bl	800bc98 <_Bfree>
 800b31a:	2d00      	cmp	r5, #0
 800b31c:	f000 80bd 	beq.w	800b49a <_dtoa_r+0x622>
 800b320:	b12f      	cbz	r7, 800b32e <_dtoa_r+0x4b6>
 800b322:	42af      	cmp	r7, r5
 800b324:	d003      	beq.n	800b32e <_dtoa_r+0x4b6>
 800b326:	4639      	mov	r1, r7
 800b328:	4648      	mov	r0, r9
 800b32a:	f000 fcb5 	bl	800bc98 <_Bfree>
 800b32e:	4629      	mov	r1, r5
 800b330:	4648      	mov	r0, r9
 800b332:	f000 fcb1 	bl	800bc98 <_Bfree>
 800b336:	e0b0      	b.n	800b49a <_dtoa_r+0x622>
 800b338:	07e2      	lsls	r2, r4, #31
 800b33a:	d505      	bpl.n	800b348 <_dtoa_r+0x4d0>
 800b33c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b340:	f7f5 f962 	bl	8000608 <__aeabi_dmul>
 800b344:	3601      	adds	r6, #1
 800b346:	2301      	movs	r3, #1
 800b348:	1064      	asrs	r4, r4, #1
 800b34a:	3508      	adds	r5, #8
 800b34c:	e762      	b.n	800b214 <_dtoa_r+0x39c>
 800b34e:	2602      	movs	r6, #2
 800b350:	e765      	b.n	800b21e <_dtoa_r+0x3a6>
 800b352:	9c03      	ldr	r4, [sp, #12]
 800b354:	46b8      	mov	r8, r7
 800b356:	e784      	b.n	800b262 <_dtoa_r+0x3ea>
 800b358:	4b27      	ldr	r3, [pc, #156]	@ (800b3f8 <_dtoa_r+0x580>)
 800b35a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b35c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b364:	4454      	add	r4, sl
 800b366:	2900      	cmp	r1, #0
 800b368:	d054      	beq.n	800b414 <_dtoa_r+0x59c>
 800b36a:	4929      	ldr	r1, [pc, #164]	@ (800b410 <_dtoa_r+0x598>)
 800b36c:	2000      	movs	r0, #0
 800b36e:	f7f5 fa75 	bl	800085c <__aeabi_ddiv>
 800b372:	4633      	mov	r3, r6
 800b374:	462a      	mov	r2, r5
 800b376:	f7f4 ff8f 	bl	8000298 <__aeabi_dsub>
 800b37a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b37e:	4656      	mov	r6, sl
 800b380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b384:	f7f5 fbf0 	bl	8000b68 <__aeabi_d2iz>
 800b388:	4605      	mov	r5, r0
 800b38a:	f7f5 f8d3 	bl	8000534 <__aeabi_i2d>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b396:	f7f4 ff7f 	bl	8000298 <__aeabi_dsub>
 800b39a:	3530      	adds	r5, #48	@ 0x30
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3a4:	f806 5b01 	strb.w	r5, [r6], #1
 800b3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3ac:	f7f5 fb9e 	bl	8000aec <__aeabi_dcmplt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d172      	bne.n	800b49a <_dtoa_r+0x622>
 800b3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b8:	4911      	ldr	r1, [pc, #68]	@ (800b400 <_dtoa_r+0x588>)
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f7f4 ff6c 	bl	8000298 <__aeabi_dsub>
 800b3c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3c4:	f7f5 fb92 	bl	8000aec <__aeabi_dcmplt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f040 80b4 	bne.w	800b536 <_dtoa_r+0x6be>
 800b3ce:	42a6      	cmp	r6, r4
 800b3d0:	f43f af70 	beq.w	800b2b4 <_dtoa_r+0x43c>
 800b3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <_dtoa_r+0x58c>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f7f5 f914 	bl	8000608 <__aeabi_dmul>
 800b3e0:	4b08      	ldr	r3, [pc, #32]	@ (800b404 <_dtoa_r+0x58c>)
 800b3e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ec:	f7f5 f90c 	bl	8000608 <__aeabi_dmul>
 800b3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3f4:	e7c4      	b.n	800b380 <_dtoa_r+0x508>
 800b3f6:	bf00      	nop
 800b3f8:	0800d2d0 	.word	0x0800d2d0
 800b3fc:	0800d2a8 	.word	0x0800d2a8
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	40240000 	.word	0x40240000
 800b408:	401c0000 	.word	0x401c0000
 800b40c:	40140000 	.word	0x40140000
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	4631      	mov	r1, r6
 800b416:	4628      	mov	r0, r5
 800b418:	f7f5 f8f6 	bl	8000608 <__aeabi_dmul>
 800b41c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b420:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b422:	4656      	mov	r6, sl
 800b424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b428:	f7f5 fb9e 	bl	8000b68 <__aeabi_d2iz>
 800b42c:	4605      	mov	r5, r0
 800b42e:	f7f5 f881 	bl	8000534 <__aeabi_i2d>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b43a:	f7f4 ff2d 	bl	8000298 <__aeabi_dsub>
 800b43e:	3530      	adds	r5, #48	@ 0x30
 800b440:	f806 5b01 	strb.w	r5, [r6], #1
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	42a6      	cmp	r6, r4
 800b44a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	d124      	bne.n	800b49e <_dtoa_r+0x626>
 800b454:	4baf      	ldr	r3, [pc, #700]	@ (800b714 <_dtoa_r+0x89c>)
 800b456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b45a:	f7f4 ff1f 	bl	800029c <__adddf3>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b466:	f7f5 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d163      	bne.n	800b536 <_dtoa_r+0x6be>
 800b46e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b472:	49a8      	ldr	r1, [pc, #672]	@ (800b714 <_dtoa_r+0x89c>)
 800b474:	2000      	movs	r0, #0
 800b476:	f7f4 ff0f 	bl	8000298 <__aeabi_dsub>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b482:	f7f5 fb33 	bl	8000aec <__aeabi_dcmplt>
 800b486:	2800      	cmp	r0, #0
 800b488:	f43f af14 	beq.w	800b2b4 <_dtoa_r+0x43c>
 800b48c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b48e:	1e73      	subs	r3, r6, #1
 800b490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b496:	2b30      	cmp	r3, #48	@ 0x30
 800b498:	d0f8      	beq.n	800b48c <_dtoa_r+0x614>
 800b49a:	4647      	mov	r7, r8
 800b49c:	e03b      	b.n	800b516 <_dtoa_r+0x69e>
 800b49e:	4b9e      	ldr	r3, [pc, #632]	@ (800b718 <_dtoa_r+0x8a0>)
 800b4a0:	f7f5 f8b2 	bl	8000608 <__aeabi_dmul>
 800b4a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4a8:	e7bc      	b.n	800b424 <_dtoa_r+0x5ac>
 800b4aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b4ae:	4656      	mov	r6, sl
 800b4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f5 f9d0 	bl	800085c <__aeabi_ddiv>
 800b4bc:	f7f5 fb54 	bl	8000b68 <__aeabi_d2iz>
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	f7f5 f837 	bl	8000534 <__aeabi_i2d>
 800b4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ca:	f7f5 f89d 	bl	8000608 <__aeabi_dmul>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b4da:	f7f4 fedd 	bl	8000298 <__aeabi_dsub>
 800b4de:	f806 4b01 	strb.w	r4, [r6], #1
 800b4e2:	9d03      	ldr	r5, [sp, #12]
 800b4e4:	eba6 040a 	sub.w	r4, r6, sl
 800b4e8:	42a5      	cmp	r5, r4
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	d133      	bne.n	800b558 <_dtoa_r+0x6e0>
 800b4f0:	f7f4 fed4 	bl	800029c <__adddf3>
 800b4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	f7f5 fb14 	bl	8000b28 <__aeabi_dcmpgt>
 800b500:	b9c0      	cbnz	r0, 800b534 <_dtoa_r+0x6bc>
 800b502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b50e:	b110      	cbz	r0, 800b516 <_dtoa_r+0x69e>
 800b510:	f018 0f01 	tst.w	r8, #1
 800b514:	d10e      	bne.n	800b534 <_dtoa_r+0x6bc>
 800b516:	9902      	ldr	r1, [sp, #8]
 800b518:	4648      	mov	r0, r9
 800b51a:	f000 fbbd 	bl	800bc98 <_Bfree>
 800b51e:	2300      	movs	r3, #0
 800b520:	7033      	strb	r3, [r6, #0]
 800b522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b524:	3701      	adds	r7, #1
 800b526:	601f      	str	r7, [r3, #0]
 800b528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 824b 	beq.w	800b9c6 <_dtoa_r+0xb4e>
 800b530:	601e      	str	r6, [r3, #0]
 800b532:	e248      	b.n	800b9c6 <_dtoa_r+0xb4e>
 800b534:	46b8      	mov	r8, r7
 800b536:	4633      	mov	r3, r6
 800b538:	461e      	mov	r6, r3
 800b53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b53e:	2a39      	cmp	r2, #57	@ 0x39
 800b540:	d106      	bne.n	800b550 <_dtoa_r+0x6d8>
 800b542:	459a      	cmp	sl, r3
 800b544:	d1f8      	bne.n	800b538 <_dtoa_r+0x6c0>
 800b546:	2230      	movs	r2, #48	@ 0x30
 800b548:	f108 0801 	add.w	r8, r8, #1
 800b54c:	f88a 2000 	strb.w	r2, [sl]
 800b550:	781a      	ldrb	r2, [r3, #0]
 800b552:	3201      	adds	r2, #1
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e7a0      	b.n	800b49a <_dtoa_r+0x622>
 800b558:	4b6f      	ldr	r3, [pc, #444]	@ (800b718 <_dtoa_r+0x8a0>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	f7f5 f854 	bl	8000608 <__aeabi_dmul>
 800b560:	2200      	movs	r2, #0
 800b562:	2300      	movs	r3, #0
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	f7f5 fab6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d09f      	beq.n	800b4b0 <_dtoa_r+0x638>
 800b570:	e7d1      	b.n	800b516 <_dtoa_r+0x69e>
 800b572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b574:	2a00      	cmp	r2, #0
 800b576:	f000 80ea 	beq.w	800b74e <_dtoa_r+0x8d6>
 800b57a:	9a07      	ldr	r2, [sp, #28]
 800b57c:	2a01      	cmp	r2, #1
 800b57e:	f300 80cd 	bgt.w	800b71c <_dtoa_r+0x8a4>
 800b582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b584:	2a00      	cmp	r2, #0
 800b586:	f000 80c1 	beq.w	800b70c <_dtoa_r+0x894>
 800b58a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b58e:	9c08      	ldr	r4, [sp, #32]
 800b590:	9e00      	ldr	r6, [sp, #0]
 800b592:	9a00      	ldr	r2, [sp, #0]
 800b594:	441a      	add	r2, r3
 800b596:	9200      	str	r2, [sp, #0]
 800b598:	9a06      	ldr	r2, [sp, #24]
 800b59a:	2101      	movs	r1, #1
 800b59c:	441a      	add	r2, r3
 800b59e:	4648      	mov	r0, r9
 800b5a0:	9206      	str	r2, [sp, #24]
 800b5a2:	f000 fc2d 	bl	800be00 <__i2b>
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b166      	cbz	r6, 800b5c4 <_dtoa_r+0x74c>
 800b5aa:	9b06      	ldr	r3, [sp, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dd09      	ble.n	800b5c4 <_dtoa_r+0x74c>
 800b5b0:	42b3      	cmp	r3, r6
 800b5b2:	9a00      	ldr	r2, [sp, #0]
 800b5b4:	bfa8      	it	ge
 800b5b6:	4633      	movge	r3, r6
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	9200      	str	r2, [sp, #0]
 800b5bc:	9a06      	ldr	r2, [sp, #24]
 800b5be:	1af6      	subs	r6, r6, r3
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	9306      	str	r3, [sp, #24]
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	b30b      	cbz	r3, 800b60c <_dtoa_r+0x794>
 800b5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 80c6 	beq.w	800b75c <_dtoa_r+0x8e4>
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	f000 80c0 	beq.w	800b756 <_dtoa_r+0x8de>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4648      	mov	r0, r9
 800b5dc:	f000 fcc8 	bl	800bf70 <__pow5mult>
 800b5e0:	9a02      	ldr	r2, [sp, #8]
 800b5e2:	4601      	mov	r1, r0
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	4648      	mov	r0, r9
 800b5e8:	f000 fc20 	bl	800be2c <__multiply>
 800b5ec:	9902      	ldr	r1, [sp, #8]
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4648      	mov	r0, r9
 800b5f2:	f000 fb51 	bl	800bc98 <_Bfree>
 800b5f6:	9b08      	ldr	r3, [sp, #32]
 800b5f8:	1b1b      	subs	r3, r3, r4
 800b5fa:	9308      	str	r3, [sp, #32]
 800b5fc:	f000 80b1 	beq.w	800b762 <_dtoa_r+0x8ea>
 800b600:	9a08      	ldr	r2, [sp, #32]
 800b602:	4641      	mov	r1, r8
 800b604:	4648      	mov	r0, r9
 800b606:	f000 fcb3 	bl	800bf70 <__pow5mult>
 800b60a:	9002      	str	r0, [sp, #8]
 800b60c:	2101      	movs	r1, #1
 800b60e:	4648      	mov	r0, r9
 800b610:	f000 fbf6 	bl	800be00 <__i2b>
 800b614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b616:	4604      	mov	r4, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 81d8 	beq.w	800b9ce <_dtoa_r+0xb56>
 800b61e:	461a      	mov	r2, r3
 800b620:	4601      	mov	r1, r0
 800b622:	4648      	mov	r0, r9
 800b624:	f000 fca4 	bl	800bf70 <__pow5mult>
 800b628:	9b07      	ldr	r3, [sp, #28]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	4604      	mov	r4, r0
 800b62e:	f300 809f 	bgt.w	800b770 <_dtoa_r+0x8f8>
 800b632:	9b04      	ldr	r3, [sp, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8097 	bne.w	800b768 <_dtoa_r+0x8f0>
 800b63a:	9b05      	ldr	r3, [sp, #20]
 800b63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b640:	2b00      	cmp	r3, #0
 800b642:	f040 8093 	bne.w	800b76c <_dtoa_r+0x8f4>
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b64c:	0d1b      	lsrs	r3, r3, #20
 800b64e:	051b      	lsls	r3, r3, #20
 800b650:	b133      	cbz	r3, 800b660 <_dtoa_r+0x7e8>
 800b652:	9b00      	ldr	r3, [sp, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	9b06      	ldr	r3, [sp, #24]
 800b65a:	3301      	adds	r3, #1
 800b65c:	9306      	str	r3, [sp, #24]
 800b65e:	2301      	movs	r3, #1
 800b660:	9308      	str	r3, [sp, #32]
 800b662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 81b8 	beq.w	800b9da <_dtoa_r+0xb62>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	f000 fb79 	bl	800bd68 <__hi0bits>
 800b676:	f1c0 0020 	rsb	r0, r0, #32
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	4418      	add	r0, r3
 800b67e:	f010 001f 	ands.w	r0, r0, #31
 800b682:	f000 8082 	beq.w	800b78a <_dtoa_r+0x912>
 800b686:	f1c0 0320 	rsb	r3, r0, #32
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	dd73      	ble.n	800b776 <_dtoa_r+0x8fe>
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	f1c0 001c 	rsb	r0, r0, #28
 800b694:	4403      	add	r3, r0
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	9b06      	ldr	r3, [sp, #24]
 800b69a:	4403      	add	r3, r0
 800b69c:	4406      	add	r6, r0
 800b69e:	9306      	str	r3, [sp, #24]
 800b6a0:	9b00      	ldr	r3, [sp, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dd05      	ble.n	800b6b2 <_dtoa_r+0x83a>
 800b6a6:	9902      	ldr	r1, [sp, #8]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4648      	mov	r0, r9
 800b6ac:	f000 fcba 	bl	800c024 <__lshift>
 800b6b0:	9002      	str	r0, [sp, #8]
 800b6b2:	9b06      	ldr	r3, [sp, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dd05      	ble.n	800b6c4 <_dtoa_r+0x84c>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f000 fcb1 	bl	800c024 <__lshift>
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d061      	beq.n	800b78e <_dtoa_r+0x916>
 800b6ca:	9802      	ldr	r0, [sp, #8]
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	f000 fd15 	bl	800c0fc <__mcmp>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	da5b      	bge.n	800b78e <_dtoa_r+0x916>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	9902      	ldr	r1, [sp, #8]
 800b6da:	220a      	movs	r2, #10
 800b6dc:	4648      	mov	r0, r9
 800b6de:	f000 fafd 	bl	800bcdc <__multadd>
 800b6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e4:	9002      	str	r0, [sp, #8]
 800b6e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 8177 	beq.w	800b9de <_dtoa_r+0xb66>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	220a      	movs	r2, #10
 800b6f6:	4648      	mov	r0, r9
 800b6f8:	f000 faf0 	bl	800bcdc <__multadd>
 800b6fc:	f1bb 0f00 	cmp.w	fp, #0
 800b700:	4605      	mov	r5, r0
 800b702:	dc6f      	bgt.n	800b7e4 <_dtoa_r+0x96c>
 800b704:	9b07      	ldr	r3, [sp, #28]
 800b706:	2b02      	cmp	r3, #2
 800b708:	dc49      	bgt.n	800b79e <_dtoa_r+0x926>
 800b70a:	e06b      	b.n	800b7e4 <_dtoa_r+0x96c>
 800b70c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b70e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b712:	e73c      	b.n	800b58e <_dtoa_r+0x716>
 800b714:	3fe00000 	.word	0x3fe00000
 800b718:	40240000 	.word	0x40240000
 800b71c:	9b03      	ldr	r3, [sp, #12]
 800b71e:	1e5c      	subs	r4, r3, #1
 800b720:	9b08      	ldr	r3, [sp, #32]
 800b722:	42a3      	cmp	r3, r4
 800b724:	db09      	blt.n	800b73a <_dtoa_r+0x8c2>
 800b726:	1b1c      	subs	r4, r3, r4
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f6bf af30 	bge.w	800b590 <_dtoa_r+0x718>
 800b730:	9b00      	ldr	r3, [sp, #0]
 800b732:	9a03      	ldr	r2, [sp, #12]
 800b734:	1a9e      	subs	r6, r3, r2
 800b736:	2300      	movs	r3, #0
 800b738:	e72b      	b.n	800b592 <_dtoa_r+0x71a>
 800b73a:	9b08      	ldr	r3, [sp, #32]
 800b73c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b73e:	9408      	str	r4, [sp, #32]
 800b740:	1ae3      	subs	r3, r4, r3
 800b742:	441a      	add	r2, r3
 800b744:	9e00      	ldr	r6, [sp, #0]
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	920d      	str	r2, [sp, #52]	@ 0x34
 800b74a:	2400      	movs	r4, #0
 800b74c:	e721      	b.n	800b592 <_dtoa_r+0x71a>
 800b74e:	9c08      	ldr	r4, [sp, #32]
 800b750:	9e00      	ldr	r6, [sp, #0]
 800b752:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b754:	e728      	b.n	800b5a8 <_dtoa_r+0x730>
 800b756:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b75a:	e751      	b.n	800b600 <_dtoa_r+0x788>
 800b75c:	9a08      	ldr	r2, [sp, #32]
 800b75e:	9902      	ldr	r1, [sp, #8]
 800b760:	e750      	b.n	800b604 <_dtoa_r+0x78c>
 800b762:	f8cd 8008 	str.w	r8, [sp, #8]
 800b766:	e751      	b.n	800b60c <_dtoa_r+0x794>
 800b768:	2300      	movs	r3, #0
 800b76a:	e779      	b.n	800b660 <_dtoa_r+0x7e8>
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	e777      	b.n	800b660 <_dtoa_r+0x7e8>
 800b770:	2300      	movs	r3, #0
 800b772:	9308      	str	r3, [sp, #32]
 800b774:	e779      	b.n	800b66a <_dtoa_r+0x7f2>
 800b776:	d093      	beq.n	800b6a0 <_dtoa_r+0x828>
 800b778:	9a00      	ldr	r2, [sp, #0]
 800b77a:	331c      	adds	r3, #28
 800b77c:	441a      	add	r2, r3
 800b77e:	9200      	str	r2, [sp, #0]
 800b780:	9a06      	ldr	r2, [sp, #24]
 800b782:	441a      	add	r2, r3
 800b784:	441e      	add	r6, r3
 800b786:	9206      	str	r2, [sp, #24]
 800b788:	e78a      	b.n	800b6a0 <_dtoa_r+0x828>
 800b78a:	4603      	mov	r3, r0
 800b78c:	e7f4      	b.n	800b778 <_dtoa_r+0x900>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	46b8      	mov	r8, r7
 800b794:	dc20      	bgt.n	800b7d8 <_dtoa_r+0x960>
 800b796:	469b      	mov	fp, r3
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	dd1e      	ble.n	800b7dc <_dtoa_r+0x964>
 800b79e:	f1bb 0f00 	cmp.w	fp, #0
 800b7a2:	f47f adb1 	bne.w	800b308 <_dtoa_r+0x490>
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	465b      	mov	r3, fp
 800b7aa:	2205      	movs	r2, #5
 800b7ac:	4648      	mov	r0, r9
 800b7ae:	f000 fa95 	bl	800bcdc <__multadd>
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	9802      	ldr	r0, [sp, #8]
 800b7b8:	f000 fca0 	bl	800c0fc <__mcmp>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f77f ada3 	ble.w	800b308 <_dtoa_r+0x490>
 800b7c2:	4656      	mov	r6, sl
 800b7c4:	2331      	movs	r3, #49	@ 0x31
 800b7c6:	f806 3b01 	strb.w	r3, [r6], #1
 800b7ca:	f108 0801 	add.w	r8, r8, #1
 800b7ce:	e59f      	b.n	800b310 <_dtoa_r+0x498>
 800b7d0:	9c03      	ldr	r4, [sp, #12]
 800b7d2:	46b8      	mov	r8, r7
 800b7d4:	4625      	mov	r5, r4
 800b7d6:	e7f4      	b.n	800b7c2 <_dtoa_r+0x94a>
 800b7d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8101 	beq.w	800b9e6 <_dtoa_r+0xb6e>
 800b7e4:	2e00      	cmp	r6, #0
 800b7e6:	dd05      	ble.n	800b7f4 <_dtoa_r+0x97c>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f000 fc19 	bl	800c024 <__lshift>
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	9b08      	ldr	r3, [sp, #32]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d05c      	beq.n	800b8b4 <_dtoa_r+0xa3c>
 800b7fa:	6869      	ldr	r1, [r5, #4]
 800b7fc:	4648      	mov	r0, r9
 800b7fe:	f000 fa0b 	bl	800bc18 <_Balloc>
 800b802:	4606      	mov	r6, r0
 800b804:	b928      	cbnz	r0, 800b812 <_dtoa_r+0x99a>
 800b806:	4b82      	ldr	r3, [pc, #520]	@ (800ba10 <_dtoa_r+0xb98>)
 800b808:	4602      	mov	r2, r0
 800b80a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b80e:	f7ff bb4a 	b.w	800aea6 <_dtoa_r+0x2e>
 800b812:	692a      	ldr	r2, [r5, #16]
 800b814:	3202      	adds	r2, #2
 800b816:	0092      	lsls	r2, r2, #2
 800b818:	f105 010c 	add.w	r1, r5, #12
 800b81c:	300c      	adds	r0, #12
 800b81e:	f001 f969 	bl	800caf4 <memcpy>
 800b822:	2201      	movs	r2, #1
 800b824:	4631      	mov	r1, r6
 800b826:	4648      	mov	r0, r9
 800b828:	f000 fbfc 	bl	800c024 <__lshift>
 800b82c:	f10a 0301 	add.w	r3, sl, #1
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	eb0a 030b 	add.w	r3, sl, fp
 800b836:	9308      	str	r3, [sp, #32]
 800b838:	9b04      	ldr	r3, [sp, #16]
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	462f      	mov	r7, r5
 800b840:	9306      	str	r3, [sp, #24]
 800b842:	4605      	mov	r5, r0
 800b844:	9b00      	ldr	r3, [sp, #0]
 800b846:	9802      	ldr	r0, [sp, #8]
 800b848:	4621      	mov	r1, r4
 800b84a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b84e:	f7ff fa88 	bl	800ad62 <quorem>
 800b852:	4603      	mov	r3, r0
 800b854:	3330      	adds	r3, #48	@ 0x30
 800b856:	9003      	str	r0, [sp, #12]
 800b858:	4639      	mov	r1, r7
 800b85a:	9802      	ldr	r0, [sp, #8]
 800b85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b85e:	f000 fc4d 	bl	800c0fc <__mcmp>
 800b862:	462a      	mov	r2, r5
 800b864:	9004      	str	r0, [sp, #16]
 800b866:	4621      	mov	r1, r4
 800b868:	4648      	mov	r0, r9
 800b86a:	f000 fc63 	bl	800c134 <__mdiff>
 800b86e:	68c2      	ldr	r2, [r0, #12]
 800b870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b872:	4606      	mov	r6, r0
 800b874:	bb02      	cbnz	r2, 800b8b8 <_dtoa_r+0xa40>
 800b876:	4601      	mov	r1, r0
 800b878:	9802      	ldr	r0, [sp, #8]
 800b87a:	f000 fc3f 	bl	800c0fc <__mcmp>
 800b87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b880:	4602      	mov	r2, r0
 800b882:	4631      	mov	r1, r6
 800b884:	4648      	mov	r0, r9
 800b886:	920c      	str	r2, [sp, #48]	@ 0x30
 800b888:	9309      	str	r3, [sp, #36]	@ 0x24
 800b88a:	f000 fa05 	bl	800bc98 <_Bfree>
 800b88e:	9b07      	ldr	r3, [sp, #28]
 800b890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b892:	9e00      	ldr	r6, [sp, #0]
 800b894:	ea42 0103 	orr.w	r1, r2, r3
 800b898:	9b06      	ldr	r3, [sp, #24]
 800b89a:	4319      	orrs	r1, r3
 800b89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89e:	d10d      	bne.n	800b8bc <_dtoa_r+0xa44>
 800b8a0:	2b39      	cmp	r3, #57	@ 0x39
 800b8a2:	d027      	beq.n	800b8f4 <_dtoa_r+0xa7c>
 800b8a4:	9a04      	ldr	r2, [sp, #16]
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	dd01      	ble.n	800b8ae <_dtoa_r+0xa36>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3331      	adds	r3, #49	@ 0x31
 800b8ae:	f88b 3000 	strb.w	r3, [fp]
 800b8b2:	e52e      	b.n	800b312 <_dtoa_r+0x49a>
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e7b9      	b.n	800b82c <_dtoa_r+0x9b4>
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	e7e2      	b.n	800b882 <_dtoa_r+0xa0a>
 800b8bc:	9904      	ldr	r1, [sp, #16]
 800b8be:	2900      	cmp	r1, #0
 800b8c0:	db04      	blt.n	800b8cc <_dtoa_r+0xa54>
 800b8c2:	9807      	ldr	r0, [sp, #28]
 800b8c4:	4301      	orrs	r1, r0
 800b8c6:	9806      	ldr	r0, [sp, #24]
 800b8c8:	4301      	orrs	r1, r0
 800b8ca:	d120      	bne.n	800b90e <_dtoa_r+0xa96>
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	ddee      	ble.n	800b8ae <_dtoa_r+0xa36>
 800b8d0:	9902      	ldr	r1, [sp, #8]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	4648      	mov	r0, r9
 800b8d8:	f000 fba4 	bl	800c024 <__lshift>
 800b8dc:	4621      	mov	r1, r4
 800b8de:	9002      	str	r0, [sp, #8]
 800b8e0:	f000 fc0c 	bl	800c0fc <__mcmp>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	dc02      	bgt.n	800b8f0 <_dtoa_r+0xa78>
 800b8ea:	d1e0      	bne.n	800b8ae <_dtoa_r+0xa36>
 800b8ec:	07da      	lsls	r2, r3, #31
 800b8ee:	d5de      	bpl.n	800b8ae <_dtoa_r+0xa36>
 800b8f0:	2b39      	cmp	r3, #57	@ 0x39
 800b8f2:	d1da      	bne.n	800b8aa <_dtoa_r+0xa32>
 800b8f4:	2339      	movs	r3, #57	@ 0x39
 800b8f6:	f88b 3000 	strb.w	r3, [fp]
 800b8fa:	4633      	mov	r3, r6
 800b8fc:	461e      	mov	r6, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b904:	2a39      	cmp	r2, #57	@ 0x39
 800b906:	d04e      	beq.n	800b9a6 <_dtoa_r+0xb2e>
 800b908:	3201      	adds	r2, #1
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	e501      	b.n	800b312 <_dtoa_r+0x49a>
 800b90e:	2a00      	cmp	r2, #0
 800b910:	dd03      	ble.n	800b91a <_dtoa_r+0xaa2>
 800b912:	2b39      	cmp	r3, #57	@ 0x39
 800b914:	d0ee      	beq.n	800b8f4 <_dtoa_r+0xa7c>
 800b916:	3301      	adds	r3, #1
 800b918:	e7c9      	b.n	800b8ae <_dtoa_r+0xa36>
 800b91a:	9a00      	ldr	r2, [sp, #0]
 800b91c:	9908      	ldr	r1, [sp, #32]
 800b91e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b922:	428a      	cmp	r2, r1
 800b924:	d028      	beq.n	800b978 <_dtoa_r+0xb00>
 800b926:	9902      	ldr	r1, [sp, #8]
 800b928:	2300      	movs	r3, #0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 f9d5 	bl	800bcdc <__multadd>
 800b932:	42af      	cmp	r7, r5
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	f04f 020a 	mov.w	r2, #10
 800b93e:	4639      	mov	r1, r7
 800b940:	4648      	mov	r0, r9
 800b942:	d107      	bne.n	800b954 <_dtoa_r+0xadc>
 800b944:	f000 f9ca 	bl	800bcdc <__multadd>
 800b948:	4607      	mov	r7, r0
 800b94a:	4605      	mov	r5, r0
 800b94c:	9b00      	ldr	r3, [sp, #0]
 800b94e:	3301      	adds	r3, #1
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	e777      	b.n	800b844 <_dtoa_r+0x9cc>
 800b954:	f000 f9c2 	bl	800bcdc <__multadd>
 800b958:	4629      	mov	r1, r5
 800b95a:	4607      	mov	r7, r0
 800b95c:	2300      	movs	r3, #0
 800b95e:	220a      	movs	r2, #10
 800b960:	4648      	mov	r0, r9
 800b962:	f000 f9bb 	bl	800bcdc <__multadd>
 800b966:	4605      	mov	r5, r0
 800b968:	e7f0      	b.n	800b94c <_dtoa_r+0xad4>
 800b96a:	f1bb 0f00 	cmp.w	fp, #0
 800b96e:	bfcc      	ite	gt
 800b970:	465e      	movgt	r6, fp
 800b972:	2601      	movle	r6, #1
 800b974:	4456      	add	r6, sl
 800b976:	2700      	movs	r7, #0
 800b978:	9902      	ldr	r1, [sp, #8]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	2201      	movs	r2, #1
 800b97e:	4648      	mov	r0, r9
 800b980:	f000 fb50 	bl	800c024 <__lshift>
 800b984:	4621      	mov	r1, r4
 800b986:	9002      	str	r0, [sp, #8]
 800b988:	f000 fbb8 	bl	800c0fc <__mcmp>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dcb4      	bgt.n	800b8fa <_dtoa_r+0xa82>
 800b990:	d102      	bne.n	800b998 <_dtoa_r+0xb20>
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	07db      	lsls	r3, r3, #31
 800b996:	d4b0      	bmi.n	800b8fa <_dtoa_r+0xa82>
 800b998:	4633      	mov	r3, r6
 800b99a:	461e      	mov	r6, r3
 800b99c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9a0:	2a30      	cmp	r2, #48	@ 0x30
 800b9a2:	d0fa      	beq.n	800b99a <_dtoa_r+0xb22>
 800b9a4:	e4b5      	b.n	800b312 <_dtoa_r+0x49a>
 800b9a6:	459a      	cmp	sl, r3
 800b9a8:	d1a8      	bne.n	800b8fc <_dtoa_r+0xa84>
 800b9aa:	2331      	movs	r3, #49	@ 0x31
 800b9ac:	f108 0801 	add.w	r8, r8, #1
 800b9b0:	f88a 3000 	strb.w	r3, [sl]
 800b9b4:	e4ad      	b.n	800b312 <_dtoa_r+0x49a>
 800b9b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ba14 <_dtoa_r+0xb9c>
 800b9bc:	b11b      	cbz	r3, 800b9c6 <_dtoa_r+0xb4e>
 800b9be:	f10a 0308 	add.w	r3, sl, #8
 800b9c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	b017      	add	sp, #92	@ 0x5c
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	9b07      	ldr	r3, [sp, #28]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	f77f ae2e 	ble.w	800b632 <_dtoa_r+0x7ba>
 800b9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9d8:	9308      	str	r3, [sp, #32]
 800b9da:	2001      	movs	r0, #1
 800b9dc:	e64d      	b.n	800b67a <_dtoa_r+0x802>
 800b9de:	f1bb 0f00 	cmp.w	fp, #0
 800b9e2:	f77f aed9 	ble.w	800b798 <_dtoa_r+0x920>
 800b9e6:	4656      	mov	r6, sl
 800b9e8:	9802      	ldr	r0, [sp, #8]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	f7ff f9b9 	bl	800ad62 <quorem>
 800b9f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b9f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b9f8:	eba6 020a 	sub.w	r2, r6, sl
 800b9fc:	4593      	cmp	fp, r2
 800b9fe:	ddb4      	ble.n	800b96a <_dtoa_r+0xaf2>
 800ba00:	9902      	ldr	r1, [sp, #8]
 800ba02:	2300      	movs	r3, #0
 800ba04:	220a      	movs	r2, #10
 800ba06:	4648      	mov	r0, r9
 800ba08:	f000 f968 	bl	800bcdc <__multadd>
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	e7eb      	b.n	800b9e8 <_dtoa_r+0xb70>
 800ba10:	0800d1c2 	.word	0x0800d1c2
 800ba14:	0800d146 	.word	0x0800d146

0800ba18 <_free_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d041      	beq.n	800baa4 <_free_r+0x8c>
 800ba20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba24:	1f0c      	subs	r4, r1, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfb8      	it	lt
 800ba2a:	18e4      	addlt	r4, r4, r3
 800ba2c:	f000 f8e8 	bl	800bc00 <__malloc_lock>
 800ba30:	4a1d      	ldr	r2, [pc, #116]	@ (800baa8 <_free_r+0x90>)
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	b933      	cbnz	r3, 800ba44 <_free_r+0x2c>
 800ba36:	6063      	str	r3, [r4, #4]
 800ba38:	6014      	str	r4, [r2, #0]
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba40:	f000 b8e4 	b.w	800bc0c <__malloc_unlock>
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	d908      	bls.n	800ba5a <_free_r+0x42>
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	1821      	adds	r1, r4, r0
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf01      	itttt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	1809      	addeq	r1, r1, r0
 800ba56:	6021      	streq	r1, [r4, #0]
 800ba58:	e7ed      	b.n	800ba36 <_free_r+0x1e>
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	b10b      	cbz	r3, 800ba64 <_free_r+0x4c>
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	d9fa      	bls.n	800ba5a <_free_r+0x42>
 800ba64:	6811      	ldr	r1, [r2, #0]
 800ba66:	1850      	adds	r0, r2, r1
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d10b      	bne.n	800ba84 <_free_r+0x6c>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	4401      	add	r1, r0
 800ba70:	1850      	adds	r0, r2, r1
 800ba72:	4283      	cmp	r3, r0
 800ba74:	6011      	str	r1, [r2, #0]
 800ba76:	d1e0      	bne.n	800ba3a <_free_r+0x22>
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	6053      	str	r3, [r2, #4]
 800ba7e:	4408      	add	r0, r1
 800ba80:	6010      	str	r0, [r2, #0]
 800ba82:	e7da      	b.n	800ba3a <_free_r+0x22>
 800ba84:	d902      	bls.n	800ba8c <_free_r+0x74>
 800ba86:	230c      	movs	r3, #12
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	e7d6      	b.n	800ba3a <_free_r+0x22>
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	1821      	adds	r1, r4, r0
 800ba90:	428b      	cmp	r3, r1
 800ba92:	bf04      	itt	eq
 800ba94:	6819      	ldreq	r1, [r3, #0]
 800ba96:	685b      	ldreq	r3, [r3, #4]
 800ba98:	6063      	str	r3, [r4, #4]
 800ba9a:	bf04      	itt	eq
 800ba9c:	1809      	addeq	r1, r1, r0
 800ba9e:	6021      	streq	r1, [r4, #0]
 800baa0:	6054      	str	r4, [r2, #4]
 800baa2:	e7ca      	b.n	800ba3a <_free_r+0x22>
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	bf00      	nop
 800baa8:	200005f0 	.word	0x200005f0

0800baac <malloc>:
 800baac:	4b02      	ldr	r3, [pc, #8]	@ (800bab8 <malloc+0xc>)
 800baae:	4601      	mov	r1, r0
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f000 b825 	b.w	800bb00 <_malloc_r>
 800bab6:	bf00      	nop
 800bab8:	20000038 	.word	0x20000038

0800babc <sbrk_aligned>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	4e0f      	ldr	r6, [pc, #60]	@ (800bafc <sbrk_aligned+0x40>)
 800bac0:	460c      	mov	r4, r1
 800bac2:	6831      	ldr	r1, [r6, #0]
 800bac4:	4605      	mov	r5, r0
 800bac6:	b911      	cbnz	r1, 800bace <sbrk_aligned+0x12>
 800bac8:	f001 f804 	bl	800cad4 <_sbrk_r>
 800bacc:	6030      	str	r0, [r6, #0]
 800bace:	4621      	mov	r1, r4
 800bad0:	4628      	mov	r0, r5
 800bad2:	f000 ffff 	bl	800cad4 <_sbrk_r>
 800bad6:	1c43      	adds	r3, r0, #1
 800bad8:	d103      	bne.n	800bae2 <sbrk_aligned+0x26>
 800bada:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bade:	4620      	mov	r0, r4
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
 800bae2:	1cc4      	adds	r4, r0, #3
 800bae4:	f024 0403 	bic.w	r4, r4, #3
 800bae8:	42a0      	cmp	r0, r4
 800baea:	d0f8      	beq.n	800bade <sbrk_aligned+0x22>
 800baec:	1a21      	subs	r1, r4, r0
 800baee:	4628      	mov	r0, r5
 800baf0:	f000 fff0 	bl	800cad4 <_sbrk_r>
 800baf4:	3001      	adds	r0, #1
 800baf6:	d1f2      	bne.n	800bade <sbrk_aligned+0x22>
 800baf8:	e7ef      	b.n	800bada <sbrk_aligned+0x1e>
 800bafa:	bf00      	nop
 800bafc:	200005ec 	.word	0x200005ec

0800bb00 <_malloc_r>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	1ccd      	adds	r5, r1, #3
 800bb06:	f025 0503 	bic.w	r5, r5, #3
 800bb0a:	3508      	adds	r5, #8
 800bb0c:	2d0c      	cmp	r5, #12
 800bb0e:	bf38      	it	cc
 800bb10:	250c      	movcc	r5, #12
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	4606      	mov	r6, r0
 800bb16:	db01      	blt.n	800bb1c <_malloc_r+0x1c>
 800bb18:	42a9      	cmp	r1, r5
 800bb1a:	d904      	bls.n	800bb26 <_malloc_r+0x26>
 800bb1c:	230c      	movs	r3, #12
 800bb1e:	6033      	str	r3, [r6, #0]
 800bb20:	2000      	movs	r0, #0
 800bb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbfc <_malloc_r+0xfc>
 800bb2a:	f000 f869 	bl	800bc00 <__malloc_lock>
 800bb2e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb32:	461c      	mov	r4, r3
 800bb34:	bb44      	cbnz	r4, 800bb88 <_malloc_r+0x88>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff ffbf 	bl	800babc <sbrk_aligned>
 800bb3e:	1c43      	adds	r3, r0, #1
 800bb40:	4604      	mov	r4, r0
 800bb42:	d158      	bne.n	800bbf6 <_malloc_r+0xf6>
 800bb44:	f8d8 4000 	ldr.w	r4, [r8]
 800bb48:	4627      	mov	r7, r4
 800bb4a:	2f00      	cmp	r7, #0
 800bb4c:	d143      	bne.n	800bbd6 <_malloc_r+0xd6>
 800bb4e:	2c00      	cmp	r4, #0
 800bb50:	d04b      	beq.n	800bbea <_malloc_r+0xea>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	4639      	mov	r1, r7
 800bb56:	4630      	mov	r0, r6
 800bb58:	eb04 0903 	add.w	r9, r4, r3
 800bb5c:	f000 ffba 	bl	800cad4 <_sbrk_r>
 800bb60:	4581      	cmp	r9, r0
 800bb62:	d142      	bne.n	800bbea <_malloc_r+0xea>
 800bb64:	6821      	ldr	r1, [r4, #0]
 800bb66:	1a6d      	subs	r5, r5, r1
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ffa6 	bl	800babc <sbrk_aligned>
 800bb70:	3001      	adds	r0, #1
 800bb72:	d03a      	beq.n	800bbea <_malloc_r+0xea>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	442b      	add	r3, r5
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	bb62      	cbnz	r2, 800bbdc <_malloc_r+0xdc>
 800bb82:	f8c8 7000 	str.w	r7, [r8]
 800bb86:	e00f      	b.n	800bba8 <_malloc_r+0xa8>
 800bb88:	6822      	ldr	r2, [r4, #0]
 800bb8a:	1b52      	subs	r2, r2, r5
 800bb8c:	d420      	bmi.n	800bbd0 <_malloc_r+0xd0>
 800bb8e:	2a0b      	cmp	r2, #11
 800bb90:	d917      	bls.n	800bbc2 <_malloc_r+0xc2>
 800bb92:	1961      	adds	r1, r4, r5
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	6025      	str	r5, [r4, #0]
 800bb98:	bf18      	it	ne
 800bb9a:	6059      	strne	r1, [r3, #4]
 800bb9c:	6863      	ldr	r3, [r4, #4]
 800bb9e:	bf08      	it	eq
 800bba0:	f8c8 1000 	streq.w	r1, [r8]
 800bba4:	5162      	str	r2, [r4, r5]
 800bba6:	604b      	str	r3, [r1, #4]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 f82f 	bl	800bc0c <__malloc_unlock>
 800bbae:	f104 000b 	add.w	r0, r4, #11
 800bbb2:	1d23      	adds	r3, r4, #4
 800bbb4:	f020 0007 	bic.w	r0, r0, #7
 800bbb8:	1ac2      	subs	r2, r0, r3
 800bbba:	bf1c      	itt	ne
 800bbbc:	1a1b      	subne	r3, r3, r0
 800bbbe:	50a3      	strne	r3, [r4, r2]
 800bbc0:	e7af      	b.n	800bb22 <_malloc_r+0x22>
 800bbc2:	6862      	ldr	r2, [r4, #4]
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	bf0c      	ite	eq
 800bbc8:	f8c8 2000 	streq.w	r2, [r8]
 800bbcc:	605a      	strne	r2, [r3, #4]
 800bbce:	e7eb      	b.n	800bba8 <_malloc_r+0xa8>
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	6864      	ldr	r4, [r4, #4]
 800bbd4:	e7ae      	b.n	800bb34 <_malloc_r+0x34>
 800bbd6:	463c      	mov	r4, r7
 800bbd8:	687f      	ldr	r7, [r7, #4]
 800bbda:	e7b6      	b.n	800bb4a <_malloc_r+0x4a>
 800bbdc:	461a      	mov	r2, r3
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	d1fb      	bne.n	800bbdc <_malloc_r+0xdc>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6053      	str	r3, [r2, #4]
 800bbe8:	e7de      	b.n	800bba8 <_malloc_r+0xa8>
 800bbea:	230c      	movs	r3, #12
 800bbec:	6033      	str	r3, [r6, #0]
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f000 f80c 	bl	800bc0c <__malloc_unlock>
 800bbf4:	e794      	b.n	800bb20 <_malloc_r+0x20>
 800bbf6:	6005      	str	r5, [r0, #0]
 800bbf8:	e7d6      	b.n	800bba8 <_malloc_r+0xa8>
 800bbfa:	bf00      	nop
 800bbfc:	200005f0 	.word	0x200005f0

0800bc00 <__malloc_lock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	@ (800bc08 <__malloc_lock+0x8>)
 800bc02:	f7ff b8ac 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800bc06:	bf00      	nop
 800bc08:	200005e8 	.word	0x200005e8

0800bc0c <__malloc_unlock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	@ (800bc14 <__malloc_unlock+0x8>)
 800bc0e:	f7ff b8a7 	b.w	800ad60 <__retarget_lock_release_recursive>
 800bc12:	bf00      	nop
 800bc14:	200005e8 	.word	0x200005e8

0800bc18 <_Balloc>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	69c6      	ldr	r6, [r0, #28]
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	b976      	cbnz	r6, 800bc40 <_Balloc+0x28>
 800bc22:	2010      	movs	r0, #16
 800bc24:	f7ff ff42 	bl	800baac <malloc>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	61e0      	str	r0, [r4, #28]
 800bc2c:	b920      	cbnz	r0, 800bc38 <_Balloc+0x20>
 800bc2e:	4b18      	ldr	r3, [pc, #96]	@ (800bc90 <_Balloc+0x78>)
 800bc30:	4818      	ldr	r0, [pc, #96]	@ (800bc94 <_Balloc+0x7c>)
 800bc32:	216b      	movs	r1, #107	@ 0x6b
 800bc34:	f000 ff6c 	bl	800cb10 <__assert_func>
 800bc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc3c:	6006      	str	r6, [r0, #0]
 800bc3e:	60c6      	str	r6, [r0, #12]
 800bc40:	69e6      	ldr	r6, [r4, #28]
 800bc42:	68f3      	ldr	r3, [r6, #12]
 800bc44:	b183      	cbz	r3, 800bc68 <_Balloc+0x50>
 800bc46:	69e3      	ldr	r3, [r4, #28]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc4e:	b9b8      	cbnz	r0, 800bc80 <_Balloc+0x68>
 800bc50:	2101      	movs	r1, #1
 800bc52:	fa01 f605 	lsl.w	r6, r1, r5
 800bc56:	1d72      	adds	r2, r6, #5
 800bc58:	0092      	lsls	r2, r2, #2
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 ff76 	bl	800cb4c <_calloc_r>
 800bc60:	b160      	cbz	r0, 800bc7c <_Balloc+0x64>
 800bc62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc66:	e00e      	b.n	800bc86 <_Balloc+0x6e>
 800bc68:	2221      	movs	r2, #33	@ 0x21
 800bc6a:	2104      	movs	r1, #4
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 ff6d 	bl	800cb4c <_calloc_r>
 800bc72:	69e3      	ldr	r3, [r4, #28]
 800bc74:	60f0      	str	r0, [r6, #12]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e4      	bne.n	800bc46 <_Balloc+0x2e>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	6802      	ldr	r2, [r0, #0]
 800bc82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc86:	2300      	movs	r3, #0
 800bc88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc8c:	e7f7      	b.n	800bc7e <_Balloc+0x66>
 800bc8e:	bf00      	nop
 800bc90:	0800d153 	.word	0x0800d153
 800bc94:	0800d1d3 	.word	0x0800d1d3

0800bc98 <_Bfree>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	69c6      	ldr	r6, [r0, #28]
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	b976      	cbnz	r6, 800bcc0 <_Bfree+0x28>
 800bca2:	2010      	movs	r0, #16
 800bca4:	f7ff ff02 	bl	800baac <malloc>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	61e8      	str	r0, [r5, #28]
 800bcac:	b920      	cbnz	r0, 800bcb8 <_Bfree+0x20>
 800bcae:	4b09      	ldr	r3, [pc, #36]	@ (800bcd4 <_Bfree+0x3c>)
 800bcb0:	4809      	ldr	r0, [pc, #36]	@ (800bcd8 <_Bfree+0x40>)
 800bcb2:	218f      	movs	r1, #143	@ 0x8f
 800bcb4:	f000 ff2c 	bl	800cb10 <__assert_func>
 800bcb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcbc:	6006      	str	r6, [r0, #0]
 800bcbe:	60c6      	str	r6, [r0, #12]
 800bcc0:	b13c      	cbz	r4, 800bcd2 <_Bfree+0x3a>
 800bcc2:	69eb      	ldr	r3, [r5, #28]
 800bcc4:	6862      	ldr	r2, [r4, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bccc:	6021      	str	r1, [r4, #0]
 800bcce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	0800d153 	.word	0x0800d153
 800bcd8:	0800d1d3 	.word	0x0800d1d3

0800bcdc <__multadd>:
 800bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce0:	690d      	ldr	r5, [r1, #16]
 800bce2:	4607      	mov	r7, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	461e      	mov	r6, r3
 800bce8:	f101 0c14 	add.w	ip, r1, #20
 800bcec:	2000      	movs	r0, #0
 800bcee:	f8dc 3000 	ldr.w	r3, [ip]
 800bcf2:	b299      	uxth	r1, r3
 800bcf4:	fb02 6101 	mla	r1, r2, r1, r6
 800bcf8:	0c1e      	lsrs	r6, r3, #16
 800bcfa:	0c0b      	lsrs	r3, r1, #16
 800bcfc:	fb02 3306 	mla	r3, r2, r6, r3
 800bd00:	b289      	uxth	r1, r1
 800bd02:	3001      	adds	r0, #1
 800bd04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd08:	4285      	cmp	r5, r0
 800bd0a:	f84c 1b04 	str.w	r1, [ip], #4
 800bd0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd12:	dcec      	bgt.n	800bcee <__multadd+0x12>
 800bd14:	b30e      	cbz	r6, 800bd5a <__multadd+0x7e>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	dc19      	bgt.n	800bd50 <__multadd+0x74>
 800bd1c:	6861      	ldr	r1, [r4, #4]
 800bd1e:	4638      	mov	r0, r7
 800bd20:	3101      	adds	r1, #1
 800bd22:	f7ff ff79 	bl	800bc18 <_Balloc>
 800bd26:	4680      	mov	r8, r0
 800bd28:	b928      	cbnz	r0, 800bd36 <__multadd+0x5a>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd60 <__multadd+0x84>)
 800bd2e:	480d      	ldr	r0, [pc, #52]	@ (800bd64 <__multadd+0x88>)
 800bd30:	21ba      	movs	r1, #186	@ 0xba
 800bd32:	f000 feed 	bl	800cb10 <__assert_func>
 800bd36:	6922      	ldr	r2, [r4, #16]
 800bd38:	3202      	adds	r2, #2
 800bd3a:	f104 010c 	add.w	r1, r4, #12
 800bd3e:	0092      	lsls	r2, r2, #2
 800bd40:	300c      	adds	r0, #12
 800bd42:	f000 fed7 	bl	800caf4 <memcpy>
 800bd46:	4621      	mov	r1, r4
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff ffa5 	bl	800bc98 <_Bfree>
 800bd4e:	4644      	mov	r4, r8
 800bd50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd54:	3501      	adds	r5, #1
 800bd56:	615e      	str	r6, [r3, #20]
 800bd58:	6125      	str	r5, [r4, #16]
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd60:	0800d1c2 	.word	0x0800d1c2
 800bd64:	0800d1d3 	.word	0x0800d1d3

0800bd68 <__hi0bits>:
 800bd68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	bf36      	itet	cc
 800bd70:	0403      	lslcc	r3, r0, #16
 800bd72:	2000      	movcs	r0, #0
 800bd74:	2010      	movcc	r0, #16
 800bd76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd7a:	bf3c      	itt	cc
 800bd7c:	021b      	lslcc	r3, r3, #8
 800bd7e:	3008      	addcc	r0, #8
 800bd80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd84:	bf3c      	itt	cc
 800bd86:	011b      	lslcc	r3, r3, #4
 800bd88:	3004      	addcc	r0, #4
 800bd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd8e:	bf3c      	itt	cc
 800bd90:	009b      	lslcc	r3, r3, #2
 800bd92:	3002      	addcc	r0, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	db05      	blt.n	800bda4 <__hi0bits+0x3c>
 800bd98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd9c:	f100 0001 	add.w	r0, r0, #1
 800bda0:	bf08      	it	eq
 800bda2:	2020      	moveq	r0, #32
 800bda4:	4770      	bx	lr

0800bda6 <__lo0bits>:
 800bda6:	6803      	ldr	r3, [r0, #0]
 800bda8:	4602      	mov	r2, r0
 800bdaa:	f013 0007 	ands.w	r0, r3, #7
 800bdae:	d00b      	beq.n	800bdc8 <__lo0bits+0x22>
 800bdb0:	07d9      	lsls	r1, r3, #31
 800bdb2:	d421      	bmi.n	800bdf8 <__lo0bits+0x52>
 800bdb4:	0798      	lsls	r0, r3, #30
 800bdb6:	bf49      	itett	mi
 800bdb8:	085b      	lsrmi	r3, r3, #1
 800bdba:	089b      	lsrpl	r3, r3, #2
 800bdbc:	2001      	movmi	r0, #1
 800bdbe:	6013      	strmi	r3, [r2, #0]
 800bdc0:	bf5c      	itt	pl
 800bdc2:	6013      	strpl	r3, [r2, #0]
 800bdc4:	2002      	movpl	r0, #2
 800bdc6:	4770      	bx	lr
 800bdc8:	b299      	uxth	r1, r3
 800bdca:	b909      	cbnz	r1, 800bdd0 <__lo0bits+0x2a>
 800bdcc:	0c1b      	lsrs	r3, r3, #16
 800bdce:	2010      	movs	r0, #16
 800bdd0:	b2d9      	uxtb	r1, r3
 800bdd2:	b909      	cbnz	r1, 800bdd8 <__lo0bits+0x32>
 800bdd4:	3008      	adds	r0, #8
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	0719      	lsls	r1, r3, #28
 800bdda:	bf04      	itt	eq
 800bddc:	091b      	lsreq	r3, r3, #4
 800bdde:	3004      	addeq	r0, #4
 800bde0:	0799      	lsls	r1, r3, #30
 800bde2:	bf04      	itt	eq
 800bde4:	089b      	lsreq	r3, r3, #2
 800bde6:	3002      	addeq	r0, #2
 800bde8:	07d9      	lsls	r1, r3, #31
 800bdea:	d403      	bmi.n	800bdf4 <__lo0bits+0x4e>
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	f100 0001 	add.w	r0, r0, #1
 800bdf2:	d003      	beq.n	800bdfc <__lo0bits+0x56>
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	4770      	bx	lr
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	4770      	bx	lr
 800bdfc:	2020      	movs	r0, #32
 800bdfe:	4770      	bx	lr

0800be00 <__i2b>:
 800be00:	b510      	push	{r4, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	2101      	movs	r1, #1
 800be06:	f7ff ff07 	bl	800bc18 <_Balloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	b928      	cbnz	r0, 800be1a <__i2b+0x1a>
 800be0e:	4b05      	ldr	r3, [pc, #20]	@ (800be24 <__i2b+0x24>)
 800be10:	4805      	ldr	r0, [pc, #20]	@ (800be28 <__i2b+0x28>)
 800be12:	f240 1145 	movw	r1, #325	@ 0x145
 800be16:	f000 fe7b 	bl	800cb10 <__assert_func>
 800be1a:	2301      	movs	r3, #1
 800be1c:	6144      	str	r4, [r0, #20]
 800be1e:	6103      	str	r3, [r0, #16]
 800be20:	bd10      	pop	{r4, pc}
 800be22:	bf00      	nop
 800be24:	0800d1c2 	.word	0x0800d1c2
 800be28:	0800d1d3 	.word	0x0800d1d3

0800be2c <__multiply>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	4617      	mov	r7, r2
 800be32:	690a      	ldr	r2, [r1, #16]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	429a      	cmp	r2, r3
 800be38:	bfa8      	it	ge
 800be3a:	463b      	movge	r3, r7
 800be3c:	4689      	mov	r9, r1
 800be3e:	bfa4      	itt	ge
 800be40:	460f      	movge	r7, r1
 800be42:	4699      	movge	r9, r3
 800be44:	693d      	ldr	r5, [r7, #16]
 800be46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	eb05 060a 	add.w	r6, r5, sl
 800be52:	42b3      	cmp	r3, r6
 800be54:	b085      	sub	sp, #20
 800be56:	bfb8      	it	lt
 800be58:	3101      	addlt	r1, #1
 800be5a:	f7ff fedd 	bl	800bc18 <_Balloc>
 800be5e:	b930      	cbnz	r0, 800be6e <__multiply+0x42>
 800be60:	4602      	mov	r2, r0
 800be62:	4b41      	ldr	r3, [pc, #260]	@ (800bf68 <__multiply+0x13c>)
 800be64:	4841      	ldr	r0, [pc, #260]	@ (800bf6c <__multiply+0x140>)
 800be66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be6a:	f000 fe51 	bl	800cb10 <__assert_func>
 800be6e:	f100 0414 	add.w	r4, r0, #20
 800be72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800be76:	4623      	mov	r3, r4
 800be78:	2200      	movs	r2, #0
 800be7a:	4573      	cmp	r3, lr
 800be7c:	d320      	bcc.n	800bec0 <__multiply+0x94>
 800be7e:	f107 0814 	add.w	r8, r7, #20
 800be82:	f109 0114 	add.w	r1, r9, #20
 800be86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800be8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800be8e:	9302      	str	r3, [sp, #8]
 800be90:	1beb      	subs	r3, r5, r7
 800be92:	3b15      	subs	r3, #21
 800be94:	f023 0303 	bic.w	r3, r3, #3
 800be98:	3304      	adds	r3, #4
 800be9a:	3715      	adds	r7, #21
 800be9c:	42bd      	cmp	r5, r7
 800be9e:	bf38      	it	cc
 800bea0:	2304      	movcc	r3, #4
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	9b02      	ldr	r3, [sp, #8]
 800bea6:	9103      	str	r1, [sp, #12]
 800bea8:	428b      	cmp	r3, r1
 800beaa:	d80c      	bhi.n	800bec6 <__multiply+0x9a>
 800beac:	2e00      	cmp	r6, #0
 800beae:	dd03      	ble.n	800beb8 <__multiply+0x8c>
 800beb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d055      	beq.n	800bf64 <__multiply+0x138>
 800beb8:	6106      	str	r6, [r0, #16]
 800beba:	b005      	add	sp, #20
 800bebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec0:	f843 2b04 	str.w	r2, [r3], #4
 800bec4:	e7d9      	b.n	800be7a <__multiply+0x4e>
 800bec6:	f8b1 a000 	ldrh.w	sl, [r1]
 800beca:	f1ba 0f00 	cmp.w	sl, #0
 800bece:	d01f      	beq.n	800bf10 <__multiply+0xe4>
 800bed0:	46c4      	mov	ip, r8
 800bed2:	46a1      	mov	r9, r4
 800bed4:	2700      	movs	r7, #0
 800bed6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800beda:	f8d9 3000 	ldr.w	r3, [r9]
 800bede:	fa1f fb82 	uxth.w	fp, r2
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800bee8:	443b      	add	r3, r7
 800beea:	f8d9 7000 	ldr.w	r7, [r9]
 800beee:	0c12      	lsrs	r2, r2, #16
 800bef0:	0c3f      	lsrs	r7, r7, #16
 800bef2:	fb0a 7202 	mla	r2, sl, r2, r7
 800bef6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800befa:	b29b      	uxth	r3, r3
 800befc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf00:	4565      	cmp	r5, ip
 800bf02:	f849 3b04 	str.w	r3, [r9], #4
 800bf06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bf0a:	d8e4      	bhi.n	800bed6 <__multiply+0xaa>
 800bf0c:	9b01      	ldr	r3, [sp, #4]
 800bf0e:	50e7      	str	r7, [r4, r3]
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf16:	3104      	adds	r1, #4
 800bf18:	f1b9 0f00 	cmp.w	r9, #0
 800bf1c:	d020      	beq.n	800bf60 <__multiply+0x134>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	4647      	mov	r7, r8
 800bf22:	46a4      	mov	ip, r4
 800bf24:	f04f 0a00 	mov.w	sl, #0
 800bf28:	f8b7 b000 	ldrh.w	fp, [r7]
 800bf2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bf30:	fb09 220b 	mla	r2, r9, fp, r2
 800bf34:	4452      	add	r2, sl
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf3c:	f84c 3b04 	str.w	r3, [ip], #4
 800bf40:	f857 3b04 	ldr.w	r3, [r7], #4
 800bf44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf48:	f8bc 3000 	ldrh.w	r3, [ip]
 800bf4c:	fb09 330a 	mla	r3, r9, sl, r3
 800bf50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bf54:	42bd      	cmp	r5, r7
 800bf56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf5a:	d8e5      	bhi.n	800bf28 <__multiply+0xfc>
 800bf5c:	9a01      	ldr	r2, [sp, #4]
 800bf5e:	50a3      	str	r3, [r4, r2]
 800bf60:	3404      	adds	r4, #4
 800bf62:	e79f      	b.n	800bea4 <__multiply+0x78>
 800bf64:	3e01      	subs	r6, #1
 800bf66:	e7a1      	b.n	800beac <__multiply+0x80>
 800bf68:	0800d1c2 	.word	0x0800d1c2
 800bf6c:	0800d1d3 	.word	0x0800d1d3

0800bf70 <__pow5mult>:
 800bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf74:	4615      	mov	r5, r2
 800bf76:	f012 0203 	ands.w	r2, r2, #3
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	460e      	mov	r6, r1
 800bf7e:	d007      	beq.n	800bf90 <__pow5mult+0x20>
 800bf80:	4c25      	ldr	r4, [pc, #148]	@ (800c018 <__pow5mult+0xa8>)
 800bf82:	3a01      	subs	r2, #1
 800bf84:	2300      	movs	r3, #0
 800bf86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf8a:	f7ff fea7 	bl	800bcdc <__multadd>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	10ad      	asrs	r5, r5, #2
 800bf92:	d03d      	beq.n	800c010 <__pow5mult+0xa0>
 800bf94:	69fc      	ldr	r4, [r7, #28]
 800bf96:	b97c      	cbnz	r4, 800bfb8 <__pow5mult+0x48>
 800bf98:	2010      	movs	r0, #16
 800bf9a:	f7ff fd87 	bl	800baac <malloc>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	61f8      	str	r0, [r7, #28]
 800bfa2:	b928      	cbnz	r0, 800bfb0 <__pow5mult+0x40>
 800bfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800c01c <__pow5mult+0xac>)
 800bfa6:	481e      	ldr	r0, [pc, #120]	@ (800c020 <__pow5mult+0xb0>)
 800bfa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfac:	f000 fdb0 	bl	800cb10 <__assert_func>
 800bfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfb4:	6004      	str	r4, [r0, #0]
 800bfb6:	60c4      	str	r4, [r0, #12]
 800bfb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfc0:	b94c      	cbnz	r4, 800bfd6 <__pow5mult+0x66>
 800bfc2:	f240 2171 	movw	r1, #625	@ 0x271
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	f7ff ff1a 	bl	800be00 <__i2b>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	6003      	str	r3, [r0, #0]
 800bfd6:	f04f 0900 	mov.w	r9, #0
 800bfda:	07eb      	lsls	r3, r5, #31
 800bfdc:	d50a      	bpl.n	800bff4 <__pow5mult+0x84>
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	f7ff ff22 	bl	800be2c <__multiply>
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4680      	mov	r8, r0
 800bfec:	4638      	mov	r0, r7
 800bfee:	f7ff fe53 	bl	800bc98 <_Bfree>
 800bff2:	4646      	mov	r6, r8
 800bff4:	106d      	asrs	r5, r5, #1
 800bff6:	d00b      	beq.n	800c010 <__pow5mult+0xa0>
 800bff8:	6820      	ldr	r0, [r4, #0]
 800bffa:	b938      	cbnz	r0, 800c00c <__pow5mult+0x9c>
 800bffc:	4622      	mov	r2, r4
 800bffe:	4621      	mov	r1, r4
 800c000:	4638      	mov	r0, r7
 800c002:	f7ff ff13 	bl	800be2c <__multiply>
 800c006:	6020      	str	r0, [r4, #0]
 800c008:	f8c0 9000 	str.w	r9, [r0]
 800c00c:	4604      	mov	r4, r0
 800c00e:	e7e4      	b.n	800bfda <__pow5mult+0x6a>
 800c010:	4630      	mov	r0, r6
 800c012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c016:	bf00      	nop
 800c018:	0800d29c 	.word	0x0800d29c
 800c01c:	0800d153 	.word	0x0800d153
 800c020:	0800d1d3 	.word	0x0800d1d3

0800c024 <__lshift>:
 800c024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c028:	460c      	mov	r4, r1
 800c02a:	6849      	ldr	r1, [r1, #4]
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c032:	68a3      	ldr	r3, [r4, #8]
 800c034:	4607      	mov	r7, r0
 800c036:	4691      	mov	r9, r2
 800c038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c03c:	f108 0601 	add.w	r6, r8, #1
 800c040:	42b3      	cmp	r3, r6
 800c042:	db0b      	blt.n	800c05c <__lshift+0x38>
 800c044:	4638      	mov	r0, r7
 800c046:	f7ff fde7 	bl	800bc18 <_Balloc>
 800c04a:	4605      	mov	r5, r0
 800c04c:	b948      	cbnz	r0, 800c062 <__lshift+0x3e>
 800c04e:	4602      	mov	r2, r0
 800c050:	4b28      	ldr	r3, [pc, #160]	@ (800c0f4 <__lshift+0xd0>)
 800c052:	4829      	ldr	r0, [pc, #164]	@ (800c0f8 <__lshift+0xd4>)
 800c054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c058:	f000 fd5a 	bl	800cb10 <__assert_func>
 800c05c:	3101      	adds	r1, #1
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	e7ee      	b.n	800c040 <__lshift+0x1c>
 800c062:	2300      	movs	r3, #0
 800c064:	f100 0114 	add.w	r1, r0, #20
 800c068:	f100 0210 	add.w	r2, r0, #16
 800c06c:	4618      	mov	r0, r3
 800c06e:	4553      	cmp	r3, sl
 800c070:	db33      	blt.n	800c0da <__lshift+0xb6>
 800c072:	6920      	ldr	r0, [r4, #16]
 800c074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c078:	f104 0314 	add.w	r3, r4, #20
 800c07c:	f019 091f 	ands.w	r9, r9, #31
 800c080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c088:	d02b      	beq.n	800c0e2 <__lshift+0xbe>
 800c08a:	f1c9 0e20 	rsb	lr, r9, #32
 800c08e:	468a      	mov	sl, r1
 800c090:	2200      	movs	r2, #0
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	fa00 f009 	lsl.w	r0, r0, r9
 800c098:	4310      	orrs	r0, r2
 800c09a:	f84a 0b04 	str.w	r0, [sl], #4
 800c09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a2:	459c      	cmp	ip, r3
 800c0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0a8:	d8f3      	bhi.n	800c092 <__lshift+0x6e>
 800c0aa:	ebac 0304 	sub.w	r3, ip, r4
 800c0ae:	3b15      	subs	r3, #21
 800c0b0:	f023 0303 	bic.w	r3, r3, #3
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	f104 0015 	add.w	r0, r4, #21
 800c0ba:	4560      	cmp	r0, ip
 800c0bc:	bf88      	it	hi
 800c0be:	2304      	movhi	r3, #4
 800c0c0:	50ca      	str	r2, [r1, r3]
 800c0c2:	b10a      	cbz	r2, 800c0c8 <__lshift+0xa4>
 800c0c4:	f108 0602 	add.w	r6, r8, #2
 800c0c8:	3e01      	subs	r6, #1
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	612e      	str	r6, [r5, #16]
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	f7ff fde2 	bl	800bc98 <_Bfree>
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0de:	3301      	adds	r3, #1
 800c0e0:	e7c5      	b.n	800c06e <__lshift+0x4a>
 800c0e2:	3904      	subs	r1, #4
 800c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0ec:	459c      	cmp	ip, r3
 800c0ee:	d8f9      	bhi.n	800c0e4 <__lshift+0xc0>
 800c0f0:	e7ea      	b.n	800c0c8 <__lshift+0xa4>
 800c0f2:	bf00      	nop
 800c0f4:	0800d1c2 	.word	0x0800d1c2
 800c0f8:	0800d1d3 	.word	0x0800d1d3

0800c0fc <__mcmp>:
 800c0fc:	690a      	ldr	r2, [r1, #16]
 800c0fe:	4603      	mov	r3, r0
 800c100:	6900      	ldr	r0, [r0, #16]
 800c102:	1a80      	subs	r0, r0, r2
 800c104:	b530      	push	{r4, r5, lr}
 800c106:	d10e      	bne.n	800c126 <__mcmp+0x2a>
 800c108:	3314      	adds	r3, #20
 800c10a:	3114      	adds	r1, #20
 800c10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c11c:	4295      	cmp	r5, r2
 800c11e:	d003      	beq.n	800c128 <__mcmp+0x2c>
 800c120:	d205      	bcs.n	800c12e <__mcmp+0x32>
 800c122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c126:	bd30      	pop	{r4, r5, pc}
 800c128:	42a3      	cmp	r3, r4
 800c12a:	d3f3      	bcc.n	800c114 <__mcmp+0x18>
 800c12c:	e7fb      	b.n	800c126 <__mcmp+0x2a>
 800c12e:	2001      	movs	r0, #1
 800c130:	e7f9      	b.n	800c126 <__mcmp+0x2a>
	...

0800c134 <__mdiff>:
 800c134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	4689      	mov	r9, r1
 800c13a:	4606      	mov	r6, r0
 800c13c:	4611      	mov	r1, r2
 800c13e:	4648      	mov	r0, r9
 800c140:	4614      	mov	r4, r2
 800c142:	f7ff ffdb 	bl	800c0fc <__mcmp>
 800c146:	1e05      	subs	r5, r0, #0
 800c148:	d112      	bne.n	800c170 <__mdiff+0x3c>
 800c14a:	4629      	mov	r1, r5
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7ff fd63 	bl	800bc18 <_Balloc>
 800c152:	4602      	mov	r2, r0
 800c154:	b928      	cbnz	r0, 800c162 <__mdiff+0x2e>
 800c156:	4b3f      	ldr	r3, [pc, #252]	@ (800c254 <__mdiff+0x120>)
 800c158:	f240 2137 	movw	r1, #567	@ 0x237
 800c15c:	483e      	ldr	r0, [pc, #248]	@ (800c258 <__mdiff+0x124>)
 800c15e:	f000 fcd7 	bl	800cb10 <__assert_func>
 800c162:	2301      	movs	r3, #1
 800c164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c168:	4610      	mov	r0, r2
 800c16a:	b003      	add	sp, #12
 800c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c170:	bfbc      	itt	lt
 800c172:	464b      	movlt	r3, r9
 800c174:	46a1      	movlt	r9, r4
 800c176:	4630      	mov	r0, r6
 800c178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c17c:	bfba      	itte	lt
 800c17e:	461c      	movlt	r4, r3
 800c180:	2501      	movlt	r5, #1
 800c182:	2500      	movge	r5, #0
 800c184:	f7ff fd48 	bl	800bc18 <_Balloc>
 800c188:	4602      	mov	r2, r0
 800c18a:	b918      	cbnz	r0, 800c194 <__mdiff+0x60>
 800c18c:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <__mdiff+0x120>)
 800c18e:	f240 2145 	movw	r1, #581	@ 0x245
 800c192:	e7e3      	b.n	800c15c <__mdiff+0x28>
 800c194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c198:	6926      	ldr	r6, [r4, #16]
 800c19a:	60c5      	str	r5, [r0, #12]
 800c19c:	f109 0310 	add.w	r3, r9, #16
 800c1a0:	f109 0514 	add.w	r5, r9, #20
 800c1a4:	f104 0e14 	add.w	lr, r4, #20
 800c1a8:	f100 0b14 	add.w	fp, r0, #20
 800c1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	46d9      	mov	r9, fp
 800c1b8:	f04f 0c00 	mov.w	ip, #0
 800c1bc:	9b01      	ldr	r3, [sp, #4]
 800c1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	fa1f f38a 	uxth.w	r3, sl
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	b283      	uxth	r3, r0
 800c1d0:	1acb      	subs	r3, r1, r3
 800c1d2:	0c00      	lsrs	r0, r0, #16
 800c1d4:	4463      	add	r3, ip
 800c1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1e4:	4576      	cmp	r6, lr
 800c1e6:	f849 3b04 	str.w	r3, [r9], #4
 800c1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1ee:	d8e5      	bhi.n	800c1bc <__mdiff+0x88>
 800c1f0:	1b33      	subs	r3, r6, r4
 800c1f2:	3b15      	subs	r3, #21
 800c1f4:	f023 0303 	bic.w	r3, r3, #3
 800c1f8:	3415      	adds	r4, #21
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	42a6      	cmp	r6, r4
 800c1fe:	bf38      	it	cc
 800c200:	2304      	movcc	r3, #4
 800c202:	441d      	add	r5, r3
 800c204:	445b      	add	r3, fp
 800c206:	461e      	mov	r6, r3
 800c208:	462c      	mov	r4, r5
 800c20a:	4544      	cmp	r4, r8
 800c20c:	d30e      	bcc.n	800c22c <__mdiff+0xf8>
 800c20e:	f108 0103 	add.w	r1, r8, #3
 800c212:	1b49      	subs	r1, r1, r5
 800c214:	f021 0103 	bic.w	r1, r1, #3
 800c218:	3d03      	subs	r5, #3
 800c21a:	45a8      	cmp	r8, r5
 800c21c:	bf38      	it	cc
 800c21e:	2100      	movcc	r1, #0
 800c220:	440b      	add	r3, r1
 800c222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c226:	b191      	cbz	r1, 800c24e <__mdiff+0x11a>
 800c228:	6117      	str	r7, [r2, #16]
 800c22a:	e79d      	b.n	800c168 <__mdiff+0x34>
 800c22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c230:	46e6      	mov	lr, ip
 800c232:	0c08      	lsrs	r0, r1, #16
 800c234:	fa1c fc81 	uxtah	ip, ip, r1
 800c238:	4471      	add	r1, lr
 800c23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c23e:	b289      	uxth	r1, r1
 800c240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c244:	f846 1b04 	str.w	r1, [r6], #4
 800c248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c24c:	e7dd      	b.n	800c20a <__mdiff+0xd6>
 800c24e:	3f01      	subs	r7, #1
 800c250:	e7e7      	b.n	800c222 <__mdiff+0xee>
 800c252:	bf00      	nop
 800c254:	0800d1c2 	.word	0x0800d1c2
 800c258:	0800d1d3 	.word	0x0800d1d3

0800c25c <__d2b>:
 800c25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c260:	460f      	mov	r7, r1
 800c262:	2101      	movs	r1, #1
 800c264:	ec59 8b10 	vmov	r8, r9, d0
 800c268:	4616      	mov	r6, r2
 800c26a:	f7ff fcd5 	bl	800bc18 <_Balloc>
 800c26e:	4604      	mov	r4, r0
 800c270:	b930      	cbnz	r0, 800c280 <__d2b+0x24>
 800c272:	4602      	mov	r2, r0
 800c274:	4b23      	ldr	r3, [pc, #140]	@ (800c304 <__d2b+0xa8>)
 800c276:	4824      	ldr	r0, [pc, #144]	@ (800c308 <__d2b+0xac>)
 800c278:	f240 310f 	movw	r1, #783	@ 0x30f
 800c27c:	f000 fc48 	bl	800cb10 <__assert_func>
 800c280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c288:	b10d      	cbz	r5, 800c28e <__d2b+0x32>
 800c28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	f1b8 0300 	subs.w	r3, r8, #0
 800c294:	d023      	beq.n	800c2de <__d2b+0x82>
 800c296:	4668      	mov	r0, sp
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	f7ff fd84 	bl	800bda6 <__lo0bits>
 800c29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2a2:	b1d0      	cbz	r0, 800c2da <__d2b+0x7e>
 800c2a4:	f1c0 0320 	rsb	r3, r0, #32
 800c2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ac:	430b      	orrs	r3, r1
 800c2ae:	40c2      	lsrs	r2, r0
 800c2b0:	6163      	str	r3, [r4, #20]
 800c2b2:	9201      	str	r2, [sp, #4]
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	61a3      	str	r3, [r4, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bf0c      	ite	eq
 800c2bc:	2201      	moveq	r2, #1
 800c2be:	2202      	movne	r2, #2
 800c2c0:	6122      	str	r2, [r4, #16]
 800c2c2:	b1a5      	cbz	r5, 800c2ee <__d2b+0x92>
 800c2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2c8:	4405      	add	r5, r0
 800c2ca:	603d      	str	r5, [r7, #0]
 800c2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2d0:	6030      	str	r0, [r6, #0]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	b003      	add	sp, #12
 800c2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2da:	6161      	str	r1, [r4, #20]
 800c2dc:	e7ea      	b.n	800c2b4 <__d2b+0x58>
 800c2de:	a801      	add	r0, sp, #4
 800c2e0:	f7ff fd61 	bl	800bda6 <__lo0bits>
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	6163      	str	r3, [r4, #20]
 800c2e8:	3020      	adds	r0, #32
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	e7e8      	b.n	800c2c0 <__d2b+0x64>
 800c2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2f6:	6038      	str	r0, [r7, #0]
 800c2f8:	6918      	ldr	r0, [r3, #16]
 800c2fa:	f7ff fd35 	bl	800bd68 <__hi0bits>
 800c2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c302:	e7e5      	b.n	800c2d0 <__d2b+0x74>
 800c304:	0800d1c2 	.word	0x0800d1c2
 800c308:	0800d1d3 	.word	0x0800d1d3

0800c30c <__ssputs_r>:
 800c30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c310:	688e      	ldr	r6, [r1, #8]
 800c312:	461f      	mov	r7, r3
 800c314:	42be      	cmp	r6, r7
 800c316:	680b      	ldr	r3, [r1, #0]
 800c318:	4682      	mov	sl, r0
 800c31a:	460c      	mov	r4, r1
 800c31c:	4690      	mov	r8, r2
 800c31e:	d82d      	bhi.n	800c37c <__ssputs_r+0x70>
 800c320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c328:	d026      	beq.n	800c378 <__ssputs_r+0x6c>
 800c32a:	6965      	ldr	r5, [r4, #20]
 800c32c:	6909      	ldr	r1, [r1, #16]
 800c32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c332:	eba3 0901 	sub.w	r9, r3, r1
 800c336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c33a:	1c7b      	adds	r3, r7, #1
 800c33c:	444b      	add	r3, r9
 800c33e:	106d      	asrs	r5, r5, #1
 800c340:	429d      	cmp	r5, r3
 800c342:	bf38      	it	cc
 800c344:	461d      	movcc	r5, r3
 800c346:	0553      	lsls	r3, r2, #21
 800c348:	d527      	bpl.n	800c39a <__ssputs_r+0x8e>
 800c34a:	4629      	mov	r1, r5
 800c34c:	f7ff fbd8 	bl	800bb00 <_malloc_r>
 800c350:	4606      	mov	r6, r0
 800c352:	b360      	cbz	r0, 800c3ae <__ssputs_r+0xa2>
 800c354:	6921      	ldr	r1, [r4, #16]
 800c356:	464a      	mov	r2, r9
 800c358:	f000 fbcc 	bl	800caf4 <memcpy>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	6126      	str	r6, [r4, #16]
 800c36a:	6165      	str	r5, [r4, #20]
 800c36c:	444e      	add	r6, r9
 800c36e:	eba5 0509 	sub.w	r5, r5, r9
 800c372:	6026      	str	r6, [r4, #0]
 800c374:	60a5      	str	r5, [r4, #8]
 800c376:	463e      	mov	r6, r7
 800c378:	42be      	cmp	r6, r7
 800c37a:	d900      	bls.n	800c37e <__ssputs_r+0x72>
 800c37c:	463e      	mov	r6, r7
 800c37e:	6820      	ldr	r0, [r4, #0]
 800c380:	4632      	mov	r2, r6
 800c382:	4641      	mov	r1, r8
 800c384:	f000 fb6a 	bl	800ca5c <memmove>
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	1b9b      	subs	r3, r3, r6
 800c38c:	60a3      	str	r3, [r4, #8]
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	4433      	add	r3, r6
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	2000      	movs	r0, #0
 800c396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39a:	462a      	mov	r2, r5
 800c39c:	f000 fbfc 	bl	800cb98 <_realloc_r>
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1e0      	bne.n	800c368 <__ssputs_r+0x5c>
 800c3a6:	6921      	ldr	r1, [r4, #16]
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	f7ff fb35 	bl	800ba18 <_free_r>
 800c3ae:	230c      	movs	r3, #12
 800c3b0:	f8ca 3000 	str.w	r3, [sl]
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3c0:	e7e9      	b.n	800c396 <__ssputs_r+0x8a>
	...

0800c3c4 <_svfiprintf_r>:
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	4698      	mov	r8, r3
 800c3ca:	898b      	ldrh	r3, [r1, #12]
 800c3cc:	061b      	lsls	r3, r3, #24
 800c3ce:	b09d      	sub	sp, #116	@ 0x74
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	d510      	bpl.n	800c3fa <_svfiprintf_r+0x36>
 800c3d8:	690b      	ldr	r3, [r1, #16]
 800c3da:	b973      	cbnz	r3, 800c3fa <_svfiprintf_r+0x36>
 800c3dc:	2140      	movs	r1, #64	@ 0x40
 800c3de:	f7ff fb8f 	bl	800bb00 <_malloc_r>
 800c3e2:	6028      	str	r0, [r5, #0]
 800c3e4:	6128      	str	r0, [r5, #16]
 800c3e6:	b930      	cbnz	r0, 800c3f6 <_svfiprintf_r+0x32>
 800c3e8:	230c      	movs	r3, #12
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3f0:	b01d      	add	sp, #116	@ 0x74
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	2340      	movs	r3, #64	@ 0x40
 800c3f8:	616b      	str	r3, [r5, #20]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3fe:	2320      	movs	r3, #32
 800c400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c404:	f8cd 800c 	str.w	r8, [sp, #12]
 800c408:	2330      	movs	r3, #48	@ 0x30
 800c40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5a8 <_svfiprintf_r+0x1e4>
 800c40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c412:	f04f 0901 	mov.w	r9, #1
 800c416:	4623      	mov	r3, r4
 800c418:	469a      	mov	sl, r3
 800c41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c41e:	b10a      	cbz	r2, 800c424 <_svfiprintf_r+0x60>
 800c420:	2a25      	cmp	r2, #37	@ 0x25
 800c422:	d1f9      	bne.n	800c418 <_svfiprintf_r+0x54>
 800c424:	ebba 0b04 	subs.w	fp, sl, r4
 800c428:	d00b      	beq.n	800c442 <_svfiprintf_r+0x7e>
 800c42a:	465b      	mov	r3, fp
 800c42c:	4622      	mov	r2, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ff6b 	bl	800c30c <__ssputs_r>
 800c436:	3001      	adds	r0, #1
 800c438:	f000 80a7 	beq.w	800c58a <_svfiprintf_r+0x1c6>
 800c43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c43e:	445a      	add	r2, fp
 800c440:	9209      	str	r2, [sp, #36]	@ 0x24
 800c442:	f89a 3000 	ldrb.w	r3, [sl]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 809f 	beq.w	800c58a <_svfiprintf_r+0x1c6>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c456:	f10a 0a01 	add.w	sl, sl, #1
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c462:	931a      	str	r3, [sp, #104]	@ 0x68
 800c464:	4654      	mov	r4, sl
 800c466:	2205      	movs	r2, #5
 800c468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c46c:	484e      	ldr	r0, [pc, #312]	@ (800c5a8 <_svfiprintf_r+0x1e4>)
 800c46e:	f7f3 feb7 	bl	80001e0 <memchr>
 800c472:	9a04      	ldr	r2, [sp, #16]
 800c474:	b9d8      	cbnz	r0, 800c4ae <_svfiprintf_r+0xea>
 800c476:	06d0      	lsls	r0, r2, #27
 800c478:	bf44      	itt	mi
 800c47a:	2320      	movmi	r3, #32
 800c47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c480:	0711      	lsls	r1, r2, #28
 800c482:	bf44      	itt	mi
 800c484:	232b      	movmi	r3, #43	@ 0x2b
 800c486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c48a:	f89a 3000 	ldrb.w	r3, [sl]
 800c48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c490:	d015      	beq.n	800c4be <_svfiprintf_r+0xfa>
 800c492:	9a07      	ldr	r2, [sp, #28]
 800c494:	4654      	mov	r4, sl
 800c496:	2000      	movs	r0, #0
 800c498:	f04f 0c0a 	mov.w	ip, #10
 800c49c:	4621      	mov	r1, r4
 800c49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4a2:	3b30      	subs	r3, #48	@ 0x30
 800c4a4:	2b09      	cmp	r3, #9
 800c4a6:	d94b      	bls.n	800c540 <_svfiprintf_r+0x17c>
 800c4a8:	b1b0      	cbz	r0, 800c4d8 <_svfiprintf_r+0x114>
 800c4aa:	9207      	str	r2, [sp, #28]
 800c4ac:	e014      	b.n	800c4d8 <_svfiprintf_r+0x114>
 800c4ae:	eba0 0308 	sub.w	r3, r0, r8
 800c4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	9304      	str	r3, [sp, #16]
 800c4ba:	46a2      	mov	sl, r4
 800c4bc:	e7d2      	b.n	800c464 <_svfiprintf_r+0xa0>
 800c4be:	9b03      	ldr	r3, [sp, #12]
 800c4c0:	1d19      	adds	r1, r3, #4
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	9103      	str	r1, [sp, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bfbb      	ittet	lt
 800c4ca:	425b      	neglt	r3, r3
 800c4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c4d0:	9307      	strge	r3, [sp, #28]
 800c4d2:	9307      	strlt	r3, [sp, #28]
 800c4d4:	bfb8      	it	lt
 800c4d6:	9204      	strlt	r2, [sp, #16]
 800c4d8:	7823      	ldrb	r3, [r4, #0]
 800c4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4dc:	d10a      	bne.n	800c4f4 <_svfiprintf_r+0x130>
 800c4de:	7863      	ldrb	r3, [r4, #1]
 800c4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4e2:	d132      	bne.n	800c54a <_svfiprintf_r+0x186>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	1d1a      	adds	r2, r3, #4
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	9203      	str	r2, [sp, #12]
 800c4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4f0:	3402      	adds	r4, #2
 800c4f2:	9305      	str	r3, [sp, #20]
 800c4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5b8 <_svfiprintf_r+0x1f4>
 800c4f8:	7821      	ldrb	r1, [r4, #0]
 800c4fa:	2203      	movs	r2, #3
 800c4fc:	4650      	mov	r0, sl
 800c4fe:	f7f3 fe6f 	bl	80001e0 <memchr>
 800c502:	b138      	cbz	r0, 800c514 <_svfiprintf_r+0x150>
 800c504:	9b04      	ldr	r3, [sp, #16]
 800c506:	eba0 000a 	sub.w	r0, r0, sl
 800c50a:	2240      	movs	r2, #64	@ 0x40
 800c50c:	4082      	lsls	r2, r0
 800c50e:	4313      	orrs	r3, r2
 800c510:	3401      	adds	r4, #1
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	4824      	ldr	r0, [pc, #144]	@ (800c5ac <_svfiprintf_r+0x1e8>)
 800c51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c51e:	2206      	movs	r2, #6
 800c520:	f7f3 fe5e 	bl	80001e0 <memchr>
 800c524:	2800      	cmp	r0, #0
 800c526:	d036      	beq.n	800c596 <_svfiprintf_r+0x1d2>
 800c528:	4b21      	ldr	r3, [pc, #132]	@ (800c5b0 <_svfiprintf_r+0x1ec>)
 800c52a:	bb1b      	cbnz	r3, 800c574 <_svfiprintf_r+0x1b0>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	3307      	adds	r3, #7
 800c530:	f023 0307 	bic.w	r3, r3, #7
 800c534:	3308      	adds	r3, #8
 800c536:	9303      	str	r3, [sp, #12]
 800c538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c53a:	4433      	add	r3, r6
 800c53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c53e:	e76a      	b.n	800c416 <_svfiprintf_r+0x52>
 800c540:	fb0c 3202 	mla	r2, ip, r2, r3
 800c544:	460c      	mov	r4, r1
 800c546:	2001      	movs	r0, #1
 800c548:	e7a8      	b.n	800c49c <_svfiprintf_r+0xd8>
 800c54a:	2300      	movs	r3, #0
 800c54c:	3401      	adds	r4, #1
 800c54e:	9305      	str	r3, [sp, #20]
 800c550:	4619      	mov	r1, r3
 800c552:	f04f 0c0a 	mov.w	ip, #10
 800c556:	4620      	mov	r0, r4
 800c558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c55c:	3a30      	subs	r2, #48	@ 0x30
 800c55e:	2a09      	cmp	r2, #9
 800c560:	d903      	bls.n	800c56a <_svfiprintf_r+0x1a6>
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0c6      	beq.n	800c4f4 <_svfiprintf_r+0x130>
 800c566:	9105      	str	r1, [sp, #20]
 800c568:	e7c4      	b.n	800c4f4 <_svfiprintf_r+0x130>
 800c56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c56e:	4604      	mov	r4, r0
 800c570:	2301      	movs	r3, #1
 800c572:	e7f0      	b.n	800c556 <_svfiprintf_r+0x192>
 800c574:	ab03      	add	r3, sp, #12
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	462a      	mov	r2, r5
 800c57a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b4 <_svfiprintf_r+0x1f0>)
 800c57c:	a904      	add	r1, sp, #16
 800c57e:	4638      	mov	r0, r7
 800c580:	f7fd fd1c 	bl	8009fbc <_printf_float>
 800c584:	1c42      	adds	r2, r0, #1
 800c586:	4606      	mov	r6, r0
 800c588:	d1d6      	bne.n	800c538 <_svfiprintf_r+0x174>
 800c58a:	89ab      	ldrh	r3, [r5, #12]
 800c58c:	065b      	lsls	r3, r3, #25
 800c58e:	f53f af2d 	bmi.w	800c3ec <_svfiprintf_r+0x28>
 800c592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c594:	e72c      	b.n	800c3f0 <_svfiprintf_r+0x2c>
 800c596:	ab03      	add	r3, sp, #12
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	462a      	mov	r2, r5
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <_svfiprintf_r+0x1f0>)
 800c59e:	a904      	add	r1, sp, #16
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7fd ffa3 	bl	800a4ec <_printf_i>
 800c5a6:	e7ed      	b.n	800c584 <_svfiprintf_r+0x1c0>
 800c5a8:	0800d22c 	.word	0x0800d22c
 800c5ac:	0800d236 	.word	0x0800d236
 800c5b0:	08009fbd 	.word	0x08009fbd
 800c5b4:	0800c30d 	.word	0x0800c30d
 800c5b8:	0800d232 	.word	0x0800d232

0800c5bc <__sfputc_r>:
 800c5bc:	6893      	ldr	r3, [r2, #8]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	b410      	push	{r4}
 800c5c4:	6093      	str	r3, [r2, #8]
 800c5c6:	da08      	bge.n	800c5da <__sfputc_r+0x1e>
 800c5c8:	6994      	ldr	r4, [r2, #24]
 800c5ca:	42a3      	cmp	r3, r4
 800c5cc:	db01      	blt.n	800c5d2 <__sfputc_r+0x16>
 800c5ce:	290a      	cmp	r1, #10
 800c5d0:	d103      	bne.n	800c5da <__sfputc_r+0x1e>
 800c5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d6:	f7fe bab1 	b.w	800ab3c <__swbuf_r>
 800c5da:	6813      	ldr	r3, [r2, #0]
 800c5dc:	1c58      	adds	r0, r3, #1
 800c5de:	6010      	str	r0, [r2, #0]
 800c5e0:	7019      	strb	r1, [r3, #0]
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <__sfputs_r>:
 800c5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	18d5      	adds	r5, r2, r3
 800c5f4:	42ac      	cmp	r4, r5
 800c5f6:	d101      	bne.n	800c5fc <__sfputs_r+0x12>
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	e007      	b.n	800c60c <__sfputs_r+0x22>
 800c5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c600:	463a      	mov	r2, r7
 800c602:	4630      	mov	r0, r6
 800c604:	f7ff ffda 	bl	800c5bc <__sfputc_r>
 800c608:	1c43      	adds	r3, r0, #1
 800c60a:	d1f3      	bne.n	800c5f4 <__sfputs_r+0xa>
 800c60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c610 <_vfiprintf_r>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	460d      	mov	r5, r1
 800c616:	b09d      	sub	sp, #116	@ 0x74
 800c618:	4614      	mov	r4, r2
 800c61a:	4698      	mov	r8, r3
 800c61c:	4606      	mov	r6, r0
 800c61e:	b118      	cbz	r0, 800c628 <_vfiprintf_r+0x18>
 800c620:	6a03      	ldr	r3, [r0, #32]
 800c622:	b90b      	cbnz	r3, 800c628 <_vfiprintf_r+0x18>
 800c624:	f7fe f90c 	bl	800a840 <__sinit>
 800c628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c62a:	07d9      	lsls	r1, r3, #31
 800c62c:	d405      	bmi.n	800c63a <_vfiprintf_r+0x2a>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	059a      	lsls	r2, r3, #22
 800c632:	d402      	bmi.n	800c63a <_vfiprintf_r+0x2a>
 800c634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c636:	f7fe fb92 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	071b      	lsls	r3, r3, #28
 800c63e:	d501      	bpl.n	800c644 <_vfiprintf_r+0x34>
 800c640:	692b      	ldr	r3, [r5, #16]
 800c642:	b99b      	cbnz	r3, 800c66c <_vfiprintf_r+0x5c>
 800c644:	4629      	mov	r1, r5
 800c646:	4630      	mov	r0, r6
 800c648:	f7fe fab6 	bl	800abb8 <__swsetup_r>
 800c64c:	b170      	cbz	r0, 800c66c <_vfiprintf_r+0x5c>
 800c64e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c650:	07dc      	lsls	r4, r3, #31
 800c652:	d504      	bpl.n	800c65e <_vfiprintf_r+0x4e>
 800c654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c658:	b01d      	add	sp, #116	@ 0x74
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	0598      	lsls	r0, r3, #22
 800c662:	d4f7      	bmi.n	800c654 <_vfiprintf_r+0x44>
 800c664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c666:	f7fe fb7b 	bl	800ad60 <__retarget_lock_release_recursive>
 800c66a:	e7f3      	b.n	800c654 <_vfiprintf_r+0x44>
 800c66c:	2300      	movs	r3, #0
 800c66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c670:	2320      	movs	r3, #32
 800c672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c676:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67a:	2330      	movs	r3, #48	@ 0x30
 800c67c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c82c <_vfiprintf_r+0x21c>
 800c680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c684:	f04f 0901 	mov.w	r9, #1
 800c688:	4623      	mov	r3, r4
 800c68a:	469a      	mov	sl, r3
 800c68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c690:	b10a      	cbz	r2, 800c696 <_vfiprintf_r+0x86>
 800c692:	2a25      	cmp	r2, #37	@ 0x25
 800c694:	d1f9      	bne.n	800c68a <_vfiprintf_r+0x7a>
 800c696:	ebba 0b04 	subs.w	fp, sl, r4
 800c69a:	d00b      	beq.n	800c6b4 <_vfiprintf_r+0xa4>
 800c69c:	465b      	mov	r3, fp
 800c69e:	4622      	mov	r2, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7ff ffa1 	bl	800c5ea <__sfputs_r>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	f000 80a7 	beq.w	800c7fc <_vfiprintf_r+0x1ec>
 800c6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6b0:	445a      	add	r2, fp
 800c6b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 809f 	beq.w	800c7fc <_vfiprintf_r+0x1ec>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c8:	f10a 0a01 	add.w	sl, sl, #1
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6d6:	4654      	mov	r4, sl
 800c6d8:	2205      	movs	r2, #5
 800c6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6de:	4853      	ldr	r0, [pc, #332]	@ (800c82c <_vfiprintf_r+0x21c>)
 800c6e0:	f7f3 fd7e 	bl	80001e0 <memchr>
 800c6e4:	9a04      	ldr	r2, [sp, #16]
 800c6e6:	b9d8      	cbnz	r0, 800c720 <_vfiprintf_r+0x110>
 800c6e8:	06d1      	lsls	r1, r2, #27
 800c6ea:	bf44      	itt	mi
 800c6ec:	2320      	movmi	r3, #32
 800c6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f2:	0713      	lsls	r3, r2, #28
 800c6f4:	bf44      	itt	mi
 800c6f6:	232b      	movmi	r3, #43	@ 0x2b
 800c6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c700:	2b2a      	cmp	r3, #42	@ 0x2a
 800c702:	d015      	beq.n	800c730 <_vfiprintf_r+0x120>
 800c704:	9a07      	ldr	r2, [sp, #28]
 800c706:	4654      	mov	r4, sl
 800c708:	2000      	movs	r0, #0
 800c70a:	f04f 0c0a 	mov.w	ip, #10
 800c70e:	4621      	mov	r1, r4
 800c710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c714:	3b30      	subs	r3, #48	@ 0x30
 800c716:	2b09      	cmp	r3, #9
 800c718:	d94b      	bls.n	800c7b2 <_vfiprintf_r+0x1a2>
 800c71a:	b1b0      	cbz	r0, 800c74a <_vfiprintf_r+0x13a>
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	e014      	b.n	800c74a <_vfiprintf_r+0x13a>
 800c720:	eba0 0308 	sub.w	r3, r0, r8
 800c724:	fa09 f303 	lsl.w	r3, r9, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	46a2      	mov	sl, r4
 800c72e:	e7d2      	b.n	800c6d6 <_vfiprintf_r+0xc6>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	1d19      	adds	r1, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	9103      	str	r1, [sp, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfbb      	ittet	lt
 800c73c:	425b      	neglt	r3, r3
 800c73e:	f042 0202 	orrlt.w	r2, r2, #2
 800c742:	9307      	strge	r3, [sp, #28]
 800c744:	9307      	strlt	r3, [sp, #28]
 800c746:	bfb8      	it	lt
 800c748:	9204      	strlt	r2, [sp, #16]
 800c74a:	7823      	ldrb	r3, [r4, #0]
 800c74c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c74e:	d10a      	bne.n	800c766 <_vfiprintf_r+0x156>
 800c750:	7863      	ldrb	r3, [r4, #1]
 800c752:	2b2a      	cmp	r3, #42	@ 0x2a
 800c754:	d132      	bne.n	800c7bc <_vfiprintf_r+0x1ac>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d1a      	adds	r2, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9203      	str	r2, [sp, #12]
 800c75e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c762:	3402      	adds	r4, #2
 800c764:	9305      	str	r3, [sp, #20]
 800c766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c83c <_vfiprintf_r+0x22c>
 800c76a:	7821      	ldrb	r1, [r4, #0]
 800c76c:	2203      	movs	r2, #3
 800c76e:	4650      	mov	r0, sl
 800c770:	f7f3 fd36 	bl	80001e0 <memchr>
 800c774:	b138      	cbz	r0, 800c786 <_vfiprintf_r+0x176>
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	eba0 000a 	sub.w	r0, r0, sl
 800c77c:	2240      	movs	r2, #64	@ 0x40
 800c77e:	4082      	lsls	r2, r0
 800c780:	4313      	orrs	r3, r2
 800c782:	3401      	adds	r4, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78a:	4829      	ldr	r0, [pc, #164]	@ (800c830 <_vfiprintf_r+0x220>)
 800c78c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c790:	2206      	movs	r2, #6
 800c792:	f7f3 fd25 	bl	80001e0 <memchr>
 800c796:	2800      	cmp	r0, #0
 800c798:	d03f      	beq.n	800c81a <_vfiprintf_r+0x20a>
 800c79a:	4b26      	ldr	r3, [pc, #152]	@ (800c834 <_vfiprintf_r+0x224>)
 800c79c:	bb1b      	cbnz	r3, 800c7e6 <_vfiprintf_r+0x1d6>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ac:	443b      	add	r3, r7
 800c7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7b0:	e76a      	b.n	800c688 <_vfiprintf_r+0x78>
 800c7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	e7a8      	b.n	800c70e <_vfiprintf_r+0xfe>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f04f 0c0a 	mov.w	ip, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ce:	3a30      	subs	r2, #48	@ 0x30
 800c7d0:	2a09      	cmp	r2, #9
 800c7d2:	d903      	bls.n	800c7dc <_vfiprintf_r+0x1cc>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0c6      	beq.n	800c766 <_vfiprintf_r+0x156>
 800c7d8:	9105      	str	r1, [sp, #20]
 800c7da:	e7c4      	b.n	800c766 <_vfiprintf_r+0x156>
 800c7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7f0      	b.n	800c7c8 <_vfiprintf_r+0x1b8>
 800c7e6:	ab03      	add	r3, sp, #12
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4b12      	ldr	r3, [pc, #72]	@ (800c838 <_vfiprintf_r+0x228>)
 800c7ee:	a904      	add	r1, sp, #16
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7fd fbe3 	bl	8009fbc <_printf_float>
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	1c78      	adds	r0, r7, #1
 800c7fa:	d1d6      	bne.n	800c7aa <_vfiprintf_r+0x19a>
 800c7fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7fe:	07d9      	lsls	r1, r3, #31
 800c800:	d405      	bmi.n	800c80e <_vfiprintf_r+0x1fe>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	059a      	lsls	r2, r3, #22
 800c806:	d402      	bmi.n	800c80e <_vfiprintf_r+0x1fe>
 800c808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c80a:	f7fe faa9 	bl	800ad60 <__retarget_lock_release_recursive>
 800c80e:	89ab      	ldrh	r3, [r5, #12]
 800c810:	065b      	lsls	r3, r3, #25
 800c812:	f53f af1f 	bmi.w	800c654 <_vfiprintf_r+0x44>
 800c816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c818:	e71e      	b.n	800c658 <_vfiprintf_r+0x48>
 800c81a:	ab03      	add	r3, sp, #12
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	462a      	mov	r2, r5
 800c820:	4b05      	ldr	r3, [pc, #20]	@ (800c838 <_vfiprintf_r+0x228>)
 800c822:	a904      	add	r1, sp, #16
 800c824:	4630      	mov	r0, r6
 800c826:	f7fd fe61 	bl	800a4ec <_printf_i>
 800c82a:	e7e4      	b.n	800c7f6 <_vfiprintf_r+0x1e6>
 800c82c:	0800d22c 	.word	0x0800d22c
 800c830:	0800d236 	.word	0x0800d236
 800c834:	08009fbd 	.word	0x08009fbd
 800c838:	0800c5eb 	.word	0x0800c5eb
 800c83c:	0800d232 	.word	0x0800d232

0800c840 <__sflush_r>:
 800c840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c848:	0716      	lsls	r6, r2, #28
 800c84a:	4605      	mov	r5, r0
 800c84c:	460c      	mov	r4, r1
 800c84e:	d454      	bmi.n	800c8fa <__sflush_r+0xba>
 800c850:	684b      	ldr	r3, [r1, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	dc02      	bgt.n	800c85c <__sflush_r+0x1c>
 800c856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dd48      	ble.n	800c8ee <__sflush_r+0xae>
 800c85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d045      	beq.n	800c8ee <__sflush_r+0xae>
 800c862:	2300      	movs	r3, #0
 800c864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c868:	682f      	ldr	r7, [r5, #0]
 800c86a:	6a21      	ldr	r1, [r4, #32]
 800c86c:	602b      	str	r3, [r5, #0]
 800c86e:	d030      	beq.n	800c8d2 <__sflush_r+0x92>
 800c870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	0759      	lsls	r1, r3, #29
 800c876:	d505      	bpl.n	800c884 <__sflush_r+0x44>
 800c878:	6863      	ldr	r3, [r4, #4]
 800c87a:	1ad2      	subs	r2, r2, r3
 800c87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c87e:	b10b      	cbz	r3, 800c884 <__sflush_r+0x44>
 800c880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c882:	1ad2      	subs	r2, r2, r3
 800c884:	2300      	movs	r3, #0
 800c886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c888:	6a21      	ldr	r1, [r4, #32]
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b0      	blx	r6
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	d106      	bne.n	800c8a2 <__sflush_r+0x62>
 800c894:	6829      	ldr	r1, [r5, #0]
 800c896:	291d      	cmp	r1, #29
 800c898:	d82b      	bhi.n	800c8f2 <__sflush_r+0xb2>
 800c89a:	4a2a      	ldr	r2, [pc, #168]	@ (800c944 <__sflush_r+0x104>)
 800c89c:	40ca      	lsrs	r2, r1
 800c89e:	07d6      	lsls	r6, r2, #31
 800c8a0:	d527      	bpl.n	800c8f2 <__sflush_r+0xb2>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6062      	str	r2, [r4, #4]
 800c8a6:	04d9      	lsls	r1, r3, #19
 800c8a8:	6922      	ldr	r2, [r4, #16]
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	d504      	bpl.n	800c8b8 <__sflush_r+0x78>
 800c8ae:	1c42      	adds	r2, r0, #1
 800c8b0:	d101      	bne.n	800c8b6 <__sflush_r+0x76>
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	b903      	cbnz	r3, 800c8b8 <__sflush_r+0x78>
 800c8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ba:	602f      	str	r7, [r5, #0]
 800c8bc:	b1b9      	cbz	r1, 800c8ee <__sflush_r+0xae>
 800c8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	d002      	beq.n	800c8cc <__sflush_r+0x8c>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7ff f8a6 	bl	800ba18 <_free_r>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8d0:	e00d      	b.n	800c8ee <__sflush_r+0xae>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b0      	blx	r6
 800c8d8:	4602      	mov	r2, r0
 800c8da:	1c50      	adds	r0, r2, #1
 800c8dc:	d1c9      	bne.n	800c872 <__sflush_r+0x32>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0c6      	beq.n	800c872 <__sflush_r+0x32>
 800c8e4:	2b1d      	cmp	r3, #29
 800c8e6:	d001      	beq.n	800c8ec <__sflush_r+0xac>
 800c8e8:	2b16      	cmp	r3, #22
 800c8ea:	d11e      	bne.n	800c92a <__sflush_r+0xea>
 800c8ec:	602f      	str	r7, [r5, #0]
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e022      	b.n	800c938 <__sflush_r+0xf8>
 800c8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	e01b      	b.n	800c932 <__sflush_r+0xf2>
 800c8fa:	690f      	ldr	r7, [r1, #16]
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	d0f6      	beq.n	800c8ee <__sflush_r+0xae>
 800c900:	0793      	lsls	r3, r2, #30
 800c902:	680e      	ldr	r6, [r1, #0]
 800c904:	bf08      	it	eq
 800c906:	694b      	ldreq	r3, [r1, #20]
 800c908:	600f      	str	r7, [r1, #0]
 800c90a:	bf18      	it	ne
 800c90c:	2300      	movne	r3, #0
 800c90e:	eba6 0807 	sub.w	r8, r6, r7
 800c912:	608b      	str	r3, [r1, #8]
 800c914:	f1b8 0f00 	cmp.w	r8, #0
 800c918:	dde9      	ble.n	800c8ee <__sflush_r+0xae>
 800c91a:	6a21      	ldr	r1, [r4, #32]
 800c91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c91e:	4643      	mov	r3, r8
 800c920:	463a      	mov	r2, r7
 800c922:	4628      	mov	r0, r5
 800c924:	47b0      	blx	r6
 800c926:	2800      	cmp	r0, #0
 800c928:	dc08      	bgt.n	800c93c <__sflush_r+0xfc>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	4407      	add	r7, r0
 800c93e:	eba8 0800 	sub.w	r8, r8, r0
 800c942:	e7e7      	b.n	800c914 <__sflush_r+0xd4>
 800c944:	20400001 	.word	0x20400001

0800c948 <_fflush_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	690b      	ldr	r3, [r1, #16]
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b913      	cbnz	r3, 800c958 <_fflush_r+0x10>
 800c952:	2500      	movs	r5, #0
 800c954:	4628      	mov	r0, r5
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	b118      	cbz	r0, 800c962 <_fflush_r+0x1a>
 800c95a:	6a03      	ldr	r3, [r0, #32]
 800c95c:	b90b      	cbnz	r3, 800c962 <_fflush_r+0x1a>
 800c95e:	f7fd ff6f 	bl	800a840 <__sinit>
 800c962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0f3      	beq.n	800c952 <_fflush_r+0xa>
 800c96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c96c:	07d0      	lsls	r0, r2, #31
 800c96e:	d404      	bmi.n	800c97a <_fflush_r+0x32>
 800c970:	0599      	lsls	r1, r3, #22
 800c972:	d402      	bmi.n	800c97a <_fflush_r+0x32>
 800c974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c976:	f7fe f9f2 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800c97a:	4628      	mov	r0, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	f7ff ff5f 	bl	800c840 <__sflush_r>
 800c982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c984:	07da      	lsls	r2, r3, #31
 800c986:	4605      	mov	r5, r0
 800c988:	d4e4      	bmi.n	800c954 <_fflush_r+0xc>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	059b      	lsls	r3, r3, #22
 800c98e:	d4e1      	bmi.n	800c954 <_fflush_r+0xc>
 800c990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c992:	f7fe f9e5 	bl	800ad60 <__retarget_lock_release_recursive>
 800c996:	e7dd      	b.n	800c954 <_fflush_r+0xc>

0800c998 <__swhatbuf_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	460c      	mov	r4, r1
 800c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	b096      	sub	sp, #88	@ 0x58
 800c9a4:	4615      	mov	r5, r2
 800c9a6:	461e      	mov	r6, r3
 800c9a8:	da0d      	bge.n	800c9c6 <__swhatbuf_r+0x2e>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	bf14      	ite	ne
 800c9b6:	2340      	movne	r3, #64	@ 0x40
 800c9b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9bc:	2000      	movs	r0, #0
 800c9be:	6031      	str	r1, [r6, #0]
 800c9c0:	602b      	str	r3, [r5, #0]
 800c9c2:	b016      	add	sp, #88	@ 0x58
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	466a      	mov	r2, sp
 800c9c8:	f000 f862 	bl	800ca90 <_fstat_r>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	dbec      	blt.n	800c9aa <__swhatbuf_r+0x12>
 800c9d0:	9901      	ldr	r1, [sp, #4]
 800c9d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9da:	4259      	negs	r1, r3
 800c9dc:	4159      	adcs	r1, r3
 800c9de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9e2:	e7eb      	b.n	800c9bc <__swhatbuf_r+0x24>

0800c9e4 <__smakebuf_r>:
 800c9e4:	898b      	ldrh	r3, [r1, #12]
 800c9e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e8:	079d      	lsls	r5, r3, #30
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	d507      	bpl.n	800ca00 <__smakebuf_r+0x1c>
 800c9f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	6123      	str	r3, [r4, #16]
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	6163      	str	r3, [r4, #20]
 800c9fc:	b003      	add	sp, #12
 800c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca00:	ab01      	add	r3, sp, #4
 800ca02:	466a      	mov	r2, sp
 800ca04:	f7ff ffc8 	bl	800c998 <__swhatbuf_r>
 800ca08:	9f00      	ldr	r7, [sp, #0]
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff f876 	bl	800bb00 <_malloc_r>
 800ca14:	b948      	cbnz	r0, 800ca2a <__smakebuf_r+0x46>
 800ca16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1a:	059a      	lsls	r2, r3, #22
 800ca1c:	d4ee      	bmi.n	800c9fc <__smakebuf_r+0x18>
 800ca1e:	f023 0303 	bic.w	r3, r3, #3
 800ca22:	f043 0302 	orr.w	r3, r3, #2
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	e7e2      	b.n	800c9f0 <__smakebuf_r+0xc>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	6020      	str	r0, [r4, #0]
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	9b01      	ldr	r3, [sp, #4]
 800ca36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca3a:	b15b      	cbz	r3, 800ca54 <__smakebuf_r+0x70>
 800ca3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f837 	bl	800cab4 <_isatty_r>
 800ca46:	b128      	cbz	r0, 800ca54 <__smakebuf_r+0x70>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f023 0303 	bic.w	r3, r3, #3
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	431d      	orrs	r5, r3
 800ca58:	81a5      	strh	r5, [r4, #12]
 800ca5a:	e7cf      	b.n	800c9fc <__smakebuf_r+0x18>

0800ca5c <memmove>:
 800ca5c:	4288      	cmp	r0, r1
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	eb01 0402 	add.w	r4, r1, r2
 800ca64:	d902      	bls.n	800ca6c <memmove+0x10>
 800ca66:	4284      	cmp	r4, r0
 800ca68:	4623      	mov	r3, r4
 800ca6a:	d807      	bhi.n	800ca7c <memmove+0x20>
 800ca6c:	1e43      	subs	r3, r0, #1
 800ca6e:	42a1      	cmp	r1, r4
 800ca70:	d008      	beq.n	800ca84 <memmove+0x28>
 800ca72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca7a:	e7f8      	b.n	800ca6e <memmove+0x12>
 800ca7c:	4402      	add	r2, r0
 800ca7e:	4601      	mov	r1, r0
 800ca80:	428a      	cmp	r2, r1
 800ca82:	d100      	bne.n	800ca86 <memmove+0x2a>
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca8e:	e7f7      	b.n	800ca80 <memmove+0x24>

0800ca90 <_fstat_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	@ (800cab0 <_fstat_r+0x20>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	f7fc fca6 	bl	80093ee <_fstat>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d102      	bne.n	800caac <_fstat_r+0x1c>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b103      	cbz	r3, 800caac <_fstat_r+0x1c>
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	bd38      	pop	{r3, r4, r5, pc}
 800caae:	bf00      	nop
 800cab0:	200005e4 	.word	0x200005e4

0800cab4 <_isatty_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d06      	ldr	r5, [pc, #24]	@ (800cad0 <_isatty_r+0x1c>)
 800cab8:	2300      	movs	r3, #0
 800caba:	4604      	mov	r4, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	f7fc fdfa 	bl	80096b8 <_isatty>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_isatty_r+0x1a>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_isatty_r+0x1a>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	200005e4 	.word	0x200005e4

0800cad4 <_sbrk_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d06      	ldr	r5, [pc, #24]	@ (800caf0 <_sbrk_r+0x1c>)
 800cad8:	2300      	movs	r3, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	602b      	str	r3, [r5, #0]
 800cae0:	f7f5 fa4c 	bl	8001f7c <_sbrk>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	d102      	bne.n	800caee <_sbrk_r+0x1a>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	b103      	cbz	r3, 800caee <_sbrk_r+0x1a>
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	200005e4 	.word	0x200005e4

0800caf4 <memcpy>:
 800caf4:	440a      	add	r2, r1
 800caf6:	4291      	cmp	r1, r2
 800caf8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cafc:	d100      	bne.n	800cb00 <memcpy+0xc>
 800cafe:	4770      	bx	lr
 800cb00:	b510      	push	{r4, lr}
 800cb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb0a:	4291      	cmp	r1, r2
 800cb0c:	d1f9      	bne.n	800cb02 <memcpy+0xe>
 800cb0e:	bd10      	pop	{r4, pc}

0800cb10 <__assert_func>:
 800cb10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb12:	4614      	mov	r4, r2
 800cb14:	461a      	mov	r2, r3
 800cb16:	4b09      	ldr	r3, [pc, #36]	@ (800cb3c <__assert_func+0x2c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	68d8      	ldr	r0, [r3, #12]
 800cb1e:	b14c      	cbz	r4, 800cb34 <__assert_func+0x24>
 800cb20:	4b07      	ldr	r3, [pc, #28]	@ (800cb40 <__assert_func+0x30>)
 800cb22:	9100      	str	r1, [sp, #0]
 800cb24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb28:	4906      	ldr	r1, [pc, #24]	@ (800cb44 <__assert_func+0x34>)
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	f000 f870 	bl	800cc10 <fiprintf>
 800cb30:	f000 f880 	bl	800cc34 <abort>
 800cb34:	4b04      	ldr	r3, [pc, #16]	@ (800cb48 <__assert_func+0x38>)
 800cb36:	461c      	mov	r4, r3
 800cb38:	e7f3      	b.n	800cb22 <__assert_func+0x12>
 800cb3a:	bf00      	nop
 800cb3c:	20000038 	.word	0x20000038
 800cb40:	0800d247 	.word	0x0800d247
 800cb44:	0800d254 	.word	0x0800d254
 800cb48:	0800d282 	.word	0x0800d282

0800cb4c <_calloc_r>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	fba1 5402 	umull	r5, r4, r1, r2
 800cb52:	b934      	cbnz	r4, 800cb62 <_calloc_r+0x16>
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7fe ffd3 	bl	800bb00 <_malloc_r>
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	b928      	cbnz	r0, 800cb6a <_calloc_r+0x1e>
 800cb5e:	4630      	mov	r0, r6
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
 800cb62:	220c      	movs	r2, #12
 800cb64:	6002      	str	r2, [r0, #0]
 800cb66:	2600      	movs	r6, #0
 800cb68:	e7f9      	b.n	800cb5e <_calloc_r+0x12>
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f7fe f879 	bl	800ac64 <memset>
 800cb72:	e7f4      	b.n	800cb5e <_calloc_r+0x12>

0800cb74 <__ascii_mbtowc>:
 800cb74:	b082      	sub	sp, #8
 800cb76:	b901      	cbnz	r1, 800cb7a <__ascii_mbtowc+0x6>
 800cb78:	a901      	add	r1, sp, #4
 800cb7a:	b142      	cbz	r2, 800cb8e <__ascii_mbtowc+0x1a>
 800cb7c:	b14b      	cbz	r3, 800cb92 <__ascii_mbtowc+0x1e>
 800cb7e:	7813      	ldrb	r3, [r2, #0]
 800cb80:	600b      	str	r3, [r1, #0]
 800cb82:	7812      	ldrb	r2, [r2, #0]
 800cb84:	1e10      	subs	r0, r2, #0
 800cb86:	bf18      	it	ne
 800cb88:	2001      	movne	r0, #1
 800cb8a:	b002      	add	sp, #8
 800cb8c:	4770      	bx	lr
 800cb8e:	4610      	mov	r0, r2
 800cb90:	e7fb      	b.n	800cb8a <__ascii_mbtowc+0x16>
 800cb92:	f06f 0001 	mvn.w	r0, #1
 800cb96:	e7f8      	b.n	800cb8a <__ascii_mbtowc+0x16>

0800cb98 <_realloc_r>:
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	4614      	mov	r4, r2
 800cba0:	460d      	mov	r5, r1
 800cba2:	b921      	cbnz	r1, 800cbae <_realloc_r+0x16>
 800cba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cba8:	4611      	mov	r1, r2
 800cbaa:	f7fe bfa9 	b.w	800bb00 <_malloc_r>
 800cbae:	b92a      	cbnz	r2, 800cbbc <_realloc_r+0x24>
 800cbb0:	f7fe ff32 	bl	800ba18 <_free_r>
 800cbb4:	4625      	mov	r5, r4
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbc:	f000 f841 	bl	800cc42 <_malloc_usable_size_r>
 800cbc0:	4284      	cmp	r4, r0
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	d802      	bhi.n	800cbcc <_realloc_r+0x34>
 800cbc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbca:	d8f4      	bhi.n	800cbb6 <_realloc_r+0x1e>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4638      	mov	r0, r7
 800cbd0:	f7fe ff96 	bl	800bb00 <_malloc_r>
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	b908      	cbnz	r0, 800cbdc <_realloc_r+0x44>
 800cbd8:	4645      	mov	r5, r8
 800cbda:	e7ec      	b.n	800cbb6 <_realloc_r+0x1e>
 800cbdc:	42b4      	cmp	r4, r6
 800cbde:	4622      	mov	r2, r4
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	bf28      	it	cs
 800cbe4:	4632      	movcs	r2, r6
 800cbe6:	f7ff ff85 	bl	800caf4 <memcpy>
 800cbea:	4629      	mov	r1, r5
 800cbec:	4638      	mov	r0, r7
 800cbee:	f7fe ff13 	bl	800ba18 <_free_r>
 800cbf2:	e7f1      	b.n	800cbd8 <_realloc_r+0x40>

0800cbf4 <__ascii_wctomb>:
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	b141      	cbz	r1, 800cc0c <__ascii_wctomb+0x18>
 800cbfa:	2aff      	cmp	r2, #255	@ 0xff
 800cbfc:	d904      	bls.n	800cc08 <__ascii_wctomb+0x14>
 800cbfe:	228a      	movs	r2, #138	@ 0x8a
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc06:	4770      	bx	lr
 800cc08:	700a      	strb	r2, [r1, #0]
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	4770      	bx	lr
	...

0800cc10 <fiprintf>:
 800cc10:	b40e      	push	{r1, r2, r3}
 800cc12:	b503      	push	{r0, r1, lr}
 800cc14:	4601      	mov	r1, r0
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	4805      	ldr	r0, [pc, #20]	@ (800cc30 <fiprintf+0x20>)
 800cc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1e:	6800      	ldr	r0, [r0, #0]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f7ff fcf5 	bl	800c610 <_vfiprintf_r>
 800cc26:	b002      	add	sp, #8
 800cc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc2c:	b003      	add	sp, #12
 800cc2e:	4770      	bx	lr
 800cc30:	20000038 	.word	0x20000038

0800cc34 <abort>:
 800cc34:	b508      	push	{r3, lr}
 800cc36:	2006      	movs	r0, #6
 800cc38:	f000 f834 	bl	800cca4 <raise>
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f000 f855 	bl	800ccec <_exit>

0800cc42 <_malloc_usable_size_r>:
 800cc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc46:	1f18      	subs	r0, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bfbc      	itt	lt
 800cc4c:	580b      	ldrlt	r3, [r1, r0]
 800cc4e:	18c0      	addlt	r0, r0, r3
 800cc50:	4770      	bx	lr

0800cc52 <_raise_r>:
 800cc52:	291f      	cmp	r1, #31
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4605      	mov	r5, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	d904      	bls.n	800cc66 <_raise_r+0x14>
 800cc5c:	2316      	movs	r3, #22
 800cc5e:	6003      	str	r3, [r0, #0]
 800cc60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc64:	bd38      	pop	{r3, r4, r5, pc}
 800cc66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc68:	b112      	cbz	r2, 800cc70 <_raise_r+0x1e>
 800cc6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc6e:	b94b      	cbnz	r3, 800cc84 <_raise_r+0x32>
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f831 	bl	800ccd8 <_getpid_r>
 800cc76:	4622      	mov	r2, r4
 800cc78:	4601      	mov	r1, r0
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc80:	f000 b818 	b.w	800ccb4 <_kill_r>
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d00a      	beq.n	800cc9e <_raise_r+0x4c>
 800cc88:	1c59      	adds	r1, r3, #1
 800cc8a:	d103      	bne.n	800cc94 <_raise_r+0x42>
 800cc8c:	2316      	movs	r3, #22
 800cc8e:	6003      	str	r3, [r0, #0]
 800cc90:	2001      	movs	r0, #1
 800cc92:	e7e7      	b.n	800cc64 <_raise_r+0x12>
 800cc94:	2100      	movs	r1, #0
 800cc96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	4798      	blx	r3
 800cc9e:	2000      	movs	r0, #0
 800cca0:	e7e0      	b.n	800cc64 <_raise_r+0x12>
	...

0800cca4 <raise>:
 800cca4:	4b02      	ldr	r3, [pc, #8]	@ (800ccb0 <raise+0xc>)
 800cca6:	4601      	mov	r1, r0
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	f7ff bfd2 	b.w	800cc52 <_raise_r>
 800ccae:	bf00      	nop
 800ccb0:	20000038 	.word	0x20000038

0800ccb4 <_kill_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d07      	ldr	r5, [pc, #28]	@ (800ccd4 <_kill_r+0x20>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	f000 f80b 	bl	800ccdc <_kill>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	d102      	bne.n	800ccd0 <_kill_r+0x1c>
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	b103      	cbz	r3, 800ccd0 <_kill_r+0x1c>
 800ccce:	6023      	str	r3, [r4, #0]
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200005e4 	.word	0x200005e4

0800ccd8 <_getpid_r>:
 800ccd8:	f7fc bb66 	b.w	80093a8 <_getpid>

0800ccdc <_kill>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <_kill+0xc>)
 800ccde:	2258      	movs	r2, #88	@ 0x58
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cce6:	4770      	bx	lr
 800cce8:	200005e4 	.word	0x200005e4

0800ccec <_exit>:
 800ccec:	e7fe      	b.n	800ccec <_exit>
	...

0800ccf0 <_init>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	bf00      	nop
 800ccf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf6:	bc08      	pop	{r3}
 800ccf8:	469e      	mov	lr, r3
 800ccfa:	4770      	bx	lr

0800ccfc <_fini>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr
